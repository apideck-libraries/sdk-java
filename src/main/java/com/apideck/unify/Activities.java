/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmActivitiesAddRequest;
import com.apideck.unify.models.operations.CrmActivitiesAddRequestBuilder;
import com.apideck.unify.models.operations.CrmActivitiesAddResponse;
import com.apideck.unify.models.operations.CrmActivitiesAllRequest;
import com.apideck.unify.models.operations.CrmActivitiesAllRequestBuilder;
import com.apideck.unify.models.operations.CrmActivitiesAllResponse;
import com.apideck.unify.models.operations.CrmActivitiesDeleteRequest;
import com.apideck.unify.models.operations.CrmActivitiesDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmActivitiesDeleteResponse;
import com.apideck.unify.models.operations.CrmActivitiesOneRequest;
import com.apideck.unify.models.operations.CrmActivitiesOneRequestBuilder;
import com.apideck.unify.models.operations.CrmActivitiesOneResponse;
import com.apideck.unify.models.operations.CrmActivitiesUpdateRequest;
import com.apideck.unify.models.operations.CrmActivitiesUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmActivitiesUpdateResponse;
import com.apideck.unify.operations.CrmActivitiesAddOperation;
import com.apideck.unify.operations.CrmActivitiesAllOperation;
import com.apideck.unify.operations.CrmActivitiesDeleteOperation;
import com.apideck.unify.operations.CrmActivitiesOneOperation;
import com.apideck.unify.operations.CrmActivitiesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Activities {
    private final SDKConfiguration sdkConfiguration;

    Activities(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @return The call builder
     */
    public CrmActivitiesAllRequestBuilder list() {
        return new CrmActivitiesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesAllResponse list(CrmActivitiesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesAllResponse list(
            CrmActivitiesAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmActivitiesAllRequest, CrmActivitiesAllResponse> operation
              = new CrmActivitiesAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @return The call builder
     */
    public CrmActivitiesAddRequestBuilder create() {
        return new CrmActivitiesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesAddResponse create(CrmActivitiesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesAddResponse create(
            CrmActivitiesAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmActivitiesAddRequest, CrmActivitiesAddResponse> operation
              = new CrmActivitiesAddOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @return The call builder
     */
    public CrmActivitiesOneRequestBuilder get() {
        return new CrmActivitiesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesOneResponse get(CrmActivitiesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesOneResponse get(
            CrmActivitiesOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmActivitiesOneRequest, CrmActivitiesOneResponse> operation
              = new CrmActivitiesOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @return The call builder
     */
    public CrmActivitiesUpdateRequestBuilder update() {
        return new CrmActivitiesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesUpdateResponse update(CrmActivitiesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesUpdateResponse update(
            CrmActivitiesUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmActivitiesUpdateRequest, CrmActivitiesUpdateResponse> operation
              = new CrmActivitiesUpdateOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @return The call builder
     */
    public CrmActivitiesDeleteRequestBuilder delete() {
        return new CrmActivitiesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesDeleteResponse delete(CrmActivitiesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmActivitiesDeleteResponse delete(
            CrmActivitiesDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmActivitiesDeleteRequest, CrmActivitiesDeleteResponse> operation
              = new CrmActivitiesDeleteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
