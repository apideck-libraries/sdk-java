/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import com.apideck.unify.utils.HTTPClient;
import com.apideck.unify.utils.Hook.SdkInitData;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.SpeakeasyHTTPClient;
import com.apideck.unify.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Apideck: The Apideck OpenAPI Spec: SDK Optimized
 * 
 * <p>https://developers.apideck.com - Apideck Developer Docs
 */
public class Apideck {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://unify.apideck.com",
    };

    

    private final Accounting accounting;

    private final Ats ats;

    private final Crm crm;

    private final Ecommerce ecommerce;

    private final FileStorage fileStorage;

    private final Hris hris;

    private final Sms sms;

    private final IssueTracking issueTracking;

    private final Connector connector;

    private final Vault vault;

    private final Webhook webhook;

    public Accounting accounting() {
        return accounting;
    }

    public Ats ats() {
        return ats;
    }

    public Crm crm() {
        return crm;
    }

    public Ecommerce ecommerce() {
        return ecommerce;
    }

    public FileStorage fileStorage() {
        return fileStorage;
    }

    public Hris hris() {
        return hris;
    }

    public Sms sms() {
        return sms;
    }

    public IssueTracking issueTracking() {
        return issueTracking;
    }

    public Connector connector() {
        return connector;
    }

    public Vault vault() {
        return vault;
    }

    public Webhook webhook() {
        return webhook;
    }
    private SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param apiKey The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder apiKey(String apiKey) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(com.apideck.unify.models.components.Security.builder()
              .apiKey(apiKey)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         *
         * This is a convenience method that calls {@link HTTPClient#enableDebugLogging()}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         *
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging() {
            this.sdkConfiguration.client().enableDebugLogging();
            return this;
        }
        /**
         * Allows setting the consumerId parameter for all supported operations.
         *
         * @param consumerId The value to set.
         * @return The builder instance.
         */
        public Builder consumerId(String consumerId) {
            this.sdkConfiguration.globals.putParam("header", "consumerId", consumerId);
            return this;
        }
        
        /**
         * Allows setting the appId parameter for all supported operations.
         *
         * @param appId The value to set.
         * @return The builder instance.
         */
        public Builder appId(String appId) {
            this.sdkConfiguration.globals.putParam("header", "appId", appId);
            return this;
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.apideck.unify.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.apideck.unify.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Apideck build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new Apideck(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Apideck(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.accounting = new Accounting(sdkConfiguration);
        this.ats = new Ats(sdkConfiguration);
        this.crm = new Crm(sdkConfiguration);
        this.ecommerce = new Ecommerce(sdkConfiguration);
        this.fileStorage = new FileStorage(sdkConfiguration);
        this.hris = new Hris(sdkConfiguration);
        this.sms = new Sms(sdkConfiguration);
        this.issueTracking = new IssueTracking(sdkConfiguration);
        this.connector = new Connector(sdkConfiguration);
        this.vault = new Vault(sdkConfiguration);
        this.webhook = new Webhook(sdkConfiguration);
        
        SdkInitData data = this.sdkConfiguration.hooks().sdkInit(new SdkInitData(this.sdkConfiguration.resolvedServerUrl(), this.sdkConfiguration.client()));
        this.sdkConfiguration.setServerUrl(data.baseUrl());
        this.sdkConfiguration.setClient(data.client());
    }
}
