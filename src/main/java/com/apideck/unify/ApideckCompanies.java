/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.HrisCompaniesAddRequest;
import com.apideck.unify.models.operations.HrisCompaniesAddRequestBuilder;
import com.apideck.unify.models.operations.HrisCompaniesAddResponse;
import com.apideck.unify.models.operations.HrisCompaniesAllRequest;
import com.apideck.unify.models.operations.HrisCompaniesAllRequestBuilder;
import com.apideck.unify.models.operations.HrisCompaniesAllResponse;
import com.apideck.unify.models.operations.HrisCompaniesDeleteRequest;
import com.apideck.unify.models.operations.HrisCompaniesDeleteRequestBuilder;
import com.apideck.unify.models.operations.HrisCompaniesDeleteResponse;
import com.apideck.unify.models.operations.HrisCompaniesOneRequest;
import com.apideck.unify.models.operations.HrisCompaniesOneRequestBuilder;
import com.apideck.unify.models.operations.HrisCompaniesOneResponse;
import com.apideck.unify.models.operations.HrisCompaniesUpdateRequest;
import com.apideck.unify.models.operations.HrisCompaniesUpdateRequestBuilder;
import com.apideck.unify.models.operations.HrisCompaniesUpdateResponse;
import com.apideck.unify.operations.HrisCompaniesAddOperation;
import com.apideck.unify.operations.HrisCompaniesAllOperation;
import com.apideck.unify.operations.HrisCompaniesDeleteOperation;
import com.apideck.unify.operations.HrisCompaniesOneOperation;
import com.apideck.unify.operations.HrisCompaniesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class ApideckCompanies {
    private final SDKConfiguration sdkConfiguration;

    ApideckCompanies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @return The call builder
     */
    public HrisCompaniesAllRequestBuilder list() {
        return new HrisCompaniesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesAllResponse list(HrisCompaniesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesAllResponse list(
            HrisCompaniesAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisCompaniesAllRequest, HrisCompaniesAllResponse> operation
              = new HrisCompaniesAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @return The call builder
     */
    public HrisCompaniesAddRequestBuilder create() {
        return new HrisCompaniesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesAddResponse create(HrisCompaniesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesAddResponse create(
            HrisCompaniesAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisCompaniesAddRequest, HrisCompaniesAddResponse> operation
              = new HrisCompaniesAddOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @return The call builder
     */
    public HrisCompaniesOneRequestBuilder get() {
        return new HrisCompaniesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesOneResponse get(HrisCompaniesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesOneResponse get(
            HrisCompaniesOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisCompaniesOneRequest, HrisCompaniesOneResponse> operation
              = new HrisCompaniesOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @return The call builder
     */
    public HrisCompaniesUpdateRequestBuilder update() {
        return new HrisCompaniesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesUpdateResponse update(HrisCompaniesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesUpdateResponse update(
            HrisCompaniesUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisCompaniesUpdateRequest, HrisCompaniesUpdateResponse> operation
              = new HrisCompaniesUpdateOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @return The call builder
     */
    public HrisCompaniesDeleteRequestBuilder delete() {
        return new HrisCompaniesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesDeleteResponse delete(HrisCompaniesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCompaniesDeleteResponse delete(
            HrisCompaniesDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisCompaniesDeleteRequest, HrisCompaniesDeleteResponse> operation
              = new HrisCompaniesDeleteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
