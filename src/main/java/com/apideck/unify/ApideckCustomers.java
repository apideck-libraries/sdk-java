/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.EcommerceCustomersAllRequest;
import com.apideck.unify.models.operations.EcommerceCustomersAllRequestBuilder;
import com.apideck.unify.models.operations.EcommerceCustomersAllResponse;
import com.apideck.unify.models.operations.EcommerceCustomersOneRequest;
import com.apideck.unify.models.operations.EcommerceCustomersOneRequestBuilder;
import com.apideck.unify.models.operations.EcommerceCustomersOneResponse;
import com.apideck.unify.operations.EcommerceCustomersAll;
import com.apideck.unify.operations.EcommerceCustomersOne;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class ApideckCustomers {
    private final SDKConfiguration sdkConfiguration;

    ApideckCustomers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @return The call builder
     */
    public EcommerceCustomersAllRequestBuilder list() {
        return new EcommerceCustomersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceCustomersAllResponse list(EcommerceCustomersAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceCustomersAllResponse list(EcommerceCustomersAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<EcommerceCustomersAllRequest, EcommerceCustomersAllResponse> operation
              = new EcommerceCustomersAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @return The call builder
     */
    public EcommerceCustomersOneRequestBuilder get() {
        return new EcommerceCustomersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceCustomersOneResponse get(EcommerceCustomersOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceCustomersOneResponse get(EcommerceCustomersOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<EcommerceCustomersOneRequest, EcommerceCustomersOneResponse> operation
              = new EcommerceCustomersOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
