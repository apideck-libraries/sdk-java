/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.HrisDepartmentsAddRequest;
import com.apideck.unify.models.operations.HrisDepartmentsAddRequestBuilder;
import com.apideck.unify.models.operations.HrisDepartmentsAddResponse;
import com.apideck.unify.models.operations.HrisDepartmentsAllRequest;
import com.apideck.unify.models.operations.HrisDepartmentsAllRequestBuilder;
import com.apideck.unify.models.operations.HrisDepartmentsAllResponse;
import com.apideck.unify.models.operations.HrisDepartmentsDeleteRequest;
import com.apideck.unify.models.operations.HrisDepartmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.HrisDepartmentsDeleteResponse;
import com.apideck.unify.models.operations.HrisDepartmentsOneRequest;
import com.apideck.unify.models.operations.HrisDepartmentsOneRequestBuilder;
import com.apideck.unify.models.operations.HrisDepartmentsOneResponse;
import com.apideck.unify.models.operations.HrisDepartmentsUpdateRequest;
import com.apideck.unify.models.operations.HrisDepartmentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.HrisDepartmentsUpdateResponse;
import com.apideck.unify.operations.HrisDepartmentsAdd;
import com.apideck.unify.operations.HrisDepartmentsAll;
import com.apideck.unify.operations.HrisDepartmentsDelete;
import com.apideck.unify.operations.HrisDepartmentsOne;
import com.apideck.unify.operations.HrisDepartmentsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class ApideckDepartments {
    private final SDKConfiguration sdkConfiguration;

    ApideckDepartments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @return The call builder
     */
    public HrisDepartmentsAllRequestBuilder list() {
        return new HrisDepartmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsAllResponse list(HrisDepartmentsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsAllResponse list(HrisDepartmentsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDepartmentsAllRequest, HrisDepartmentsAllResponse> operation
              = new HrisDepartmentsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @return The call builder
     */
    public HrisDepartmentsAddRequestBuilder create() {
        return new HrisDepartmentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsAddResponse create(HrisDepartmentsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsAddResponse create(HrisDepartmentsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDepartmentsAddRequest, HrisDepartmentsAddResponse> operation
              = new HrisDepartmentsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @return The call builder
     */
    public HrisDepartmentsOneRequestBuilder get() {
        return new HrisDepartmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsOneResponse get(HrisDepartmentsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsOneResponse get(HrisDepartmentsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDepartmentsOneRequest, HrisDepartmentsOneResponse> operation
              = new HrisDepartmentsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @return The call builder
     */
    public HrisDepartmentsUpdateRequestBuilder update() {
        return new HrisDepartmentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsUpdateResponse update(HrisDepartmentsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsUpdateResponse update(HrisDepartmentsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDepartmentsUpdateRequest, HrisDepartmentsUpdateResponse> operation
              = new HrisDepartmentsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @return The call builder
     */
    public HrisDepartmentsDeleteRequestBuilder delete() {
        return new HrisDepartmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsDeleteResponse delete(HrisDepartmentsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDepartmentsDeleteResponse delete(HrisDepartmentsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDepartmentsDeleteRequest, HrisDepartmentsDeleteResponse> operation
              = new HrisDepartmentsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
