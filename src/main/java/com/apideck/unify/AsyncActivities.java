/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmActivitiesAddRequest;
import com.apideck.unify.models.operations.CrmActivitiesAllRequest;
import com.apideck.unify.models.operations.CrmActivitiesDeleteRequest;
import com.apideck.unify.models.operations.CrmActivitiesOneRequest;
import com.apideck.unify.models.operations.CrmActivitiesUpdateRequest;
import com.apideck.unify.models.operations.async.CrmActivitiesAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmActivitiesAddResponse;
import com.apideck.unify.models.operations.async.CrmActivitiesAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmActivitiesAllResponse;
import com.apideck.unify.models.operations.async.CrmActivitiesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmActivitiesDeleteResponse;
import com.apideck.unify.models.operations.async.CrmActivitiesOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmActivitiesOneResponse;
import com.apideck.unify.models.operations.async.CrmActivitiesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmActivitiesUpdateResponse;
import com.apideck.unify.operations.CrmActivitiesAdd;
import com.apideck.unify.operations.CrmActivitiesAll;
import com.apideck.unify.operations.CrmActivitiesDelete;
import com.apideck.unify.operations.CrmActivitiesOne;
import com.apideck.unify.operations.CrmActivitiesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncActivities {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Activities syncSDK;

    AsyncActivities(Activities syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Activities sync() {
        return syncSDK;
    }


    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @return The async call builder
     */
    public CrmActivitiesAllRequestBuilder list() {
        return new CrmActivitiesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CrmActivitiesAllResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesAllResponse> list(CrmActivitiesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List activities
     * 
     * <p>List activities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<CrmActivitiesAllResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesAllResponse> list(CrmActivitiesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmActivitiesAllRequest, CrmActivitiesAllResponse> operation
              = new CrmActivitiesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @return The async call builder
     */
    public CrmActivitiesAddRequestBuilder create() {
        return new CrmActivitiesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CrmActivitiesAddResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesAddResponse> create(CrmActivitiesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create activity
     * 
     * <p>Create activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<CrmActivitiesAddResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesAddResponse> create(CrmActivitiesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmActivitiesAddRequest, CrmActivitiesAddResponse> operation
              = new CrmActivitiesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @return The async call builder
     */
    public CrmActivitiesOneRequestBuilder get() {
        return new CrmActivitiesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CrmActivitiesOneResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesOneResponse> get(CrmActivitiesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get activity
     * 
     * <p>Get activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<CrmActivitiesOneResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesOneResponse> get(CrmActivitiesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmActivitiesOneRequest, CrmActivitiesOneResponse> operation
              = new CrmActivitiesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @return The async call builder
     */
    public CrmActivitiesUpdateRequestBuilder update() {
        return new CrmActivitiesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CrmActivitiesUpdateResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesUpdateResponse> update(CrmActivitiesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update activity
     * 
     * <p>Update activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<CrmActivitiesUpdateResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesUpdateResponse> update(CrmActivitiesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmActivitiesUpdateRequest, CrmActivitiesUpdateResponse> operation
              = new CrmActivitiesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @return The async call builder
     */
    public CrmActivitiesDeleteRequestBuilder delete() {
        return new CrmActivitiesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CrmActivitiesDeleteResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesDeleteResponse> delete(CrmActivitiesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete activity
     * 
     * <p>Delete activity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<CrmActivitiesDeleteResponse>} - The async response
     */
    public CompletableFuture<CrmActivitiesDeleteResponse> delete(CrmActivitiesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmActivitiesDeleteRequest, CrmActivitiesDeleteResponse> operation
              = new CrmActivitiesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
