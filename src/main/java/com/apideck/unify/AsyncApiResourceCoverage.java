/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.ConnectorApiResourceCoverageOneRequest;
import com.apideck.unify.models.operations.async.ConnectorApiResourceCoverageOneRequestBuilder;
import com.apideck.unify.models.operations.async.ConnectorApiResourceCoverageOneResponse;
import com.apideck.unify.operations.ConnectorApiResourceCoverageOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncApiResourceCoverage {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ApiResourceCoverage syncSDK;

    AsyncApiResourceCoverage(ApiResourceCoverage syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ApiResourceCoverage sync() {
        return syncSDK;
    }


    /**
     * Get API Resource Coverage
     * 
     * <p>Get API Resource Coverage
     * 
     * @return The async call builder
     */
    public ConnectorApiResourceCoverageOneRequestBuilder get() {
        return new ConnectorApiResourceCoverageOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get API Resource Coverage
     * 
     * <p>Get API Resource Coverage
     * 
     * @param id ID of the record you are acting upon.
     * @param resourceId ID of the resource you are acting upon.
     * @return CompletableFuture&lt;ConnectorApiResourceCoverageOneResponse&gt; - The async response
     */
    public CompletableFuture<ConnectorApiResourceCoverageOneResponse> get(String id, String resourceId) {
        return get(
                Optional.empty(), id, resourceId,
                Optional.empty());
    }

    /**
     * Get API Resource Coverage
     * 
     * <p>Get API Resource Coverage
     * 
     * @param appId The ID of your Unify application
     * @param id ID of the record you are acting upon.
     * @param resourceId ID of the resource you are acting upon.
     * @param options additional options
     * @return CompletableFuture&lt;ConnectorApiResourceCoverageOneResponse&gt; - The async response
     */
    public CompletableFuture<ConnectorApiResourceCoverageOneResponse> get(
            Optional<String> appId, String id,
            String resourceId, Optional<Options> options) {
        ConnectorApiResourceCoverageOneRequest request =
            ConnectorApiResourceCoverageOneRequest
                .builder()
                .appId(appId)
                .id(id)
                .resourceId(resourceId)
                .build();
        AsyncRequestOperation<ConnectorApiResourceCoverageOneRequest, ConnectorApiResourceCoverageOneResponse> operation
              = new ConnectorApiResourceCoverageOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
