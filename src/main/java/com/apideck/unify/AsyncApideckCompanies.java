/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.HrisCompaniesAddRequest;
import com.apideck.unify.models.operations.HrisCompaniesAllRequest;
import com.apideck.unify.models.operations.HrisCompaniesDeleteRequest;
import com.apideck.unify.models.operations.HrisCompaniesOneRequest;
import com.apideck.unify.models.operations.HrisCompaniesUpdateRequest;
import com.apideck.unify.models.operations.async.HrisCompaniesAddRequestBuilder;
import com.apideck.unify.models.operations.async.HrisCompaniesAddResponse;
import com.apideck.unify.models.operations.async.HrisCompaniesAllRequestBuilder;
import com.apideck.unify.models.operations.async.HrisCompaniesAllResponse;
import com.apideck.unify.models.operations.async.HrisCompaniesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.HrisCompaniesDeleteResponse;
import com.apideck.unify.models.operations.async.HrisCompaniesOneRequestBuilder;
import com.apideck.unify.models.operations.async.HrisCompaniesOneResponse;
import com.apideck.unify.models.operations.async.HrisCompaniesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.HrisCompaniesUpdateResponse;
import com.apideck.unify.operations.HrisCompaniesAdd;
import com.apideck.unify.operations.HrisCompaniesAll;
import com.apideck.unify.operations.HrisCompaniesDelete;
import com.apideck.unify.operations.HrisCompaniesOne;
import com.apideck.unify.operations.HrisCompaniesUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncApideckCompanies {
    private final SDKConfiguration sdkConfiguration;
    private final ApideckCompanies syncSDK;

    AsyncApideckCompanies(ApideckCompanies syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ApideckCompanies sync() {
        return syncSDK;
    }


    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @return The async call builder
     */
    public HrisCompaniesAllRequestBuilder list() {
        return new HrisCompaniesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisCompaniesAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesAllResponse> list(HrisCompaniesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * <p>List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisCompaniesAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesAllResponse> list(HrisCompaniesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisCompaniesAllRequest, HrisCompaniesAllResponse> operation
              = new HrisCompaniesAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @return The async call builder
     */
    public HrisCompaniesAddRequestBuilder create() {
        return new HrisCompaniesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisCompaniesAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesAddResponse> create(HrisCompaniesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Company
     * 
     * <p>Create Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisCompaniesAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesAddResponse> create(HrisCompaniesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisCompaniesAddRequest, HrisCompaniesAddResponse> operation
              = new HrisCompaniesAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @return The async call builder
     */
    public HrisCompaniesOneRequestBuilder get() {
        return new HrisCompaniesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisCompaniesOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesOneResponse> get(HrisCompaniesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * <p>Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisCompaniesOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesOneResponse> get(HrisCompaniesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisCompaniesOneRequest, HrisCompaniesOneResponse> operation
              = new HrisCompaniesOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @return The async call builder
     */
    public HrisCompaniesUpdateRequestBuilder update() {
        return new HrisCompaniesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisCompaniesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesUpdateResponse> update(HrisCompaniesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Company
     * 
     * <p>Update Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisCompaniesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesUpdateResponse> update(HrisCompaniesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisCompaniesUpdateRequest, HrisCompaniesUpdateResponse> operation
              = new HrisCompaniesUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @return The async call builder
     */
    public HrisCompaniesDeleteRequestBuilder delete() {
        return new HrisCompaniesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisCompaniesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesDeleteResponse> delete(HrisCompaniesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Company
     * 
     * <p>Delete Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisCompaniesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisCompaniesDeleteResponse> delete(HrisCompaniesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisCompaniesDeleteRequest, HrisCompaniesDeleteResponse> operation
              = new HrisCompaniesDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
