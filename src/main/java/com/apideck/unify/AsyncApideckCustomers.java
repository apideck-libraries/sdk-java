/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.EcommerceCustomersAllRequest;
import com.apideck.unify.models.operations.EcommerceCustomersOneRequest;
import com.apideck.unify.models.operations.async.EcommerceCustomersAllRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceCustomersAllResponse;
import com.apideck.unify.models.operations.async.EcommerceCustomersOneRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceCustomersOneResponse;
import com.apideck.unify.operations.EcommerceCustomersAll;
import com.apideck.unify.operations.EcommerceCustomersOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncApideckCustomers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ApideckCustomers syncSDK;

    AsyncApideckCustomers(ApideckCustomers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ApideckCustomers sync() {
        return syncSDK;
    }


    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @return The async call builder
     */
    public EcommerceCustomersAllRequestBuilder list() {
        return new EcommerceCustomersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;EcommerceCustomersAllResponse&gt; - The async response
     */
    public CompletableFuture<EcommerceCustomersAllResponse> list(EcommerceCustomersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;EcommerceCustomersAllResponse&gt; - The async response
     */
    public CompletableFuture<EcommerceCustomersAllResponse> list(EcommerceCustomersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceCustomersAllRequest, EcommerceCustomersAllResponse> operation
              = new EcommerceCustomersAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @return The async call builder
     */
    public EcommerceCustomersOneRequestBuilder get() {
        return new EcommerceCustomersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;EcommerceCustomersOneResponse&gt; - The async response
     */
    public CompletableFuture<EcommerceCustomersOneResponse> get(EcommerceCustomersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;EcommerceCustomersOneResponse&gt; - The async response
     */
    public CompletableFuture<EcommerceCustomersOneResponse> get(EcommerceCustomersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceCustomersOneRequest, EcommerceCustomersOneResponse> operation
              = new EcommerceCustomersOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
