/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.HrisDepartmentsAddRequest;
import com.apideck.unify.models.operations.HrisDepartmentsAllRequest;
import com.apideck.unify.models.operations.HrisDepartmentsDeleteRequest;
import com.apideck.unify.models.operations.HrisDepartmentsOneRequest;
import com.apideck.unify.models.operations.HrisDepartmentsUpdateRequest;
import com.apideck.unify.models.operations.async.HrisDepartmentsAddRequestBuilder;
import com.apideck.unify.models.operations.async.HrisDepartmentsAddResponse;
import com.apideck.unify.models.operations.async.HrisDepartmentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.HrisDepartmentsAllResponse;
import com.apideck.unify.models.operations.async.HrisDepartmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.HrisDepartmentsDeleteResponse;
import com.apideck.unify.models.operations.async.HrisDepartmentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.HrisDepartmentsOneResponse;
import com.apideck.unify.models.operations.async.HrisDepartmentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.HrisDepartmentsUpdateResponse;
import com.apideck.unify.operations.HrisDepartmentsAdd;
import com.apideck.unify.operations.HrisDepartmentsAll;
import com.apideck.unify.operations.HrisDepartmentsDelete;
import com.apideck.unify.operations.HrisDepartmentsOne;
import com.apideck.unify.operations.HrisDepartmentsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncApideckDepartments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ApideckDepartments syncSDK;

    AsyncApideckDepartments(ApideckDepartments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ApideckDepartments sync() {
        return syncSDK;
    }


    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @return The async call builder
     */
    public HrisDepartmentsAllRequestBuilder list() {
        return new HrisDepartmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisDepartmentsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsAllResponse> list(HrisDepartmentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisDepartmentsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsAllResponse> list(HrisDepartmentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDepartmentsAllRequest, HrisDepartmentsAllResponse> operation
              = new HrisDepartmentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @return The async call builder
     */
    public HrisDepartmentsAddRequestBuilder create() {
        return new HrisDepartmentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisDepartmentsAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsAddResponse> create(HrisDepartmentsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisDepartmentsAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsAddResponse> create(HrisDepartmentsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDepartmentsAddRequest, HrisDepartmentsAddResponse> operation
              = new HrisDepartmentsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @return The async call builder
     */
    public HrisDepartmentsOneRequestBuilder get() {
        return new HrisDepartmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisDepartmentsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsOneResponse> get(HrisDepartmentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisDepartmentsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsOneResponse> get(HrisDepartmentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDepartmentsOneRequest, HrisDepartmentsOneResponse> operation
              = new HrisDepartmentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @return The async call builder
     */
    public HrisDepartmentsUpdateRequestBuilder update() {
        return new HrisDepartmentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisDepartmentsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsUpdateResponse> update(HrisDepartmentsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisDepartmentsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsUpdateResponse> update(HrisDepartmentsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDepartmentsUpdateRequest, HrisDepartmentsUpdateResponse> operation
              = new HrisDepartmentsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @return The async call builder
     */
    public HrisDepartmentsDeleteRequestBuilder delete() {
        return new HrisDepartmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisDepartmentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsDeleteResponse> delete(HrisDepartmentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisDepartmentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisDepartmentsDeleteResponse> delete(HrisDepartmentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDepartmentsDeleteRequest, HrisDepartmentsDeleteResponse> operation
              = new HrisDepartmentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
