/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AtsApplicantsAddRequest;
import com.apideck.unify.models.operations.AtsApplicantsAllRequest;
import com.apideck.unify.models.operations.AtsApplicantsDeleteRequest;
import com.apideck.unify.models.operations.AtsApplicantsOneRequest;
import com.apideck.unify.models.operations.AtsApplicantsUpdateRequest;
import com.apideck.unify.models.operations.async.AtsApplicantsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AtsApplicantsAddResponse;
import com.apideck.unify.models.operations.async.AtsApplicantsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AtsApplicantsAllResponse;
import com.apideck.unify.models.operations.async.AtsApplicantsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AtsApplicantsDeleteResponse;
import com.apideck.unify.models.operations.async.AtsApplicantsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AtsApplicantsOneResponse;
import com.apideck.unify.models.operations.async.AtsApplicantsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AtsApplicantsUpdateResponse;
import com.apideck.unify.operations.AtsApplicantsAdd;
import com.apideck.unify.operations.AtsApplicantsAll;
import com.apideck.unify.operations.AtsApplicantsDelete;
import com.apideck.unify.operations.AtsApplicantsOne;
import com.apideck.unify.operations.AtsApplicantsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncApplicants {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Applicants syncSDK;

    AsyncApplicants(Applicants syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Applicants sync() {
        return syncSDK;
    }


    /**
     * List Applicants
     * 
     * <p>List Applicants
     * 
     * @return The async call builder
     */
    public AtsApplicantsAllRequestBuilder list() {
        return new AtsApplicantsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Applicants
     * 
     * <p>List Applicants
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AtsApplicantsAllResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsAllResponse> list(AtsApplicantsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Applicants
     * 
     * <p>List Applicants
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AtsApplicantsAllResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsAllResponse> list(AtsApplicantsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AtsApplicantsAllRequest, AtsApplicantsAllResponse> operation
              = new AtsApplicantsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Applicant
     * 
     * <p>Create Applicant
     * 
     * @return The async call builder
     */
    public AtsApplicantsAddRequestBuilder create() {
        return new AtsApplicantsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Applicant
     * 
     * <p>Create Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AtsApplicantsAddResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsAddResponse> create(AtsApplicantsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Applicant
     * 
     * <p>Create Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AtsApplicantsAddResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsAddResponse> create(AtsApplicantsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AtsApplicantsAddRequest, AtsApplicantsAddResponse> operation
              = new AtsApplicantsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Applicant
     * 
     * <p>Get Applicant
     * 
     * @return The async call builder
     */
    public AtsApplicantsOneRequestBuilder get() {
        return new AtsApplicantsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Applicant
     * 
     * <p>Get Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AtsApplicantsOneResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsOneResponse> get(AtsApplicantsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Applicant
     * 
     * <p>Get Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AtsApplicantsOneResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsOneResponse> get(AtsApplicantsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AtsApplicantsOneRequest, AtsApplicantsOneResponse> operation
              = new AtsApplicantsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Applicant
     * 
     * <p>Update Applicant
     * 
     * @return The async call builder
     */
    public AtsApplicantsUpdateRequestBuilder update() {
        return new AtsApplicantsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Applicant
     * 
     * <p>Update Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AtsApplicantsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsUpdateResponse> update(AtsApplicantsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Applicant
     * 
     * <p>Update Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AtsApplicantsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsUpdateResponse> update(AtsApplicantsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AtsApplicantsUpdateRequest, AtsApplicantsUpdateResponse> operation
              = new AtsApplicantsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Applicant
     * 
     * <p>Delete Applicant
     * 
     * @return The async call builder
     */
    public AtsApplicantsDeleteRequestBuilder delete() {
        return new AtsApplicantsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Applicant
     * 
     * <p>Delete Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AtsApplicantsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsDeleteResponse> delete(AtsApplicantsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Applicant
     * 
     * <p>Delete Applicant
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AtsApplicantsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AtsApplicantsDeleteResponse> delete(AtsApplicantsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AtsApplicantsDeleteRequest, AtsApplicantsDeleteResponse> operation
              = new AtsApplicantsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
