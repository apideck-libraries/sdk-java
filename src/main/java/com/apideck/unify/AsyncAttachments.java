/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingAttachmentsAllRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsOneRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadRequest;
import com.apideck.unify.models.operations.async.AccountingAttachmentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingAttachmentsAllResponse;
import com.apideck.unify.models.operations.async.AccountingAttachmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingAttachmentsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingAttachmentsDownloadRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingAttachmentsDownloadResponse;
import com.apideck.unify.models.operations.async.AccountingAttachmentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingAttachmentsOneResponse;
import com.apideck.unify.models.operations.async.AccountingAttachmentsUploadRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingAttachmentsUploadResponse;
import com.apideck.unify.operations.AccountingAttachmentsAll;
import com.apideck.unify.operations.AccountingAttachmentsDelete;
import com.apideck.unify.operations.AccountingAttachmentsDownload;
import com.apideck.unify.operations.AccountingAttachmentsOne;
import com.apideck.unify.operations.AccountingAttachmentsUpload;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncAttachments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Attachments syncSDK;

    AsyncAttachments(Attachments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Attachments sync() {
        return syncSDK;
    }


    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @return The async call builder
     */
    public AccountingAttachmentsAllRequestBuilder list() {
        return new AccountingAttachmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingAttachmentsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsAllResponse> list(AccountingAttachmentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingAttachmentsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsAllResponse> list(AccountingAttachmentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingAttachmentsAllRequest, AccountingAttachmentsAllResponse> operation
              = new AccountingAttachmentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @return The async call builder
     */
    public AccountingAttachmentsUploadRequestBuilder upload() {
        return new AccountingAttachmentsUploadRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingAttachmentsUploadResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsUploadResponse> upload(AccountingAttachmentsUploadRequest request) {
        return upload(request, Optional.empty(), Optional.empty());
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingAttachmentsUploadResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsUploadResponse> upload(
            AccountingAttachmentsUploadRequest request, Optional<String> serverURL,
            Optional<Options> options) {
        AsyncRequestOperation<AccountingAttachmentsUploadRequest, AccountingAttachmentsUploadResponse> operation
              = new AccountingAttachmentsUpload.Async(
                                    sdkConfiguration, serverURL, options,
                                    sdkConfiguration.retryScheduler(), _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @return The async call builder
     */
    public AccountingAttachmentsOneRequestBuilder get() {
        return new AccountingAttachmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingAttachmentsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsOneResponse> get(AccountingAttachmentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingAttachmentsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsOneResponse> get(AccountingAttachmentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingAttachmentsOneRequest, AccountingAttachmentsOneResponse> operation
              = new AccountingAttachmentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @return The async call builder
     */
    public AccountingAttachmentsDeleteRequestBuilder delete() {
        return new AccountingAttachmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingAttachmentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsDeleteResponse> delete(AccountingAttachmentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingAttachmentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsDeleteResponse> delete(AccountingAttachmentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingAttachmentsDeleteRequest, AccountingAttachmentsDeleteResponse> operation
              = new AccountingAttachmentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @return The async call builder
     */
    public AccountingAttachmentsDownloadRequestBuilder download() {
        return new AccountingAttachmentsDownloadRequestBuilder(sdkConfiguration);
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingAttachmentsDownloadResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsDownloadResponse> download(AccountingAttachmentsDownloadRequest request) {
        return download(request, Optional.empty());
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingAttachmentsDownloadResponse&gt; - The async response
     */
    public CompletableFuture<AccountingAttachmentsDownloadResponse> download(AccountingAttachmentsDownloadRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingAttachmentsDownloadRequest, AccountingAttachmentsDownloadResponse> operation
              = new AccountingAttachmentsDownload.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
