/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingBankAccountsAddRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsAllRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsOneRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingBankAccountsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankAccountsAddResponse;
import com.apideck.unify.models.operations.async.AccountingBankAccountsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankAccountsAllResponse;
import com.apideck.unify.models.operations.async.AccountingBankAccountsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankAccountsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingBankAccountsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankAccountsOneResponse;
import com.apideck.unify.models.operations.async.AccountingBankAccountsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankAccountsUpdateResponse;
import com.apideck.unify.operations.AccountingBankAccountsAdd;
import com.apideck.unify.operations.AccountingBankAccountsAll;
import com.apideck.unify.operations.AccountingBankAccountsDelete;
import com.apideck.unify.operations.AccountingBankAccountsOne;
import com.apideck.unify.operations.AccountingBankAccountsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBankAccounts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final BankAccounts syncSDK;

    AsyncBankAccounts(BankAccounts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public BankAccounts sync() {
        return syncSDK;
    }


    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @return The async call builder
     */
    public AccountingBankAccountsAllRequestBuilder list() {
        return new AccountingBankAccountsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBankAccountsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsAllResponse> list(AccountingBankAccountsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBankAccountsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsAllResponse> list(AccountingBankAccountsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankAccountsAllRequest, AccountingBankAccountsAllResponse> operation
              = new AccountingBankAccountsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @return The async call builder
     */
    public AccountingBankAccountsAddRequestBuilder create() {
        return new AccountingBankAccountsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBankAccountsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsAddResponse> create(AccountingBankAccountsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBankAccountsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsAddResponse> create(AccountingBankAccountsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankAccountsAddRequest, AccountingBankAccountsAddResponse> operation
              = new AccountingBankAccountsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @return The async call builder
     */
    public AccountingBankAccountsOneRequestBuilder get() {
        return new AccountingBankAccountsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBankAccountsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsOneResponse> get(AccountingBankAccountsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBankAccountsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsOneResponse> get(AccountingBankAccountsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankAccountsOneRequest, AccountingBankAccountsOneResponse> operation
              = new AccountingBankAccountsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @return The async call builder
     */
    public AccountingBankAccountsUpdateRequestBuilder update() {
        return new AccountingBankAccountsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBankAccountsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsUpdateResponse> update(AccountingBankAccountsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBankAccountsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsUpdateResponse> update(AccountingBankAccountsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankAccountsUpdateRequest, AccountingBankAccountsUpdateResponse> operation
              = new AccountingBankAccountsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @return The async call builder
     */
    public AccountingBankAccountsDeleteRequestBuilder delete() {
        return new AccountingBankAccountsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBankAccountsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsDeleteResponse> delete(AccountingBankAccountsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBankAccountsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingBankAccountsDeleteResponse> delete(AccountingBankAccountsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankAccountsDeleteRequest, AccountingBankAccountsDeleteResponse> operation
              = new AccountingBankAccountsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
