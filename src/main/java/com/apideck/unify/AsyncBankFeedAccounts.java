/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingBankFeedAccountsAddRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAllRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsOneRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsAddResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsAllResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsOneResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedAccountsUpdateResponse;
import com.apideck.unify.operations.AccountingBankFeedAccountsAdd;
import com.apideck.unify.operations.AccountingBankFeedAccountsAll;
import com.apideck.unify.operations.AccountingBankFeedAccountsDelete;
import com.apideck.unify.operations.AccountingBankFeedAccountsOne;
import com.apideck.unify.operations.AccountingBankFeedAccountsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBankFeedAccounts {
    private final SDKConfiguration sdkConfiguration;
    private final BankFeedAccounts syncSDK;

    AsyncBankFeedAccounts(BankFeedAccounts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public BankFeedAccounts sync() {
        return syncSDK;
    }


    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @return The async call builder
     */
    public AccountingBankFeedAccountsAllRequestBuilder list() {
        return new AccountingBankFeedAccountsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedAccountsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsAllResponse> list(AccountingBankFeedAccountsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedAccountsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsAllResponse> list(AccountingBankFeedAccountsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedAccountsAllRequest, AccountingBankFeedAccountsAllResponse> operation
              = new AccountingBankFeedAccountsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @return The async call builder
     */
    public AccountingBankFeedAccountsAddRequestBuilder create() {
        return new AccountingBankFeedAccountsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedAccountsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsAddResponse> create(AccountingBankFeedAccountsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedAccountsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsAddResponse> create(AccountingBankFeedAccountsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedAccountsAddRequest, AccountingBankFeedAccountsAddResponse> operation
              = new AccountingBankFeedAccountsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @return The async call builder
     */
    public AccountingBankFeedAccountsOneRequestBuilder get() {
        return new AccountingBankFeedAccountsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedAccountsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsOneResponse> get(AccountingBankFeedAccountsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedAccountsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsOneResponse> get(AccountingBankFeedAccountsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedAccountsOneRequest, AccountingBankFeedAccountsOneResponse> operation
              = new AccountingBankFeedAccountsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @return The async call builder
     */
    public AccountingBankFeedAccountsUpdateRequestBuilder update() {
        return new AccountingBankFeedAccountsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedAccountsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsUpdateResponse> update(AccountingBankFeedAccountsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedAccountsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsUpdateResponse> update(AccountingBankFeedAccountsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedAccountsUpdateRequest, AccountingBankFeedAccountsUpdateResponse> operation
              = new AccountingBankFeedAccountsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @return The async call builder
     */
    public AccountingBankFeedAccountsDeleteRequestBuilder delete() {
        return new AccountingBankFeedAccountsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedAccountsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsDeleteResponse> delete(AccountingBankFeedAccountsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedAccountsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedAccountsDeleteResponse> delete(AccountingBankFeedAccountsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedAccountsDeleteRequest, AccountingBankFeedAccountsDeleteResponse> operation
              = new AccountingBankFeedAccountsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
