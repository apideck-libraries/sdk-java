/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingBankFeedStatementsAddRequest;
import com.apideck.unify.models.operations.AccountingBankFeedStatementsAllRequest;
import com.apideck.unify.models.operations.AccountingBankFeedStatementsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBankFeedStatementsOneRequest;
import com.apideck.unify.models.operations.AccountingBankFeedStatementsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsAddResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsAllResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsOneResponse;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBankFeedStatementsUpdateResponse;
import com.apideck.unify.operations.AccountingBankFeedStatementsAdd;
import com.apideck.unify.operations.AccountingBankFeedStatementsAll;
import com.apideck.unify.operations.AccountingBankFeedStatementsDelete;
import com.apideck.unify.operations.AccountingBankFeedStatementsOne;
import com.apideck.unify.operations.AccountingBankFeedStatementsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBankFeedStatements {
    private final SDKConfiguration sdkConfiguration;
    private final BankFeedStatements syncSDK;

    AsyncBankFeedStatements(BankFeedStatements syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public BankFeedStatements sync() {
        return syncSDK;
    }


    /**
     * List Bank Feed Statements
     * 
     * <p>List Bank Feed Statements
     * 
     * @return The async call builder
     */
    public AccountingBankFeedStatementsAllRequestBuilder list() {
        return new AccountingBankFeedStatementsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bank Feed Statements
     * 
     * <p>List Bank Feed Statements
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedStatementsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsAllResponse> list(AccountingBankFeedStatementsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Bank Feed Statements
     * 
     * <p>List Bank Feed Statements
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedStatementsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsAllResponse> list(AccountingBankFeedStatementsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedStatementsAllRequest, AccountingBankFeedStatementsAllResponse> operation
              = new AccountingBankFeedStatementsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Bank Feed Statement
     * 
     * <p>Create Bank Feed Statement
     * 
     * @return The async call builder
     */
    public AccountingBankFeedStatementsAddRequestBuilder create() {
        return new AccountingBankFeedStatementsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bank Feed Statement
     * 
     * <p>Create Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedStatementsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsAddResponse> create(AccountingBankFeedStatementsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Bank Feed Statement
     * 
     * <p>Create Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedStatementsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsAddResponse> create(AccountingBankFeedStatementsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedStatementsAddRequest, AccountingBankFeedStatementsAddResponse> operation
              = new AccountingBankFeedStatementsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bank Feed Statement
     * 
     * <p>Get Bank Feed Statement
     * 
     * @return The async call builder
     */
    public AccountingBankFeedStatementsOneRequestBuilder get() {
        return new AccountingBankFeedStatementsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bank Feed Statement
     * 
     * <p>Get Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedStatementsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsOneResponse> get(AccountingBankFeedStatementsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Bank Feed Statement
     * 
     * <p>Get Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedStatementsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsOneResponse> get(AccountingBankFeedStatementsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedStatementsOneRequest, AccountingBankFeedStatementsOneResponse> operation
              = new AccountingBankFeedStatementsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Bank Feed Statement
     * 
     * <p>Update Bank Feed Statement
     * 
     * @return The async call builder
     */
    public AccountingBankFeedStatementsUpdateRequestBuilder update() {
        return new AccountingBankFeedStatementsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bank Feed Statement
     * 
     * <p>Update Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedStatementsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsUpdateResponse> update(AccountingBankFeedStatementsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Bank Feed Statement
     * 
     * <p>Update Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedStatementsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsUpdateResponse> update(AccountingBankFeedStatementsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedStatementsUpdateRequest, AccountingBankFeedStatementsUpdateResponse> operation
              = new AccountingBankFeedStatementsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Bank Feed Statement
     * 
     * <p>Delete Bank Feed Statement
     * 
     * @return The async call builder
     */
    public AccountingBankFeedStatementsDeleteRequestBuilder delete() {
        return new AccountingBankFeedStatementsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bank Feed Statement
     * 
     * <p>Delete Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBankFeedStatementsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsDeleteResponse> delete(AccountingBankFeedStatementsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bank Feed Statement
     * 
     * <p>Delete Bank Feed Statement
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBankFeedStatementsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBankFeedStatementsDeleteResponse> delete(AccountingBankFeedStatementsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBankFeedStatementsDeleteRequest, AccountingBankFeedStatementsDeleteResponse> operation
              = new AccountingBankFeedStatementsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
