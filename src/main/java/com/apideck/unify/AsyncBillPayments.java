/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingBillPaymentsAddRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsAllRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsOneRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsAddResponse;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsAllResponse;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsOneResponse;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillPaymentsUpdateResponse;
import com.apideck.unify.operations.AccountingBillPaymentsAdd;
import com.apideck.unify.operations.AccountingBillPaymentsAll;
import com.apideck.unify.operations.AccountingBillPaymentsDelete;
import com.apideck.unify.operations.AccountingBillPaymentsOne;
import com.apideck.unify.operations.AccountingBillPaymentsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBillPayments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final BillPayments syncSDK;

    AsyncBillPayments(BillPayments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public BillPayments sync() {
        return syncSDK;
    }


    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @return The async call builder
     */
    public AccountingBillPaymentsAllRequestBuilder list() {
        return new AccountingBillPaymentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBillPaymentsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsAllResponse> list(AccountingBillPaymentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBillPaymentsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsAllResponse> list(AccountingBillPaymentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillPaymentsAllRequest, AccountingBillPaymentsAllResponse> operation
              = new AccountingBillPaymentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @return The async call builder
     */
    public AccountingBillPaymentsAddRequestBuilder create() {
        return new AccountingBillPaymentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBillPaymentsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsAddResponse> create(AccountingBillPaymentsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBillPaymentsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsAddResponse> create(AccountingBillPaymentsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillPaymentsAddRequest, AccountingBillPaymentsAddResponse> operation
              = new AccountingBillPaymentsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @return The async call builder
     */
    public AccountingBillPaymentsOneRequestBuilder get() {
        return new AccountingBillPaymentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBillPaymentsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsOneResponse> get(AccountingBillPaymentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBillPaymentsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsOneResponse> get(AccountingBillPaymentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillPaymentsOneRequest, AccountingBillPaymentsOneResponse> operation
              = new AccountingBillPaymentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @return The async call builder
     */
    public AccountingBillPaymentsUpdateRequestBuilder update() {
        return new AccountingBillPaymentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBillPaymentsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsUpdateResponse> update(AccountingBillPaymentsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBillPaymentsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsUpdateResponse> update(AccountingBillPaymentsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillPaymentsUpdateRequest, AccountingBillPaymentsUpdateResponse> operation
              = new AccountingBillPaymentsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @return The async call builder
     */
    public AccountingBillPaymentsDeleteRequestBuilder delete() {
        return new AccountingBillPaymentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingBillPaymentsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsDeleteResponse> delete(AccountingBillPaymentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingBillPaymentsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingBillPaymentsDeleteResponse> delete(AccountingBillPaymentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillPaymentsDeleteRequest, AccountingBillPaymentsDeleteResponse> operation
              = new AccountingBillPaymentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
