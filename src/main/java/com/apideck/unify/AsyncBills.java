/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingBillsAddRequest;
import com.apideck.unify.models.operations.AccountingBillsAllRequest;
import com.apideck.unify.models.operations.AccountingBillsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBillsOneRequest;
import com.apideck.unify.models.operations.AccountingBillsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingBillsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillsAddResponse;
import com.apideck.unify.models.operations.async.AccountingBillsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillsAllResponse;
import com.apideck.unify.models.operations.async.AccountingBillsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingBillsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillsOneResponse;
import com.apideck.unify.models.operations.async.AccountingBillsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingBillsUpdateResponse;
import com.apideck.unify.operations.AccountingBillsAdd;
import com.apideck.unify.operations.AccountingBillsAll;
import com.apideck.unify.operations.AccountingBillsDelete;
import com.apideck.unify.operations.AccountingBillsOne;
import com.apideck.unify.operations.AccountingBillsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBills {
    private final SDKConfiguration sdkConfiguration;
    private final Bills syncSDK;

    AsyncBills(Bills syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Bills sync() {
        return syncSDK;
    }


    /**
     * List Bills
     * 
     * <p>List Bills
     * 
     * @return The async call builder
     */
    public AccountingBillsAllRequestBuilder list() {
        return new AccountingBillsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bills
     * 
     * <p>List Bills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBillsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsAllResponse> list(AccountingBillsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Bills
     * 
     * <p>List Bills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBillsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsAllResponse> list(AccountingBillsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillsAllRequest, AccountingBillsAllResponse> operation
              = new AccountingBillsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Bill
     * 
     * <p>Create Bill
     * 
     * @return The async call builder
     */
    public AccountingBillsAddRequestBuilder create() {
        return new AccountingBillsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bill
     * 
     * <p>Create Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBillsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsAddResponse> create(AccountingBillsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Bill
     * 
     * <p>Create Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBillsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsAddResponse> create(AccountingBillsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillsAddRequest, AccountingBillsAddResponse> operation
              = new AccountingBillsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bill
     * 
     * <p>Get Bill
     * 
     * @return The async call builder
     */
    public AccountingBillsOneRequestBuilder get() {
        return new AccountingBillsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bill
     * 
     * <p>Get Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBillsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsOneResponse> get(AccountingBillsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Bill
     * 
     * <p>Get Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBillsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsOneResponse> get(AccountingBillsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillsOneRequest, AccountingBillsOneResponse> operation
              = new AccountingBillsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Bill
     * 
     * <p>Update Bill
     * 
     * @return The async call builder
     */
    public AccountingBillsUpdateRequestBuilder update() {
        return new AccountingBillsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bill
     * 
     * <p>Update Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBillsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsUpdateResponse> update(AccountingBillsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Bill
     * 
     * <p>Update Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBillsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsUpdateResponse> update(AccountingBillsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillsUpdateRequest, AccountingBillsUpdateResponse> operation
              = new AccountingBillsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Bill
     * 
     * <p>Delete Bill
     * 
     * @return The async call builder
     */
    public AccountingBillsDeleteRequestBuilder delete() {
        return new AccountingBillsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bill
     * 
     * <p>Delete Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingBillsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsDeleteResponse> delete(AccountingBillsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bill
     * 
     * <p>Delete Bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBillsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBillsDeleteResponse> delete(AccountingBillsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingBillsDeleteRequest, AccountingBillsDeleteResponse> operation
              = new AccountingBillsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
