/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingCategoriesAllRequest;
import com.apideck.unify.models.operations.AccountingCategoriesOneRequest;
import com.apideck.unify.models.operations.async.AccountingCategoriesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCategoriesAllResponse;
import com.apideck.unify.models.operations.async.AccountingCategoriesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCategoriesOneResponse;
import com.apideck.unify.operations.AccountingCategoriesAll;
import com.apideck.unify.operations.AccountingCategoriesOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCategories {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Categories syncSDK;

    AsyncCategories(Categories syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Categories sync() {
        return syncSDK;
    }


    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @return The async call builder
     */
    public AccountingCategoriesAllRequestBuilder list() {
        return new AccountingCategoriesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCategoriesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCategoriesAllResponse> list(AccountingCategoriesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCategoriesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCategoriesAllResponse> list(AccountingCategoriesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCategoriesAllRequest, AccountingCategoriesAllResponse> operation
              = new AccountingCategoriesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @return The async call builder
     */
    public AccountingCategoriesOneRequestBuilder get() {
        return new AccountingCategoriesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCategoriesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCategoriesOneResponse> get(AccountingCategoriesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCategoriesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCategoriesOneResponse> get(AccountingCategoriesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCategoriesOneRequest, AccountingCategoriesOneResponse> operation
              = new AccountingCategoriesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
