/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAddRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsDeleteRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsUpdateRequest;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsAddRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsAddResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsAllResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsDeleteResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsOneResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketCommentsUpdateResponse;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsAdd;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsAll;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsDelete;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsOne;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCollectionTicketComments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final CollectionTicketComments syncSDK;

    AsyncCollectionTicketComments(CollectionTicketComments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CollectionTicketComments sync() {
        return syncSDK;
    }


    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketCommentsAllRequestBuilder list() {
        return new IssueTrackingCollectionTicketCommentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsAllResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsAllResponse> list(IssueTrackingCollectionTicketCommentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsAllResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsAllResponse> list(IssueTrackingCollectionTicketCommentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketCommentsAllRequest, IssueTrackingCollectionTicketCommentsAllResponse> operation
              = new IssueTrackingCollectionTicketCommentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketCommentsAddRequestBuilder create() {
        return new IssueTrackingCollectionTicketCommentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsAddResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsAddResponse> create(IssueTrackingCollectionTicketCommentsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsAddResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsAddResponse> create(IssueTrackingCollectionTicketCommentsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketCommentsAddRequest, IssueTrackingCollectionTicketCommentsAddResponse> operation
              = new IssueTrackingCollectionTicketCommentsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketCommentsOneRequestBuilder get() {
        return new IssueTrackingCollectionTicketCommentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsOneResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsOneResponse> get(IssueTrackingCollectionTicketCommentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsOneResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsOneResponse> get(IssueTrackingCollectionTicketCommentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketCommentsOneRequest, IssueTrackingCollectionTicketCommentsOneResponse> operation
              = new IssueTrackingCollectionTicketCommentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketCommentsUpdateRequestBuilder update() {
        return new IssueTrackingCollectionTicketCommentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsUpdateResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsUpdateResponse> update(IssueTrackingCollectionTicketCommentsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsUpdateResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsUpdateResponse> update(IssueTrackingCollectionTicketCommentsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketCommentsUpdateRequest, IssueTrackingCollectionTicketCommentsUpdateResponse> operation
              = new IssueTrackingCollectionTicketCommentsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketCommentsDeleteRequestBuilder delete() {
        return new IssueTrackingCollectionTicketCommentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsDeleteResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsDeleteResponse> delete(IssueTrackingCollectionTicketCommentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<IssueTrackingCollectionTicketCommentsDeleteResponse>} - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketCommentsDeleteResponse> delete(IssueTrackingCollectionTicketCommentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketCommentsDeleteRequest, IssueTrackingCollectionTicketCommentsDeleteResponse> operation
              = new IssueTrackingCollectionTicketCommentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
