/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAddRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsDeleteRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsUpdateRequest;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsAddRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsAddResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsAllRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsAllResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsDeleteResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsOneRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsOneResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionTicketsUpdateResponse;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsAdd;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsAll;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsDelete;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsOne;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCollectionTickets {
    private final SDKConfiguration sdkConfiguration;
    private final CollectionTickets syncSDK;

    AsyncCollectionTickets(CollectionTickets syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CollectionTickets sync() {
        return syncSDK;
    }


    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketsAllRequestBuilder list() {
        return new IssueTrackingCollectionTicketsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsAllResponse> list(IssueTrackingCollectionTicketsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsAllResponse> list(IssueTrackingCollectionTicketsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketsAllRequest, IssueTrackingCollectionTicketsAllResponse> operation
              = new IssueTrackingCollectionTicketsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketsAddRequestBuilder create() {
        return new IssueTrackingCollectionTicketsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsAddResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsAddResponse> create(IssueTrackingCollectionTicketsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsAddResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsAddResponse> create(IssueTrackingCollectionTicketsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketsAddRequest, IssueTrackingCollectionTicketsAddResponse> operation
              = new IssueTrackingCollectionTicketsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketsOneRequestBuilder get() {
        return new IssueTrackingCollectionTicketsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsOneResponse> get(IssueTrackingCollectionTicketsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsOneResponse> get(IssueTrackingCollectionTicketsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketsOneRequest, IssueTrackingCollectionTicketsOneResponse> operation
              = new IssueTrackingCollectionTicketsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketsUpdateRequestBuilder update() {
        return new IssueTrackingCollectionTicketsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsUpdateResponse> update(IssueTrackingCollectionTicketsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsUpdateResponse> update(IssueTrackingCollectionTicketsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketsUpdateRequest, IssueTrackingCollectionTicketsUpdateResponse> operation
              = new IssueTrackingCollectionTicketsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionTicketsDeleteRequestBuilder delete() {
        return new IssueTrackingCollectionTicketsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsDeleteResponse> delete(IssueTrackingCollectionTicketsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionTicketsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionTicketsDeleteResponse> delete(IssueTrackingCollectionTicketsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionTicketsDeleteRequest, IssueTrackingCollectionTicketsDeleteResponse> operation
              = new IssueTrackingCollectionTicketsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
