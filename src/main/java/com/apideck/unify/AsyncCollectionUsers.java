/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionUsersAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersOneRequest;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionUsersAllRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionUsersAllResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionUsersOneRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionUsersOneResponse;
import com.apideck.unify.operations.IssueTrackingCollectionUsersAll;
import com.apideck.unify.operations.IssueTrackingCollectionUsersOne;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCollectionUsers {
    private final SDKConfiguration sdkConfiguration;
    private final CollectionUsers syncSDK;

    AsyncCollectionUsers(CollectionUsers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CollectionUsers sync() {
        return syncSDK;
    }


    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionUsersAllRequestBuilder list() {
        return new IssueTrackingCollectionUsersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionUsersAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionUsersAllResponse> list(IssueTrackingCollectionUsersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionUsersAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionUsersAllResponse> list(IssueTrackingCollectionUsersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionUsersAllRequest, IssueTrackingCollectionUsersAllResponse> operation
              = new IssueTrackingCollectionUsersAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionUsersOneRequestBuilder get() {
        return new IssueTrackingCollectionUsersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionUsersOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionUsersOneResponse> get(IssueTrackingCollectionUsersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionUsersOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionUsersOneResponse> get(IssueTrackingCollectionUsersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionUsersOneRequest, IssueTrackingCollectionUsersOneResponse> operation
              = new IssueTrackingCollectionUsersOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
