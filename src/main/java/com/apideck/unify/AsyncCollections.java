/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionsOneRequest;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionsAllRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionsAllResponse;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionsOneRequestBuilder;
import com.apideck.unify.models.operations.async.IssueTrackingCollectionsOneResponse;
import com.apideck.unify.operations.IssueTrackingCollectionsAll;
import com.apideck.unify.operations.IssueTrackingCollectionsOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCollections {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Collections syncSDK;

    AsyncCollections(Collections syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Collections sync() {
        return syncSDK;
    }


    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionsAllRequestBuilder list() {
        return new IssueTrackingCollectionsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionsAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionsAllResponse> list(IssueTrackingCollectionsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionsAllResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionsAllResponse> list(IssueTrackingCollectionsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionsAllRequest, IssueTrackingCollectionsAllResponse> operation
              = new IssueTrackingCollectionsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @return The async call builder
     */
    public IssueTrackingCollectionsOneRequestBuilder get() {
        return new IssueTrackingCollectionsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;IssueTrackingCollectionsOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionsOneResponse> get(IssueTrackingCollectionsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;IssueTrackingCollectionsOneResponse&gt; - The async response
     */
    public CompletableFuture<IssueTrackingCollectionsOneResponse> get(IssueTrackingCollectionsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<IssueTrackingCollectionsOneRequest, IssueTrackingCollectionsOneResponse> operation
              = new IssueTrackingCollectionsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
