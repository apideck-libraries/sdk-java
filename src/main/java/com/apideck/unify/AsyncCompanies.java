/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmCompaniesAddRequest;
import com.apideck.unify.models.operations.CrmCompaniesAllRequest;
import com.apideck.unify.models.operations.CrmCompaniesDeleteRequest;
import com.apideck.unify.models.operations.CrmCompaniesOneRequest;
import com.apideck.unify.models.operations.CrmCompaniesUpdateRequest;
import com.apideck.unify.models.operations.async.CrmCompaniesAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmCompaniesAddResponse;
import com.apideck.unify.models.operations.async.CrmCompaniesAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmCompaniesAllResponse;
import com.apideck.unify.models.operations.async.CrmCompaniesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmCompaniesDeleteResponse;
import com.apideck.unify.models.operations.async.CrmCompaniesOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmCompaniesOneResponse;
import com.apideck.unify.models.operations.async.CrmCompaniesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmCompaniesUpdateResponse;
import com.apideck.unify.operations.CrmCompaniesAdd;
import com.apideck.unify.operations.CrmCompaniesAll;
import com.apideck.unify.operations.CrmCompaniesDelete;
import com.apideck.unify.operations.CrmCompaniesOne;
import com.apideck.unify.operations.CrmCompaniesUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCompanies {
    private final SDKConfiguration sdkConfiguration;
    private final Companies syncSDK;

    AsyncCompanies(Companies syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Companies sync() {
        return syncSDK;
    }


    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @return The async call builder
     */
    public CrmCompaniesAllRequestBuilder list() {
        return new CrmCompaniesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmCompaniesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesAllResponse> list(CrmCompaniesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmCompaniesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesAllResponse> list(CrmCompaniesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmCompaniesAllRequest, CrmCompaniesAllResponse> operation
              = new CrmCompaniesAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @return The async call builder
     */
    public CrmCompaniesAddRequestBuilder create() {
        return new CrmCompaniesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmCompaniesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesAddResponse> create(CrmCompaniesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmCompaniesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesAddResponse> create(CrmCompaniesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmCompaniesAddRequest, CrmCompaniesAddResponse> operation
              = new CrmCompaniesAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @return The async call builder
     */
    public CrmCompaniesOneRequestBuilder get() {
        return new CrmCompaniesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmCompaniesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesOneResponse> get(CrmCompaniesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmCompaniesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesOneResponse> get(CrmCompaniesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmCompaniesOneRequest, CrmCompaniesOneResponse> operation
              = new CrmCompaniesOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @return The async call builder
     */
    public CrmCompaniesUpdateRequestBuilder update() {
        return new CrmCompaniesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmCompaniesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesUpdateResponse> update(CrmCompaniesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmCompaniesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesUpdateResponse> update(CrmCompaniesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmCompaniesUpdateRequest, CrmCompaniesUpdateResponse> operation
              = new CrmCompaniesUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @return The async call builder
     */
    public CrmCompaniesDeleteRequestBuilder delete() {
        return new CrmCompaniesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmCompaniesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesDeleteResponse> delete(CrmCompaniesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmCompaniesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmCompaniesDeleteResponse> delete(CrmCompaniesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmCompaniesDeleteRequest, CrmCompaniesDeleteResponse> operation
              = new CrmCompaniesDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
