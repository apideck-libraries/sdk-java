/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.VaultConnectionConsentsAllRequest;
import com.apideck.unify.models.operations.async.VaultConnectionConsentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConnectionConsentsAllResponse;
import com.apideck.unify.operations.VaultConnectionConsentsAll;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncConnectionConsents {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ConnectionConsents syncSDK;

    AsyncConnectionConsents(ConnectionConsents syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ConnectionConsents sync() {
        return syncSDK;
    }


    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @return The async call builder
     */
    public VaultConnectionConsentsAllRequestBuilder list() {
        return new VaultConnectionConsentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @return {@code CompletableFuture<VaultConnectionConsentsAllResponse>} - The async response
     */
    public CompletableFuture<VaultConnectionConsentsAllResponse> list(String serviceId, String unifiedApi) {
        return list(
                Optional.empty(), Optional.empty(), serviceId,
                unifiedApi, Optional.empty());
    }

    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @param consumerId ID of the consumer which you want to get or push data from
     * @param appId The ID of your Unify application
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @param options additional options
     * @return {@code CompletableFuture<VaultConnectionConsentsAllResponse>} - The async response
     */
    public CompletableFuture<VaultConnectionConsentsAllResponse> list(
            Optional<String> consumerId, Optional<String> appId,
            String serviceId, String unifiedApi,
            Optional<Options> options) {
        VaultConnectionConsentsAllRequest request =
            VaultConnectionConsentsAllRequest
                .builder()
                .consumerId(consumerId)
                .appId(appId)
                .serviceId(serviceId)
                .unifiedApi(unifiedApi)
                .build();
        AsyncRequestOperation<VaultConnectionConsentsAllRequest, VaultConnectionConsentsAllResponse> operation
              = new VaultConnectionConsentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
