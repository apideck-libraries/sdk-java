/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.components.CreateConsumerRequest;
import com.apideck.unify.models.components.UpdateConsumerRequest;
import com.apideck.unify.models.operations.VaultConsumersAddRequest;
import com.apideck.unify.models.operations.VaultConsumersAllRequest;
import com.apideck.unify.models.operations.VaultConsumersDeleteRequest;
import com.apideck.unify.models.operations.VaultConsumersOneRequest;
import com.apideck.unify.models.operations.VaultConsumersUpdateRequest;
import com.apideck.unify.models.operations.async.VaultConsumersAddRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConsumersAddResponse;
import com.apideck.unify.models.operations.async.VaultConsumersAllRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConsumersAllResponse;
import com.apideck.unify.models.operations.async.VaultConsumersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConsumersDeleteResponse;
import com.apideck.unify.models.operations.async.VaultConsumersOneRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConsumersOneResponse;
import com.apideck.unify.models.operations.async.VaultConsumersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.VaultConsumersUpdateResponse;
import com.apideck.unify.operations.VaultConsumersAdd;
import com.apideck.unify.operations.VaultConsumersAll;
import com.apideck.unify.operations.VaultConsumersDelete;
import com.apideck.unify.operations.VaultConsumersOne;
import com.apideck.unify.operations.VaultConsumersUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncConsumers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Consumers syncSDK;

    AsyncConsumers(Consumers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Consumers sync() {
        return syncSDK;
    }


    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @return The async call builder
     */
    public VaultConsumersAddRequestBuilder create() {
        return new VaultConsumersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @param createConsumerRequest 
     * @return CompletableFuture&lt;VaultConsumersAddResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersAddResponse> create(CreateConsumerRequest createConsumerRequest) {
        return create(Optional.empty(), createConsumerRequest, Optional.empty());
    }

    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @param appId The ID of your Unify application
     * @param createConsumerRequest 
     * @param options additional options
     * @return CompletableFuture&lt;VaultConsumersAddResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersAddResponse> create(
            Optional<String> appId, CreateConsumerRequest createConsumerRequest,
            Optional<Options> options) {
        VaultConsumersAddRequest request =
            VaultConsumersAddRequest
                .builder()
                .appId(appId)
                .createConsumerRequest(createConsumerRequest)
                .build();
        AsyncRequestOperation<VaultConsumersAddRequest, VaultConsumersAddResponse> operation
              = new VaultConsumersAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @return The async call builder
     */
    public VaultConsumersAllRequestBuilder list() {
        return new VaultConsumersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @return CompletableFuture&lt;VaultConsumersAllResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersAllResponse> listDirect() {
        return list(
                Optional.empty(), JsonNullable.undefined(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @param appId The ID of your Unify application
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param limit Number of results to return. Minimum 1, Maximum 200, Default 20
     * @param options additional options
     * @return CompletableFuture&lt;VaultConsumersAllResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersAllResponse> list(
            Optional<String> appId, JsonNullable<String> cursor,
            Optional<Long> limit, Optional<Options> options) {
        VaultConsumersAllRequest request =
            VaultConsumersAllRequest
                .builder()
                .appId(appId)
                .cursor(cursor)
                .limit(limit)
                .build();
        AsyncRequestOperation<VaultConsumersAllRequest, VaultConsumersAllResponse> operation
              = new VaultConsumersAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @return The async call builder
     */
    public VaultConsumersOneRequestBuilder get() {
        return new VaultConsumersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @param consumerId ID of the consumer to return
     * @return CompletableFuture&lt;VaultConsumersOneResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersOneResponse> get(String consumerId) {
        return get(Optional.empty(), consumerId, Optional.empty());
    }

    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param options additional options
     * @return CompletableFuture&lt;VaultConsumersOneResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersOneResponse> get(
            Optional<String> appId, String consumerId,
            Optional<Options> options) {
        VaultConsumersOneRequest request =
            VaultConsumersOneRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .build();
        AsyncRequestOperation<VaultConsumersOneRequest, VaultConsumersOneResponse> operation
              = new VaultConsumersOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @return The async call builder
     */
    public VaultConsumersUpdateRequestBuilder update() {
        return new VaultConsumersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @param consumerId ID of the consumer to return
     * @param updateConsumerRequest 
     * @return CompletableFuture&lt;VaultConsumersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersUpdateResponse> update(String consumerId, UpdateConsumerRequest updateConsumerRequest) {
        return update(
                Optional.empty(), consumerId, updateConsumerRequest,
                Optional.empty());
    }

    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param updateConsumerRequest 
     * @param options additional options
     * @return CompletableFuture&lt;VaultConsumersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersUpdateResponse> update(
            Optional<String> appId, String consumerId,
            UpdateConsumerRequest updateConsumerRequest, Optional<Options> options) {
        VaultConsumersUpdateRequest request =
            VaultConsumersUpdateRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .updateConsumerRequest(updateConsumerRequest)
                .build();
        AsyncRequestOperation<VaultConsumersUpdateRequest, VaultConsumersUpdateResponse> operation
              = new VaultConsumersUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @return The async call builder
     */
    public VaultConsumersDeleteRequestBuilder delete() {
        return new VaultConsumersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @param consumerId ID of the consumer to return
     * @return CompletableFuture&lt;VaultConsumersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersDeleteResponse> delete(String consumerId) {
        return delete(Optional.empty(), consumerId, Optional.empty());
    }

    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param options additional options
     * @return CompletableFuture&lt;VaultConsumersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<VaultConsumersDeleteResponse> delete(
            Optional<String> appId, String consumerId,
            Optional<Options> options) {
        VaultConsumersDeleteRequest request =
            VaultConsumersDeleteRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .build();
        AsyncRequestOperation<VaultConsumersDeleteRequest, VaultConsumersDeleteResponse> operation
              = new VaultConsumersDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
