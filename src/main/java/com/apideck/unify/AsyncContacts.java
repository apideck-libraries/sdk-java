/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmContactsAddRequest;
import com.apideck.unify.models.operations.CrmContactsAllRequest;
import com.apideck.unify.models.operations.CrmContactsDeleteRequest;
import com.apideck.unify.models.operations.CrmContactsOneRequest;
import com.apideck.unify.models.operations.CrmContactsUpdateRequest;
import com.apideck.unify.models.operations.async.CrmContactsAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmContactsAddResponse;
import com.apideck.unify.models.operations.async.CrmContactsAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmContactsAllResponse;
import com.apideck.unify.models.operations.async.CrmContactsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmContactsDeleteResponse;
import com.apideck.unify.models.operations.async.CrmContactsOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmContactsOneResponse;
import com.apideck.unify.models.operations.async.CrmContactsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmContactsUpdateResponse;
import com.apideck.unify.operations.CrmContactsAdd;
import com.apideck.unify.operations.CrmContactsAll;
import com.apideck.unify.operations.CrmContactsDelete;
import com.apideck.unify.operations.CrmContactsOne;
import com.apideck.unify.operations.CrmContactsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncContacts {
    private final SDKConfiguration sdkConfiguration;
    private final Contacts syncSDK;

    AsyncContacts(Contacts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Contacts sync() {
        return syncSDK;
    }


    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @return The async call builder
     */
    public CrmContactsAllRequestBuilder list() {
        return new CrmContactsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmContactsAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsAllResponse> list(CrmContactsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmContactsAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsAllResponse> list(CrmContactsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmContactsAllRequest, CrmContactsAllResponse> operation
              = new CrmContactsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @return The async call builder
     */
    public CrmContactsAddRequestBuilder create() {
        return new CrmContactsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmContactsAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsAddResponse> create(CrmContactsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmContactsAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsAddResponse> create(CrmContactsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmContactsAddRequest, CrmContactsAddResponse> operation
              = new CrmContactsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @return The async call builder
     */
    public CrmContactsOneRequestBuilder get() {
        return new CrmContactsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmContactsOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsOneResponse> get(CrmContactsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmContactsOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsOneResponse> get(CrmContactsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmContactsOneRequest, CrmContactsOneResponse> operation
              = new CrmContactsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @return The async call builder
     */
    public CrmContactsUpdateRequestBuilder update() {
        return new CrmContactsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmContactsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsUpdateResponse> update(CrmContactsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmContactsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsUpdateResponse> update(CrmContactsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmContactsUpdateRequest, CrmContactsUpdateResponse> operation
              = new CrmContactsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @return The async call builder
     */
    public CrmContactsDeleteRequestBuilder delete() {
        return new CrmContactsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmContactsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsDeleteResponse> delete(CrmContactsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmContactsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmContactsDeleteResponse> delete(CrmContactsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmContactsDeleteRequest, CrmContactsDeleteResponse> operation
              = new CrmContactsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
