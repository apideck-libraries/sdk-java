/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingCreditNotesAddRequest;
import com.apideck.unify.models.operations.AccountingCreditNotesAllRequest;
import com.apideck.unify.models.operations.AccountingCreditNotesDeleteRequest;
import com.apideck.unify.models.operations.AccountingCreditNotesOneRequest;
import com.apideck.unify.models.operations.AccountingCreditNotesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingCreditNotesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCreditNotesAddResponse;
import com.apideck.unify.models.operations.async.AccountingCreditNotesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCreditNotesAllResponse;
import com.apideck.unify.models.operations.async.AccountingCreditNotesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCreditNotesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingCreditNotesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCreditNotesOneResponse;
import com.apideck.unify.models.operations.async.AccountingCreditNotesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCreditNotesUpdateResponse;
import com.apideck.unify.operations.AccountingCreditNotesAdd;
import com.apideck.unify.operations.AccountingCreditNotesAll;
import com.apideck.unify.operations.AccountingCreditNotesDelete;
import com.apideck.unify.operations.AccountingCreditNotesOne;
import com.apideck.unify.operations.AccountingCreditNotesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCreditNotes {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final CreditNotes syncSDK;

    AsyncCreditNotes(CreditNotes syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public CreditNotes sync() {
        return syncSDK;
    }


    /**
     * List Credit Notes
     * 
     * <p>List Credit Notes
     * 
     * @return The async call builder
     */
    public AccountingCreditNotesAllRequestBuilder list() {
        return new AccountingCreditNotesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Credit Notes
     * 
     * <p>List Credit Notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCreditNotesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesAllResponse> list(AccountingCreditNotesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Credit Notes
     * 
     * <p>List Credit Notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreditNotesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesAllResponse> list(AccountingCreditNotesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCreditNotesAllRequest, AccountingCreditNotesAllResponse> operation
              = new AccountingCreditNotesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Credit Note
     * 
     * <p>Create Credit Note
     * 
     * @return The async call builder
     */
    public AccountingCreditNotesAddRequestBuilder create() {
        return new AccountingCreditNotesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Credit Note
     * 
     * <p>Create Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCreditNotesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesAddResponse> create(AccountingCreditNotesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Credit Note
     * 
     * <p>Create Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreditNotesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesAddResponse> create(AccountingCreditNotesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCreditNotesAddRequest, AccountingCreditNotesAddResponse> operation
              = new AccountingCreditNotesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Credit Note
     * 
     * <p>Get Credit Note
     * 
     * @return The async call builder
     */
    public AccountingCreditNotesOneRequestBuilder get() {
        return new AccountingCreditNotesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Credit Note
     * 
     * <p>Get Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCreditNotesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesOneResponse> get(AccountingCreditNotesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Credit Note
     * 
     * <p>Get Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreditNotesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesOneResponse> get(AccountingCreditNotesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCreditNotesOneRequest, AccountingCreditNotesOneResponse> operation
              = new AccountingCreditNotesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Credit Note
     * 
     * <p>Update Credit Note
     * 
     * @return The async call builder
     */
    public AccountingCreditNotesUpdateRequestBuilder update() {
        return new AccountingCreditNotesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Credit Note
     * 
     * <p>Update Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCreditNotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesUpdateResponse> update(AccountingCreditNotesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Credit Note
     * 
     * <p>Update Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreditNotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesUpdateResponse> update(AccountingCreditNotesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCreditNotesUpdateRequest, AccountingCreditNotesUpdateResponse> operation
              = new AccountingCreditNotesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Credit Note
     * 
     * <p>Delete Credit Note
     * 
     * @return The async call builder
     */
    public AccountingCreditNotesDeleteRequestBuilder delete() {
        return new AccountingCreditNotesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Credit Note
     * 
     * <p>Delete Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCreditNotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesDeleteResponse> delete(AccountingCreditNotesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Credit Note
     * 
     * <p>Delete Credit Note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreditNotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreditNotesDeleteResponse> delete(AccountingCreditNotesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCreditNotesDeleteRequest, AccountingCreditNotesDeleteResponse> operation
              = new AccountingCreditNotesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
