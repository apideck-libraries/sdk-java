/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingCustomersAddRequest;
import com.apideck.unify.models.operations.AccountingCustomersAllRequest;
import com.apideck.unify.models.operations.AccountingCustomersDeleteRequest;
import com.apideck.unify.models.operations.AccountingCustomersOneRequest;
import com.apideck.unify.models.operations.AccountingCustomersUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingCustomersAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCustomersAddResponse;
import com.apideck.unify.models.operations.async.AccountingCustomersAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCustomersAllResponse;
import com.apideck.unify.models.operations.async.AccountingCustomersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCustomersDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingCustomersOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCustomersOneResponse;
import com.apideck.unify.models.operations.async.AccountingCustomersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingCustomersUpdateResponse;
import com.apideck.unify.operations.AccountingCustomersAdd;
import com.apideck.unify.operations.AccountingCustomersAll;
import com.apideck.unify.operations.AccountingCustomersDelete;
import com.apideck.unify.operations.AccountingCustomersOne;
import com.apideck.unify.operations.AccountingCustomersUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCustomers {
    private final SDKConfiguration sdkConfiguration;
    private final Customers syncSDK;

    AsyncCustomers(Customers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Customers sync() {
        return syncSDK;
    }


    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @return The async call builder
     */
    public AccountingCustomersAllRequestBuilder list() {
        return new AccountingCustomersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCustomersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersAllResponse> list(AccountingCustomersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCustomersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersAllResponse> list(AccountingCustomersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCustomersAllRequest, AccountingCustomersAllResponse> operation
              = new AccountingCustomersAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @return The async call builder
     */
    public AccountingCustomersAddRequestBuilder create() {
        return new AccountingCustomersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCustomersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersAddResponse> create(AccountingCustomersAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCustomersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersAddResponse> create(AccountingCustomersAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCustomersAddRequest, AccountingCustomersAddResponse> operation
              = new AccountingCustomersAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @return The async call builder
     */
    public AccountingCustomersOneRequestBuilder get() {
        return new AccountingCustomersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCustomersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersOneResponse> get(AccountingCustomersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCustomersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersOneResponse> get(AccountingCustomersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCustomersOneRequest, AccountingCustomersOneResponse> operation
              = new AccountingCustomersOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @return The async call builder
     */
    public AccountingCustomersUpdateRequestBuilder update() {
        return new AccountingCustomersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCustomersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersUpdateResponse> update(AccountingCustomersUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCustomersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersUpdateResponse> update(AccountingCustomersUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCustomersUpdateRequest, AccountingCustomersUpdateResponse> operation
              = new AccountingCustomersUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @return The async call builder
     */
    public AccountingCustomersDeleteRequestBuilder delete() {
        return new AccountingCustomersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingCustomersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersDeleteResponse> delete(AccountingCustomersDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCustomersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCustomersDeleteResponse> delete(AccountingCustomersDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingCustomersDeleteRequest, AccountingCustomersDeleteResponse> operation
              = new AccountingCustomersDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
