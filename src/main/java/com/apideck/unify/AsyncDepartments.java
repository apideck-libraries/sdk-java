/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingDepartmentsAddRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsAllRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsOneRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingDepartmentsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingDepartmentsAddResponse;
import com.apideck.unify.models.operations.async.AccountingDepartmentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingDepartmentsAllResponse;
import com.apideck.unify.models.operations.async.AccountingDepartmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingDepartmentsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingDepartmentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingDepartmentsOneResponse;
import com.apideck.unify.models.operations.async.AccountingDepartmentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingDepartmentsUpdateResponse;
import com.apideck.unify.operations.AccountingDepartmentsAdd;
import com.apideck.unify.operations.AccountingDepartmentsAll;
import com.apideck.unify.operations.AccountingDepartmentsDelete;
import com.apideck.unify.operations.AccountingDepartmentsOne;
import com.apideck.unify.operations.AccountingDepartmentsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncDepartments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Departments syncSDK;

    AsyncDepartments(Departments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Departments sync() {
        return syncSDK;
    }


    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @return The async call builder
     */
    public AccountingDepartmentsAllRequestBuilder list() {
        return new AccountingDepartmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingDepartmentsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsAllResponse> list(AccountingDepartmentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingDepartmentsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsAllResponse> list(AccountingDepartmentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingDepartmentsAllRequest, AccountingDepartmentsAllResponse> operation
              = new AccountingDepartmentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @return The async call builder
     */
    public AccountingDepartmentsAddRequestBuilder create() {
        return new AccountingDepartmentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingDepartmentsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsAddResponse> create(AccountingDepartmentsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingDepartmentsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsAddResponse> create(AccountingDepartmentsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingDepartmentsAddRequest, AccountingDepartmentsAddResponse> operation
              = new AccountingDepartmentsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @return The async call builder
     */
    public AccountingDepartmentsOneRequestBuilder get() {
        return new AccountingDepartmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingDepartmentsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsOneResponse> get(AccountingDepartmentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingDepartmentsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsOneResponse> get(AccountingDepartmentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingDepartmentsOneRequest, AccountingDepartmentsOneResponse> operation
              = new AccountingDepartmentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @return The async call builder
     */
    public AccountingDepartmentsUpdateRequestBuilder update() {
        return new AccountingDepartmentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingDepartmentsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsUpdateResponse> update(AccountingDepartmentsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingDepartmentsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsUpdateResponse> update(AccountingDepartmentsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingDepartmentsUpdateRequest, AccountingDepartmentsUpdateResponse> operation
              = new AccountingDepartmentsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @return The async call builder
     */
    public AccountingDepartmentsDeleteRequestBuilder delete() {
        return new AccountingDepartmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingDepartmentsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsDeleteResponse> delete(AccountingDepartmentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingDepartmentsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingDepartmentsDeleteResponse> delete(AccountingDepartmentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingDepartmentsDeleteRequest, AccountingDepartmentsDeleteResponse> operation
              = new AccountingDepartmentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
