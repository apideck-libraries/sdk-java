/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageDriveGroupsAddRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAllRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsDeleteRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsOneRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsUpdateRequest;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsAddRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsAddResponse;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsAllRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsAllResponse;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsOneResponse;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDriveGroupsUpdateResponse;
import com.apideck.unify.operations.FileStorageDriveGroupsAdd;
import com.apideck.unify.operations.FileStorageDriveGroupsAll;
import com.apideck.unify.operations.FileStorageDriveGroupsDelete;
import com.apideck.unify.operations.FileStorageDriveGroupsOne;
import com.apideck.unify.operations.FileStorageDriveGroupsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncDriveGroups {
    private final SDKConfiguration sdkConfiguration;
    private final DriveGroups syncSDK;

    AsyncDriveGroups(DriveGroups syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public DriveGroups sync() {
        return syncSDK;
    }


    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @return The async call builder
     */
    public FileStorageDriveGroupsAllRequestBuilder list() {
        return new FileStorageDriveGroupsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDriveGroupsAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsAllResponse> list(FileStorageDriveGroupsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDriveGroupsAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsAllResponse> list(FileStorageDriveGroupsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDriveGroupsAllRequest, FileStorageDriveGroupsAllResponse> operation
              = new FileStorageDriveGroupsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @return The async call builder
     */
    public FileStorageDriveGroupsAddRequestBuilder create() {
        return new FileStorageDriveGroupsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDriveGroupsAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsAddResponse> create(FileStorageDriveGroupsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDriveGroupsAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsAddResponse> create(FileStorageDriveGroupsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDriveGroupsAddRequest, FileStorageDriveGroupsAddResponse> operation
              = new FileStorageDriveGroupsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @return The async call builder
     */
    public FileStorageDriveGroupsOneRequestBuilder get() {
        return new FileStorageDriveGroupsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDriveGroupsOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsOneResponse> get(FileStorageDriveGroupsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDriveGroupsOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsOneResponse> get(FileStorageDriveGroupsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDriveGroupsOneRequest, FileStorageDriveGroupsOneResponse> operation
              = new FileStorageDriveGroupsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @return The async call builder
     */
    public FileStorageDriveGroupsUpdateRequestBuilder update() {
        return new FileStorageDriveGroupsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDriveGroupsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsUpdateResponse> update(FileStorageDriveGroupsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDriveGroupsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsUpdateResponse> update(FileStorageDriveGroupsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDriveGroupsUpdateRequest, FileStorageDriveGroupsUpdateResponse> operation
              = new FileStorageDriveGroupsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @return The async call builder
     */
    public FileStorageDriveGroupsDeleteRequestBuilder delete() {
        return new FileStorageDriveGroupsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDriveGroupsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsDeleteResponse> delete(FileStorageDriveGroupsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDriveGroupsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDriveGroupsDeleteResponse> delete(FileStorageDriveGroupsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDriveGroupsDeleteRequest, FileStorageDriveGroupsDeleteResponse> operation
              = new FileStorageDriveGroupsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
