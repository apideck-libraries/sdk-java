/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageDrivesAddRequest;
import com.apideck.unify.models.operations.FileStorageDrivesAllRequest;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteRequest;
import com.apideck.unify.models.operations.FileStorageDrivesOneRequest;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateRequest;
import com.apideck.unify.models.operations.async.FileStorageDrivesAddRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDrivesAddResponse;
import com.apideck.unify.models.operations.async.FileStorageDrivesAllRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDrivesAllResponse;
import com.apideck.unify.models.operations.async.FileStorageDrivesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDrivesDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageDrivesOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDrivesOneResponse;
import com.apideck.unify.models.operations.async.FileStorageDrivesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageDrivesUpdateResponse;
import com.apideck.unify.operations.FileStorageDrivesAdd;
import com.apideck.unify.operations.FileStorageDrivesAll;
import com.apideck.unify.operations.FileStorageDrivesDelete;
import com.apideck.unify.operations.FileStorageDrivesOne;
import com.apideck.unify.operations.FileStorageDrivesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncDrives {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Drives syncSDK;

    AsyncDrives(Drives syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Drives sync() {
        return syncSDK;
    }


    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @return The async call builder
     */
    public FileStorageDrivesAllRequestBuilder list() {
        return new FileStorageDrivesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDrivesAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesAllResponse> list(FileStorageDrivesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDrivesAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesAllResponse> list(FileStorageDrivesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDrivesAllRequest, FileStorageDrivesAllResponse> operation
              = new FileStorageDrivesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @return The async call builder
     */
    public FileStorageDrivesAddRequestBuilder create() {
        return new FileStorageDrivesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDrivesAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesAddResponse> create(FileStorageDrivesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDrivesAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesAddResponse> create(FileStorageDrivesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDrivesAddRequest, FileStorageDrivesAddResponse> operation
              = new FileStorageDrivesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @return The async call builder
     */
    public FileStorageDrivesOneRequestBuilder get() {
        return new FileStorageDrivesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDrivesOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesOneResponse> get(FileStorageDrivesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDrivesOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesOneResponse> get(FileStorageDrivesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDrivesOneRequest, FileStorageDrivesOneResponse> operation
              = new FileStorageDrivesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @return The async call builder
     */
    public FileStorageDrivesUpdateRequestBuilder update() {
        return new FileStorageDrivesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDrivesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesUpdateResponse> update(FileStorageDrivesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDrivesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesUpdateResponse> update(FileStorageDrivesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDrivesUpdateRequest, FileStorageDrivesUpdateResponse> operation
              = new FileStorageDrivesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @return The async call builder
     */
    public FileStorageDrivesDeleteRequestBuilder delete() {
        return new FileStorageDrivesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageDrivesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesDeleteResponse> delete(FileStorageDrivesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageDrivesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageDrivesDeleteResponse> delete(FileStorageDrivesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageDrivesDeleteRequest, FileStorageDrivesDeleteResponse> operation
              = new FileStorageDrivesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
