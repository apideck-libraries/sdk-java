/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.HrisEmployeePayrollsAllRequest;
import com.apideck.unify.models.operations.HrisEmployeePayrollsOneRequest;
import com.apideck.unify.models.operations.async.HrisEmployeePayrollsAllRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeePayrollsAllResponse;
import com.apideck.unify.models.operations.async.HrisEmployeePayrollsOneRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeePayrollsOneResponse;
import com.apideck.unify.operations.HrisEmployeePayrollsAll;
import com.apideck.unify.operations.HrisEmployeePayrollsOne;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncEmployeePayrolls {
    private final SDKConfiguration sdkConfiguration;
    private final EmployeePayrolls syncSDK;

    AsyncEmployeePayrolls(EmployeePayrolls syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public EmployeePayrolls sync() {
        return syncSDK;
    }


    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @return The async call builder
     */
    public HrisEmployeePayrollsAllRequestBuilder list() {
        return new HrisEmployeePayrollsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeePayrollsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeePayrollsAllResponse> list(HrisEmployeePayrollsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeePayrollsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeePayrollsAllResponse> list(HrisEmployeePayrollsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeePayrollsAllRequest, HrisEmployeePayrollsAllResponse> operation
              = new HrisEmployeePayrollsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @return The async call builder
     */
    public HrisEmployeePayrollsOneRequestBuilder get() {
        return new HrisEmployeePayrollsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeePayrollsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeePayrollsOneResponse> get(HrisEmployeePayrollsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeePayrollsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeePayrollsOneResponse> get(HrisEmployeePayrollsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeePayrollsOneRequest, HrisEmployeePayrollsOneResponse> operation
              = new HrisEmployeePayrollsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
