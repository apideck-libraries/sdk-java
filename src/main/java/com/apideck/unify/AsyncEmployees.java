/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.HrisEmployeesAddRequest;
import com.apideck.unify.models.operations.HrisEmployeesAllRequest;
import com.apideck.unify.models.operations.HrisEmployeesDeleteRequest;
import com.apideck.unify.models.operations.HrisEmployeesOneRequest;
import com.apideck.unify.models.operations.HrisEmployeesUpdateRequest;
import com.apideck.unify.models.operations.async.HrisEmployeesAddRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeesAddResponse;
import com.apideck.unify.models.operations.async.HrisEmployeesAllRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeesAllResponse;
import com.apideck.unify.models.operations.async.HrisEmployeesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeesDeleteResponse;
import com.apideck.unify.models.operations.async.HrisEmployeesOneRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeesOneResponse;
import com.apideck.unify.models.operations.async.HrisEmployeesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.HrisEmployeesUpdateResponse;
import com.apideck.unify.operations.HrisEmployeesAdd;
import com.apideck.unify.operations.HrisEmployeesAll;
import com.apideck.unify.operations.HrisEmployeesDelete;
import com.apideck.unify.operations.HrisEmployeesOne;
import com.apideck.unify.operations.HrisEmployeesUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncEmployees {
    private final SDKConfiguration sdkConfiguration;
    private final Employees syncSDK;

    AsyncEmployees(Employees syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Employees sync() {
        return syncSDK;
    }


    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @return The async call builder
     */
    public HrisEmployeesAllRequestBuilder list() {
        return new HrisEmployeesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeesAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesAllResponse> list(HrisEmployeesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeesAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesAllResponse> list(HrisEmployeesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeesAllRequest, HrisEmployeesAllResponse> operation
              = new HrisEmployeesAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @return The async call builder
     */
    public HrisEmployeesAddRequestBuilder create() {
        return new HrisEmployeesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeesAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesAddResponse> create(HrisEmployeesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeesAddResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesAddResponse> create(HrisEmployeesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeesAddRequest, HrisEmployeesAddResponse> operation
              = new HrisEmployeesAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @return The async call builder
     */
    public HrisEmployeesOneRequestBuilder get() {
        return new HrisEmployeesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeesOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesOneResponse> get(HrisEmployeesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeesOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesOneResponse> get(HrisEmployeesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeesOneRequest, HrisEmployeesOneResponse> operation
              = new HrisEmployeesOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @return The async call builder
     */
    public HrisEmployeesUpdateRequestBuilder update() {
        return new HrisEmployeesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesUpdateResponse> update(HrisEmployeesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesUpdateResponse> update(HrisEmployeesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeesUpdateRequest, HrisEmployeesUpdateResponse> operation
              = new HrisEmployeesUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @return The async call builder
     */
    public HrisEmployeesDeleteRequestBuilder delete() {
        return new HrisEmployeesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisEmployeesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesDeleteResponse> delete(HrisEmployeesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisEmployeesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<HrisEmployeesDeleteResponse> delete(HrisEmployeesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisEmployeesDeleteRequest, HrisEmployeesDeleteResponse> operation
              = new HrisEmployeesDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
