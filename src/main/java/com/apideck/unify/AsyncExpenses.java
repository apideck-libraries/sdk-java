/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingExpensesAddRequest;
import com.apideck.unify.models.operations.AccountingExpensesAllRequest;
import com.apideck.unify.models.operations.AccountingExpensesDeleteRequest;
import com.apideck.unify.models.operations.AccountingExpensesOneRequest;
import com.apideck.unify.models.operations.AccountingExpensesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingExpensesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingExpensesAddResponse;
import com.apideck.unify.models.operations.async.AccountingExpensesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingExpensesAllResponse;
import com.apideck.unify.models.operations.async.AccountingExpensesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingExpensesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingExpensesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingExpensesOneResponse;
import com.apideck.unify.models.operations.async.AccountingExpensesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingExpensesUpdateResponse;
import com.apideck.unify.operations.AccountingExpensesAdd;
import com.apideck.unify.operations.AccountingExpensesAll;
import com.apideck.unify.operations.AccountingExpensesDelete;
import com.apideck.unify.operations.AccountingExpensesOne;
import com.apideck.unify.operations.AccountingExpensesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncExpenses {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Expenses syncSDK;

    AsyncExpenses(Expenses syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Expenses sync() {
        return syncSDK;
    }


    /**
     * List Expenses
     * 
     * <p>List Expenses
     * 
     * @return The async call builder
     */
    public AccountingExpensesAllRequestBuilder list() {
        return new AccountingExpensesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Expenses
     * 
     * <p>List Expenses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingExpensesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesAllResponse> list(AccountingExpensesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Expenses
     * 
     * <p>List Expenses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingExpensesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesAllResponse> list(AccountingExpensesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingExpensesAllRequest, AccountingExpensesAllResponse> operation
              = new AccountingExpensesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Expense
     * 
     * <p>Create Expense
     * 
     * @return The async call builder
     */
    public AccountingExpensesAddRequestBuilder create() {
        return new AccountingExpensesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Expense
     * 
     * <p>Create Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingExpensesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesAddResponse> create(AccountingExpensesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Expense
     * 
     * <p>Create Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingExpensesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesAddResponse> create(AccountingExpensesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingExpensesAddRequest, AccountingExpensesAddResponse> operation
              = new AccountingExpensesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Expense
     * 
     * <p>Get Expense
     * 
     * @return The async call builder
     */
    public AccountingExpensesOneRequestBuilder get() {
        return new AccountingExpensesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Expense
     * 
     * <p>Get Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingExpensesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesOneResponse> get(AccountingExpensesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Expense
     * 
     * <p>Get Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingExpensesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesOneResponse> get(AccountingExpensesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingExpensesOneRequest, AccountingExpensesOneResponse> operation
              = new AccountingExpensesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Expense
     * 
     * <p>Update Expense
     * 
     * @return The async call builder
     */
    public AccountingExpensesUpdateRequestBuilder update() {
        return new AccountingExpensesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Expense
     * 
     * <p>Update Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingExpensesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesUpdateResponse> update(AccountingExpensesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Expense
     * 
     * <p>Update Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingExpensesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesUpdateResponse> update(AccountingExpensesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingExpensesUpdateRequest, AccountingExpensesUpdateResponse> operation
              = new AccountingExpensesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Expense
     * 
     * <p>Delete Expense
     * 
     * @return The async call builder
     */
    public AccountingExpensesDeleteRequestBuilder delete() {
        return new AccountingExpensesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Expense
     * 
     * <p>Delete Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingExpensesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesDeleteResponse> delete(AccountingExpensesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Expense
     * 
     * <p>Delete Expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingExpensesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingExpensesDeleteResponse> delete(AccountingExpensesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingExpensesDeleteRequest, AccountingExpensesDeleteResponse> operation
              = new AccountingExpensesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
