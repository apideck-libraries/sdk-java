/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageFilesAllRequest;
import com.apideck.unify.models.operations.FileStorageFilesDeleteRequest;
import com.apideck.unify.models.operations.FileStorageFilesDownloadRequest;
import com.apideck.unify.models.operations.FileStorageFilesExportRequest;
import com.apideck.unify.models.operations.FileStorageFilesOneRequest;
import com.apideck.unify.models.operations.FileStorageFilesSearchRequest;
import com.apideck.unify.models.operations.FileStorageFilesUpdateRequest;
import com.apideck.unify.models.operations.async.FileStorageFilesAllRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesAllResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesDownloadRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesDownloadResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesExportRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesExportResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesOneResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesSearchRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesSearchResponse;
import com.apideck.unify.models.operations.async.FileStorageFilesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFilesUpdateResponse;
import com.apideck.unify.operations.FileStorageFilesAll;
import com.apideck.unify.operations.FileStorageFilesDelete;
import com.apideck.unify.operations.FileStorageFilesDownload;
import com.apideck.unify.operations.FileStorageFilesExport;
import com.apideck.unify.operations.FileStorageFilesOne;
import com.apideck.unify.operations.FileStorageFilesSearch;
import com.apideck.unify.operations.FileStorageFilesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncFiles {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Files syncSDK;

    AsyncFiles(Files syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Files sync() {
        return syncSDK;
    }


    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @return The async call builder
     */
    public FileStorageFilesAllRequestBuilder list() {
        return new FileStorageFilesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesAllResponse> list(FileStorageFilesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesAllResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesAllResponse> list(FileStorageFilesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesAllRequest, FileStorageFilesAllResponse> operation
              = new FileStorageFilesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @return The async call builder
     */
    public FileStorageFilesSearchRequestBuilder search() {
        return new FileStorageFilesSearchRequestBuilder(sdkConfiguration);
    }

    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesSearchResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesSearchResponse> search(FileStorageFilesSearchRequest request) {
        return search(request, Optional.empty());
    }

    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesSearchResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesSearchResponse> search(FileStorageFilesSearchRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesSearchRequest, FileStorageFilesSearchResponse> operation
              = new FileStorageFilesSearch.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @return The async call builder
     */
    public FileStorageFilesOneRequestBuilder get() {
        return new FileStorageFilesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesOneResponse> get(FileStorageFilesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesOneResponse> get(FileStorageFilesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesOneRequest, FileStorageFilesOneResponse> operation
              = new FileStorageFilesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @return The async call builder
     */
    public FileStorageFilesUpdateRequestBuilder update() {
        return new FileStorageFilesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesUpdateResponse> update(FileStorageFilesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesUpdateResponse> update(FileStorageFilesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesUpdateRequest, FileStorageFilesUpdateResponse> operation
              = new FileStorageFilesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @return The async call builder
     */
    public FileStorageFilesDeleteRequestBuilder delete() {
        return new FileStorageFilesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesDeleteResponse> delete(FileStorageFilesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesDeleteResponse> delete(FileStorageFilesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesDeleteRequest, FileStorageFilesDeleteResponse> operation
              = new FileStorageFilesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @return The async call builder
     */
    public FileStorageFilesDownloadRequestBuilder download() {
        return new FileStorageFilesDownloadRequestBuilder(sdkConfiguration);
    }

    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesDownloadResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesDownloadResponse> download(FileStorageFilesDownloadRequest request) {
        return download(request, Optional.empty());
    }

    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesDownloadResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesDownloadResponse> download(FileStorageFilesDownloadRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesDownloadRequest, FileStorageFilesDownloadResponse> operation
              = new FileStorageFilesDownload.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @return The async call builder
     */
    public FileStorageFilesExportRequestBuilder export() {
        return new FileStorageFilesExportRequestBuilder(sdkConfiguration);
    }

    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFilesExportResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesExportResponse> export(FileStorageFilesExportRequest request) {
        return export(request, Optional.empty());
    }

    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFilesExportResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFilesExportResponse> export(FileStorageFilesExportRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFilesExportRequest, FileStorageFilesExportResponse> operation
              = new FileStorageFilesExport.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
