/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageFoldersAddRequest;
import com.apideck.unify.models.operations.FileStorageFoldersCopyRequest;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteRequest;
import com.apideck.unify.models.operations.FileStorageFoldersOneRequest;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateRequest;
import com.apideck.unify.models.operations.async.FileStorageFoldersAddRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFoldersAddResponse;
import com.apideck.unify.models.operations.async.FileStorageFoldersCopyRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFoldersCopyResponse;
import com.apideck.unify.models.operations.async.FileStorageFoldersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFoldersDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageFoldersOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFoldersOneResponse;
import com.apideck.unify.models.operations.async.FileStorageFoldersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageFoldersUpdateResponse;
import com.apideck.unify.operations.FileStorageFoldersAdd;
import com.apideck.unify.operations.FileStorageFoldersCopy;
import com.apideck.unify.operations.FileStorageFoldersDelete;
import com.apideck.unify.operations.FileStorageFoldersOne;
import com.apideck.unify.operations.FileStorageFoldersUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncFolders {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Folders syncSDK;

    AsyncFolders(Folders syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Folders sync() {
        return syncSDK;
    }


    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @return The async call builder
     */
    public FileStorageFoldersAddRequestBuilder create() {
        return new FileStorageFoldersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFoldersAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersAddResponse> create(FileStorageFoldersAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFoldersAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersAddResponse> create(FileStorageFoldersAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFoldersAddRequest, FileStorageFoldersAddResponse> operation
              = new FileStorageFoldersAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @return The async call builder
     */
    public FileStorageFoldersOneRequestBuilder get() {
        return new FileStorageFoldersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFoldersOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersOneResponse> get(FileStorageFoldersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFoldersOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersOneResponse> get(FileStorageFoldersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFoldersOneRequest, FileStorageFoldersOneResponse> operation
              = new FileStorageFoldersOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @return The async call builder
     */
    public FileStorageFoldersUpdateRequestBuilder update() {
        return new FileStorageFoldersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFoldersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersUpdateResponse> update(FileStorageFoldersUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFoldersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersUpdateResponse> update(FileStorageFoldersUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFoldersUpdateRequest, FileStorageFoldersUpdateResponse> operation
              = new FileStorageFoldersUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @return The async call builder
     */
    public FileStorageFoldersDeleteRequestBuilder delete() {
        return new FileStorageFoldersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFoldersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersDeleteResponse> delete(FileStorageFoldersDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFoldersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersDeleteResponse> delete(FileStorageFoldersDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFoldersDeleteRequest, FileStorageFoldersDeleteResponse> operation
              = new FileStorageFoldersDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @return The async call builder
     */
    public FileStorageFoldersCopyRequestBuilder copy() {
        return new FileStorageFoldersCopyRequestBuilder(sdkConfiguration);
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageFoldersCopyResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersCopyResponse> copy(FileStorageFoldersCopyRequest request) {
        return copy(request, Optional.empty());
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageFoldersCopyResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageFoldersCopyResponse> copy(FileStorageFoldersCopyRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageFoldersCopyRequest, FileStorageFoldersCopyResponse> operation
              = new FileStorageFoldersCopy.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
