/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingInvoiceItemsAddRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAllRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsDeleteRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsOneRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsAddResponse;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsAllResponse;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsOneResponse;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoiceItemsUpdateResponse;
import com.apideck.unify.operations.AccountingInvoiceItemsAdd;
import com.apideck.unify.operations.AccountingInvoiceItemsAll;
import com.apideck.unify.operations.AccountingInvoiceItemsDelete;
import com.apideck.unify.operations.AccountingInvoiceItemsOne;
import com.apideck.unify.operations.AccountingInvoiceItemsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncInvoiceItems {
    private final SDKConfiguration sdkConfiguration;
    private final InvoiceItems syncSDK;

    AsyncInvoiceItems(InvoiceItems syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public InvoiceItems sync() {
        return syncSDK;
    }


    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @return The async call builder
     */
    public AccountingInvoiceItemsAllRequestBuilder list() {
        return new AccountingInvoiceItemsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoiceItemsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsAllResponse> list(AccountingInvoiceItemsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoiceItemsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsAllResponse> list(AccountingInvoiceItemsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoiceItemsAllRequest, AccountingInvoiceItemsAllResponse> operation
              = new AccountingInvoiceItemsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @return The async call builder
     */
    public AccountingInvoiceItemsAddRequestBuilder create() {
        return new AccountingInvoiceItemsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoiceItemsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsAddResponse> create(AccountingInvoiceItemsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoiceItemsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsAddResponse> create(AccountingInvoiceItemsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoiceItemsAddRequest, AccountingInvoiceItemsAddResponse> operation
              = new AccountingInvoiceItemsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @return The async call builder
     */
    public AccountingInvoiceItemsOneRequestBuilder get() {
        return new AccountingInvoiceItemsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoiceItemsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsOneResponse> get(AccountingInvoiceItemsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoiceItemsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsOneResponse> get(AccountingInvoiceItemsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoiceItemsOneRequest, AccountingInvoiceItemsOneResponse> operation
              = new AccountingInvoiceItemsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @return The async call builder
     */
    public AccountingInvoiceItemsUpdateRequestBuilder update() {
        return new AccountingInvoiceItemsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoiceItemsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsUpdateResponse> update(AccountingInvoiceItemsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoiceItemsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsUpdateResponse> update(AccountingInvoiceItemsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoiceItemsUpdateRequest, AccountingInvoiceItemsUpdateResponse> operation
              = new AccountingInvoiceItemsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @return The async call builder
     */
    public AccountingInvoiceItemsDeleteRequestBuilder delete() {
        return new AccountingInvoiceItemsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoiceItemsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsDeleteResponse> delete(AccountingInvoiceItemsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoiceItemsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoiceItemsDeleteResponse> delete(AccountingInvoiceItemsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoiceItemsDeleteRequest, AccountingInvoiceItemsDeleteResponse> operation
              = new AccountingInvoiceItemsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
