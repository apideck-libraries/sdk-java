/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingInvoicesAddRequest;
import com.apideck.unify.models.operations.AccountingInvoicesAllRequest;
import com.apideck.unify.models.operations.AccountingInvoicesDeleteRequest;
import com.apideck.unify.models.operations.AccountingInvoicesOneRequest;
import com.apideck.unify.models.operations.AccountingInvoicesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingInvoicesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoicesAddResponse;
import com.apideck.unify.models.operations.async.AccountingInvoicesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoicesAllResponse;
import com.apideck.unify.models.operations.async.AccountingInvoicesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoicesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingInvoicesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoicesOneResponse;
import com.apideck.unify.models.operations.async.AccountingInvoicesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingInvoicesUpdateResponse;
import com.apideck.unify.operations.AccountingInvoicesAdd;
import com.apideck.unify.operations.AccountingInvoicesAll;
import com.apideck.unify.operations.AccountingInvoicesDelete;
import com.apideck.unify.operations.AccountingInvoicesOne;
import com.apideck.unify.operations.AccountingInvoicesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncInvoices {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Invoices syncSDK;

    AsyncInvoices(Invoices syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Invoices sync() {
        return syncSDK;
    }


    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @return The async call builder
     */
    public AccountingInvoicesAllRequestBuilder list() {
        return new AccountingInvoicesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoicesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesAllResponse> list(AccountingInvoicesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoicesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesAllResponse> list(AccountingInvoicesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoicesAllRequest, AccountingInvoicesAllResponse> operation
              = new AccountingInvoicesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @return The async call builder
     */
    public AccountingInvoicesAddRequestBuilder create() {
        return new AccountingInvoicesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoicesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesAddResponse> create(AccountingInvoicesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoicesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesAddResponse> create(AccountingInvoicesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoicesAddRequest, AccountingInvoicesAddResponse> operation
              = new AccountingInvoicesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @return The async call builder
     */
    public AccountingInvoicesOneRequestBuilder get() {
        return new AccountingInvoicesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoicesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesOneResponse> get(AccountingInvoicesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoicesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesOneResponse> get(AccountingInvoicesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoicesOneRequest, AccountingInvoicesOneResponse> operation
              = new AccountingInvoicesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @return The async call builder
     */
    public AccountingInvoicesUpdateRequestBuilder update() {
        return new AccountingInvoicesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoicesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesUpdateResponse> update(AccountingInvoicesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoicesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesUpdateResponse> update(AccountingInvoicesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoicesUpdateRequest, AccountingInvoicesUpdateResponse> operation
              = new AccountingInvoicesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @return The async call builder
     */
    public AccountingInvoicesDeleteRequestBuilder delete() {
        return new AccountingInvoicesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingInvoicesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesDeleteResponse> delete(AccountingInvoicesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingInvoicesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingInvoicesDeleteResponse> delete(AccountingInvoicesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingInvoicesDeleteRequest, AccountingInvoicesDeleteResponse> operation
              = new AccountingInvoicesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
