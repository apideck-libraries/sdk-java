/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingJournalEntriesAddRequest;
import com.apideck.unify.models.operations.AccountingJournalEntriesAllRequest;
import com.apideck.unify.models.operations.AccountingJournalEntriesDeleteRequest;
import com.apideck.unify.models.operations.AccountingJournalEntriesOneRequest;
import com.apideck.unify.models.operations.AccountingJournalEntriesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesAddResponse;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesAllResponse;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesOneResponse;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingJournalEntriesUpdateResponse;
import com.apideck.unify.operations.AccountingJournalEntriesAdd;
import com.apideck.unify.operations.AccountingJournalEntriesAll;
import com.apideck.unify.operations.AccountingJournalEntriesDelete;
import com.apideck.unify.operations.AccountingJournalEntriesOne;
import com.apideck.unify.operations.AccountingJournalEntriesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncJournalEntries {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final JournalEntries syncSDK;

    AsyncJournalEntries(JournalEntries syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public JournalEntries sync() {
        return syncSDK;
    }


    /**
     * List Journal Entries
     * 
     * <p>List Journal Entries
     * 
     * @return The async call builder
     */
    public AccountingJournalEntriesAllRequestBuilder list() {
        return new AccountingJournalEntriesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Journal Entries
     * 
     * <p>List Journal Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingJournalEntriesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesAllResponse> list(AccountingJournalEntriesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Journal Entries
     * 
     * <p>List Journal Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingJournalEntriesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesAllResponse> list(AccountingJournalEntriesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingJournalEntriesAllRequest, AccountingJournalEntriesAllResponse> operation
              = new AccountingJournalEntriesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Journal Entry
     * 
     * <p>Create Journal Entry
     * 
     * @return The async call builder
     */
    public AccountingJournalEntriesAddRequestBuilder create() {
        return new AccountingJournalEntriesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Journal Entry
     * 
     * <p>Create Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingJournalEntriesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesAddResponse> create(AccountingJournalEntriesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Journal Entry
     * 
     * <p>Create Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingJournalEntriesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesAddResponse> create(AccountingJournalEntriesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingJournalEntriesAddRequest, AccountingJournalEntriesAddResponse> operation
              = new AccountingJournalEntriesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Journal Entry
     * 
     * <p>Get Journal Entry
     * 
     * @return The async call builder
     */
    public AccountingJournalEntriesOneRequestBuilder get() {
        return new AccountingJournalEntriesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Journal Entry
     * 
     * <p>Get Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingJournalEntriesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesOneResponse> get(AccountingJournalEntriesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Journal Entry
     * 
     * <p>Get Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingJournalEntriesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesOneResponse> get(AccountingJournalEntriesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingJournalEntriesOneRequest, AccountingJournalEntriesOneResponse> operation
              = new AccountingJournalEntriesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Journal Entry
     * 
     * <p>Update Journal Entry
     * 
     * @return The async call builder
     */
    public AccountingJournalEntriesUpdateRequestBuilder update() {
        return new AccountingJournalEntriesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Journal Entry
     * 
     * <p>Update Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingJournalEntriesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesUpdateResponse> update(AccountingJournalEntriesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Journal Entry
     * 
     * <p>Update Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingJournalEntriesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesUpdateResponse> update(AccountingJournalEntriesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingJournalEntriesUpdateRequest, AccountingJournalEntriesUpdateResponse> operation
              = new AccountingJournalEntriesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Journal Entry
     * 
     * <p>Delete Journal Entry
     * 
     * @return The async call builder
     */
    public AccountingJournalEntriesDeleteRequestBuilder delete() {
        return new AccountingJournalEntriesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Journal Entry
     * 
     * <p>Delete Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingJournalEntriesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesDeleteResponse> delete(AccountingJournalEntriesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Journal Entry
     * 
     * <p>Delete Journal Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingJournalEntriesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingJournalEntriesDeleteResponse> delete(AccountingJournalEntriesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingJournalEntriesDeleteRequest, AccountingJournalEntriesDeleteResponse> operation
              = new AccountingJournalEntriesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
