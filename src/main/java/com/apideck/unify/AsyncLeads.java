/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmLeadsAddRequest;
import com.apideck.unify.models.operations.CrmLeadsAllRequest;
import com.apideck.unify.models.operations.CrmLeadsDeleteRequest;
import com.apideck.unify.models.operations.CrmLeadsOneRequest;
import com.apideck.unify.models.operations.CrmLeadsUpdateRequest;
import com.apideck.unify.models.operations.async.CrmLeadsAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmLeadsAddResponse;
import com.apideck.unify.models.operations.async.CrmLeadsAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmLeadsAllResponse;
import com.apideck.unify.models.operations.async.CrmLeadsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmLeadsDeleteResponse;
import com.apideck.unify.models.operations.async.CrmLeadsOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmLeadsOneResponse;
import com.apideck.unify.models.operations.async.CrmLeadsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmLeadsUpdateResponse;
import com.apideck.unify.operations.CrmLeadsAdd;
import com.apideck.unify.operations.CrmLeadsAll;
import com.apideck.unify.operations.CrmLeadsDelete;
import com.apideck.unify.operations.CrmLeadsOne;
import com.apideck.unify.operations.CrmLeadsUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLeads {
    private final SDKConfiguration sdkConfiguration;
    private final Leads syncSDK;

    AsyncLeads(Leads syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Leads sync() {
        return syncSDK;
    }


    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @return The async call builder
     */
    public CrmLeadsAllRequestBuilder list() {
        return new CrmLeadsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmLeadsAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsAllResponse> list(CrmLeadsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmLeadsAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsAllResponse> list(CrmLeadsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmLeadsAllRequest, CrmLeadsAllResponse> operation
              = new CrmLeadsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @return The async call builder
     */
    public CrmLeadsAddRequestBuilder create() {
        return new CrmLeadsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmLeadsAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsAddResponse> create(CrmLeadsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmLeadsAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsAddResponse> create(CrmLeadsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmLeadsAddRequest, CrmLeadsAddResponse> operation
              = new CrmLeadsAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @return The async call builder
     */
    public CrmLeadsOneRequestBuilder get() {
        return new CrmLeadsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmLeadsOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsOneResponse> get(CrmLeadsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmLeadsOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsOneResponse> get(CrmLeadsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmLeadsOneRequest, CrmLeadsOneResponse> operation
              = new CrmLeadsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @return The async call builder
     */
    public CrmLeadsUpdateRequestBuilder update() {
        return new CrmLeadsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmLeadsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsUpdateResponse> update(CrmLeadsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmLeadsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsUpdateResponse> update(CrmLeadsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmLeadsUpdateRequest, CrmLeadsUpdateResponse> operation
              = new CrmLeadsUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @return The async call builder
     */
    public CrmLeadsDeleteRequestBuilder delete() {
        return new CrmLeadsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmLeadsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsDeleteResponse> delete(CrmLeadsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmLeadsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmLeadsDeleteResponse> delete(CrmLeadsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmLeadsDeleteRequest, CrmLeadsDeleteResponse> operation
              = new CrmLeadsDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
