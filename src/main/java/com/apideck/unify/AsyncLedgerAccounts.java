/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingLedgerAccountsAddRequest;
import com.apideck.unify.models.operations.AccountingLedgerAccountsAllRequest;
import com.apideck.unify.models.operations.AccountingLedgerAccountsDeleteRequest;
import com.apideck.unify.models.operations.AccountingLedgerAccountsOneRequest;
import com.apideck.unify.models.operations.AccountingLedgerAccountsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsAddResponse;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsAllResponse;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsOneResponse;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLedgerAccountsUpdateResponse;
import com.apideck.unify.operations.AccountingLedgerAccountsAdd;
import com.apideck.unify.operations.AccountingLedgerAccountsAll;
import com.apideck.unify.operations.AccountingLedgerAccountsDelete;
import com.apideck.unify.operations.AccountingLedgerAccountsOne;
import com.apideck.unify.operations.AccountingLedgerAccountsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLedgerAccounts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final LedgerAccounts syncSDK;

    AsyncLedgerAccounts(LedgerAccounts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public LedgerAccounts sync() {
        return syncSDK;
    }


    /**
     * List Ledger Accounts
     * 
     * <p>List Ledger Accounts
     * 
     * @return The async call builder
     */
    public AccountingLedgerAccountsAllRequestBuilder list() {
        return new AccountingLedgerAccountsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Ledger Accounts
     * 
     * <p>List Ledger Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLedgerAccountsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsAllResponse> list(AccountingLedgerAccountsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Ledger Accounts
     * 
     * <p>List Ledger Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLedgerAccountsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsAllResponse> list(AccountingLedgerAccountsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLedgerAccountsAllRequest, AccountingLedgerAccountsAllResponse> operation
              = new AccountingLedgerAccountsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Ledger Account
     * 
     * <p>Create Ledger Account
     * 
     * @return The async call builder
     */
    public AccountingLedgerAccountsAddRequestBuilder create() {
        return new AccountingLedgerAccountsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Ledger Account
     * 
     * <p>Create Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLedgerAccountsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsAddResponse> create(AccountingLedgerAccountsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Ledger Account
     * 
     * <p>Create Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLedgerAccountsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsAddResponse> create(AccountingLedgerAccountsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLedgerAccountsAddRequest, AccountingLedgerAccountsAddResponse> operation
              = new AccountingLedgerAccountsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Ledger Account
     * 
     * <p>Get Ledger Account
     * 
     * @return The async call builder
     */
    public AccountingLedgerAccountsOneRequestBuilder get() {
        return new AccountingLedgerAccountsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Ledger Account
     * 
     * <p>Get Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLedgerAccountsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsOneResponse> get(AccountingLedgerAccountsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Ledger Account
     * 
     * <p>Get Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLedgerAccountsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsOneResponse> get(AccountingLedgerAccountsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLedgerAccountsOneRequest, AccountingLedgerAccountsOneResponse> operation
              = new AccountingLedgerAccountsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Ledger Account
     * 
     * <p>Update Ledger Account
     * 
     * @return The async call builder
     */
    public AccountingLedgerAccountsUpdateRequestBuilder update() {
        return new AccountingLedgerAccountsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Ledger Account
     * 
     * <p>Update Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLedgerAccountsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsUpdateResponse> update(AccountingLedgerAccountsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Ledger Account
     * 
     * <p>Update Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLedgerAccountsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsUpdateResponse> update(AccountingLedgerAccountsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLedgerAccountsUpdateRequest, AccountingLedgerAccountsUpdateResponse> operation
              = new AccountingLedgerAccountsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Ledger Account
     * 
     * <p>Delete Ledger Account
     * 
     * @return The async call builder
     */
    public AccountingLedgerAccountsDeleteRequestBuilder delete() {
        return new AccountingLedgerAccountsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Ledger Account
     * 
     * <p>Delete Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLedgerAccountsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsDeleteResponse> delete(AccountingLedgerAccountsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Ledger Account
     * 
     * <p>Delete Ledger Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLedgerAccountsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingLedgerAccountsDeleteResponse> delete(AccountingLedgerAccountsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLedgerAccountsDeleteRequest, AccountingLedgerAccountsDeleteResponse> operation
              = new AccountingLedgerAccountsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
