/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingLocationsAddRequest;
import com.apideck.unify.models.operations.AccountingLocationsAllRequest;
import com.apideck.unify.models.operations.AccountingLocationsDeleteRequest;
import com.apideck.unify.models.operations.AccountingLocationsOneRequest;
import com.apideck.unify.models.operations.AccountingLocationsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingLocationsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLocationsAddResponse;
import com.apideck.unify.models.operations.async.AccountingLocationsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLocationsAllResponse;
import com.apideck.unify.models.operations.async.AccountingLocationsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLocationsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingLocationsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLocationsOneResponse;
import com.apideck.unify.models.operations.async.AccountingLocationsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingLocationsUpdateResponse;
import com.apideck.unify.operations.AccountingLocationsAdd;
import com.apideck.unify.operations.AccountingLocationsAll;
import com.apideck.unify.operations.AccountingLocationsDelete;
import com.apideck.unify.operations.AccountingLocationsOne;
import com.apideck.unify.operations.AccountingLocationsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLocations {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Locations syncSDK;

    AsyncLocations(Locations syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Locations sync() {
        return syncSDK;
    }


    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @return The async call builder
     */
    public AccountingLocationsAllRequestBuilder list() {
        return new AccountingLocationsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLocationsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsAllResponse> list(AccountingLocationsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLocationsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsAllResponse> list(AccountingLocationsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLocationsAllRequest, AccountingLocationsAllResponse> operation
              = new AccountingLocationsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @return The async call builder
     */
    public AccountingLocationsAddRequestBuilder create() {
        return new AccountingLocationsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLocationsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsAddResponse> create(AccountingLocationsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLocationsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsAddResponse> create(AccountingLocationsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLocationsAddRequest, AccountingLocationsAddResponse> operation
              = new AccountingLocationsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @return The async call builder
     */
    public AccountingLocationsOneRequestBuilder get() {
        return new AccountingLocationsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLocationsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsOneResponse> get(AccountingLocationsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLocationsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsOneResponse> get(AccountingLocationsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLocationsOneRequest, AccountingLocationsOneResponse> operation
              = new AccountingLocationsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @return The async call builder
     */
    public AccountingLocationsUpdateRequestBuilder update() {
        return new AccountingLocationsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLocationsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsUpdateResponse> update(AccountingLocationsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLocationsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsUpdateResponse> update(AccountingLocationsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLocationsUpdateRequest, AccountingLocationsUpdateResponse> operation
              = new AccountingLocationsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @return The async call builder
     */
    public AccountingLocationsDeleteRequestBuilder delete() {
        return new AccountingLocationsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingLocationsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsDeleteResponse> delete(AccountingLocationsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingLocationsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingLocationsDeleteResponse> delete(AccountingLocationsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingLocationsDeleteRequest, AccountingLocationsDeleteResponse> operation
              = new AccountingLocationsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
