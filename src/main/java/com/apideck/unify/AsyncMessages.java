/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.SmsMessagesAddRequest;
import com.apideck.unify.models.operations.SmsMessagesAllRequest;
import com.apideck.unify.models.operations.SmsMessagesDeleteRequest;
import com.apideck.unify.models.operations.SmsMessagesOneRequest;
import com.apideck.unify.models.operations.SmsMessagesUpdateRequest;
import com.apideck.unify.models.operations.async.SmsMessagesAddRequestBuilder;
import com.apideck.unify.models.operations.async.SmsMessagesAddResponse;
import com.apideck.unify.models.operations.async.SmsMessagesAllRequestBuilder;
import com.apideck.unify.models.operations.async.SmsMessagesAllResponse;
import com.apideck.unify.models.operations.async.SmsMessagesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.SmsMessagesDeleteResponse;
import com.apideck.unify.models.operations.async.SmsMessagesOneRequestBuilder;
import com.apideck.unify.models.operations.async.SmsMessagesOneResponse;
import com.apideck.unify.models.operations.async.SmsMessagesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.SmsMessagesUpdateResponse;
import com.apideck.unify.operations.SmsMessagesAdd;
import com.apideck.unify.operations.SmsMessagesAll;
import com.apideck.unify.operations.SmsMessagesDelete;
import com.apideck.unify.operations.SmsMessagesOne;
import com.apideck.unify.operations.SmsMessagesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncMessages {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Messages syncSDK;

    AsyncMessages(Messages syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Messages sync() {
        return syncSDK;
    }


    /**
     * List Messages
     * 
     * <p>List Messages
     * 
     * @return The async call builder
     */
    public SmsMessagesAllRequestBuilder list() {
        return new SmsMessagesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Messages
     * 
     * <p>List Messages
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<SmsMessagesAllResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesAllResponse> list(SmsMessagesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Messages
     * 
     * <p>List Messages
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<SmsMessagesAllResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesAllResponse> list(SmsMessagesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<SmsMessagesAllRequest, SmsMessagesAllResponse> operation
              = new SmsMessagesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Message
     * 
     * <p>Create Message
     * 
     * @return The async call builder
     */
    public SmsMessagesAddRequestBuilder create() {
        return new SmsMessagesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Message
     * 
     * <p>Create Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<SmsMessagesAddResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesAddResponse> create(SmsMessagesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Message
     * 
     * <p>Create Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<SmsMessagesAddResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesAddResponse> create(SmsMessagesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<SmsMessagesAddRequest, SmsMessagesAddResponse> operation
              = new SmsMessagesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Message
     * 
     * <p>Get Message
     * 
     * @return The async call builder
     */
    public SmsMessagesOneRequestBuilder get() {
        return new SmsMessagesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Message
     * 
     * <p>Get Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<SmsMessagesOneResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesOneResponse> get(SmsMessagesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Message
     * 
     * <p>Get Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<SmsMessagesOneResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesOneResponse> get(SmsMessagesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<SmsMessagesOneRequest, SmsMessagesOneResponse> operation
              = new SmsMessagesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Message
     * 
     * <p>Update Message
     * 
     * @return The async call builder
     */
    public SmsMessagesUpdateRequestBuilder update() {
        return new SmsMessagesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Message
     * 
     * <p>Update Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<SmsMessagesUpdateResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesUpdateResponse> update(SmsMessagesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Message
     * 
     * <p>Update Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<SmsMessagesUpdateResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesUpdateResponse> update(SmsMessagesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<SmsMessagesUpdateRequest, SmsMessagesUpdateResponse> operation
              = new SmsMessagesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Message
     * 
     * <p>Delete Message
     * 
     * @return The async call builder
     */
    public SmsMessagesDeleteRequestBuilder delete() {
        return new SmsMessagesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Message
     * 
     * <p>Delete Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<SmsMessagesDeleteResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesDeleteResponse> delete(SmsMessagesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Message
     * 
     * <p>Delete Message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<SmsMessagesDeleteResponse>} - The async response
     */
    public CompletableFuture<SmsMessagesDeleteResponse> delete(SmsMessagesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<SmsMessagesDeleteRequest, SmsMessagesDeleteResponse> operation
              = new SmsMessagesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
