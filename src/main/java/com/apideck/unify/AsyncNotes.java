/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmNotesAddRequest;
import com.apideck.unify.models.operations.CrmNotesAllRequest;
import com.apideck.unify.models.operations.CrmNotesDeleteRequest;
import com.apideck.unify.models.operations.CrmNotesOneRequest;
import com.apideck.unify.models.operations.CrmNotesUpdateRequest;
import com.apideck.unify.models.operations.async.CrmNotesAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmNotesAddResponse;
import com.apideck.unify.models.operations.async.CrmNotesAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmNotesAllResponse;
import com.apideck.unify.models.operations.async.CrmNotesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmNotesDeleteResponse;
import com.apideck.unify.models.operations.async.CrmNotesOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmNotesOneResponse;
import com.apideck.unify.models.operations.async.CrmNotesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmNotesUpdateResponse;
import com.apideck.unify.operations.CrmNotesAdd;
import com.apideck.unify.operations.CrmNotesAll;
import com.apideck.unify.operations.CrmNotesDelete;
import com.apideck.unify.operations.CrmNotesOne;
import com.apideck.unify.operations.CrmNotesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncNotes {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Notes syncSDK;

    AsyncNotes(Notes syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Notes sync() {
        return syncSDK;
    }


    /**
     * List notes
     * 
     * <p>List notes
     * 
     * @return The async call builder
     */
    public CrmNotesAllRequestBuilder list() {
        return new CrmNotesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List notes
     * 
     * <p>List notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmNotesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesAllResponse> list(CrmNotesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List notes
     * 
     * <p>List notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmNotesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesAllResponse> list(CrmNotesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmNotesAllRequest, CrmNotesAllResponse> operation
              = new CrmNotesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create note
     * 
     * <p>Create note
     * 
     * @return The async call builder
     */
    public CrmNotesAddRequestBuilder create() {
        return new CrmNotesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create note
     * 
     * <p>Create note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmNotesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesAddResponse> create(CrmNotesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create note
     * 
     * <p>Create note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmNotesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesAddResponse> create(CrmNotesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmNotesAddRequest, CrmNotesAddResponse> operation
              = new CrmNotesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get note
     * 
     * <p>Get note
     * 
     * @return The async call builder
     */
    public CrmNotesOneRequestBuilder get() {
        return new CrmNotesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get note
     * 
     * <p>Get note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmNotesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesOneResponse> get(CrmNotesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get note
     * 
     * <p>Get note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmNotesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesOneResponse> get(CrmNotesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmNotesOneRequest, CrmNotesOneResponse> operation
              = new CrmNotesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update note
     * 
     * <p>Update note
     * 
     * @return The async call builder
     */
    public CrmNotesUpdateRequestBuilder update() {
        return new CrmNotesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update note
     * 
     * <p>Update note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmNotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesUpdateResponse> update(CrmNotesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update note
     * 
     * <p>Update note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmNotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesUpdateResponse> update(CrmNotesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmNotesUpdateRequest, CrmNotesUpdateResponse> operation
              = new CrmNotesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete note
     * 
     * <p>Delete note
     * 
     * @return The async call builder
     */
    public CrmNotesDeleteRequestBuilder delete() {
        return new CrmNotesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete note
     * 
     * <p>Delete note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmNotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesDeleteResponse> delete(CrmNotesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete note
     * 
     * <p>Delete note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmNotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmNotesDeleteResponse> delete(CrmNotesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmNotesDeleteRequest, CrmNotesDeleteResponse> operation
              = new CrmNotesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
