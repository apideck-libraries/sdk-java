/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmOpportunitiesAddRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesAllRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesDeleteRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesOneRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesUpdateRequest;
import com.apideck.unify.models.operations.async.CrmOpportunitiesAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmOpportunitiesAddResponse;
import com.apideck.unify.models.operations.async.CrmOpportunitiesAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmOpportunitiesAllResponse;
import com.apideck.unify.models.operations.async.CrmOpportunitiesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmOpportunitiesDeleteResponse;
import com.apideck.unify.models.operations.async.CrmOpportunitiesOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmOpportunitiesOneResponse;
import com.apideck.unify.models.operations.async.CrmOpportunitiesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmOpportunitiesUpdateResponse;
import com.apideck.unify.operations.CrmOpportunitiesAdd;
import com.apideck.unify.operations.CrmOpportunitiesAll;
import com.apideck.unify.operations.CrmOpportunitiesDelete;
import com.apideck.unify.operations.CrmOpportunitiesOne;
import com.apideck.unify.operations.CrmOpportunitiesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncOpportunities {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Opportunities syncSDK;

    AsyncOpportunities(Opportunities syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Opportunities sync() {
        return syncSDK;
    }


    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @return The async call builder
     */
    public CrmOpportunitiesAllRequestBuilder list() {
        return new CrmOpportunitiesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmOpportunitiesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesAllResponse> list(CrmOpportunitiesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmOpportunitiesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesAllResponse> list(CrmOpportunitiesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmOpportunitiesAllRequest, CrmOpportunitiesAllResponse> operation
              = new CrmOpportunitiesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @return The async call builder
     */
    public CrmOpportunitiesAddRequestBuilder create() {
        return new CrmOpportunitiesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmOpportunitiesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesAddResponse> create(CrmOpportunitiesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmOpportunitiesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesAddResponse> create(CrmOpportunitiesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmOpportunitiesAddRequest, CrmOpportunitiesAddResponse> operation
              = new CrmOpportunitiesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @return The async call builder
     */
    public CrmOpportunitiesOneRequestBuilder get() {
        return new CrmOpportunitiesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmOpportunitiesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesOneResponse> get(CrmOpportunitiesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmOpportunitiesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesOneResponse> get(CrmOpportunitiesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmOpportunitiesOneRequest, CrmOpportunitiesOneResponse> operation
              = new CrmOpportunitiesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @return The async call builder
     */
    public CrmOpportunitiesUpdateRequestBuilder update() {
        return new CrmOpportunitiesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmOpportunitiesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesUpdateResponse> update(CrmOpportunitiesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmOpportunitiesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesUpdateResponse> update(CrmOpportunitiesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmOpportunitiesUpdateRequest, CrmOpportunitiesUpdateResponse> operation
              = new CrmOpportunitiesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @return The async call builder
     */
    public CrmOpportunitiesDeleteRequestBuilder delete() {
        return new CrmOpportunitiesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmOpportunitiesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesDeleteResponse> delete(CrmOpportunitiesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmOpportunitiesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmOpportunitiesDeleteResponse> delete(CrmOpportunitiesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmOpportunitiesDeleteRequest, CrmOpportunitiesDeleteResponse> operation
              = new CrmOpportunitiesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
