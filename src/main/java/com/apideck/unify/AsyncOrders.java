/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.EcommerceOrdersAllRequest;
import com.apideck.unify.models.operations.EcommerceOrdersOneRequest;
import com.apideck.unify.models.operations.async.EcommerceOrdersAllRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceOrdersAllResponse;
import com.apideck.unify.models.operations.async.EcommerceOrdersOneRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceOrdersOneResponse;
import com.apideck.unify.operations.EcommerceOrdersAll;
import com.apideck.unify.operations.EcommerceOrdersOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncOrders {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Orders syncSDK;

    AsyncOrders(Orders syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Orders sync() {
        return syncSDK;
    }


    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @return The async call builder
     */
    public EcommerceOrdersAllRequestBuilder list() {
        return new EcommerceOrdersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<EcommerceOrdersAllResponse>} - The async response
     */
    public CompletableFuture<EcommerceOrdersAllResponse> list(EcommerceOrdersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<EcommerceOrdersAllResponse>} - The async response
     */
    public CompletableFuture<EcommerceOrdersAllResponse> list(EcommerceOrdersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceOrdersAllRequest, EcommerceOrdersAllResponse> operation
              = new EcommerceOrdersAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @return The async call builder
     */
    public EcommerceOrdersOneRequestBuilder get() {
        return new EcommerceOrdersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<EcommerceOrdersOneResponse>} - The async response
     */
    public CompletableFuture<EcommerceOrdersOneResponse> get(EcommerceOrdersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<EcommerceOrdersOneResponse>} - The async response
     */
    public CompletableFuture<EcommerceOrdersOneResponse> get(EcommerceOrdersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceOrdersOneRequest, EcommerceOrdersOneResponse> operation
              = new EcommerceOrdersOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
