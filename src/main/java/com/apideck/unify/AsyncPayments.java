/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingPaymentsAddRequest;
import com.apideck.unify.models.operations.AccountingPaymentsAllRequest;
import com.apideck.unify.models.operations.AccountingPaymentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingPaymentsOneRequest;
import com.apideck.unify.models.operations.AccountingPaymentsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingPaymentsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPaymentsAddResponse;
import com.apideck.unify.models.operations.async.AccountingPaymentsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPaymentsAllResponse;
import com.apideck.unify.models.operations.async.AccountingPaymentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPaymentsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingPaymentsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPaymentsOneResponse;
import com.apideck.unify.models.operations.async.AccountingPaymentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPaymentsUpdateResponse;
import com.apideck.unify.operations.AccountingPaymentsAdd;
import com.apideck.unify.operations.AccountingPaymentsAll;
import com.apideck.unify.operations.AccountingPaymentsDelete;
import com.apideck.unify.operations.AccountingPaymentsOne;
import com.apideck.unify.operations.AccountingPaymentsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncPayments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Payments syncSDK;

    AsyncPayments(Payments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Payments sync() {
        return syncSDK;
    }


    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @return The async call builder
     */
    public AccountingPaymentsAllRequestBuilder list() {
        return new AccountingPaymentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPaymentsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsAllResponse> list(AccountingPaymentsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPaymentsAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsAllResponse> list(AccountingPaymentsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPaymentsAllRequest, AccountingPaymentsAllResponse> operation
              = new AccountingPaymentsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @return The async call builder
     */
    public AccountingPaymentsAddRequestBuilder create() {
        return new AccountingPaymentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPaymentsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsAddResponse> create(AccountingPaymentsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPaymentsAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsAddResponse> create(AccountingPaymentsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPaymentsAddRequest, AccountingPaymentsAddResponse> operation
              = new AccountingPaymentsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @return The async call builder
     */
    public AccountingPaymentsOneRequestBuilder get() {
        return new AccountingPaymentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPaymentsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsOneResponse> get(AccountingPaymentsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPaymentsOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsOneResponse> get(AccountingPaymentsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPaymentsOneRequest, AccountingPaymentsOneResponse> operation
              = new AccountingPaymentsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @return The async call builder
     */
    public AccountingPaymentsUpdateRequestBuilder update() {
        return new AccountingPaymentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPaymentsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsUpdateResponse> update(AccountingPaymentsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPaymentsUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsUpdateResponse> update(AccountingPaymentsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPaymentsUpdateRequest, AccountingPaymentsUpdateResponse> operation
              = new AccountingPaymentsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @return The async call builder
     */
    public AccountingPaymentsDeleteRequestBuilder delete() {
        return new AccountingPaymentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPaymentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsDeleteResponse> delete(AccountingPaymentsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPaymentsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPaymentsDeleteResponse> delete(AccountingPaymentsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPaymentsDeleteRequest, AccountingPaymentsDeleteResponse> operation
              = new AccountingPaymentsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
