/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.HrisPayrollsAllRequest;
import com.apideck.unify.models.operations.HrisPayrollsOneRequest;
import com.apideck.unify.models.operations.async.HrisPayrollsAllRequestBuilder;
import com.apideck.unify.models.operations.async.HrisPayrollsAllResponse;
import com.apideck.unify.models.operations.async.HrisPayrollsOneRequestBuilder;
import com.apideck.unify.models.operations.async.HrisPayrollsOneResponse;
import com.apideck.unify.operations.HrisPayrollsAll;
import com.apideck.unify.operations.HrisPayrollsOne;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncPayrolls {
    private final SDKConfiguration sdkConfiguration;
    private final Payrolls syncSDK;

    AsyncPayrolls(Payrolls syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Payrolls sync() {
        return syncSDK;
    }


    /**
     * List Payroll
     * 
     * <p>List Payroll
     * 
     * @return The async call builder
     */
    public HrisPayrollsAllRequestBuilder list() {
        return new HrisPayrollsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Payroll
     * 
     * <p>List Payroll
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisPayrollsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisPayrollsAllResponse> list(HrisPayrollsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Payroll
     * 
     * <p>List Payroll
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisPayrollsAllResponse&gt; - The async response
     */
    public CompletableFuture<HrisPayrollsAllResponse> list(HrisPayrollsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisPayrollsAllRequest, HrisPayrollsAllResponse> operation
              = new HrisPayrollsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Payroll
     * 
     * <p>Get Payroll
     * 
     * @return The async call builder
     */
    public HrisPayrollsOneRequestBuilder get() {
        return new HrisPayrollsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Payroll
     * 
     * <p>Get Payroll
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;HrisPayrollsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisPayrollsOneResponse> get(HrisPayrollsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Payroll
     * 
     * <p>Get Payroll
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;HrisPayrollsOneResponse&gt; - The async response
     */
    public CompletableFuture<HrisPayrollsOneResponse> get(HrisPayrollsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisPayrollsOneRequest, HrisPayrollsOneResponse> operation
              = new HrisPayrollsOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
