/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmPipelinesAddRequest;
import com.apideck.unify.models.operations.CrmPipelinesAllRequest;
import com.apideck.unify.models.operations.CrmPipelinesDeleteRequest;
import com.apideck.unify.models.operations.CrmPipelinesOneRequest;
import com.apideck.unify.models.operations.CrmPipelinesUpdateRequest;
import com.apideck.unify.models.operations.async.CrmPipelinesAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmPipelinesAddResponse;
import com.apideck.unify.models.operations.async.CrmPipelinesAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmPipelinesAllResponse;
import com.apideck.unify.models.operations.async.CrmPipelinesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmPipelinesDeleteResponse;
import com.apideck.unify.models.operations.async.CrmPipelinesOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmPipelinesOneResponse;
import com.apideck.unify.models.operations.async.CrmPipelinesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmPipelinesUpdateResponse;
import com.apideck.unify.operations.CrmPipelinesAdd;
import com.apideck.unify.operations.CrmPipelinesAll;
import com.apideck.unify.operations.CrmPipelinesDelete;
import com.apideck.unify.operations.CrmPipelinesOne;
import com.apideck.unify.operations.CrmPipelinesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncPipelines {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Pipelines syncSDK;

    AsyncPipelines(Pipelines syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Pipelines sync() {
        return syncSDK;
    }


    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @return The async call builder
     */
    public CrmPipelinesAllRequestBuilder list() {
        return new CrmPipelinesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmPipelinesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesAllResponse> list(CrmPipelinesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmPipelinesAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesAllResponse> list(CrmPipelinesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmPipelinesAllRequest, CrmPipelinesAllResponse> operation
              = new CrmPipelinesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @return The async call builder
     */
    public CrmPipelinesAddRequestBuilder create() {
        return new CrmPipelinesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmPipelinesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesAddResponse> create(CrmPipelinesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmPipelinesAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesAddResponse> create(CrmPipelinesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmPipelinesAddRequest, CrmPipelinesAddResponse> operation
              = new CrmPipelinesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @return The async call builder
     */
    public CrmPipelinesOneRequestBuilder get() {
        return new CrmPipelinesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmPipelinesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesOneResponse> get(CrmPipelinesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmPipelinesOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesOneResponse> get(CrmPipelinesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmPipelinesOneRequest, CrmPipelinesOneResponse> operation
              = new CrmPipelinesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @return The async call builder
     */
    public CrmPipelinesUpdateRequestBuilder update() {
        return new CrmPipelinesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmPipelinesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesUpdateResponse> update(CrmPipelinesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmPipelinesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesUpdateResponse> update(CrmPipelinesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmPipelinesUpdateRequest, CrmPipelinesUpdateResponse> operation
              = new CrmPipelinesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @return The async call builder
     */
    public CrmPipelinesDeleteRequestBuilder delete() {
        return new CrmPipelinesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmPipelinesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesDeleteResponse> delete(CrmPipelinesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmPipelinesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmPipelinesDeleteResponse> delete(CrmPipelinesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmPipelinesDeleteRequest, CrmPipelinesDeleteResponse> operation
              = new CrmPipelinesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
