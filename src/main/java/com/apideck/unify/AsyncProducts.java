/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.EcommerceProductsAllRequest;
import com.apideck.unify.models.operations.EcommerceProductsOneRequest;
import com.apideck.unify.models.operations.async.EcommerceProductsAllRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceProductsAllResponse;
import com.apideck.unify.models.operations.async.EcommerceProductsOneRequestBuilder;
import com.apideck.unify.models.operations.async.EcommerceProductsOneResponse;
import com.apideck.unify.operations.EcommerceProductsAll;
import com.apideck.unify.operations.EcommerceProductsOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncProducts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Products syncSDK;

    AsyncProducts(Products syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Products sync() {
        return syncSDK;
    }


    /**
     * List Products
     * 
     * <p>List Products
     * 
     * @return The async call builder
     */
    public EcommerceProductsAllRequestBuilder list() {
        return new EcommerceProductsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Products
     * 
     * <p>List Products
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<EcommerceProductsAllResponse>} - The async response
     */
    public CompletableFuture<EcommerceProductsAllResponse> list(EcommerceProductsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Products
     * 
     * <p>List Products
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<EcommerceProductsAllResponse>} - The async response
     */
    public CompletableFuture<EcommerceProductsAllResponse> list(EcommerceProductsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceProductsAllRequest, EcommerceProductsAllResponse> operation
              = new EcommerceProductsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Product
     * 
     * <p>Get Product
     * 
     * @return The async call builder
     */
    public EcommerceProductsOneRequestBuilder get() {
        return new EcommerceProductsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Product
     * 
     * <p>Get Product
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<EcommerceProductsOneResponse>} - The async response
     */
    public CompletableFuture<EcommerceProductsOneResponse> get(EcommerceProductsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Product
     * 
     * <p>Get Product
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<EcommerceProductsOneResponse>} - The async response
     */
    public CompletableFuture<EcommerceProductsOneResponse> get(EcommerceProductsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<EcommerceProductsOneRequest, EcommerceProductsOneResponse> operation
              = new EcommerceProductsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
