/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingProjectsAddRequest;
import com.apideck.unify.models.operations.AccountingProjectsAllRequest;
import com.apideck.unify.models.operations.AccountingProjectsDeleteRequest;
import com.apideck.unify.models.operations.AccountingProjectsOneRequest;
import com.apideck.unify.models.operations.AccountingProjectsUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingProjectsAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingProjectsAddResponse;
import com.apideck.unify.models.operations.async.AccountingProjectsAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingProjectsAllResponse;
import com.apideck.unify.models.operations.async.AccountingProjectsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingProjectsDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingProjectsOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingProjectsOneResponse;
import com.apideck.unify.models.operations.async.AccountingProjectsUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingProjectsUpdateResponse;
import com.apideck.unify.operations.AccountingProjectsAdd;
import com.apideck.unify.operations.AccountingProjectsAll;
import com.apideck.unify.operations.AccountingProjectsDelete;
import com.apideck.unify.operations.AccountingProjectsOne;
import com.apideck.unify.operations.AccountingProjectsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncProjects {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Projects syncSDK;

    AsyncProjects(Projects syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Projects sync() {
        return syncSDK;
    }


    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @return The async call builder
     */
    public AccountingProjectsAllRequestBuilder list() {
        return new AccountingProjectsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingProjectsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsAllResponse> list(AccountingProjectsAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingProjectsAllResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsAllResponse> list(AccountingProjectsAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingProjectsAllRequest, AccountingProjectsAllResponse> operation
              = new AccountingProjectsAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @return The async call builder
     */
    public AccountingProjectsAddRequestBuilder create() {
        return new AccountingProjectsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingProjectsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsAddResponse> create(AccountingProjectsAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingProjectsAddResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsAddResponse> create(AccountingProjectsAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingProjectsAddRequest, AccountingProjectsAddResponse> operation
              = new AccountingProjectsAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @return The async call builder
     */
    public AccountingProjectsOneRequestBuilder get() {
        return new AccountingProjectsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingProjectsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsOneResponse> get(AccountingProjectsOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingProjectsOneResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsOneResponse> get(AccountingProjectsOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingProjectsOneRequest, AccountingProjectsOneResponse> operation
              = new AccountingProjectsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @return The async call builder
     */
    public AccountingProjectsUpdateRequestBuilder update() {
        return new AccountingProjectsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingProjectsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsUpdateResponse> update(AccountingProjectsUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingProjectsUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsUpdateResponse> update(AccountingProjectsUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingProjectsUpdateRequest, AccountingProjectsUpdateResponse> operation
              = new AccountingProjectsUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @return The async call builder
     */
    public AccountingProjectsDeleteRequestBuilder delete() {
        return new AccountingProjectsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingProjectsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsDeleteResponse> delete(AccountingProjectsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingProjectsDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingProjectsDeleteResponse> delete(AccountingProjectsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingProjectsDeleteRequest, AccountingProjectsDeleteResponse> operation
              = new AccountingProjectsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
