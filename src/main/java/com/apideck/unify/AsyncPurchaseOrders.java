/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingPurchaseOrdersAddRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAllRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersDeleteRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersOneRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersAddResponse;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersAllResponse;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersOneResponse;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingPurchaseOrdersUpdateResponse;
import com.apideck.unify.operations.AccountingPurchaseOrdersAdd;
import com.apideck.unify.operations.AccountingPurchaseOrdersAll;
import com.apideck.unify.operations.AccountingPurchaseOrdersDelete;
import com.apideck.unify.operations.AccountingPurchaseOrdersOne;
import com.apideck.unify.operations.AccountingPurchaseOrdersUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncPurchaseOrders {
    private final SDKConfiguration sdkConfiguration;
    private final PurchaseOrders syncSDK;

    AsyncPurchaseOrders(PurchaseOrders syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PurchaseOrders sync() {
        return syncSDK;
    }


    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @return The async call builder
     */
    public AccountingPurchaseOrdersAllRequestBuilder list() {
        return new AccountingPurchaseOrdersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPurchaseOrdersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersAllResponse> list(AccountingPurchaseOrdersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPurchaseOrdersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersAllResponse> list(AccountingPurchaseOrdersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPurchaseOrdersAllRequest, AccountingPurchaseOrdersAllResponse> operation
              = new AccountingPurchaseOrdersAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @return The async call builder
     */
    public AccountingPurchaseOrdersAddRequestBuilder create() {
        return new AccountingPurchaseOrdersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPurchaseOrdersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersAddResponse> create(AccountingPurchaseOrdersAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPurchaseOrdersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersAddResponse> create(AccountingPurchaseOrdersAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPurchaseOrdersAddRequest, AccountingPurchaseOrdersAddResponse> operation
              = new AccountingPurchaseOrdersAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @return The async call builder
     */
    public AccountingPurchaseOrdersOneRequestBuilder get() {
        return new AccountingPurchaseOrdersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPurchaseOrdersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersOneResponse> get(AccountingPurchaseOrdersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPurchaseOrdersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersOneResponse> get(AccountingPurchaseOrdersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPurchaseOrdersOneRequest, AccountingPurchaseOrdersOneResponse> operation
              = new AccountingPurchaseOrdersOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @return The async call builder
     */
    public AccountingPurchaseOrdersUpdateRequestBuilder update() {
        return new AccountingPurchaseOrdersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPurchaseOrdersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersUpdateResponse> update(AccountingPurchaseOrdersUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPurchaseOrdersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersUpdateResponse> update(AccountingPurchaseOrdersUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPurchaseOrdersUpdateRequest, AccountingPurchaseOrdersUpdateResponse> operation
              = new AccountingPurchaseOrdersUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @return The async call builder
     */
    public AccountingPurchaseOrdersDeleteRequestBuilder delete() {
        return new AccountingPurchaseOrdersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingPurchaseOrdersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersDeleteResponse> delete(AccountingPurchaseOrdersDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingPurchaseOrdersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingPurchaseOrdersDeleteResponse> delete(AccountingPurchaseOrdersDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingPurchaseOrdersDeleteRequest, AccountingPurchaseOrdersDeleteResponse> operation
              = new AccountingPurchaseOrdersDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
