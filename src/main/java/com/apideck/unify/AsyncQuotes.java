/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingQuotesAddRequest;
import com.apideck.unify.models.operations.AccountingQuotesAllRequest;
import com.apideck.unify.models.operations.AccountingQuotesDeleteRequest;
import com.apideck.unify.models.operations.AccountingQuotesOneRequest;
import com.apideck.unify.models.operations.AccountingQuotesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingQuotesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingQuotesAddResponse;
import com.apideck.unify.models.operations.async.AccountingQuotesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingQuotesAllResponse;
import com.apideck.unify.models.operations.async.AccountingQuotesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingQuotesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingQuotesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingQuotesOneResponse;
import com.apideck.unify.models.operations.async.AccountingQuotesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingQuotesUpdateResponse;
import com.apideck.unify.operations.AccountingQuotesAdd;
import com.apideck.unify.operations.AccountingQuotesAll;
import com.apideck.unify.operations.AccountingQuotesDelete;
import com.apideck.unify.operations.AccountingQuotesOne;
import com.apideck.unify.operations.AccountingQuotesUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncQuotes {
    private final SDKConfiguration sdkConfiguration;
    private final Quotes syncSDK;

    AsyncQuotes(Quotes syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Quotes sync() {
        return syncSDK;
    }


    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @return The async call builder
     */
    public AccountingQuotesAllRequestBuilder list() {
        return new AccountingQuotesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingQuotesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesAllResponse> list(AccountingQuotesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingQuotesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesAllResponse> list(AccountingQuotesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingQuotesAllRequest, AccountingQuotesAllResponse> operation
              = new AccountingQuotesAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @return The async call builder
     */
    public AccountingQuotesAddRequestBuilder create() {
        return new AccountingQuotesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingQuotesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesAddResponse> create(AccountingQuotesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingQuotesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesAddResponse> create(AccountingQuotesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingQuotesAddRequest, AccountingQuotesAddResponse> operation
              = new AccountingQuotesAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @return The async call builder
     */
    public AccountingQuotesOneRequestBuilder get() {
        return new AccountingQuotesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingQuotesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesOneResponse> get(AccountingQuotesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingQuotesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesOneResponse> get(AccountingQuotesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingQuotesOneRequest, AccountingQuotesOneResponse> operation
              = new AccountingQuotesOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @return The async call builder
     */
    public AccountingQuotesUpdateRequestBuilder update() {
        return new AccountingQuotesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingQuotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesUpdateResponse> update(AccountingQuotesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingQuotesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesUpdateResponse> update(AccountingQuotesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingQuotesUpdateRequest, AccountingQuotesUpdateResponse> operation
              = new AccountingQuotesUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @return The async call builder
     */
    public AccountingQuotesDeleteRequestBuilder delete() {
        return new AccountingQuotesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingQuotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesDeleteResponse> delete(AccountingQuotesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingQuotesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingQuotesDeleteResponse> delete(AccountingQuotesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingQuotesDeleteRequest, AccountingQuotesDeleteResponse> operation
              = new AccountingQuotesDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
