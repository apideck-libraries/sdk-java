/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageSharedLinksAddRequest;
import com.apideck.unify.models.operations.FileStorageSharedLinksAllRequest;
import com.apideck.unify.models.operations.FileStorageSharedLinksDeleteRequest;
import com.apideck.unify.models.operations.FileStorageSharedLinksOneRequest;
import com.apideck.unify.models.operations.FileStorageSharedLinksUpdateRequest;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksAddRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksAddResponse;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksAllRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksAllResponse;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksOneResponse;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageSharedLinksUpdateResponse;
import com.apideck.unify.operations.FileStorageSharedLinksAdd;
import com.apideck.unify.operations.FileStorageSharedLinksAll;
import com.apideck.unify.operations.FileStorageSharedLinksDelete;
import com.apideck.unify.operations.FileStorageSharedLinksOne;
import com.apideck.unify.operations.FileStorageSharedLinksUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncSharedLinks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final SharedLinks syncSDK;

    AsyncSharedLinks(SharedLinks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public SharedLinks sync() {
        return syncSDK;
    }


    /**
     * List SharedLinks
     * 
     * <p>List SharedLinks
     * 
     * @return The async call builder
     */
    public FileStorageSharedLinksAllRequestBuilder list() {
        return new FileStorageSharedLinksAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List SharedLinks
     * 
     * <p>List SharedLinks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<FileStorageSharedLinksAllResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksAllResponse> list(FileStorageSharedLinksAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List SharedLinks
     * 
     * <p>List SharedLinks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<FileStorageSharedLinksAllResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksAllResponse> list(FileStorageSharedLinksAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageSharedLinksAllRequest, FileStorageSharedLinksAllResponse> operation
              = new FileStorageSharedLinksAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Shared Link
     * 
     * <p>Create Shared Link
     * 
     * @return The async call builder
     */
    public FileStorageSharedLinksAddRequestBuilder create() {
        return new FileStorageSharedLinksAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Shared Link
     * 
     * <p>Create Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<FileStorageSharedLinksAddResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksAddResponse> create(FileStorageSharedLinksAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Shared Link
     * 
     * <p>Create Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<FileStorageSharedLinksAddResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksAddResponse> create(FileStorageSharedLinksAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageSharedLinksAddRequest, FileStorageSharedLinksAddResponse> operation
              = new FileStorageSharedLinksAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Shared Link
     * 
     * <p>Get Shared Link
     * 
     * @return The async call builder
     */
    public FileStorageSharedLinksOneRequestBuilder get() {
        return new FileStorageSharedLinksOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Shared Link
     * 
     * <p>Get Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<FileStorageSharedLinksOneResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksOneResponse> get(FileStorageSharedLinksOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Shared Link
     * 
     * <p>Get Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<FileStorageSharedLinksOneResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksOneResponse> get(FileStorageSharedLinksOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageSharedLinksOneRequest, FileStorageSharedLinksOneResponse> operation
              = new FileStorageSharedLinksOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Shared Link
     * 
     * <p>Update Shared Link
     * 
     * @return The async call builder
     */
    public FileStorageSharedLinksUpdateRequestBuilder update() {
        return new FileStorageSharedLinksUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Shared Link
     * 
     * <p>Update Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<FileStorageSharedLinksUpdateResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksUpdateResponse> update(FileStorageSharedLinksUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Shared Link
     * 
     * <p>Update Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<FileStorageSharedLinksUpdateResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksUpdateResponse> update(FileStorageSharedLinksUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageSharedLinksUpdateRequest, FileStorageSharedLinksUpdateResponse> operation
              = new FileStorageSharedLinksUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Shared Link
     * 
     * <p>Delete Shared Link
     * 
     * @return The async call builder
     */
    public FileStorageSharedLinksDeleteRequestBuilder delete() {
        return new FileStorageSharedLinksDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Shared Link
     * 
     * <p>Delete Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<FileStorageSharedLinksDeleteResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksDeleteResponse> delete(FileStorageSharedLinksDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Shared Link
     * 
     * <p>Delete Shared Link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<FileStorageSharedLinksDeleteResponse>} - The async response
     */
    public CompletableFuture<FileStorageSharedLinksDeleteResponse> delete(FileStorageSharedLinksDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageSharedLinksDeleteRequest, FileStorageSharedLinksDeleteResponse> operation
              = new FileStorageSharedLinksDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
