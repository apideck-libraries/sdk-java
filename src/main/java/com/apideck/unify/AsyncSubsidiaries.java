/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingSubsidiariesAddRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesAllRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesDeleteRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesOneRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesAddResponse;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesAllResponse;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesOneResponse;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSubsidiariesUpdateResponse;
import com.apideck.unify.operations.AccountingSubsidiariesAdd;
import com.apideck.unify.operations.AccountingSubsidiariesAll;
import com.apideck.unify.operations.AccountingSubsidiariesDelete;
import com.apideck.unify.operations.AccountingSubsidiariesOne;
import com.apideck.unify.operations.AccountingSubsidiariesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncSubsidiaries {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Subsidiaries syncSDK;

    AsyncSubsidiaries(Subsidiaries syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Subsidiaries sync() {
        return syncSDK;
    }


    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @return The async call builder
     */
    public AccountingSubsidiariesAllRequestBuilder list() {
        return new AccountingSubsidiariesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSubsidiariesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesAllResponse> list(AccountingSubsidiariesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSubsidiariesAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesAllResponse> list(AccountingSubsidiariesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSubsidiariesAllRequest, AccountingSubsidiariesAllResponse> operation
              = new AccountingSubsidiariesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @return The async call builder
     */
    public AccountingSubsidiariesAddRequestBuilder create() {
        return new AccountingSubsidiariesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSubsidiariesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesAddResponse> create(AccountingSubsidiariesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSubsidiariesAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesAddResponse> create(AccountingSubsidiariesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSubsidiariesAddRequest, AccountingSubsidiariesAddResponse> operation
              = new AccountingSubsidiariesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @return The async call builder
     */
    public AccountingSubsidiariesOneRequestBuilder get() {
        return new AccountingSubsidiariesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSubsidiariesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesOneResponse> get(AccountingSubsidiariesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSubsidiariesOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesOneResponse> get(AccountingSubsidiariesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSubsidiariesOneRequest, AccountingSubsidiariesOneResponse> operation
              = new AccountingSubsidiariesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @return The async call builder
     */
    public AccountingSubsidiariesUpdateRequestBuilder update() {
        return new AccountingSubsidiariesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSubsidiariesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesUpdateResponse> update(AccountingSubsidiariesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSubsidiariesUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesUpdateResponse> update(AccountingSubsidiariesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSubsidiariesUpdateRequest, AccountingSubsidiariesUpdateResponse> operation
              = new AccountingSubsidiariesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @return The async call builder
     */
    public AccountingSubsidiariesDeleteRequestBuilder delete() {
        return new AccountingSubsidiariesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSubsidiariesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesDeleteResponse> delete(AccountingSubsidiariesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSubsidiariesDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSubsidiariesDeleteResponse> delete(AccountingSubsidiariesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSubsidiariesDeleteRequest, AccountingSubsidiariesDeleteResponse> operation
              = new AccountingSubsidiariesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
