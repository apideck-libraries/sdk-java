/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingSuppliersAddRequest;
import com.apideck.unify.models.operations.AccountingSuppliersAllRequest;
import com.apideck.unify.models.operations.AccountingSuppliersDeleteRequest;
import com.apideck.unify.models.operations.AccountingSuppliersOneRequest;
import com.apideck.unify.models.operations.AccountingSuppliersUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingSuppliersAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSuppliersAddResponse;
import com.apideck.unify.models.operations.async.AccountingSuppliersAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSuppliersAllResponse;
import com.apideck.unify.models.operations.async.AccountingSuppliersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSuppliersDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingSuppliersOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSuppliersOneResponse;
import com.apideck.unify.models.operations.async.AccountingSuppliersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingSuppliersUpdateResponse;
import com.apideck.unify.operations.AccountingSuppliersAdd;
import com.apideck.unify.operations.AccountingSuppliersAll;
import com.apideck.unify.operations.AccountingSuppliersDelete;
import com.apideck.unify.operations.AccountingSuppliersOne;
import com.apideck.unify.operations.AccountingSuppliersUpdate;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncSuppliers {
    private final SDKConfiguration sdkConfiguration;
    private final Suppliers syncSDK;

    AsyncSuppliers(Suppliers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Suppliers sync() {
        return syncSDK;
    }


    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @return The async call builder
     */
    public AccountingSuppliersAllRequestBuilder list() {
        return new AccountingSuppliersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSuppliersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersAllResponse> list(AccountingSuppliersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSuppliersAllResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersAllResponse> list(AccountingSuppliersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSuppliersAllRequest, AccountingSuppliersAllResponse> operation
              = new AccountingSuppliersAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @return The async call builder
     */
    public AccountingSuppliersAddRequestBuilder create() {
        return new AccountingSuppliersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSuppliersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersAddResponse> create(AccountingSuppliersAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSuppliersAddResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersAddResponse> create(AccountingSuppliersAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSuppliersAddRequest, AccountingSuppliersAddResponse> operation
              = new AccountingSuppliersAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @return The async call builder
     */
    public AccountingSuppliersOneRequestBuilder get() {
        return new AccountingSuppliersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSuppliersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersOneResponse> get(AccountingSuppliersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSuppliersOneResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersOneResponse> get(AccountingSuppliersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSuppliersOneRequest, AccountingSuppliersOneResponse> operation
              = new AccountingSuppliersOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @return The async call builder
     */
    public AccountingSuppliersUpdateRequestBuilder update() {
        return new AccountingSuppliersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSuppliersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersUpdateResponse> update(AccountingSuppliersUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSuppliersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersUpdateResponse> update(AccountingSuppliersUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSuppliersUpdateRequest, AccountingSuppliersUpdateResponse> operation
              = new AccountingSuppliersUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @return The async call builder
     */
    public AccountingSuppliersDeleteRequestBuilder delete() {
        return new AccountingSuppliersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingSuppliersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersDeleteResponse> delete(AccountingSuppliersDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingSuppliersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<AccountingSuppliersDeleteResponse> delete(AccountingSuppliersDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingSuppliersDeleteRequest, AccountingSuppliersDeleteResponse> operation
              = new AccountingSuppliersDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
