/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingTaxRatesAddRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesAllRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesDeleteRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesOneRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingTaxRatesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTaxRatesAddResponse;
import com.apideck.unify.models.operations.async.AccountingTaxRatesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTaxRatesAllResponse;
import com.apideck.unify.models.operations.async.AccountingTaxRatesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTaxRatesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingTaxRatesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTaxRatesOneResponse;
import com.apideck.unify.models.operations.async.AccountingTaxRatesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTaxRatesUpdateResponse;
import com.apideck.unify.operations.AccountingTaxRatesAdd;
import com.apideck.unify.operations.AccountingTaxRatesAll;
import com.apideck.unify.operations.AccountingTaxRatesDelete;
import com.apideck.unify.operations.AccountingTaxRatesOne;
import com.apideck.unify.operations.AccountingTaxRatesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncTaxRates {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final TaxRates syncSDK;

    AsyncTaxRates(TaxRates syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public TaxRates sync() {
        return syncSDK;
    }


    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Connectors Affected: Quickbooks
     * 
     * @return The async call builder
     */
    public AccountingTaxRatesAllRequestBuilder list() {
        return new AccountingTaxRatesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTaxRatesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesAllResponse> list(AccountingTaxRatesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTaxRatesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesAllResponse> list(AccountingTaxRatesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTaxRatesAllRequest, AccountingTaxRatesAllResponse> operation
              = new AccountingTaxRatesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @return The async call builder
     */
    public AccountingTaxRatesAddRequestBuilder create() {
        return new AccountingTaxRatesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTaxRatesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesAddResponse> create(AccountingTaxRatesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTaxRatesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesAddResponse> create(AccountingTaxRatesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTaxRatesAddRequest, AccountingTaxRatesAddResponse> operation
              = new AccountingTaxRatesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Support will soon be added to return the actual rate/percentage by doing additional calls in the
     * background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @return The async call builder
     */
    public AccountingTaxRatesOneRequestBuilder get() {
        return new AccountingTaxRatesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Support will soon be added to return the actual rate/percentage by doing additional calls in the
     * background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTaxRatesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesOneResponse> get(AccountingTaxRatesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only
     * the tax code or reference is returned.
     * 
     * <p>Support will soon be added to return the actual rate/percentage by doing additional calls in the
     * background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTaxRatesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesOneResponse> get(AccountingTaxRatesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTaxRatesOneRequest, AccountingTaxRatesOneResponse> operation
              = new AccountingTaxRatesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @return The async call builder
     */
    public AccountingTaxRatesUpdateRequestBuilder update() {
        return new AccountingTaxRatesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTaxRatesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesUpdateResponse> update(AccountingTaxRatesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTaxRatesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesUpdateResponse> update(AccountingTaxRatesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTaxRatesUpdateRequest, AccountingTaxRatesUpdateResponse> operation
              = new AccountingTaxRatesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @return The async call builder
     */
    public AccountingTaxRatesDeleteRequestBuilder delete() {
        return new AccountingTaxRatesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTaxRatesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesDeleteResponse> delete(AccountingTaxRatesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTaxRatesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingTaxRatesDeleteResponse> delete(AccountingTaxRatesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTaxRatesDeleteRequest, AccountingTaxRatesDeleteResponse> operation
              = new AccountingTaxRatesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
