/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.AccountingTrackingCategoriesAddRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAllRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesDeleteRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesOneRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesUpdateRequest;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesAddRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesAddResponse;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesAllRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesAllResponse;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesDeleteResponse;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesOneRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesOneResponse;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.AccountingTrackingCategoriesUpdateResponse;
import com.apideck.unify.operations.AccountingTrackingCategoriesAdd;
import com.apideck.unify.operations.AccountingTrackingCategoriesAll;
import com.apideck.unify.operations.AccountingTrackingCategoriesDelete;
import com.apideck.unify.operations.AccountingTrackingCategoriesOne;
import com.apideck.unify.operations.AccountingTrackingCategoriesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncTrackingCategories {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final TrackingCategories syncSDK;

    AsyncTrackingCategories(TrackingCategories syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public TrackingCategories sync() {
        return syncSDK;
    }


    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @return The async call builder
     */
    public AccountingTrackingCategoriesAllRequestBuilder list() {
        return new AccountingTrackingCategoriesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTrackingCategoriesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesAllResponse> list(AccountingTrackingCategoriesAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTrackingCategoriesAllResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesAllResponse> list(AccountingTrackingCategoriesAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTrackingCategoriesAllRequest, AccountingTrackingCategoriesAllResponse> operation
              = new AccountingTrackingCategoriesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @return The async call builder
     */
    public AccountingTrackingCategoriesAddRequestBuilder create() {
        return new AccountingTrackingCategoriesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTrackingCategoriesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesAddResponse> create(AccountingTrackingCategoriesAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTrackingCategoriesAddResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesAddResponse> create(AccountingTrackingCategoriesAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTrackingCategoriesAddRequest, AccountingTrackingCategoriesAddResponse> operation
              = new AccountingTrackingCategoriesAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @return The async call builder
     */
    public AccountingTrackingCategoriesOneRequestBuilder get() {
        return new AccountingTrackingCategoriesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTrackingCategoriesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesOneResponse> get(AccountingTrackingCategoriesOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTrackingCategoriesOneResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesOneResponse> get(AccountingTrackingCategoriesOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTrackingCategoriesOneRequest, AccountingTrackingCategoriesOneResponse> operation
              = new AccountingTrackingCategoriesOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @return The async call builder
     */
    public AccountingTrackingCategoriesUpdateRequestBuilder update() {
        return new AccountingTrackingCategoriesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTrackingCategoriesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesUpdateResponse> update(AccountingTrackingCategoriesUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTrackingCategoriesUpdateResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesUpdateResponse> update(AccountingTrackingCategoriesUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTrackingCategoriesUpdateRequest, AccountingTrackingCategoriesUpdateResponse> operation
              = new AccountingTrackingCategoriesUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @return The async call builder
     */
    public AccountingTrackingCategoriesDeleteRequestBuilder delete() {
        return new AccountingTrackingCategoriesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AccountingTrackingCategoriesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesDeleteResponse> delete(AccountingTrackingCategoriesDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AccountingTrackingCategoriesDeleteResponse>} - The async response
     */
    public CompletableFuture<AccountingTrackingCategoriesDeleteResponse> delete(AccountingTrackingCategoriesDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingTrackingCategoriesDeleteRequest, AccountingTrackingCategoriesDeleteResponse> operation
              = new AccountingTrackingCategoriesDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
