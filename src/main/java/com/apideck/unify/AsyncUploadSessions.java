/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.FileStorageUploadSessionsAddRequest;
import com.apideck.unify.models.operations.FileStorageUploadSessionsDeleteRequest;
import com.apideck.unify.models.operations.FileStorageUploadSessionsFinishRequest;
import com.apideck.unify.models.operations.FileStorageUploadSessionsOneRequest;
import com.apideck.unify.models.operations.FileStorageUploadSessionsUploadRequest;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsAddRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsAddResponse;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsDeleteResponse;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsFinishRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsFinishResponse;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsOneRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsOneResponse;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsUploadRequestBuilder;
import com.apideck.unify.models.operations.async.FileStorageUploadSessionsUploadResponse;
import com.apideck.unify.operations.FileStorageUploadSessionsAdd;
import com.apideck.unify.operations.FileStorageUploadSessionsDelete;
import com.apideck.unify.operations.FileStorageUploadSessionsFinish;
import com.apideck.unify.operations.FileStorageUploadSessionsOne;
import com.apideck.unify.operations.FileStorageUploadSessionsUpload;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncUploadSessions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final UploadSessions syncSDK;

    AsyncUploadSessions(UploadSessions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public UploadSessions sync() {
        return syncSDK;
    }


    /**
     * Start Upload Session
     * 
     * <p>Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @return The async call builder
     */
    public FileStorageUploadSessionsAddRequestBuilder create() {
        return new FileStorageUploadSessionsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Start Upload Session
     * 
     * <p>Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageUploadSessionsAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsAddResponse> create(FileStorageUploadSessionsAddRequest request) {
        return create(request, Optional.empty(), Optional.empty());
    }

    /**
     * Start Upload Session
     * 
     * <p>Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageUploadSessionsAddResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsAddResponse> create(
            FileStorageUploadSessionsAddRequest request, Optional<String> serverURL,
            Optional<Options> options) {
        AsyncRequestOperation<FileStorageUploadSessionsAddRequest, FileStorageUploadSessionsAddResponse> operation
              = new FileStorageUploadSessionsAdd.Async(
                                    sdkConfiguration, serverURL, options,
                                    sdkConfiguration.retryScheduler(), _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Upload Session
     * 
     * <p>Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @return The async call builder
     */
    public FileStorageUploadSessionsOneRequestBuilder get() {
        return new FileStorageUploadSessionsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Upload Session
     * 
     * <p>Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageUploadSessionsOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsOneResponse> get(FileStorageUploadSessionsOneRequest request) {
        return get(request, Optional.empty(), Optional.empty());
    }

    /**
     * Get Upload Session
     * 
     * <p>Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageUploadSessionsOneResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsOneResponse> get(
            FileStorageUploadSessionsOneRequest request, Optional<String> serverURL,
            Optional<Options> options) {
        AsyncRequestOperation<FileStorageUploadSessionsOneRequest, FileStorageUploadSessionsOneResponse> operation
              = new FileStorageUploadSessionsOne.Async(
                                    sdkConfiguration, serverURL, options,
                                    sdkConfiguration.retryScheduler(), _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Upload part of File to Upload Session
     * 
     * <p>Upload part of File to Upload Session (max 100MB). Get `part_size` from [Get Upload Session](#operation/uploadSessionsOne) first. Every File part (except the last one) uploaded to this endpoint should have Content-Length equal to `part_size`. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @return The async call builder
     */
    public FileStorageUploadSessionsUploadRequestBuilder upload() {
        return new FileStorageUploadSessionsUploadRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload part of File to Upload Session
     * 
     * <p>Upload part of File to Upload Session (max 100MB). Get `part_size` from [Get Upload Session](#operation/uploadSessionsOne) first. Every File part (except the last one) uploaded to this endpoint should have Content-Length equal to `part_size`. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageUploadSessionsUploadResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsUploadResponse> upload(FileStorageUploadSessionsUploadRequest request) {
        return upload(request, Optional.empty(), Optional.empty());
    }

    /**
     * Upload part of File to Upload Session
     * 
     * <p>Upload part of File to Upload Session (max 100MB). Get `part_size` from [Get Upload Session](#operation/uploadSessionsOne) first. Every File part (except the last one) uploaded to this endpoint should have Content-Length equal to `part_size`. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageUploadSessionsUploadResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsUploadResponse> upload(
            FileStorageUploadSessionsUploadRequest request, Optional<String> serverURL,
            Optional<Options> options) {
        AsyncRequestOperation<FileStorageUploadSessionsUploadRequest, FileStorageUploadSessionsUploadResponse> operation
              = new FileStorageUploadSessionsUpload.Async(
                                    sdkConfiguration, serverURL, options,
                                    sdkConfiguration.retryScheduler(), _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Abort Upload Session
     * 
     * <p>Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @return The async call builder
     */
    public FileStorageUploadSessionsDeleteRequestBuilder delete() {
        return new FileStorageUploadSessionsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Abort Upload Session
     * 
     * <p>Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageUploadSessionsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsDeleteResponse> delete(FileStorageUploadSessionsDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Abort Upload Session
     * 
     * <p>Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageUploadSessionsDeleteResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsDeleteResponse> delete(FileStorageUploadSessionsDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<FileStorageUploadSessionsDeleteRequest, FileStorageUploadSessionsDeleteResponse> operation
              = new FileStorageUploadSessionsDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Finish Upload Session
     * 
     * <p>Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @return The async call builder
     */
    public FileStorageUploadSessionsFinishRequestBuilder finish() {
        return new FileStorageUploadSessionsFinishRequestBuilder(sdkConfiguration);
    }

    /**
     * Finish Upload Session
     * 
     * <p>Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;FileStorageUploadSessionsFinishResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsFinishResponse> finish(FileStorageUploadSessionsFinishRequest request) {
        return finish(request, Optional.empty(), Optional.empty());
    }

    /**
     * Finish Upload Session
     * 
     * <p>Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return CompletableFuture&lt;FileStorageUploadSessionsFinishResponse&gt; - The async response
     */
    public CompletableFuture<FileStorageUploadSessionsFinishResponse> finish(
            FileStorageUploadSessionsFinishRequest request, Optional<String> serverURL,
            Optional<Options> options) {
        AsyncRequestOperation<FileStorageUploadSessionsFinishRequest, FileStorageUploadSessionsFinishResponse> operation
              = new FileStorageUploadSessionsFinish.Async(
                                    sdkConfiguration, serverURL, options,
                                    sdkConfiguration.retryScheduler(), _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
