/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.CrmUsersAddRequest;
import com.apideck.unify.models.operations.CrmUsersAllRequest;
import com.apideck.unify.models.operations.CrmUsersDeleteRequest;
import com.apideck.unify.models.operations.CrmUsersOneRequest;
import com.apideck.unify.models.operations.CrmUsersUpdateRequest;
import com.apideck.unify.models.operations.async.CrmUsersAddRequestBuilder;
import com.apideck.unify.models.operations.async.CrmUsersAddResponse;
import com.apideck.unify.models.operations.async.CrmUsersAllRequestBuilder;
import com.apideck.unify.models.operations.async.CrmUsersAllResponse;
import com.apideck.unify.models.operations.async.CrmUsersDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.CrmUsersDeleteResponse;
import com.apideck.unify.models.operations.async.CrmUsersOneRequestBuilder;
import com.apideck.unify.models.operations.async.CrmUsersOneResponse;
import com.apideck.unify.models.operations.async.CrmUsersUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.CrmUsersUpdateResponse;
import com.apideck.unify.operations.CrmUsersAdd;
import com.apideck.unify.operations.CrmUsersAll;
import com.apideck.unify.operations.CrmUsersDelete;
import com.apideck.unify.operations.CrmUsersOne;
import com.apideck.unify.operations.CrmUsersUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncUsers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Users syncSDK;

    AsyncUsers(Users syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Users sync() {
        return syncSDK;
    }


    /**
     * List users
     * 
     * <p>List users
     * 
     * @return The async call builder
     */
    public CrmUsersAllRequestBuilder list() {
        return new CrmUsersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmUsersAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersAllResponse> list(CrmUsersAllRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmUsersAllResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersAllResponse> list(CrmUsersAllRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmUsersAllRequest, CrmUsersAllResponse> operation
              = new CrmUsersAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @return The async call builder
     */
    public CrmUsersAddRequestBuilder create() {
        return new CrmUsersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmUsersAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersAddResponse> create(CrmUsersAddRequest request) {
        return create(request, Optional.empty());
    }

    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmUsersAddResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersAddResponse> create(CrmUsersAddRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmUsersAddRequest, CrmUsersAddResponse> operation
              = new CrmUsersAdd.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @return The async call builder
     */
    public CrmUsersOneRequestBuilder get() {
        return new CrmUsersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmUsersOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersOneResponse> get(CrmUsersOneRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmUsersOneResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersOneResponse> get(CrmUsersOneRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmUsersOneRequest, CrmUsersOneResponse> operation
              = new CrmUsersOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @return The async call builder
     */
    public CrmUsersUpdateRequestBuilder update() {
        return new CrmUsersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmUsersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersUpdateResponse> update(CrmUsersUpdateRequest request) {
        return update(request, Optional.empty());
    }

    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmUsersUpdateResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersUpdateResponse> update(CrmUsersUpdateRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmUsersUpdateRequest, CrmUsersUpdateResponse> operation
              = new CrmUsersUpdate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @return The async call builder
     */
    public CrmUsersDeleteRequestBuilder delete() {
        return new CrmUsersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CrmUsersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersDeleteResponse> delete(CrmUsersDeleteRequest request) {
        return delete(request, Optional.empty());
    }

    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CrmUsersDeleteResponse&gt; - The async response
     */
    public CompletableFuture<CrmUsersDeleteResponse> delete(CrmUsersDeleteRequest request, Optional<Options> options) {
        AsyncRequestOperation<CrmUsersDeleteRequest, CrmUsersDeleteResponse> operation
              = new CrmUsersDelete.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
