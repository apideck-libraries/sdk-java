/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.operations.VaultValidateConnectionStateRequest;
import com.apideck.unify.models.operations.async.VaultValidateConnectionStateRequestBuilder;
import com.apideck.unify.models.operations.async.VaultValidateConnectionStateResponse;
import com.apideck.unify.operations.VaultValidateConnectionState;
import com.apideck.unify.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncValidateConnection {
    private final SDKConfiguration sdkConfiguration;
    private final ValidateConnection syncSDK;

    AsyncValidateConnection(ValidateConnection syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ValidateConnection sync() {
        return syncSDK;
    }


    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks based on the connection auth type. For basic and apiKey auth types, the presence of required fields is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token regardless of its expiry.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the validation of connection state.
     *   - If a refresh token flow was performed and successful, the new access token will then be used for subsequent API requests.
     * 
     * @return The async call builder
     */
    public VaultValidateConnectionStateRequestBuilder state() {
        return new VaultValidateConnectionStateRequestBuilder(sdkConfiguration);
    }

    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks based on the connection auth type. For basic and apiKey auth types, the presence of required fields is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token regardless of its expiry.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the validation of connection state.
     *   - If a refresh token flow was performed and successful, the new access token will then be used for subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;VaultValidateConnectionStateResponse&gt; - The async response
     */
    public CompletableFuture<VaultValidateConnectionStateResponse> state(VaultValidateConnectionStateRequest request) {
        return state(request, Optional.empty());
    }

    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks based on the connection auth type. For basic and apiKey auth types, the presence of required fields is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token regardless of its expiry.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the validation of connection state.
     *   - If a refresh token flow was performed and successful, the new access token will then be used for subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;VaultValidateConnectionStateResponse&gt; - The async response
     */
    public CompletableFuture<VaultValidateConnectionStateResponse> state(VaultValidateConnectionStateRequest request, Optional<Options> options) {
        AsyncRequestOperation<VaultValidateConnectionStateRequest, VaultValidateConnectionStateResponse> operation
              = new VaultValidateConnectionState.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
