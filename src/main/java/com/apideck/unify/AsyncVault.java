/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import com.apideck.unify.utils.Headers;


public class AsyncVault {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncConsumers consumers;
    private final AsyncConsumerRequestCounts consumerRequestCounts;
    private final AsyncConnections connections;
    private final AsyncValidateConnection validateConnection;
    private final AsyncConnectionConsents connectionConsents;
    private final AsyncConnectionConsent connectionConsent;
    private final AsyncCreateCallback createCallback;
    private final AsyncConnectionSettings connectionSettings;
    private final AsyncCustomFields customFields;
    private final AsyncConnectionCustomMappings connectionCustomMappings;
    private final AsyncCustomMappings customMappings;
    private final AsyncSessions sessions;
    private final AsyncLogs logs;
    private final Vault syncSDK;

    AsyncVault(Vault syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.consumers = new AsyncConsumers(syncSDK.consumers(), this.sdkConfiguration);
        this.consumerRequestCounts = new AsyncConsumerRequestCounts(syncSDK.consumerRequestCounts(), this.sdkConfiguration);
        this.connections = new AsyncConnections(syncSDK.connections(), this.sdkConfiguration);
        this.validateConnection = new AsyncValidateConnection(syncSDK.validateConnection(), this.sdkConfiguration);
        this.connectionConsents = new AsyncConnectionConsents(syncSDK.connectionConsents(), this.sdkConfiguration);
        this.connectionConsent = new AsyncConnectionConsent(syncSDK.connectionConsent(), this.sdkConfiguration);
        this.createCallback = new AsyncCreateCallback(syncSDK.createCallback(), this.sdkConfiguration);
        this.connectionSettings = new AsyncConnectionSettings(syncSDK.connectionSettings(), this.sdkConfiguration);
        this.customFields = new AsyncCustomFields(syncSDK.customFields(), this.sdkConfiguration);
        this.connectionCustomMappings = new AsyncConnectionCustomMappings(syncSDK.connectionCustomMappings(), this.sdkConfiguration);
        this.customMappings = new AsyncCustomMappings(syncSDK.customMappings(), this.sdkConfiguration);
        this.sessions = new AsyncSessions(syncSDK.sessions(), this.sdkConfiguration);
        this.logs = new AsyncLogs(syncSDK.logs(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncConsumers consumers() {
        return consumers;
    }

    public final AsyncConsumerRequestCounts consumerRequestCounts() {
        return consumerRequestCounts;
    }

    public final AsyncConnections connections() {
        return connections;
    }

    public final AsyncValidateConnection validateConnection() {
        return validateConnection;
    }

    public final AsyncConnectionConsents connectionConsents() {
        return connectionConsents;
    }

    public final AsyncConnectionConsent connectionConsent() {
        return connectionConsent;
    }

    public final AsyncCreateCallback createCallback() {
        return createCallback;
    }

    public final AsyncConnectionSettings connectionSettings() {
        return connectionSettings;
    }

    public final AsyncCustomFields customFields() {
        return customFields;
    }

    public final AsyncConnectionCustomMappings connectionCustomMappings() {
        return connectionCustomMappings;
    }

    public final AsyncCustomMappings customMappings() {
        return customMappings;
    }

    public final AsyncSessions sessions() {
        return sessions;
    }

    public final AsyncLogs logs() {
        return logs;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Vault sync() {
        return syncSDK;
    }

}
