/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.models.components.CreateWebhookRequest;
import com.apideck.unify.models.components.UpdateWebhookRequest;
import com.apideck.unify.models.operations.WebhookWebhooksAddRequest;
import com.apideck.unify.models.operations.WebhookWebhooksAllRequest;
import com.apideck.unify.models.operations.WebhookWebhooksDeleteRequest;
import com.apideck.unify.models.operations.WebhookWebhooksOneRequest;
import com.apideck.unify.models.operations.WebhookWebhooksUpdateRequest;
import com.apideck.unify.models.operations.async.WebhookWebhooksAddRequestBuilder;
import com.apideck.unify.models.operations.async.WebhookWebhooksAddResponse;
import com.apideck.unify.models.operations.async.WebhookWebhooksAllRequestBuilder;
import com.apideck.unify.models.operations.async.WebhookWebhooksAllResponse;
import com.apideck.unify.models.operations.async.WebhookWebhooksDeleteRequestBuilder;
import com.apideck.unify.models.operations.async.WebhookWebhooksDeleteResponse;
import com.apideck.unify.models.operations.async.WebhookWebhooksOneRequestBuilder;
import com.apideck.unify.models.operations.async.WebhookWebhooksOneResponse;
import com.apideck.unify.models.operations.async.WebhookWebhooksUpdateRequestBuilder;
import com.apideck.unify.models.operations.async.WebhookWebhooksUpdateResponse;
import com.apideck.unify.operations.WebhookWebhooksAdd;
import com.apideck.unify.operations.WebhookWebhooksAll;
import com.apideck.unify.operations.WebhookWebhooksDelete;
import com.apideck.unify.operations.WebhookWebhooksOne;
import com.apideck.unify.operations.WebhookWebhooksUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncWebhooks {
    private final SDKConfiguration sdkConfiguration;
    private final Webhooks syncSDK;

    AsyncWebhooks(Webhooks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Webhooks sync() {
        return syncSDK;
    }


    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @return The async call builder
     */
    public WebhookWebhooksAllRequestBuilder list() {
        return new WebhookWebhooksAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @return CompletableFuture&lt;WebhookWebhooksAllResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksAllResponse> listDirect() {
        return list(
                Optional.empty(), JsonNullable.undefined(), Optional.empty(),
                Optional.empty());
    }

    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @param appId The ID of your Unify application
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param limit Number of results to return. Minimum 1, Maximum 200, Default 20
     * @param options additional options
     * @return CompletableFuture&lt;WebhookWebhooksAllResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksAllResponse> list(
            Optional<String> appId, JsonNullable<String> cursor,
            Optional<Long> limit, Optional<Options> options) {
        WebhookWebhooksAllRequest request =
            WebhookWebhooksAllRequest
                .builder()
                .appId(appId)
                .cursor(cursor)
                .limit(limit)
                .build();
        AsyncRequestOperation<WebhookWebhooksAllRequest, WebhookWebhooksAllResponse> operation
              = new WebhookWebhooksAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @return The async call builder
     */
    public WebhookWebhooksAddRequestBuilder create() {
        return new WebhookWebhooksAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @param createWebhookRequest 
     * @return CompletableFuture&lt;WebhookWebhooksAddResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksAddResponse> create(CreateWebhookRequest createWebhookRequest) {
        return create(Optional.empty(), createWebhookRequest, Optional.empty());
    }

    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @param appId The ID of your Unify application
     * @param createWebhookRequest 
     * @param options additional options
     * @return CompletableFuture&lt;WebhookWebhooksAddResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksAddResponse> create(
            Optional<String> appId, CreateWebhookRequest createWebhookRequest,
            Optional<Options> options) {
        WebhookWebhooksAddRequest request =
            WebhookWebhooksAddRequest
                .builder()
                .appId(appId)
                .createWebhookRequest(createWebhookRequest)
                .build();
        AsyncRequestOperation<WebhookWebhooksAddRequest, WebhookWebhooksAddResponse> operation
              = new WebhookWebhooksAdd.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @return The async call builder
     */
    public WebhookWebhooksOneRequestBuilder get() {
        return new WebhookWebhooksOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @return CompletableFuture&lt;WebhookWebhooksOneResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksOneResponse> get(String id) {
        return get(id, Optional.empty(), Optional.empty());
    }

    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param options additional options
     * @return CompletableFuture&lt;WebhookWebhooksOneResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksOneResponse> get(
            String id, Optional<String> appId,
            Optional<Options> options) {
        WebhookWebhooksOneRequest request =
            WebhookWebhooksOneRequest
                .builder()
                .id(id)
                .appId(appId)
                .build();
        AsyncRequestOperation<WebhookWebhooksOneRequest, WebhookWebhooksOneResponse> operation
              = new WebhookWebhooksOne.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @return The async call builder
     */
    public WebhookWebhooksUpdateRequestBuilder update() {
        return new WebhookWebhooksUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param updateWebhookRequest 
     * @return CompletableFuture&lt;WebhookWebhooksUpdateResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksUpdateResponse> update(String id, UpdateWebhookRequest updateWebhookRequest) {
        return update(
                id, Optional.empty(), updateWebhookRequest,
                Optional.empty());
    }

    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param updateWebhookRequest 
     * @param options additional options
     * @return CompletableFuture&lt;WebhookWebhooksUpdateResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksUpdateResponse> update(
            String id, Optional<String> appId,
            UpdateWebhookRequest updateWebhookRequest, Optional<Options> options) {
        WebhookWebhooksUpdateRequest request =
            WebhookWebhooksUpdateRequest
                .builder()
                .id(id)
                .appId(appId)
                .updateWebhookRequest(updateWebhookRequest)
                .build();
        AsyncRequestOperation<WebhookWebhooksUpdateRequest, WebhookWebhooksUpdateResponse> operation
              = new WebhookWebhooksUpdate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @return The async call builder
     */
    public WebhookWebhooksDeleteRequestBuilder delete() {
        return new WebhookWebhooksDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @return CompletableFuture&lt;WebhookWebhooksDeleteResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksDeleteResponse> delete(String id) {
        return delete(id, Optional.empty(), Optional.empty());
    }

    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param options additional options
     * @return CompletableFuture&lt;WebhookWebhooksDeleteResponse&gt; - The async response
     */
    public CompletableFuture<WebhookWebhooksDeleteResponse> delete(
            String id, Optional<String> appId,
            Optional<Options> options) {
        WebhookWebhooksDeleteRequest request =
            WebhookWebhooksDeleteRequest
                .builder()
                .id(id)
                .appId(appId)
                .build();
        AsyncRequestOperation<WebhookWebhooksDeleteRequest, WebhookWebhooksDeleteResponse> operation
              = new WebhookWebhooksDelete.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
