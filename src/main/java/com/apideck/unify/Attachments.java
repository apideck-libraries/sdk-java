/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingAttachmentsAllRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsAllResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsOneRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsOneResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadResponse;
import com.apideck.unify.operations.AccountingAttachmentsAll;
import com.apideck.unify.operations.AccountingAttachmentsDelete;
import com.apideck.unify.operations.AccountingAttachmentsDownload;
import com.apideck.unify.operations.AccountingAttachmentsOne;
import com.apideck.unify.operations.AccountingAttachmentsUpload;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Attachments {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncAttachments asyncSDK;

    Attachments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncAttachments(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncAttachments async() {
        return asyncSDK;
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @return The call builder
     */
    public AccountingAttachmentsAllRequestBuilder list() {
        return new AccountingAttachmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsAllResponse list(AccountingAttachmentsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsAllResponse list(AccountingAttachmentsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingAttachmentsAllRequest, AccountingAttachmentsAllResponse> operation
              = new AccountingAttachmentsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsUploadRequestBuilder upload() {
        return new AccountingAttachmentsUploadRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsUploadResponse upload(AccountingAttachmentsUploadRequest request) throws Exception {
        return upload(request, Optional.empty(), Optional.empty());
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsUploadResponse upload(
            AccountingAttachmentsUploadRequest request, Optional<String> serverURL,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingAttachmentsUploadRequest, AccountingAttachmentsUploadResponse> operation
              = new AccountingAttachmentsUpload.Sync(sdkConfiguration, serverURL, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsOneRequestBuilder get() {
        return new AccountingAttachmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsOneResponse get(AccountingAttachmentsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsOneResponse get(AccountingAttachmentsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingAttachmentsOneRequest, AccountingAttachmentsOneResponse> operation
              = new AccountingAttachmentsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsDeleteRequestBuilder delete() {
        return new AccountingAttachmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDeleteResponse delete(AccountingAttachmentsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDeleteResponse delete(AccountingAttachmentsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingAttachmentsDeleteRequest, AccountingAttachmentsDeleteResponse> operation
              = new AccountingAttachmentsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsDownloadRequestBuilder download() {
        return new AccountingAttachmentsDownloadRequestBuilder(sdkConfiguration);
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDownloadResponse download(AccountingAttachmentsDownloadRequest request) throws Exception {
        return download(request, Optional.empty());
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDownloadResponse download(AccountingAttachmentsDownloadRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingAttachmentsDownloadRequest, AccountingAttachmentsDownloadResponse> operation
              = new AccountingAttachmentsDownload.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
