/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingAttachmentsAllRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsAllResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsDownloadResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsOneRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsOneResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadRequestBuilder;
import com.apideck.unify.models.operations.AccountingAttachmentsUploadResponse;
import com.apideck.unify.operations.AccountingAttachmentsAllOperation;
import com.apideck.unify.operations.AccountingAttachmentsDeleteOperation;
import com.apideck.unify.operations.AccountingAttachmentsDownloadOperation;
import com.apideck.unify.operations.AccountingAttachmentsOneOperation;
import com.apideck.unify.operations.AccountingAttachmentsUploadOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Attachments {
    private final SDKConfiguration sdkConfiguration;

    Attachments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @return The call builder
     */
    public AccountingAttachmentsAllRequestBuilder list() {
        return new AccountingAttachmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsAllResponse list(@Nonnull AccountingAttachmentsAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Attachments
     * 
     * <p>List Attachments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsAllResponse list(
            @Nonnull AccountingAttachmentsAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingAttachmentsAllRequest, AccountingAttachmentsAllResponse> operation
              = new AccountingAttachmentsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsUploadRequestBuilder upload() {
        return new AccountingAttachmentsUploadRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsUploadResponse upload(@Nonnull AccountingAttachmentsUploadRequest request) throws Exception {
        return upload(request, null, null);
    }

    /**
     * Upload attachment
     * 
     * <p>Upload attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsUploadResponse upload(
            @Nonnull AccountingAttachmentsUploadRequest request,
            @Nullable String serverURL,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingAttachmentsUploadRequest, AccountingAttachmentsUploadResponse> operation
              = new AccountingAttachmentsUploadOperation(
                sdkConfiguration,
                serverURL,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsOneRequestBuilder get() {
        return new AccountingAttachmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsOneResponse get(@Nonnull AccountingAttachmentsOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Attachment
     * 
     * <p>Get Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsOneResponse get(
            @Nonnull AccountingAttachmentsOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingAttachmentsOneRequest, AccountingAttachmentsOneResponse> operation
              = new AccountingAttachmentsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsDeleteRequestBuilder delete() {
        return new AccountingAttachmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDeleteResponse delete(@Nonnull AccountingAttachmentsDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Attachment
     * 
     * <p>Delete Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDeleteResponse delete(
            @Nonnull AccountingAttachmentsDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingAttachmentsDeleteRequest, AccountingAttachmentsDeleteResponse> operation
              = new AccountingAttachmentsDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @return The call builder
     */
    public AccountingAttachmentsDownloadRequestBuilder download() {
        return new AccountingAttachmentsDownloadRequestBuilder(sdkConfiguration);
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDownloadResponse download(@Nonnull AccountingAttachmentsDownloadRequest request) throws Exception {
        return download(request, null);
    }

    /**
     * Download Attachment
     * 
     * <p>Download Attachment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingAttachmentsDownloadResponse download(
            @Nonnull AccountingAttachmentsDownloadRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingAttachmentsDownloadRequest, AccountingAttachmentsDownloadResponse> operation
              = new AccountingAttachmentsDownloadOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
