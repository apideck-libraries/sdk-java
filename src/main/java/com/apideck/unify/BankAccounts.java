/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingBankAccountsAddRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankAccountsAddResponse;
import com.apideck.unify.models.operations.AccountingBankAccountsAllRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankAccountsAllResponse;
import com.apideck.unify.models.operations.AccountingBankAccountsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankAccountsDeleteResponse;
import com.apideck.unify.models.operations.AccountingBankAccountsOneRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankAccountsOneResponse;
import com.apideck.unify.models.operations.AccountingBankAccountsUpdateRequest;
import com.apideck.unify.models.operations.AccountingBankAccountsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankAccountsUpdateResponse;
import com.apideck.unify.operations.AccountingBankAccountsAdd;
import com.apideck.unify.operations.AccountingBankAccountsAll;
import com.apideck.unify.operations.AccountingBankAccountsDelete;
import com.apideck.unify.operations.AccountingBankAccountsOne;
import com.apideck.unify.operations.AccountingBankAccountsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class BankAccounts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBankAccounts asyncSDK;

    BankAccounts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncBankAccounts(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncBankAccounts async() {
        return asyncSDK;
    }

    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @return The call builder
     */
    public AccountingBankAccountsAllRequestBuilder list() {
        return new AccountingBankAccountsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsAllResponse list(AccountingBankAccountsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Bank Accounts
     * 
     * <p>List Bank Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsAllResponse list(AccountingBankAccountsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankAccountsAllRequest, AccountingBankAccountsAllResponse> operation
              = new AccountingBankAccountsAll.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @return The call builder
     */
    public AccountingBankAccountsAddRequestBuilder create() {
        return new AccountingBankAccountsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsAddResponse create(AccountingBankAccountsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Bank Account
     * 
     * <p>Create Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsAddResponse create(AccountingBankAccountsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankAccountsAddRequest, AccountingBankAccountsAddResponse> operation
              = new AccountingBankAccountsAdd.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @return The call builder
     */
    public AccountingBankAccountsOneRequestBuilder get() {
        return new AccountingBankAccountsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsOneResponse get(AccountingBankAccountsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Bank Account
     * 
     * <p>Get Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsOneResponse get(AccountingBankAccountsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankAccountsOneRequest, AccountingBankAccountsOneResponse> operation
              = new AccountingBankAccountsOne.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @return The call builder
     */
    public AccountingBankAccountsUpdateRequestBuilder update() {
        return new AccountingBankAccountsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsUpdateResponse update(AccountingBankAccountsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Bank Account
     * 
     * <p>Update Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsUpdateResponse update(AccountingBankAccountsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankAccountsUpdateRequest, AccountingBankAccountsUpdateResponse> operation
              = new AccountingBankAccountsUpdate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @return The call builder
     */
    public AccountingBankAccountsDeleteRequestBuilder delete() {
        return new AccountingBankAccountsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsDeleteResponse delete(AccountingBankAccountsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bank Account
     * 
     * <p>Delete Bank Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankAccountsDeleteResponse delete(AccountingBankAccountsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankAccountsDeleteRequest, AccountingBankAccountsDeleteResponse> operation
              = new AccountingBankAccountsDelete.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
