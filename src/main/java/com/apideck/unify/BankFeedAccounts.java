/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingBankFeedAccountsAddRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAddResponse;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAllRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsAllResponse;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsDeleteResponse;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsOneRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsOneResponse;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsUpdateRequest;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingBankFeedAccountsUpdateResponse;
import com.apideck.unify.operations.AccountingBankFeedAccountsAdd;
import com.apideck.unify.operations.AccountingBankFeedAccountsAll;
import com.apideck.unify.operations.AccountingBankFeedAccountsDelete;
import com.apideck.unify.operations.AccountingBankFeedAccountsOne;
import com.apideck.unify.operations.AccountingBankFeedAccountsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class BankFeedAccounts {
    private final SDKConfiguration sdkConfiguration;

    BankFeedAccounts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @return The call builder
     */
    public AccountingBankFeedAccountsAllRequestBuilder list() {
        return new AccountingBankFeedAccountsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsAllResponse list(AccountingBankFeedAccountsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Bank Feed Accounts
     * 
     * <p>List Bank Feed Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsAllResponse list(AccountingBankFeedAccountsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankFeedAccountsAllRequest, AccountingBankFeedAccountsAllResponse> operation
              = new AccountingBankFeedAccountsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @return The call builder
     */
    public AccountingBankFeedAccountsAddRequestBuilder create() {
        return new AccountingBankFeedAccountsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsAddResponse create(AccountingBankFeedAccountsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Bank Feed Account
     * 
     * <p>Create Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsAddResponse create(AccountingBankFeedAccountsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankFeedAccountsAddRequest, AccountingBankFeedAccountsAddResponse> operation
              = new AccountingBankFeedAccountsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @return The call builder
     */
    public AccountingBankFeedAccountsOneRequestBuilder get() {
        return new AccountingBankFeedAccountsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsOneResponse get(AccountingBankFeedAccountsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Bank Feed Account
     * 
     * <p>Get Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsOneResponse get(AccountingBankFeedAccountsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankFeedAccountsOneRequest, AccountingBankFeedAccountsOneResponse> operation
              = new AccountingBankFeedAccountsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @return The call builder
     */
    public AccountingBankFeedAccountsUpdateRequestBuilder update() {
        return new AccountingBankFeedAccountsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsUpdateResponse update(AccountingBankFeedAccountsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Bank Feed Account
     * 
     * <p>Update Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsUpdateResponse update(AccountingBankFeedAccountsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankFeedAccountsUpdateRequest, AccountingBankFeedAccountsUpdateResponse> operation
              = new AccountingBankFeedAccountsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @return The call builder
     */
    public AccountingBankFeedAccountsDeleteRequestBuilder delete() {
        return new AccountingBankFeedAccountsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsDeleteResponse delete(AccountingBankFeedAccountsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bank Feed Account
     * 
     * <p>Delete Bank Feed Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBankFeedAccountsDeleteResponse delete(AccountingBankFeedAccountsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBankFeedAccountsDeleteRequest, AccountingBankFeedAccountsDeleteResponse> operation
              = new AccountingBankFeedAccountsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
