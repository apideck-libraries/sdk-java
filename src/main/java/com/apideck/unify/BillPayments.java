/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingBillPaymentsAddRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingBillPaymentsAddResponse;
import com.apideck.unify.models.operations.AccountingBillPaymentsAllRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingBillPaymentsAllResponse;
import com.apideck.unify.models.operations.AccountingBillPaymentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingBillPaymentsDeleteResponse;
import com.apideck.unify.models.operations.AccountingBillPaymentsOneRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingBillPaymentsOneResponse;
import com.apideck.unify.models.operations.AccountingBillPaymentsUpdateRequest;
import com.apideck.unify.models.operations.AccountingBillPaymentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingBillPaymentsUpdateResponse;
import com.apideck.unify.operations.AccountingBillPaymentsAdd;
import com.apideck.unify.operations.AccountingBillPaymentsAll;
import com.apideck.unify.operations.AccountingBillPaymentsDelete;
import com.apideck.unify.operations.AccountingBillPaymentsOne;
import com.apideck.unify.operations.AccountingBillPaymentsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class BillPayments {
    private final SDKConfiguration sdkConfiguration;

    BillPayments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @return The call builder
     */
    public AccountingBillPaymentsAllRequestBuilder list() {
        return new AccountingBillPaymentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsAllResponse list(AccountingBillPaymentsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Bill Payments
     * 
     * <p>List Bill Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsAllResponse list(AccountingBillPaymentsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBillPaymentsAllRequest, AccountingBillPaymentsAllResponse> operation
              = new AccountingBillPaymentsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @return The call builder
     */
    public AccountingBillPaymentsAddRequestBuilder create() {
        return new AccountingBillPaymentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsAddResponse create(AccountingBillPaymentsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Bill Payment
     * 
     * <p>Create Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsAddResponse create(AccountingBillPaymentsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBillPaymentsAddRequest, AccountingBillPaymentsAddResponse> operation
              = new AccountingBillPaymentsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @return The call builder
     */
    public AccountingBillPaymentsOneRequestBuilder get() {
        return new AccountingBillPaymentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsOneResponse get(AccountingBillPaymentsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Bill Payment
     * 
     * <p>Get Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsOneResponse get(AccountingBillPaymentsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBillPaymentsOneRequest, AccountingBillPaymentsOneResponse> operation
              = new AccountingBillPaymentsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @return The call builder
     */
    public AccountingBillPaymentsUpdateRequestBuilder update() {
        return new AccountingBillPaymentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsUpdateResponse update(AccountingBillPaymentsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Bill Payment
     * 
     * <p>Update Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsUpdateResponse update(AccountingBillPaymentsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBillPaymentsUpdateRequest, AccountingBillPaymentsUpdateResponse> operation
              = new AccountingBillPaymentsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @return The call builder
     */
    public AccountingBillPaymentsDeleteRequestBuilder delete() {
        return new AccountingBillPaymentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsDeleteResponse delete(AccountingBillPaymentsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Bill Payment
     * 
     * <p>Delete Bill Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBillPaymentsDeleteResponse delete(AccountingBillPaymentsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingBillPaymentsDeleteRequest, AccountingBillPaymentsDeleteResponse> operation
              = new AccountingBillPaymentsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
