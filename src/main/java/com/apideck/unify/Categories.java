/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingCategoriesAllRequest;
import com.apideck.unify.models.operations.AccountingCategoriesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingCategoriesAllResponse;
import com.apideck.unify.models.operations.AccountingCategoriesOneRequest;
import com.apideck.unify.models.operations.AccountingCategoriesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingCategoriesOneResponse;
import com.apideck.unify.operations.AccountingCategoriesAll;
import com.apideck.unify.operations.AccountingCategoriesOne;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Categories {
    private final SDKConfiguration sdkConfiguration;

    Categories(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @return The call builder
     */
    public AccountingCategoriesAllRequestBuilder list() {
        return new AccountingCategoriesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCategoriesAllResponse list(AccountingCategoriesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Categories
     * 
     * <p>List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCategoriesAllResponse list(AccountingCategoriesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingCategoriesAllRequest, AccountingCategoriesAllResponse> operation
              = new AccountingCategoriesAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @return The call builder
     */
    public AccountingCategoriesOneRequestBuilder get() {
        return new AccountingCategoriesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCategoriesOneResponse get(AccountingCategoriesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Category
     * 
     * <p>Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCategoriesOneResponse get(AccountingCategoriesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingCategoriesOneRequest, AccountingCategoriesOneResponse> operation
              = new AccountingCategoriesOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
