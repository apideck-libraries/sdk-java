/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAddRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAddRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAddResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAllRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsAllResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsDeleteRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsDeleteResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsOneRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsOneResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsUpdateRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketCommentsUpdateResponse;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsAddOperation;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsAllOperation;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsDeleteOperation;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsOneOperation;
import com.apideck.unify.operations.IssueTrackingCollectionTicketCommentsUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class CollectionTicketComments {
    private final SDKConfiguration sdkConfiguration;

    CollectionTicketComments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketCommentsAllRequestBuilder list() {
        return new IssueTrackingCollectionTicketCommentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsAllResponse list(@Nonnull IssueTrackingCollectionTicketCommentsAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Comments
     * 
     * <p>List Comments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsAllResponse list(
            @Nonnull IssueTrackingCollectionTicketCommentsAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketCommentsAllRequest, IssueTrackingCollectionTicketCommentsAllResponse> operation
              = new IssueTrackingCollectionTicketCommentsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketCommentsAddRequestBuilder create() {
        return new IssueTrackingCollectionTicketCommentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsAddResponse create(@Nonnull IssueTrackingCollectionTicketCommentsAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Comment
     * 
     * <p>Create Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsAddResponse create(
            @Nonnull IssueTrackingCollectionTicketCommentsAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketCommentsAddRequest, IssueTrackingCollectionTicketCommentsAddResponse> operation
              = new IssueTrackingCollectionTicketCommentsAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketCommentsOneRequestBuilder get() {
        return new IssueTrackingCollectionTicketCommentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsOneResponse get(@Nonnull IssueTrackingCollectionTicketCommentsOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Comment
     * 
     * <p>Get Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsOneResponse get(
            @Nonnull IssueTrackingCollectionTicketCommentsOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketCommentsOneRequest, IssueTrackingCollectionTicketCommentsOneResponse> operation
              = new IssueTrackingCollectionTicketCommentsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketCommentsUpdateRequestBuilder update() {
        return new IssueTrackingCollectionTicketCommentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsUpdateResponse update(@Nonnull IssueTrackingCollectionTicketCommentsUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Comment
     * 
     * <p>Update Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsUpdateResponse update(
            @Nonnull IssueTrackingCollectionTicketCommentsUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketCommentsUpdateRequest, IssueTrackingCollectionTicketCommentsUpdateResponse> operation
              = new IssueTrackingCollectionTicketCommentsUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketCommentsDeleteRequestBuilder delete() {
        return new IssueTrackingCollectionTicketCommentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsDeleteResponse delete(@Nonnull IssueTrackingCollectionTicketCommentsDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Comment
     * 
     * <p>Delete Comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketCommentsDeleteResponse delete(
            @Nonnull IssueTrackingCollectionTicketCommentsDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketCommentsDeleteRequest, IssueTrackingCollectionTicketCommentsDeleteResponse> operation
              = new IssueTrackingCollectionTicketCommentsDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
