/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAddRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAddRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAddResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAllRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsAllResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsDeleteRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsDeleteRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsDeleteResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsOneRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsOneResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsUpdateRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsUpdateRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionTicketsUpdateResponse;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsAdd;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsAll;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsDelete;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsOne;
import com.apideck.unify.operations.IssueTrackingCollectionTicketsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class CollectionTickets {
    private final SDKConfiguration sdkConfiguration;

    CollectionTickets(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketsAllRequestBuilder list() {
        return new IssueTrackingCollectionTicketsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsAllResponse list(IssueTrackingCollectionTicketsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Tickets
     * 
     * <p>List Tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsAllResponse list(IssueTrackingCollectionTicketsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketsAllRequest, IssueTrackingCollectionTicketsAllResponse> operation
              = new IssueTrackingCollectionTicketsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketsAddRequestBuilder create() {
        return new IssueTrackingCollectionTicketsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsAddResponse create(IssueTrackingCollectionTicketsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Ticket
     * 
     * <p>Create Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsAddResponse create(IssueTrackingCollectionTicketsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketsAddRequest, IssueTrackingCollectionTicketsAddResponse> operation
              = new IssueTrackingCollectionTicketsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketsOneRequestBuilder get() {
        return new IssueTrackingCollectionTicketsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsOneResponse get(IssueTrackingCollectionTicketsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Ticket
     * 
     * <p>Get Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsOneResponse get(IssueTrackingCollectionTicketsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketsOneRequest, IssueTrackingCollectionTicketsOneResponse> operation
              = new IssueTrackingCollectionTicketsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketsUpdateRequestBuilder update() {
        return new IssueTrackingCollectionTicketsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsUpdateResponse update(IssueTrackingCollectionTicketsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Ticket
     * 
     * <p>Update Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsUpdateResponse update(IssueTrackingCollectionTicketsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketsUpdateRequest, IssueTrackingCollectionTicketsUpdateResponse> operation
              = new IssueTrackingCollectionTicketsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionTicketsDeleteRequestBuilder delete() {
        return new IssueTrackingCollectionTicketsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsDeleteResponse delete(IssueTrackingCollectionTicketsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Ticket
     * 
     * <p>Delete Ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionTicketsDeleteResponse delete(IssueTrackingCollectionTicketsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionTicketsDeleteRequest, IssueTrackingCollectionTicketsDeleteResponse> operation
              = new IssueTrackingCollectionTicketsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
