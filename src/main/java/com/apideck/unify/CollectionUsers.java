/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionUsersAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersAllRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersAllResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersOneRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionUsersOneResponse;
import com.apideck.unify.operations.IssueTrackingCollectionUsersAllOperation;
import com.apideck.unify.operations.IssueTrackingCollectionUsersOneOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class CollectionUsers {
    private final SDKConfiguration sdkConfiguration;

    CollectionUsers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionUsersAllRequestBuilder list() {
        return new IssueTrackingCollectionUsersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionUsersAllResponse list(@Nonnull IssueTrackingCollectionUsersAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Users
     * 
     * <p>List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionUsersAllResponse list(
            @Nonnull IssueTrackingCollectionUsersAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionUsersAllRequest, IssueTrackingCollectionUsersAllResponse> operation
              = new IssueTrackingCollectionUsersAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionUsersOneRequestBuilder get() {
        return new IssueTrackingCollectionUsersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionUsersOneResponse get(@Nonnull IssueTrackingCollectionUsersOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionUsersOneResponse get(
            @Nonnull IssueTrackingCollectionUsersOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<IssueTrackingCollectionUsersOneRequest, IssueTrackingCollectionUsersOneResponse> operation
              = new IssueTrackingCollectionUsersOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
