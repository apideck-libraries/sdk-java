/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.IssueTrackingCollectionsAllRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionsAllRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionsAllResponse;
import com.apideck.unify.models.operations.IssueTrackingCollectionsOneRequest;
import com.apideck.unify.models.operations.IssueTrackingCollectionsOneRequestBuilder;
import com.apideck.unify.models.operations.IssueTrackingCollectionsOneResponse;
import com.apideck.unify.operations.IssueTrackingCollectionsAllOperation;
import com.apideck.unify.operations.IssueTrackingCollectionsOneOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Collections {
    private final SDKConfiguration sdkConfiguration;

    Collections(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionsAllRequestBuilder list() {
        return new IssueTrackingCollectionsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionsAllResponse list(IssueTrackingCollectionsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Collections
     * 
     * <p>List Collections
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionsAllResponse list(
            IssueTrackingCollectionsAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionsAllRequest, IssueTrackingCollectionsAllResponse> operation
              = new IssueTrackingCollectionsAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @return The call builder
     */
    public IssueTrackingCollectionsOneRequestBuilder get() {
        return new IssueTrackingCollectionsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionsOneResponse get(IssueTrackingCollectionsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Collection
     * 
     * <p>Get Collection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IssueTrackingCollectionsOneResponse get(
            IssueTrackingCollectionsOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<IssueTrackingCollectionsOneRequest, IssueTrackingCollectionsOneResponse> operation
              = new IssueTrackingCollectionsOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
