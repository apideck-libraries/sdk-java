/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmCompaniesAddRequest;
import com.apideck.unify.models.operations.CrmCompaniesAddRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesAddResponse;
import com.apideck.unify.models.operations.CrmCompaniesAllRequest;
import com.apideck.unify.models.operations.CrmCompaniesAllRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesAllResponse;
import com.apideck.unify.models.operations.CrmCompaniesDeleteRequest;
import com.apideck.unify.models.operations.CrmCompaniesDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesDeleteResponse;
import com.apideck.unify.models.operations.CrmCompaniesOneRequest;
import com.apideck.unify.models.operations.CrmCompaniesOneRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesOneResponse;
import com.apideck.unify.models.operations.CrmCompaniesUpdateRequest;
import com.apideck.unify.models.operations.CrmCompaniesUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesUpdateResponse;
import com.apideck.unify.operations.CrmCompaniesAdd;
import com.apideck.unify.operations.CrmCompaniesAll;
import com.apideck.unify.operations.CrmCompaniesDelete;
import com.apideck.unify.operations.CrmCompaniesOne;
import com.apideck.unify.operations.CrmCompaniesUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Companies {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCompanies asyncSDK;

    Companies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncCompanies(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncCompanies async() {
        return asyncSDK;
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @return The call builder
     */
    public CrmCompaniesAllRequestBuilder list() {
        return new CrmCompaniesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAllResponse list(CrmCompaniesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAllResponse list(CrmCompaniesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmCompaniesAllRequest, CrmCompaniesAllResponse> operation
              = new CrmCompaniesAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @return The call builder
     */
    public CrmCompaniesAddRequestBuilder create() {
        return new CrmCompaniesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAddResponse create(CrmCompaniesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAddResponse create(CrmCompaniesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmCompaniesAddRequest, CrmCompaniesAddResponse> operation
              = new CrmCompaniesAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @return The call builder
     */
    public CrmCompaniesOneRequestBuilder get() {
        return new CrmCompaniesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesOneResponse get(CrmCompaniesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesOneResponse get(CrmCompaniesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmCompaniesOneRequest, CrmCompaniesOneResponse> operation
              = new CrmCompaniesOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @return The call builder
     */
    public CrmCompaniesUpdateRequestBuilder update() {
        return new CrmCompaniesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesUpdateResponse update(CrmCompaniesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesUpdateResponse update(CrmCompaniesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmCompaniesUpdateRequest, CrmCompaniesUpdateResponse> operation
              = new CrmCompaniesUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @return The call builder
     */
    public CrmCompaniesDeleteRequestBuilder delete() {
        return new CrmCompaniesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesDeleteResponse delete(CrmCompaniesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesDeleteResponse delete(CrmCompaniesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmCompaniesDeleteRequest, CrmCompaniesDeleteResponse> operation
              = new CrmCompaniesDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
