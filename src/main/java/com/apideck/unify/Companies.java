/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmCompaniesAddRequest;
import com.apideck.unify.models.operations.CrmCompaniesAddRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesAddResponse;
import com.apideck.unify.models.operations.CrmCompaniesAllRequest;
import com.apideck.unify.models.operations.CrmCompaniesAllRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesAllResponse;
import com.apideck.unify.models.operations.CrmCompaniesDeleteRequest;
import com.apideck.unify.models.operations.CrmCompaniesDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesDeleteResponse;
import com.apideck.unify.models.operations.CrmCompaniesOneRequest;
import com.apideck.unify.models.operations.CrmCompaniesOneRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesOneResponse;
import com.apideck.unify.models.operations.CrmCompaniesUpdateRequest;
import com.apideck.unify.models.operations.CrmCompaniesUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmCompaniesUpdateResponse;
import com.apideck.unify.operations.CrmCompaniesAddOperation;
import com.apideck.unify.operations.CrmCompaniesAllOperation;
import com.apideck.unify.operations.CrmCompaniesDeleteOperation;
import com.apideck.unify.operations.CrmCompaniesOneOperation;
import com.apideck.unify.operations.CrmCompaniesUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Companies {
    private final SDKConfiguration sdkConfiguration;

    Companies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @return The call builder
     */
    public CrmCompaniesAllRequestBuilder list() {
        return new CrmCompaniesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAllResponse list(@Nonnull CrmCompaniesAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List companies
     * 
     * <p>List companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAllResponse list(
            @Nonnull CrmCompaniesAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<CrmCompaniesAllRequest, CrmCompaniesAllResponse> operation
              = new CrmCompaniesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @return The call builder
     */
    public CrmCompaniesAddRequestBuilder create() {
        return new CrmCompaniesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAddResponse create(@Nonnull CrmCompaniesAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create company
     * 
     * <p>Create company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesAddResponse create(
            @Nonnull CrmCompaniesAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<CrmCompaniesAddRequest, CrmCompaniesAddResponse> operation
              = new CrmCompaniesAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @return The call builder
     */
    public CrmCompaniesOneRequestBuilder get() {
        return new CrmCompaniesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesOneResponse get(@Nonnull CrmCompaniesOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get company
     * 
     * <p>Get company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesOneResponse get(
            @Nonnull CrmCompaniesOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<CrmCompaniesOneRequest, CrmCompaniesOneResponse> operation
              = new CrmCompaniesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @return The call builder
     */
    public CrmCompaniesUpdateRequestBuilder update() {
        return new CrmCompaniesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesUpdateResponse update(@Nonnull CrmCompaniesUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update company
     * 
     * <p>Update company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesUpdateResponse update(
            @Nonnull CrmCompaniesUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<CrmCompaniesUpdateRequest, CrmCompaniesUpdateResponse> operation
              = new CrmCompaniesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @return The call builder
     */
    public CrmCompaniesDeleteRequestBuilder delete() {
        return new CrmCompaniesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesDeleteResponse delete(@Nonnull CrmCompaniesDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete company
     * 
     * <p>Delete company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmCompaniesDeleteResponse delete(
            @Nonnull CrmCompaniesDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<CrmCompaniesDeleteRequest, CrmCompaniesDeleteResponse> operation
              = new CrmCompaniesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
