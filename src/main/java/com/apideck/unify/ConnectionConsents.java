/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.VaultConnectionConsentsAllRequest;
import com.apideck.unify.models.operations.VaultConnectionConsentsAllRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionConsentsAllResponse;
import com.apideck.unify.operations.VaultConnectionConsentsAll;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class ConnectionConsents {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncConnectionConsents asyncSDK;

    ConnectionConsents(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncConnectionConsents(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncConnectionConsents async() {
        return asyncSDK;
    }

    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @return The call builder
     */
    public VaultConnectionConsentsAllRequestBuilder list() {
        return new VaultConnectionConsentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionConsentsAllResponse list(String serviceId, String unifiedApi) throws Exception {
        return list(Optional.empty(), Optional.empty(), serviceId,
            unifiedApi, Optional.empty());
    }

    /**
     * Get consent records
     * 
     * <p>Get all consent records for a connection
     * 
     * @param consumerId ID of the consumer which you want to get or push data from
     * @param appId The ID of your Unify application
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionConsentsAllResponse list(
            Optional<String> consumerId, Optional<String> appId,
            String serviceId, String unifiedApi,
            Optional<Options> options) throws Exception {
        VaultConnectionConsentsAllRequest request =
            VaultConnectionConsentsAllRequest
                .builder()
                .consumerId(consumerId)
                .appId(appId)
                .serviceId(serviceId)
                .unifiedApi(unifiedApi)
                .build();
        RequestOperation<VaultConnectionConsentsAllRequest, VaultConnectionConsentsAllResponse> operation
              = new VaultConnectionConsentsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
