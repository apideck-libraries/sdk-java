/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.VaultConnectionsAllRequest;
import com.apideck.unify.models.operations.VaultConnectionsAllRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsAllResponse;
import com.apideck.unify.models.operations.VaultConnectionsDeleteRequest;
import com.apideck.unify.models.operations.VaultConnectionsDeleteRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsDeleteResponse;
import com.apideck.unify.models.operations.VaultConnectionsImportRequest;
import com.apideck.unify.models.operations.VaultConnectionsImportRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsImportResponse;
import com.apideck.unify.models.operations.VaultConnectionsOneRequest;
import com.apideck.unify.models.operations.VaultConnectionsOneRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsOneResponse;
import com.apideck.unify.models.operations.VaultConnectionsTokenRequest;
import com.apideck.unify.models.operations.VaultConnectionsTokenRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsTokenResponse;
import com.apideck.unify.models.operations.VaultConnectionsUpdateRequest;
import com.apideck.unify.models.operations.VaultConnectionsUpdateRequestBuilder;
import com.apideck.unify.models.operations.VaultConnectionsUpdateResponse;
import com.apideck.unify.operations.VaultConnectionsAllOperation;
import com.apideck.unify.operations.VaultConnectionsDeleteOperation;
import com.apideck.unify.operations.VaultConnectionsImportOperation;
import com.apideck.unify.operations.VaultConnectionsOneOperation;
import com.apideck.unify.operations.VaultConnectionsTokenOperation;
import com.apideck.unify.operations.VaultConnectionsUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Connections {
    private final SDKConfiguration sdkConfiguration;

    Connections(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get all connections
     * 
     * <p>This endpoint includes all the configured integrations and contains the required assets
     * to build an integrations page where your users can install integrations.
     * OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
     * 
     * @return The call builder
     */
    public VaultConnectionsAllRequestBuilder list() {
        return new VaultConnectionsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * Get all connections
     * 
     * <p>This endpoint includes all the configured integrations and contains the required assets
     * to build an integrations page where your users can install integrations.
     * OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsAllResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Get all connections
     * 
     * <p>This endpoint includes all the configured integrations and contains the required assets
     * to build an integrations page where your users can install integrations.
     * OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
     * 
     * @param consumerId ID of the consumer which you want to get or push data from
     * @param appId The ID of your Unify application
     * @param api Scope results to Unified API
     * @param configured Scopes results to connections that have been configured or not
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsAllResponse list(
            Optional<String> consumerId, Optional<String> appId,
            Optional<String> api, Optional<Boolean> configured,
            Optional<Options> options) throws Exception {
        VaultConnectionsAllRequest request =
            VaultConnectionsAllRequest
                .builder()
                .consumerId(consumerId)
                .appId(appId)
                .api(api)
                .configured(configured)
                .build();
        RequestOperation<VaultConnectionsAllRequest, VaultConnectionsAllResponse> operation
              = new VaultConnectionsAllOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get connection
     * 
     * <p>Get a connection
     * 
     * @return The call builder
     */
    public VaultConnectionsOneRequestBuilder get() {
        return new VaultConnectionsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get connection
     * 
     * <p>Get a connection
     * 
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsOneResponse get(String serviceId, String unifiedApi) throws Exception {
        return get(Optional.empty(), Optional.empty(), serviceId,
            unifiedApi, Optional.empty());
    }

    /**
     * Get connection
     * 
     * <p>Get a connection
     * 
     * @param consumerId ID of the consumer which you want to get or push data from
     * @param appId The ID of your Unify application
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsOneResponse get(
            Optional<String> consumerId, Optional<String> appId,
            String serviceId, String unifiedApi,
            Optional<Options> options) throws Exception {
        VaultConnectionsOneRequest request =
            VaultConnectionsOneRequest
                .builder()
                .consumerId(consumerId)
                .appId(appId)
                .serviceId(serviceId)
                .unifiedApi(unifiedApi)
                .build();
        RequestOperation<VaultConnectionsOneRequest, VaultConnectionsOneResponse> operation
              = new VaultConnectionsOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update connection
     * 
     * <p>Update a connection
     * 
     * @return The call builder
     */
    public VaultConnectionsUpdateRequestBuilder update() {
        return new VaultConnectionsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update connection
     * 
     * <p>Update a connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsUpdateResponse update(VaultConnectionsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update connection
     * 
     * <p>Update a connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsUpdateResponse update(VaultConnectionsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<VaultConnectionsUpdateRequest, VaultConnectionsUpdateResponse> operation
              = new VaultConnectionsUpdateOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deletes a connection
     * 
     * <p>Deletes a connection
     * 
     * @return The call builder
     */
    public VaultConnectionsDeleteRequestBuilder delete() {
        return new VaultConnectionsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes a connection
     * 
     * <p>Deletes a connection
     * 
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsDeleteResponse delete(String serviceId, String unifiedApi) throws Exception {
        return delete(Optional.empty(), Optional.empty(), serviceId,
            unifiedApi, Optional.empty());
    }

    /**
     * Deletes a connection
     * 
     * <p>Deletes a connection
     * 
     * @param consumerId ID of the consumer which you want to get or push data from
     * @param appId The ID of your Unify application
     * @param serviceId Service ID of the resource to return
     * @param unifiedApi Unified API
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsDeleteResponse delete(
            Optional<String> consumerId, Optional<String> appId,
            String serviceId, String unifiedApi,
            Optional<Options> options) throws Exception {
        VaultConnectionsDeleteRequest request =
            VaultConnectionsDeleteRequest
                .builder()
                .consumerId(consumerId)
                .appId(appId)
                .serviceId(serviceId)
                .unifiedApi(unifiedApi)
                .build();
        RequestOperation<VaultConnectionsDeleteRequest, VaultConnectionsDeleteResponse> operation
              = new VaultConnectionsDeleteOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Import connection
     * 
     * <p>Import an authorized connection.
     * 
     * @return The call builder
     */
    public VaultConnectionsImportRequestBuilder imports() {
        return new VaultConnectionsImportRequestBuilder(sdkConfiguration);
    }

    /**
     * Import connection
     * 
     * <p>Import an authorized connection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsImportResponse imports(VaultConnectionsImportRequest request) throws Exception {
        return imports(request, Optional.empty());
    }

    /**
     * Import connection
     * 
     * <p>Import an authorized connection.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsImportResponse imports(VaultConnectionsImportRequest request, Optional<Options> options) throws Exception {
        RequestOperation<VaultConnectionsImportRequest, VaultConnectionsImportResponse> operation
              = new VaultConnectionsImportOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Authorize Access Token
     * 
     * <p>Triggers exchanging persisted connection credentials for an access token and store it in Vault. Currently supported for connections with the `client_credentials` or `password` OAuth grant type.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the exchange of persisted connection credentials for an access token.
     *   - The access token will not be returned in the response. A 200 response code indicates the authorization was successful and that a valid access token was stored on the connection.
     *   - The access token will be used for subsequent API requests.
     * 
     * @return The call builder
     */
    public VaultConnectionsTokenRequestBuilder token() {
        return new VaultConnectionsTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Authorize Access Token
     * 
     * <p>Triggers exchanging persisted connection credentials for an access token and store it in Vault. Currently supported for connections with the `client_credentials` or `password` OAuth grant type.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the exchange of persisted connection credentials for an access token.
     *   - The access token will not be returned in the response. A 200 response code indicates the authorization was successful and that a valid access token was stored on the connection.
     *   - The access token will be used for subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsTokenResponse token(VaultConnectionsTokenRequest request) throws Exception {
        return token(request, Optional.empty());
    }

    /**
     * Authorize Access Token
     * 
     * <p>Triggers exchanging persisted connection credentials for an access token and store it in Vault. Currently supported for connections with the `client_credentials` or `password` OAuth grant type.
     * 
     * <p>Note:
     *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the exchange of persisted connection credentials for an access token.
     *   - The access token will not be returned in the response. A 200 response code indicates the authorization was successful and that a valid access token was stored on the connection.
     *   - The access token will be used for subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConnectionsTokenResponse token(VaultConnectionsTokenRequest request, Optional<Options> options) throws Exception {
        RequestOperation<VaultConnectionsTokenRequest, VaultConnectionsTokenResponse> operation
              = new VaultConnectionsTokenOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
