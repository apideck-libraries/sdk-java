/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.components.ConsumerInput;
import com.apideck.unify.models.components.UpdateConsumerRequest;
import com.apideck.unify.models.operations.VaultConsumersAddRequest;
import com.apideck.unify.models.operations.VaultConsumersAddRequestBuilder;
import com.apideck.unify.models.operations.VaultConsumersAddResponse;
import com.apideck.unify.models.operations.VaultConsumersAllRequest;
import com.apideck.unify.models.operations.VaultConsumersAllRequestBuilder;
import com.apideck.unify.models.operations.VaultConsumersAllResponse;
import com.apideck.unify.models.operations.VaultConsumersDeleteRequest;
import com.apideck.unify.models.operations.VaultConsumersDeleteRequestBuilder;
import com.apideck.unify.models.operations.VaultConsumersDeleteResponse;
import com.apideck.unify.models.operations.VaultConsumersOneRequest;
import com.apideck.unify.models.operations.VaultConsumersOneRequestBuilder;
import com.apideck.unify.models.operations.VaultConsumersOneResponse;
import com.apideck.unify.models.operations.VaultConsumersUpdateRequest;
import com.apideck.unify.models.operations.VaultConsumersUpdateRequestBuilder;
import com.apideck.unify.models.operations.VaultConsumersUpdateResponse;
import com.apideck.unify.operations.VaultConsumersAddOperation;
import com.apideck.unify.operations.VaultConsumersAllOperation;
import com.apideck.unify.operations.VaultConsumersDeleteOperation;
import com.apideck.unify.operations.VaultConsumersOneOperation;
import com.apideck.unify.operations.VaultConsumersUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Consumers {
    private final SDKConfiguration sdkConfiguration;

    Consumers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @return The call builder
     */
    public VaultConsumersAddRequestBuilder create() {
        return new VaultConsumersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @param consumer 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersAddResponse create(ConsumerInput consumer) throws Exception {
        return create(Optional.empty(), consumer, Optional.empty());
    }

    /**
     * Create consumer
     * 
     * <p>Create a consumer
     * 
     * @param appId The ID of your Unify application
     * @param consumer 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersAddResponse create(
            Optional<String> appId,
            ConsumerInput consumer,
            Optional<Options> options) throws Exception {
        VaultConsumersAddRequest request =
            VaultConsumersAddRequest
                .builder()
                .appId(appId)
                .consumer(consumer)
                .build();
        RequestOperation<VaultConsumersAddRequest, VaultConsumersAddResponse> operation
              = new VaultConsumersAddOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @return The call builder
     */
    public VaultConsumersAllRequestBuilder list() {
        return new VaultConsumersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersAllResponse listDirect() throws Exception {
        return list(Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Get all consumers
     * 
     * <p>This endpoint includes all application consumers, along with an aggregated count of requests made.
     * 
     * @param appId The ID of your Unify application
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param limit Number of results to return. Minimum 1, Maximum 200, Default 20
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<Options> options) throws Exception {
        VaultConsumersAllRequest request =
            VaultConsumersAllRequest
                .builder()
                .appId(appId)
                .cursor(cursor)
                .limit(limit)
                .build();
        RequestOperation<VaultConsumersAllRequest, VaultConsumersAllResponse> operation
              = new VaultConsumersAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @return The call builder
     */
    public VaultConsumersOneRequestBuilder get() {
        return new VaultConsumersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @param consumerId ID of the consumer to return
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersOneResponse get(String consumerId) throws Exception {
        return get(Optional.empty(), consumerId, Optional.empty());
    }

    /**
     * Get consumer
     * 
     * <p>Consumer detail including their aggregated counts with the connections they have authorized.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersOneResponse get(
            Optional<String> appId,
            String consumerId,
            Optional<Options> options) throws Exception {
        VaultConsumersOneRequest request =
            VaultConsumersOneRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .build();
        RequestOperation<VaultConsumersOneRequest, VaultConsumersOneResponse> operation
              = new VaultConsumersOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @return The call builder
     */
    public VaultConsumersUpdateRequestBuilder update() {
        return new VaultConsumersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @param consumerId ID of the consumer to return
     * @param updateConsumerRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersUpdateResponse update(
            String consumerId,
            UpdateConsumerRequest updateConsumerRequest) throws Exception {
        return update(Optional.empty(), consumerId, updateConsumerRequest, Optional.empty());
    }

    /**
     * Update consumer
     * 
     * <p>Update consumer metadata such as name and email.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param updateConsumerRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersUpdateResponse update(
            Optional<String> appId,
            String consumerId,
            UpdateConsumerRequest updateConsumerRequest,
            Optional<Options> options) throws Exception {
        VaultConsumersUpdateRequest request =
            VaultConsumersUpdateRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .updateConsumerRequest(updateConsumerRequest)
                .build();
        RequestOperation<VaultConsumersUpdateRequest, VaultConsumersUpdateResponse> operation
              = new VaultConsumersUpdateOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @return The call builder
     */
    public VaultConsumersDeleteRequestBuilder delete() {
        return new VaultConsumersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @param consumerId ID of the consumer to return
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersDeleteResponse delete(String consumerId) throws Exception {
        return delete(Optional.empty(), consumerId, Optional.empty());
    }

    /**
     * Delete consumer
     * 
     * <p>Delete consumer and all their connections, including credentials.
     * 
     * @param appId The ID of your Unify application
     * @param consumerId ID of the consumer to return
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultConsumersDeleteResponse delete(
            Optional<String> appId,
            String consumerId,
            Optional<Options> options) throws Exception {
        VaultConsumersDeleteRequest request =
            VaultConsumersDeleteRequest
                .builder()
                .appId(appId)
                .consumerId(consumerId)
                .build();
        RequestOperation<VaultConsumersDeleteRequest, VaultConsumersDeleteResponse> operation
              = new VaultConsumersDeleteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
