/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmContactsAddRequest;
import com.apideck.unify.models.operations.CrmContactsAddRequestBuilder;
import com.apideck.unify.models.operations.CrmContactsAddResponse;
import com.apideck.unify.models.operations.CrmContactsAllRequest;
import com.apideck.unify.models.operations.CrmContactsAllRequestBuilder;
import com.apideck.unify.models.operations.CrmContactsAllResponse;
import com.apideck.unify.models.operations.CrmContactsDeleteRequest;
import com.apideck.unify.models.operations.CrmContactsDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmContactsDeleteResponse;
import com.apideck.unify.models.operations.CrmContactsOneRequest;
import com.apideck.unify.models.operations.CrmContactsOneRequestBuilder;
import com.apideck.unify.models.operations.CrmContactsOneResponse;
import com.apideck.unify.models.operations.CrmContactsUpdateRequest;
import com.apideck.unify.models.operations.CrmContactsUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmContactsUpdateResponse;
import com.apideck.unify.operations.CrmContactsAddOperation;
import com.apideck.unify.operations.CrmContactsAllOperation;
import com.apideck.unify.operations.CrmContactsDeleteOperation;
import com.apideck.unify.operations.CrmContactsOneOperation;
import com.apideck.unify.operations.CrmContactsUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Contacts {
    private final SDKConfiguration sdkConfiguration;

    Contacts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @return The call builder
     */
    public CrmContactsAllRequestBuilder list() {
        return new CrmContactsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsAllResponse list(CrmContactsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List contacts
     * 
     * <p>List contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsAllResponse list(
            CrmContactsAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmContactsAllRequest, CrmContactsAllResponse> operation
              = new CrmContactsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @return The call builder
     */
    public CrmContactsAddRequestBuilder create() {
        return new CrmContactsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsAddResponse create(CrmContactsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create contact
     * 
     * <p>Create contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsAddResponse create(
            CrmContactsAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmContactsAddRequest, CrmContactsAddResponse> operation
              = new CrmContactsAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @return The call builder
     */
    public CrmContactsOneRequestBuilder get() {
        return new CrmContactsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsOneResponse get(CrmContactsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get contact
     * 
     * <p>Get contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsOneResponse get(
            CrmContactsOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmContactsOneRequest, CrmContactsOneResponse> operation
              = new CrmContactsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @return The call builder
     */
    public CrmContactsUpdateRequestBuilder update() {
        return new CrmContactsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsUpdateResponse update(CrmContactsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update contact
     * 
     * <p>Update contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsUpdateResponse update(
            CrmContactsUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmContactsUpdateRequest, CrmContactsUpdateResponse> operation
              = new CrmContactsUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @return The call builder
     */
    public CrmContactsDeleteRequestBuilder delete() {
        return new CrmContactsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsDeleteResponse delete(CrmContactsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete contact
     * 
     * <p>Delete contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmContactsDeleteResponse delete(
            CrmContactsDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmContactsDeleteRequest, CrmContactsDeleteResponse> operation
              = new CrmContactsDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
