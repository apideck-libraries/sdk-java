/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingCustomersAddRequest;
import com.apideck.unify.models.operations.AccountingCustomersAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingCustomersAddResponse;
import com.apideck.unify.models.operations.AccountingCustomersAllRequest;
import com.apideck.unify.models.operations.AccountingCustomersAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingCustomersAllResponse;
import com.apideck.unify.models.operations.AccountingCustomersDeleteRequest;
import com.apideck.unify.models.operations.AccountingCustomersDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingCustomersDeleteResponse;
import com.apideck.unify.models.operations.AccountingCustomersOneRequest;
import com.apideck.unify.models.operations.AccountingCustomersOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingCustomersOneResponse;
import com.apideck.unify.models.operations.AccountingCustomersUpdateRequest;
import com.apideck.unify.models.operations.AccountingCustomersUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingCustomersUpdateResponse;
import com.apideck.unify.operations.AccountingCustomersAddOperation;
import com.apideck.unify.operations.AccountingCustomersAllOperation;
import com.apideck.unify.operations.AccountingCustomersDeleteOperation;
import com.apideck.unify.operations.AccountingCustomersOneOperation;
import com.apideck.unify.operations.AccountingCustomersUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Customers {
    private final SDKConfiguration sdkConfiguration;

    Customers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @return The call builder
     */
    public AccountingCustomersAllRequestBuilder list() {
        return new AccountingCustomersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersAllResponse list(@Nonnull AccountingCustomersAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Customers
     * 
     * <p>List Customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersAllResponse list(
            @Nonnull AccountingCustomersAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingCustomersAllRequest, AccountingCustomersAllResponse> operation
              = new AccountingCustomersAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @return The call builder
     */
    public AccountingCustomersAddRequestBuilder create() {
        return new AccountingCustomersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersAddResponse create(@Nonnull AccountingCustomersAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Customer
     * 
     * <p>Create Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersAddResponse create(
            @Nonnull AccountingCustomersAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingCustomersAddRequest, AccountingCustomersAddResponse> operation
              = new AccountingCustomersAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @return The call builder
     */
    public AccountingCustomersOneRequestBuilder get() {
        return new AccountingCustomersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersOneResponse get(@Nonnull AccountingCustomersOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Customer
     * 
     * <p>Get Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersOneResponse get(
            @Nonnull AccountingCustomersOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingCustomersOneRequest, AccountingCustomersOneResponse> operation
              = new AccountingCustomersOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @return The call builder
     */
    public AccountingCustomersUpdateRequestBuilder update() {
        return new AccountingCustomersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersUpdateResponse update(@Nonnull AccountingCustomersUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Customer
     * 
     * <p>Update Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersUpdateResponse update(
            @Nonnull AccountingCustomersUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingCustomersUpdateRequest, AccountingCustomersUpdateResponse> operation
              = new AccountingCustomersUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @return The call builder
     */
    public AccountingCustomersDeleteRequestBuilder delete() {
        return new AccountingCustomersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersDeleteResponse delete(@Nonnull AccountingCustomersDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Customer
     * 
     * <p>Delete Customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCustomersDeleteResponse delete(
            @Nonnull AccountingCustomersDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingCustomersDeleteRequest, AccountingCustomersDeleteResponse> operation
              = new AccountingCustomersDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
