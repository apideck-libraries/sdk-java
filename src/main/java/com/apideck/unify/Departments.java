/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingDepartmentsAddRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingDepartmentsAddResponse;
import com.apideck.unify.models.operations.AccountingDepartmentsAllRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingDepartmentsAllResponse;
import com.apideck.unify.models.operations.AccountingDepartmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingDepartmentsDeleteResponse;
import com.apideck.unify.models.operations.AccountingDepartmentsOneRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingDepartmentsOneResponse;
import com.apideck.unify.models.operations.AccountingDepartmentsUpdateRequest;
import com.apideck.unify.models.operations.AccountingDepartmentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingDepartmentsUpdateResponse;
import com.apideck.unify.operations.AccountingDepartmentsAddOperation;
import com.apideck.unify.operations.AccountingDepartmentsAllOperation;
import com.apideck.unify.operations.AccountingDepartmentsDeleteOperation;
import com.apideck.unify.operations.AccountingDepartmentsOneOperation;
import com.apideck.unify.operations.AccountingDepartmentsUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Departments {
    private final SDKConfiguration sdkConfiguration;

    Departments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @return The call builder
     */
    public AccountingDepartmentsAllRequestBuilder list() {
        return new AccountingDepartmentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsAllResponse list(@Nonnull AccountingDepartmentsAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Departments
     * 
     * <p>List Departments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsAllResponse list(
            @Nonnull AccountingDepartmentsAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingDepartmentsAllRequest, AccountingDepartmentsAllResponse> operation
              = new AccountingDepartmentsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @return The call builder
     */
    public AccountingDepartmentsAddRequestBuilder create() {
        return new AccountingDepartmentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsAddResponse create(@Nonnull AccountingDepartmentsAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Department
     * 
     * <p>Create Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsAddResponse create(
            @Nonnull AccountingDepartmentsAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingDepartmentsAddRequest, AccountingDepartmentsAddResponse> operation
              = new AccountingDepartmentsAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @return The call builder
     */
    public AccountingDepartmentsOneRequestBuilder get() {
        return new AccountingDepartmentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsOneResponse get(@Nonnull AccountingDepartmentsOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Department
     * 
     * <p>Get Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsOneResponse get(
            @Nonnull AccountingDepartmentsOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingDepartmentsOneRequest, AccountingDepartmentsOneResponse> operation
              = new AccountingDepartmentsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @return The call builder
     */
    public AccountingDepartmentsUpdateRequestBuilder update() {
        return new AccountingDepartmentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsUpdateResponse update(@Nonnull AccountingDepartmentsUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Department
     * 
     * <p>Update Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsUpdateResponse update(
            @Nonnull AccountingDepartmentsUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingDepartmentsUpdateRequest, AccountingDepartmentsUpdateResponse> operation
              = new AccountingDepartmentsUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @return The call builder
     */
    public AccountingDepartmentsDeleteRequestBuilder delete() {
        return new AccountingDepartmentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsDeleteResponse delete(@Nonnull AccountingDepartmentsDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Department
     * 
     * <p>Delete Department
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingDepartmentsDeleteResponse delete(
            @Nonnull AccountingDepartmentsDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingDepartmentsDeleteRequest, AccountingDepartmentsDeleteResponse> operation
              = new AccountingDepartmentsDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
