/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageDriveGroupsAddRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAddRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAddResponse;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAllRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAllRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDriveGroupsAllResponse;
import com.apideck.unify.models.operations.FileStorageDriveGroupsDeleteRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDriveGroupsDeleteResponse;
import com.apideck.unify.models.operations.FileStorageDriveGroupsOneRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDriveGroupsOneResponse;
import com.apideck.unify.models.operations.FileStorageDriveGroupsUpdateRequest;
import com.apideck.unify.models.operations.FileStorageDriveGroupsUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDriveGroupsUpdateResponse;
import com.apideck.unify.operations.FileStorageDriveGroupsAdd;
import com.apideck.unify.operations.FileStorageDriveGroupsAll;
import com.apideck.unify.operations.FileStorageDriveGroupsDelete;
import com.apideck.unify.operations.FileStorageDriveGroupsOne;
import com.apideck.unify.operations.FileStorageDriveGroupsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class DriveGroups {
    private final SDKConfiguration sdkConfiguration;

    DriveGroups(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @return The call builder
     */
    public FileStorageDriveGroupsAllRequestBuilder list() {
        return new FileStorageDriveGroupsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsAllResponse list(FileStorageDriveGroupsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List DriveGroups
     * 
     * <p>List DriveGroups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsAllResponse list(FileStorageDriveGroupsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDriveGroupsAllRequest, FileStorageDriveGroupsAllResponse> operation
              = new FileStorageDriveGroupsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @return The call builder
     */
    public FileStorageDriveGroupsAddRequestBuilder create() {
        return new FileStorageDriveGroupsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsAddResponse create(FileStorageDriveGroupsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create DriveGroup
     * 
     * <p>Create DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsAddResponse create(FileStorageDriveGroupsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDriveGroupsAddRequest, FileStorageDriveGroupsAddResponse> operation
              = new FileStorageDriveGroupsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @return The call builder
     */
    public FileStorageDriveGroupsOneRequestBuilder get() {
        return new FileStorageDriveGroupsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsOneResponse get(FileStorageDriveGroupsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get DriveGroup
     * 
     * <p>Get DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsOneResponse get(FileStorageDriveGroupsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDriveGroupsOneRequest, FileStorageDriveGroupsOneResponse> operation
              = new FileStorageDriveGroupsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @return The call builder
     */
    public FileStorageDriveGroupsUpdateRequestBuilder update() {
        return new FileStorageDriveGroupsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsUpdateResponse update(FileStorageDriveGroupsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update DriveGroup
     * 
     * <p>Update DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsUpdateResponse update(FileStorageDriveGroupsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDriveGroupsUpdateRequest, FileStorageDriveGroupsUpdateResponse> operation
              = new FileStorageDriveGroupsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @return The call builder
     */
    public FileStorageDriveGroupsDeleteRequestBuilder delete() {
        return new FileStorageDriveGroupsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsDeleteResponse delete(FileStorageDriveGroupsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete DriveGroup
     * 
     * <p>Delete DriveGroup
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDriveGroupsDeleteResponse delete(FileStorageDriveGroupsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDriveGroupsDeleteRequest, FileStorageDriveGroupsDeleteResponse> operation
              = new FileStorageDriveGroupsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
