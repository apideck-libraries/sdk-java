/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageDrivesAddRequest;
import com.apideck.unify.models.operations.FileStorageDrivesAddRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesAddResponse;
import com.apideck.unify.models.operations.FileStorageDrivesAllRequest;
import com.apideck.unify.models.operations.FileStorageDrivesAllRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesAllResponse;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteRequest;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteResponse;
import com.apideck.unify.models.operations.FileStorageDrivesOneRequest;
import com.apideck.unify.models.operations.FileStorageDrivesOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesOneResponse;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateRequest;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateResponse;
import com.apideck.unify.operations.FileStorageDrivesAdd;
import com.apideck.unify.operations.FileStorageDrivesAll;
import com.apideck.unify.operations.FileStorageDrivesDelete;
import com.apideck.unify.operations.FileStorageDrivesOne;
import com.apideck.unify.operations.FileStorageDrivesUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Drives {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncDrives asyncSDK;

    Drives(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncDrives(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncDrives async() {
        return asyncSDK;
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @return The call builder
     */
    public FileStorageDrivesAllRequestBuilder list() {
        return new FileStorageDrivesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAllResponse list(FileStorageDrivesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAllResponse list(FileStorageDrivesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDrivesAllRequest, FileStorageDrivesAllResponse> operation
              = new FileStorageDrivesAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesAddRequestBuilder create() {
        return new FileStorageDrivesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAddResponse create(FileStorageDrivesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAddResponse create(FileStorageDrivesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDrivesAddRequest, FileStorageDrivesAddResponse> operation
              = new FileStorageDrivesAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesOneRequestBuilder get() {
        return new FileStorageDrivesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesOneResponse get(FileStorageDrivesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesOneResponse get(FileStorageDrivesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDrivesOneRequest, FileStorageDrivesOneResponse> operation
              = new FileStorageDrivesOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesUpdateRequestBuilder update() {
        return new FileStorageDrivesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesUpdateResponse update(FileStorageDrivesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesUpdateResponse update(FileStorageDrivesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDrivesUpdateRequest, FileStorageDrivesUpdateResponse> operation
              = new FileStorageDrivesUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesDeleteRequestBuilder delete() {
        return new FileStorageDrivesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesDeleteResponse delete(FileStorageDrivesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesDeleteResponse delete(FileStorageDrivesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageDrivesDeleteRequest, FileStorageDrivesDeleteResponse> operation
              = new FileStorageDrivesDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
