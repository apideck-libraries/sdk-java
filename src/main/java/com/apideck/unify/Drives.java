/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageDrivesAddRequest;
import com.apideck.unify.models.operations.FileStorageDrivesAddRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesAddResponse;
import com.apideck.unify.models.operations.FileStorageDrivesAllRequest;
import com.apideck.unify.models.operations.FileStorageDrivesAllRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesAllResponse;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteRequest;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesDeleteResponse;
import com.apideck.unify.models.operations.FileStorageDrivesOneRequest;
import com.apideck.unify.models.operations.FileStorageDrivesOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesOneResponse;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateRequest;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageDrivesUpdateResponse;
import com.apideck.unify.operations.FileStorageDrivesAddOperation;
import com.apideck.unify.operations.FileStorageDrivesAllOperation;
import com.apideck.unify.operations.FileStorageDrivesDeleteOperation;
import com.apideck.unify.operations.FileStorageDrivesOneOperation;
import com.apideck.unify.operations.FileStorageDrivesUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Drives {
    private final SDKConfiguration sdkConfiguration;

    Drives(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @return The call builder
     */
    public FileStorageDrivesAllRequestBuilder list() {
        return new FileStorageDrivesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAllResponse list(@Nonnull FileStorageDrivesAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Drives
     * 
     * <p>List Drives
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAllResponse list(
            @Nonnull FileStorageDrivesAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageDrivesAllRequest, FileStorageDrivesAllResponse> operation
              = new FileStorageDrivesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesAddRequestBuilder create() {
        return new FileStorageDrivesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAddResponse create(@Nonnull FileStorageDrivesAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Drive
     * 
     * <p>Create Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesAddResponse create(
            @Nonnull FileStorageDrivesAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageDrivesAddRequest, FileStorageDrivesAddResponse> operation
              = new FileStorageDrivesAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesOneRequestBuilder get() {
        return new FileStorageDrivesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesOneResponse get(@Nonnull FileStorageDrivesOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Drive
     * 
     * <p>Get Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesOneResponse get(
            @Nonnull FileStorageDrivesOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageDrivesOneRequest, FileStorageDrivesOneResponse> operation
              = new FileStorageDrivesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesUpdateRequestBuilder update() {
        return new FileStorageDrivesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesUpdateResponse update(@Nonnull FileStorageDrivesUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Drive
     * 
     * <p>Update Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesUpdateResponse update(
            @Nonnull FileStorageDrivesUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageDrivesUpdateRequest, FileStorageDrivesUpdateResponse> operation
              = new FileStorageDrivesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @return The call builder
     */
    public FileStorageDrivesDeleteRequestBuilder delete() {
        return new FileStorageDrivesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesDeleteResponse delete(@Nonnull FileStorageDrivesDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Drive
     * 
     * <p>Delete Drive
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageDrivesDeleteResponse delete(
            @Nonnull FileStorageDrivesDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageDrivesDeleteRequest, FileStorageDrivesDeleteResponse> operation
              = new FileStorageDrivesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
