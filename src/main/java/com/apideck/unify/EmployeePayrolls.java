/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.HrisEmployeePayrollsAllRequest;
import com.apideck.unify.models.operations.HrisEmployeePayrollsAllRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeePayrollsAllResponse;
import com.apideck.unify.models.operations.HrisEmployeePayrollsOneRequest;
import com.apideck.unify.models.operations.HrisEmployeePayrollsOneRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeePayrollsOneResponse;
import com.apideck.unify.operations.HrisEmployeePayrollsAllOperation;
import com.apideck.unify.operations.HrisEmployeePayrollsOneOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class EmployeePayrolls {
    private final SDKConfiguration sdkConfiguration;

    EmployeePayrolls(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @return The call builder
     */
    public HrisEmployeePayrollsAllRequestBuilder list() {
        return new HrisEmployeePayrollsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeePayrollsAllResponse list(HrisEmployeePayrollsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Employee Payrolls
     * 
     * <p>List payrolls for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeePayrollsAllResponse list(
            HrisEmployeePayrollsAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeePayrollsAllRequest, HrisEmployeePayrollsAllResponse> operation
              = new HrisEmployeePayrollsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @return The call builder
     */
    public HrisEmployeePayrollsOneRequestBuilder get() {
        return new HrisEmployeePayrollsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeePayrollsOneResponse get(HrisEmployeePayrollsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Employee Payroll
     * 
     * <p>Get payroll for employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeePayrollsOneResponse get(
            HrisEmployeePayrollsOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeePayrollsOneRequest, HrisEmployeePayrollsOneResponse> operation
              = new HrisEmployeePayrollsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
