/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.HrisEmployeesAddRequest;
import com.apideck.unify.models.operations.HrisEmployeesAddRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeesAddResponse;
import com.apideck.unify.models.operations.HrisEmployeesAllRequest;
import com.apideck.unify.models.operations.HrisEmployeesAllRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeesAllResponse;
import com.apideck.unify.models.operations.HrisEmployeesDeleteRequest;
import com.apideck.unify.models.operations.HrisEmployeesDeleteRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeesDeleteResponse;
import com.apideck.unify.models.operations.HrisEmployeesOneRequest;
import com.apideck.unify.models.operations.HrisEmployeesOneRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeesOneResponse;
import com.apideck.unify.models.operations.HrisEmployeesUpdateRequest;
import com.apideck.unify.models.operations.HrisEmployeesUpdateRequestBuilder;
import com.apideck.unify.models.operations.HrisEmployeesUpdateResponse;
import com.apideck.unify.operations.HrisEmployeesAddOperation;
import com.apideck.unify.operations.HrisEmployeesAllOperation;
import com.apideck.unify.operations.HrisEmployeesDeleteOperation;
import com.apideck.unify.operations.HrisEmployeesOneOperation;
import com.apideck.unify.operations.HrisEmployeesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Employees {
    private final SDKConfiguration sdkConfiguration;

    Employees(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @return The call builder
     */
    public HrisEmployeesAllRequestBuilder list() {
        return new HrisEmployeesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesAllResponse list(HrisEmployeesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Employees
     * 
     * <p>Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesAllResponse list(HrisEmployeesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeesAllRequest, HrisEmployeesAllResponse> operation
              = new HrisEmployeesAllOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @return The call builder
     */
    public HrisEmployeesAddRequestBuilder create() {
        return new HrisEmployeesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesAddResponse create(HrisEmployeesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Employee
     * 
     * <p>Create Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesAddResponse create(HrisEmployeesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeesAddRequest, HrisEmployeesAddResponse> operation
              = new HrisEmployeesAddOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @return The call builder
     */
    public HrisEmployeesOneRequestBuilder get() {
        return new HrisEmployeesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesOneResponse get(HrisEmployeesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Employee
     * 
     * <p>Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesOneResponse get(HrisEmployeesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeesOneRequest, HrisEmployeesOneResponse> operation
              = new HrisEmployeesOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @return The call builder
     */
    public HrisEmployeesUpdateRequestBuilder update() {
        return new HrisEmployeesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesUpdateResponse update(HrisEmployeesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Employee
     * 
     * <p>Update Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesUpdateResponse update(HrisEmployeesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeesUpdateRequest, HrisEmployeesUpdateResponse> operation
              = new HrisEmployeesUpdateOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @return The call builder
     */
    public HrisEmployeesDeleteRequestBuilder delete() {
        return new HrisEmployeesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesDeleteResponse delete(HrisEmployeesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Employee
     * 
     * <p>Delete Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisEmployeesDeleteResponse delete(HrisEmployeesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisEmployeesDeleteRequest, HrisEmployeesDeleteResponse> operation
              = new HrisEmployeesDeleteOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
