/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageFilesAllRequest;
import com.apideck.unify.models.operations.FileStorageFilesAllRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesAllResponse;
import com.apideck.unify.models.operations.FileStorageFilesDeleteRequest;
import com.apideck.unify.models.operations.FileStorageFilesDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesDeleteResponse;
import com.apideck.unify.models.operations.FileStorageFilesDownloadRequest;
import com.apideck.unify.models.operations.FileStorageFilesDownloadRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesDownloadResponse;
import com.apideck.unify.models.operations.FileStorageFilesExportRequest;
import com.apideck.unify.models.operations.FileStorageFilesExportRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesExportResponse;
import com.apideck.unify.models.operations.FileStorageFilesOneRequest;
import com.apideck.unify.models.operations.FileStorageFilesOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesOneResponse;
import com.apideck.unify.models.operations.FileStorageFilesSearchRequest;
import com.apideck.unify.models.operations.FileStorageFilesSearchRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesSearchResponse;
import com.apideck.unify.models.operations.FileStorageFilesUpdateRequest;
import com.apideck.unify.models.operations.FileStorageFilesUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFilesUpdateResponse;
import com.apideck.unify.operations.FileStorageFilesAllOperation;
import com.apideck.unify.operations.FileStorageFilesDeleteOperation;
import com.apideck.unify.operations.FileStorageFilesDownloadOperation;
import com.apideck.unify.operations.FileStorageFilesExportOperation;
import com.apideck.unify.operations.FileStorageFilesOneOperation;
import com.apideck.unify.operations.FileStorageFilesSearchOperation;
import com.apideck.unify.operations.FileStorageFilesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Files {
    private final SDKConfiguration sdkConfiguration;

    Files(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @return The call builder
     */
    public FileStorageFilesAllRequestBuilder list() {
        return new FileStorageFilesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesAllResponse list(FileStorageFilesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Files
     * 
     * <p>List Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesAllResponse list(
            FileStorageFilesAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesAllRequest, FileStorageFilesAllResponse> operation
              = new FileStorageFilesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @return The call builder
     */
    public FileStorageFilesSearchRequestBuilder search() {
        return new FileStorageFilesSearchRequestBuilder(sdkConfiguration);
    }

    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesSearchResponse search(FileStorageFilesSearchRequest request) throws Exception {
        return search(request, Optional.empty());
    }

    /**
     * Search Files
     * 
     * <p>Search Files
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesSearchResponse search(
            FileStorageFilesSearchRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesSearchRequest, FileStorageFilesSearchResponse> operation
              = new FileStorageFilesSearchOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @return The call builder
     */
    public FileStorageFilesOneRequestBuilder get() {
        return new FileStorageFilesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesOneResponse get(FileStorageFilesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get File
     * 
     * <p>Get File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesOneResponse get(
            FileStorageFilesOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesOneRequest, FileStorageFilesOneResponse> operation
              = new FileStorageFilesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @return The call builder
     */
    public FileStorageFilesUpdateRequestBuilder update() {
        return new FileStorageFilesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesUpdateResponse update(FileStorageFilesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Rename or move File
     * 
     * <p>Rename or move File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesUpdateResponse update(
            FileStorageFilesUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesUpdateRequest, FileStorageFilesUpdateResponse> operation
              = new FileStorageFilesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @return The call builder
     */
    public FileStorageFilesDeleteRequestBuilder delete() {
        return new FileStorageFilesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesDeleteResponse delete(FileStorageFilesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete File
     * 
     * <p>Delete File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesDeleteResponse delete(
            FileStorageFilesDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesDeleteRequest, FileStorageFilesDeleteResponse> operation
              = new FileStorageFilesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @return The call builder
     */
    public FileStorageFilesDownloadRequestBuilder download() {
        return new FileStorageFilesDownloadRequestBuilder(sdkConfiguration);
    }

    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesDownloadResponse download(FileStorageFilesDownloadRequest request) throws Exception {
        return download(request, Optional.empty());
    }

    /**
     * Download File
     * 
     * <p>Download File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesDownloadResponse download(
            FileStorageFilesDownloadRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesDownloadRequest, FileStorageFilesDownloadResponse> operation
              = new FileStorageFilesDownloadOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @return The call builder
     */
    public FileStorageFilesExportRequestBuilder export() {
        return new FileStorageFilesExportRequestBuilder(sdkConfiguration);
    }

    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesExportResponse export(FileStorageFilesExportRequest request) throws Exception {
        return export(request, Optional.empty());
    }

    /**
     * Export File
     * 
     * <p>Export File
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFilesExportResponse export(
            FileStorageFilesExportRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFilesExportRequest, FileStorageFilesExportResponse> operation
              = new FileStorageFilesExportOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
