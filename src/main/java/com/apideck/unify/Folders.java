/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageFoldersAddRequest;
import com.apideck.unify.models.operations.FileStorageFoldersAddRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersAddResponse;
import com.apideck.unify.models.operations.FileStorageFoldersCopyRequest;
import com.apideck.unify.models.operations.FileStorageFoldersCopyRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersCopyResponse;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteRequest;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteResponse;
import com.apideck.unify.models.operations.FileStorageFoldersOneRequest;
import com.apideck.unify.models.operations.FileStorageFoldersOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersOneResponse;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateRequest;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateResponse;
import com.apideck.unify.operations.FileStorageFoldersAddOperation;
import com.apideck.unify.operations.FileStorageFoldersCopyOperation;
import com.apideck.unify.operations.FileStorageFoldersDeleteOperation;
import com.apideck.unify.operations.FileStorageFoldersOneOperation;
import com.apideck.unify.operations.FileStorageFoldersUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Folders {
    private final SDKConfiguration sdkConfiguration;

    Folders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersAddRequestBuilder create() {
        return new FileStorageFoldersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersAddResponse create(@Nonnull FileStorageFoldersAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersAddResponse create(
            @Nonnull FileStorageFoldersAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageFoldersAddRequest, FileStorageFoldersAddResponse> operation
              = new FileStorageFoldersAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersOneRequestBuilder get() {
        return new FileStorageFoldersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersOneResponse get(@Nonnull FileStorageFoldersOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersOneResponse get(
            @Nonnull FileStorageFoldersOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageFoldersOneRequest, FileStorageFoldersOneResponse> operation
              = new FileStorageFoldersOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersUpdateRequestBuilder update() {
        return new FileStorageFoldersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersUpdateResponse update(@Nonnull FileStorageFoldersUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersUpdateResponse update(
            @Nonnull FileStorageFoldersUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageFoldersUpdateRequest, FileStorageFoldersUpdateResponse> operation
              = new FileStorageFoldersUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersDeleteRequestBuilder delete() {
        return new FileStorageFoldersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersDeleteResponse delete(@Nonnull FileStorageFoldersDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersDeleteResponse delete(
            @Nonnull FileStorageFoldersDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageFoldersDeleteRequest, FileStorageFoldersDeleteResponse> operation
              = new FileStorageFoldersDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersCopyRequestBuilder copy() {
        return new FileStorageFoldersCopyRequestBuilder(sdkConfiguration);
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersCopyResponse copy(@Nonnull FileStorageFoldersCopyRequest request) throws Exception {
        return copy(request, null);
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersCopyResponse copy(
            @Nonnull FileStorageFoldersCopyRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<FileStorageFoldersCopyRequest, FileStorageFoldersCopyResponse> operation
              = new FileStorageFoldersCopyOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
