/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.FileStorageFoldersAddRequest;
import com.apideck.unify.models.operations.FileStorageFoldersAddRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersAddResponse;
import com.apideck.unify.models.operations.FileStorageFoldersCopyRequest;
import com.apideck.unify.models.operations.FileStorageFoldersCopyRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersCopyResponse;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteRequest;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersDeleteResponse;
import com.apideck.unify.models.operations.FileStorageFoldersOneRequest;
import com.apideck.unify.models.operations.FileStorageFoldersOneRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersOneResponse;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateRequest;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateRequestBuilder;
import com.apideck.unify.models.operations.FileStorageFoldersUpdateResponse;
import com.apideck.unify.operations.FileStorageFoldersAdd;
import com.apideck.unify.operations.FileStorageFoldersCopy;
import com.apideck.unify.operations.FileStorageFoldersDelete;
import com.apideck.unify.operations.FileStorageFoldersOne;
import com.apideck.unify.operations.FileStorageFoldersUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Folders {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncFolders asyncSDK;

    Folders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncFolders(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncFolders async() {
        return asyncSDK;
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersAddRequestBuilder create() {
        return new FileStorageFoldersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersAddResponse create(FileStorageFoldersAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Folder
     * 
     * <p>Create Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersAddResponse create(FileStorageFoldersAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFoldersAddRequest, FileStorageFoldersAddResponse> operation
              = new FileStorageFoldersAdd.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersOneRequestBuilder get() {
        return new FileStorageFoldersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersOneResponse get(FileStorageFoldersOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Folder
     * 
     * <p>Get Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersOneResponse get(FileStorageFoldersOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFoldersOneRequest, FileStorageFoldersOneResponse> operation
              = new FileStorageFoldersOne.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersUpdateRequestBuilder update() {
        return new FileStorageFoldersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersUpdateResponse update(FileStorageFoldersUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Rename or move Folder
     * 
     * <p>Rename or move Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersUpdateResponse update(FileStorageFoldersUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFoldersUpdateRequest, FileStorageFoldersUpdateResponse> operation
              = new FileStorageFoldersUpdate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersDeleteRequestBuilder delete() {
        return new FileStorageFoldersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersDeleteResponse delete(FileStorageFoldersDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Folder
     * 
     * <p>Delete Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersDeleteResponse delete(FileStorageFoldersDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFoldersDeleteRequest, FileStorageFoldersDeleteResponse> operation
              = new FileStorageFoldersDelete.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @return The call builder
     */
    public FileStorageFoldersCopyRequestBuilder copy() {
        return new FileStorageFoldersCopyRequestBuilder(sdkConfiguration);
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersCopyResponse copy(FileStorageFoldersCopyRequest request) throws Exception {
        return copy(request, Optional.empty());
    }

    /**
     * Copy Folder
     * 
     * <p>Copy Folder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FileStorageFoldersCopyResponse copy(FileStorageFoldersCopyRequest request, Optional<Options> options) throws Exception {
        RequestOperation<FileStorageFoldersCopyRequest, FileStorageFoldersCopyResponse> operation
              = new FileStorageFoldersCopy.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
