/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingInvoiceItemsAddRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAddResponse;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAllRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoiceItemsAllResponse;
import com.apideck.unify.models.operations.AccountingInvoiceItemsDeleteRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoiceItemsDeleteResponse;
import com.apideck.unify.models.operations.AccountingInvoiceItemsOneRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoiceItemsOneResponse;
import com.apideck.unify.models.operations.AccountingInvoiceItemsUpdateRequest;
import com.apideck.unify.models.operations.AccountingInvoiceItemsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoiceItemsUpdateResponse;
import com.apideck.unify.operations.AccountingInvoiceItemsAddOperation;
import com.apideck.unify.operations.AccountingInvoiceItemsAllOperation;
import com.apideck.unify.operations.AccountingInvoiceItemsDeleteOperation;
import com.apideck.unify.operations.AccountingInvoiceItemsOneOperation;
import com.apideck.unify.operations.AccountingInvoiceItemsUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class InvoiceItems {
    private final SDKConfiguration sdkConfiguration;

    InvoiceItems(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @return The call builder
     */
    public AccountingInvoiceItemsAllRequestBuilder list() {
        return new AccountingInvoiceItemsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsAllResponse list(AccountingInvoiceItemsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Invoice Items
     * 
     * <p>List Invoice Items
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsAllResponse list(
            AccountingInvoiceItemsAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoiceItemsAllRequest, AccountingInvoiceItemsAllResponse> operation
              = new AccountingInvoiceItemsAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @return The call builder
     */
    public AccountingInvoiceItemsAddRequestBuilder create() {
        return new AccountingInvoiceItemsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsAddResponse create(AccountingInvoiceItemsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Invoice Item
     * 
     * <p>Create Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsAddResponse create(
            AccountingInvoiceItemsAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoiceItemsAddRequest, AccountingInvoiceItemsAddResponse> operation
              = new AccountingInvoiceItemsAddOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @return The call builder
     */
    public AccountingInvoiceItemsOneRequestBuilder get() {
        return new AccountingInvoiceItemsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsOneResponse get(AccountingInvoiceItemsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Invoice Item
     * 
     * <p>Get Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsOneResponse get(
            AccountingInvoiceItemsOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoiceItemsOneRequest, AccountingInvoiceItemsOneResponse> operation
              = new AccountingInvoiceItemsOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @return The call builder
     */
    public AccountingInvoiceItemsUpdateRequestBuilder update() {
        return new AccountingInvoiceItemsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsUpdateResponse update(AccountingInvoiceItemsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Invoice Item
     * 
     * <p>Update Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsUpdateResponse update(
            AccountingInvoiceItemsUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoiceItemsUpdateRequest, AccountingInvoiceItemsUpdateResponse> operation
              = new AccountingInvoiceItemsUpdateOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @return The call builder
     */
    public AccountingInvoiceItemsDeleteRequestBuilder delete() {
        return new AccountingInvoiceItemsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsDeleteResponse delete(AccountingInvoiceItemsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Invoice Item
     * 
     * <p>Delete Invoice Item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoiceItemsDeleteResponse delete(
            AccountingInvoiceItemsDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoiceItemsDeleteRequest, AccountingInvoiceItemsDeleteResponse> operation
              = new AccountingInvoiceItemsDeleteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
