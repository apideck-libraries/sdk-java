/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingInvoicesAddRequest;
import com.apideck.unify.models.operations.AccountingInvoicesAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoicesAddResponse;
import com.apideck.unify.models.operations.AccountingInvoicesAllRequest;
import com.apideck.unify.models.operations.AccountingInvoicesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoicesAllResponse;
import com.apideck.unify.models.operations.AccountingInvoicesDeleteRequest;
import com.apideck.unify.models.operations.AccountingInvoicesDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoicesDeleteResponse;
import com.apideck.unify.models.operations.AccountingInvoicesOneRequest;
import com.apideck.unify.models.operations.AccountingInvoicesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoicesOneResponse;
import com.apideck.unify.models.operations.AccountingInvoicesUpdateRequest;
import com.apideck.unify.models.operations.AccountingInvoicesUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingInvoicesUpdateResponse;
import com.apideck.unify.operations.AccountingInvoicesAddOperation;
import com.apideck.unify.operations.AccountingInvoicesAllOperation;
import com.apideck.unify.operations.AccountingInvoicesDeleteOperation;
import com.apideck.unify.operations.AccountingInvoicesOneOperation;
import com.apideck.unify.operations.AccountingInvoicesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Invoices {
    private final SDKConfiguration sdkConfiguration;

    Invoices(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @return The call builder
     */
    public AccountingInvoicesAllRequestBuilder list() {
        return new AccountingInvoicesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesAllResponse list(AccountingInvoicesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Invoices
     * 
     * <p>List Invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesAllResponse list(AccountingInvoicesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoicesAllRequest, AccountingInvoicesAllResponse> operation
              = new AccountingInvoicesAllOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @return The call builder
     */
    public AccountingInvoicesAddRequestBuilder create() {
        return new AccountingInvoicesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesAddResponse create(AccountingInvoicesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Invoice
     * 
     * <p>Create Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesAddResponse create(AccountingInvoicesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoicesAddRequest, AccountingInvoicesAddResponse> operation
              = new AccountingInvoicesAddOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @return The call builder
     */
    public AccountingInvoicesOneRequestBuilder get() {
        return new AccountingInvoicesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesOneResponse get(AccountingInvoicesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Invoice
     * 
     * <p>Get Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesOneResponse get(AccountingInvoicesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoicesOneRequest, AccountingInvoicesOneResponse> operation
              = new AccountingInvoicesOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @return The call builder
     */
    public AccountingInvoicesUpdateRequestBuilder update() {
        return new AccountingInvoicesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesUpdateResponse update(AccountingInvoicesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Invoice
     * 
     * <p>Update Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesUpdateResponse update(AccountingInvoicesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoicesUpdateRequest, AccountingInvoicesUpdateResponse> operation
              = new AccountingInvoicesUpdateOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @return The call builder
     */
    public AccountingInvoicesDeleteRequestBuilder delete() {
        return new AccountingInvoicesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesDeleteResponse delete(AccountingInvoicesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Invoice
     * 
     * <p>Delete Invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingInvoicesDeleteResponse delete(AccountingInvoicesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingInvoicesDeleteRequest, AccountingInvoicesDeleteResponse> operation
              = new AccountingInvoicesDeleteOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
