/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmLeadsAddRequest;
import com.apideck.unify.models.operations.CrmLeadsAddRequestBuilder;
import com.apideck.unify.models.operations.CrmLeadsAddResponse;
import com.apideck.unify.models.operations.CrmLeadsAllRequest;
import com.apideck.unify.models.operations.CrmLeadsAllRequestBuilder;
import com.apideck.unify.models.operations.CrmLeadsAllResponse;
import com.apideck.unify.models.operations.CrmLeadsDeleteRequest;
import com.apideck.unify.models.operations.CrmLeadsDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmLeadsDeleteResponse;
import com.apideck.unify.models.operations.CrmLeadsOneRequest;
import com.apideck.unify.models.operations.CrmLeadsOneRequestBuilder;
import com.apideck.unify.models.operations.CrmLeadsOneResponse;
import com.apideck.unify.models.operations.CrmLeadsUpdateRequest;
import com.apideck.unify.models.operations.CrmLeadsUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmLeadsUpdateResponse;
import com.apideck.unify.operations.CrmLeadsAddOperation;
import com.apideck.unify.operations.CrmLeadsAllOperation;
import com.apideck.unify.operations.CrmLeadsDeleteOperation;
import com.apideck.unify.operations.CrmLeadsOneOperation;
import com.apideck.unify.operations.CrmLeadsUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Leads {
    private final SDKConfiguration sdkConfiguration;

    Leads(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @return The call builder
     */
    public CrmLeadsAllRequestBuilder list() {
        return new CrmLeadsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsAllResponse list(CrmLeadsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List leads
     * 
     * <p>List leads
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsAllResponse list(
            CrmLeadsAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmLeadsAllRequest, CrmLeadsAllResponse> operation
              = new CrmLeadsAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @return The call builder
     */
    public CrmLeadsAddRequestBuilder create() {
        return new CrmLeadsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsAddResponse create(CrmLeadsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create lead
     * 
     * <p>Create lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsAddResponse create(
            CrmLeadsAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmLeadsAddRequest, CrmLeadsAddResponse> operation
              = new CrmLeadsAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @return The call builder
     */
    public CrmLeadsOneRequestBuilder get() {
        return new CrmLeadsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsOneResponse get(CrmLeadsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get lead
     * 
     * <p>Get lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsOneResponse get(
            CrmLeadsOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmLeadsOneRequest, CrmLeadsOneResponse> operation
              = new CrmLeadsOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @return The call builder
     */
    public CrmLeadsUpdateRequestBuilder update() {
        return new CrmLeadsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsUpdateResponse update(CrmLeadsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update lead
     * 
     * <p>Update lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsUpdateResponse update(
            CrmLeadsUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmLeadsUpdateRequest, CrmLeadsUpdateResponse> operation
              = new CrmLeadsUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @return The call builder
     */
    public CrmLeadsDeleteRequestBuilder delete() {
        return new CrmLeadsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsDeleteResponse delete(CrmLeadsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete lead
     * 
     * <p>Delete lead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmLeadsDeleteResponse delete(
            CrmLeadsDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmLeadsDeleteRequest, CrmLeadsDeleteResponse> operation
              = new CrmLeadsDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
