/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingLocationsAddRequest;
import com.apideck.unify.models.operations.AccountingLocationsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingLocationsAddResponse;
import com.apideck.unify.models.operations.AccountingLocationsAllRequest;
import com.apideck.unify.models.operations.AccountingLocationsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingLocationsAllResponse;
import com.apideck.unify.models.operations.AccountingLocationsDeleteRequest;
import com.apideck.unify.models.operations.AccountingLocationsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingLocationsDeleteResponse;
import com.apideck.unify.models.operations.AccountingLocationsOneRequest;
import com.apideck.unify.models.operations.AccountingLocationsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingLocationsOneResponse;
import com.apideck.unify.models.operations.AccountingLocationsUpdateRequest;
import com.apideck.unify.models.operations.AccountingLocationsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingLocationsUpdateResponse;
import com.apideck.unify.operations.AccountingLocationsAdd;
import com.apideck.unify.operations.AccountingLocationsAll;
import com.apideck.unify.operations.AccountingLocationsDelete;
import com.apideck.unify.operations.AccountingLocationsOne;
import com.apideck.unify.operations.AccountingLocationsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Locations {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncLocations asyncSDK;

    Locations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncLocations(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncLocations async() {
        return asyncSDK;
    }

    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @return The call builder
     */
    public AccountingLocationsAllRequestBuilder list() {
        return new AccountingLocationsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsAllResponse list(AccountingLocationsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Locations
     * 
     * <p>List Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsAllResponse list(AccountingLocationsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingLocationsAllRequest, AccountingLocationsAllResponse> operation
              = new AccountingLocationsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @return The call builder
     */
    public AccountingLocationsAddRequestBuilder create() {
        return new AccountingLocationsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsAddResponse create(AccountingLocationsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Location
     * 
     * <p>Create Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsAddResponse create(AccountingLocationsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingLocationsAddRequest, AccountingLocationsAddResponse> operation
              = new AccountingLocationsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @return The call builder
     */
    public AccountingLocationsOneRequestBuilder get() {
        return new AccountingLocationsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsOneResponse get(AccountingLocationsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Location
     * 
     * <p>Get Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsOneResponse get(AccountingLocationsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingLocationsOneRequest, AccountingLocationsOneResponse> operation
              = new AccountingLocationsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @return The call builder
     */
    public AccountingLocationsUpdateRequestBuilder update() {
        return new AccountingLocationsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsUpdateResponse update(AccountingLocationsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Location
     * 
     * <p>Update Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsUpdateResponse update(AccountingLocationsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingLocationsUpdateRequest, AccountingLocationsUpdateResponse> operation
              = new AccountingLocationsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @return The call builder
     */
    public AccountingLocationsDeleteRequestBuilder delete() {
        return new AccountingLocationsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsDeleteResponse delete(AccountingLocationsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Location
     * 
     * <p>Delete Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingLocationsDeleteResponse delete(AccountingLocationsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingLocationsDeleteRequest, AccountingLocationsDeleteResponse> operation
              = new AccountingLocationsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
