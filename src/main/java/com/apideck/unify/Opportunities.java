/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmOpportunitiesAddRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesAddRequestBuilder;
import com.apideck.unify.models.operations.CrmOpportunitiesAddResponse;
import com.apideck.unify.models.operations.CrmOpportunitiesAllRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesAllRequestBuilder;
import com.apideck.unify.models.operations.CrmOpportunitiesAllResponse;
import com.apideck.unify.models.operations.CrmOpportunitiesDeleteRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmOpportunitiesDeleteResponse;
import com.apideck.unify.models.operations.CrmOpportunitiesOneRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesOneRequestBuilder;
import com.apideck.unify.models.operations.CrmOpportunitiesOneResponse;
import com.apideck.unify.models.operations.CrmOpportunitiesUpdateRequest;
import com.apideck.unify.models.operations.CrmOpportunitiesUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmOpportunitiesUpdateResponse;
import com.apideck.unify.operations.CrmOpportunitiesAddOperation;
import com.apideck.unify.operations.CrmOpportunitiesAllOperation;
import com.apideck.unify.operations.CrmOpportunitiesDeleteOperation;
import com.apideck.unify.operations.CrmOpportunitiesOneOperation;
import com.apideck.unify.operations.CrmOpportunitiesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Opportunities {
    private final SDKConfiguration sdkConfiguration;

    Opportunities(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @return The call builder
     */
    public CrmOpportunitiesAllRequestBuilder list() {
        return new CrmOpportunitiesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesAllResponse list(CrmOpportunitiesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List opportunities
     * 
     * <p>List opportunities
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesAllResponse list(
            CrmOpportunitiesAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmOpportunitiesAllRequest, CrmOpportunitiesAllResponse> operation
              = new CrmOpportunitiesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @return The call builder
     */
    public CrmOpportunitiesAddRequestBuilder create() {
        return new CrmOpportunitiesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesAddResponse create(CrmOpportunitiesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create opportunity
     * 
     * <p>Create opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesAddResponse create(
            CrmOpportunitiesAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmOpportunitiesAddRequest, CrmOpportunitiesAddResponse> operation
              = new CrmOpportunitiesAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @return The call builder
     */
    public CrmOpportunitiesOneRequestBuilder get() {
        return new CrmOpportunitiesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesOneResponse get(CrmOpportunitiesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get opportunity
     * 
     * <p>Get opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesOneResponse get(
            CrmOpportunitiesOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmOpportunitiesOneRequest, CrmOpportunitiesOneResponse> operation
              = new CrmOpportunitiesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @return The call builder
     */
    public CrmOpportunitiesUpdateRequestBuilder update() {
        return new CrmOpportunitiesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesUpdateResponse update(CrmOpportunitiesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update opportunity
     * 
     * <p>Update opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesUpdateResponse update(
            CrmOpportunitiesUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmOpportunitiesUpdateRequest, CrmOpportunitiesUpdateResponse> operation
              = new CrmOpportunitiesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @return The call builder
     */
    public CrmOpportunitiesDeleteRequestBuilder delete() {
        return new CrmOpportunitiesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesDeleteResponse delete(CrmOpportunitiesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete opportunity
     * 
     * <p>Delete opportunity
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmOpportunitiesDeleteResponse delete(
            CrmOpportunitiesDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmOpportunitiesDeleteRequest, CrmOpportunitiesDeleteResponse> operation
              = new CrmOpportunitiesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
