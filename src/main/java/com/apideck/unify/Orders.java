/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.EcommerceOrdersAllRequest;
import com.apideck.unify.models.operations.EcommerceOrdersAllRequestBuilder;
import com.apideck.unify.models.operations.EcommerceOrdersAllResponse;
import com.apideck.unify.models.operations.EcommerceOrdersOneRequest;
import com.apideck.unify.models.operations.EcommerceOrdersOneRequestBuilder;
import com.apideck.unify.models.operations.EcommerceOrdersOneResponse;
import com.apideck.unify.operations.EcommerceOrdersAllOperation;
import com.apideck.unify.operations.EcommerceOrdersOneOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Orders {
    private final SDKConfiguration sdkConfiguration;

    Orders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @return The call builder
     */
    public EcommerceOrdersAllRequestBuilder list() {
        return new EcommerceOrdersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceOrdersAllResponse list(EcommerceOrdersAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Orders
     * 
     * <p>List Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceOrdersAllResponse list(EcommerceOrdersAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<EcommerceOrdersAllRequest, EcommerceOrdersAllResponse> operation
              = new EcommerceOrdersAllOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @return The call builder
     */
    public EcommerceOrdersOneRequestBuilder get() {
        return new EcommerceOrdersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceOrdersOneResponse get(EcommerceOrdersOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Order
     * 
     * <p>Get Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceOrdersOneResponse get(EcommerceOrdersOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<EcommerceOrdersOneRequest, EcommerceOrdersOneResponse> operation
              = new EcommerceOrdersOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
