/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingPaymentsAddRequest;
import com.apideck.unify.models.operations.AccountingPaymentsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingPaymentsAddResponse;
import com.apideck.unify.models.operations.AccountingPaymentsAllRequest;
import com.apideck.unify.models.operations.AccountingPaymentsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingPaymentsAllResponse;
import com.apideck.unify.models.operations.AccountingPaymentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingPaymentsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingPaymentsDeleteResponse;
import com.apideck.unify.models.operations.AccountingPaymentsOneRequest;
import com.apideck.unify.models.operations.AccountingPaymentsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingPaymentsOneResponse;
import com.apideck.unify.models.operations.AccountingPaymentsUpdateRequest;
import com.apideck.unify.models.operations.AccountingPaymentsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingPaymentsUpdateResponse;
import com.apideck.unify.operations.AccountingPaymentsAdd;
import com.apideck.unify.operations.AccountingPaymentsAll;
import com.apideck.unify.operations.AccountingPaymentsDelete;
import com.apideck.unify.operations.AccountingPaymentsOne;
import com.apideck.unify.operations.AccountingPaymentsUpdate;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Payments {
    private final SDKConfiguration sdkConfiguration;

    Payments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @return The call builder
     */
    public AccountingPaymentsAllRequestBuilder list() {
        return new AccountingPaymentsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsAllResponse list(AccountingPaymentsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Payments
     * 
     * <p>List Payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsAllResponse list(AccountingPaymentsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingPaymentsAllRequest, AccountingPaymentsAllResponse> operation
              = new AccountingPaymentsAll.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @return The call builder
     */
    public AccountingPaymentsAddRequestBuilder create() {
        return new AccountingPaymentsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsAddResponse create(AccountingPaymentsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Payment
     * 
     * <p>Create Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsAddResponse create(AccountingPaymentsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingPaymentsAddRequest, AccountingPaymentsAddResponse> operation
              = new AccountingPaymentsAdd.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @return The call builder
     */
    public AccountingPaymentsOneRequestBuilder get() {
        return new AccountingPaymentsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsOneResponse get(AccountingPaymentsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Payment
     * 
     * <p>Get Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsOneResponse get(AccountingPaymentsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingPaymentsOneRequest, AccountingPaymentsOneResponse> operation
              = new AccountingPaymentsOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @return The call builder
     */
    public AccountingPaymentsUpdateRequestBuilder update() {
        return new AccountingPaymentsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsUpdateResponse update(AccountingPaymentsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Payment
     * 
     * <p>Update Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsUpdateResponse update(AccountingPaymentsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingPaymentsUpdateRequest, AccountingPaymentsUpdateResponse> operation
              = new AccountingPaymentsUpdate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @return The call builder
     */
    public AccountingPaymentsDeleteRequestBuilder delete() {
        return new AccountingPaymentsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsDeleteResponse delete(AccountingPaymentsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Payment
     * 
     * <p>Delete Payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPaymentsDeleteResponse delete(AccountingPaymentsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingPaymentsDeleteRequest, AccountingPaymentsDeleteResponse> operation
              = new AccountingPaymentsDelete.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
