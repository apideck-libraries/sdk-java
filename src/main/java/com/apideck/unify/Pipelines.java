/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmPipelinesAddRequest;
import com.apideck.unify.models.operations.CrmPipelinesAddRequestBuilder;
import com.apideck.unify.models.operations.CrmPipelinesAddResponse;
import com.apideck.unify.models.operations.CrmPipelinesAllRequest;
import com.apideck.unify.models.operations.CrmPipelinesAllRequestBuilder;
import com.apideck.unify.models.operations.CrmPipelinesAllResponse;
import com.apideck.unify.models.operations.CrmPipelinesDeleteRequest;
import com.apideck.unify.models.operations.CrmPipelinesDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmPipelinesDeleteResponse;
import com.apideck.unify.models.operations.CrmPipelinesOneRequest;
import com.apideck.unify.models.operations.CrmPipelinesOneRequestBuilder;
import com.apideck.unify.models.operations.CrmPipelinesOneResponse;
import com.apideck.unify.models.operations.CrmPipelinesUpdateRequest;
import com.apideck.unify.models.operations.CrmPipelinesUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmPipelinesUpdateResponse;
import com.apideck.unify.operations.CrmPipelinesAddOperation;
import com.apideck.unify.operations.CrmPipelinesAllOperation;
import com.apideck.unify.operations.CrmPipelinesDeleteOperation;
import com.apideck.unify.operations.CrmPipelinesOneOperation;
import com.apideck.unify.operations.CrmPipelinesUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Pipelines {
    private final SDKConfiguration sdkConfiguration;

    Pipelines(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @return The call builder
     */
    public CrmPipelinesAllRequestBuilder list() {
        return new CrmPipelinesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesAllResponse list(CrmPipelinesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List pipelines
     * 
     * <p>List pipelines
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesAllResponse list(
            CrmPipelinesAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmPipelinesAllRequest, CrmPipelinesAllResponse> operation
              = new CrmPipelinesAllOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @return The call builder
     */
    public CrmPipelinesAddRequestBuilder create() {
        return new CrmPipelinesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesAddResponse create(CrmPipelinesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create pipeline
     * 
     * <p>Create pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesAddResponse create(
            CrmPipelinesAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmPipelinesAddRequest, CrmPipelinesAddResponse> operation
              = new CrmPipelinesAddOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @return The call builder
     */
    public CrmPipelinesOneRequestBuilder get() {
        return new CrmPipelinesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesOneResponse get(CrmPipelinesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get pipeline
     * 
     * <p>Get pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesOneResponse get(
            CrmPipelinesOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmPipelinesOneRequest, CrmPipelinesOneResponse> operation
              = new CrmPipelinesOneOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @return The call builder
     */
    public CrmPipelinesUpdateRequestBuilder update() {
        return new CrmPipelinesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesUpdateResponse update(CrmPipelinesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update pipeline
     * 
     * <p>Update pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesUpdateResponse update(
            CrmPipelinesUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmPipelinesUpdateRequest, CrmPipelinesUpdateResponse> operation
              = new CrmPipelinesUpdateOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @return The call builder
     */
    public CrmPipelinesDeleteRequestBuilder delete() {
        return new CrmPipelinesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesDeleteResponse delete(CrmPipelinesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete pipeline
     * 
     * <p>Delete pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmPipelinesDeleteResponse delete(
            CrmPipelinesDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<CrmPipelinesDeleteRequest, CrmPipelinesDeleteResponse> operation
              = new CrmPipelinesDeleteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
