/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingProfitAndLossOneRequest;
import com.apideck.unify.models.operations.AccountingProfitAndLossOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingProfitAndLossOneResponse;
import com.apideck.unify.operations.AccountingProfitAndLossOneOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class ProfitAndLoss {
    private final SDKConfiguration sdkConfiguration;

    ProfitAndLoss(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get Profit and Loss
     * 
     * <p>Get Profit and Loss
     * 
     * @return The call builder
     */
    public AccountingProfitAndLossOneRequestBuilder get() {
        return new AccountingProfitAndLossOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Profit and Loss
     * 
     * <p>Get Profit and Loss
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProfitAndLossOneResponse get(AccountingProfitAndLossOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Profit and Loss
     * 
     * <p>Get Profit and Loss
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProfitAndLossOneResponse get(AccountingProfitAndLossOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProfitAndLossOneRequest, AccountingProfitAndLossOneResponse> operation
              = new AccountingProfitAndLossOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
