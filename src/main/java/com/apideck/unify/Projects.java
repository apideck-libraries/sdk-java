/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingProjectsAddRequest;
import com.apideck.unify.models.operations.AccountingProjectsAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingProjectsAddResponse;
import com.apideck.unify.models.operations.AccountingProjectsAllRequest;
import com.apideck.unify.models.operations.AccountingProjectsAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingProjectsAllResponse;
import com.apideck.unify.models.operations.AccountingProjectsDeleteRequest;
import com.apideck.unify.models.operations.AccountingProjectsDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingProjectsDeleteResponse;
import com.apideck.unify.models.operations.AccountingProjectsOneRequest;
import com.apideck.unify.models.operations.AccountingProjectsOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingProjectsOneResponse;
import com.apideck.unify.models.operations.AccountingProjectsUpdateRequest;
import com.apideck.unify.models.operations.AccountingProjectsUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingProjectsUpdateResponse;
import com.apideck.unify.operations.AccountingProjectsAdd;
import com.apideck.unify.operations.AccountingProjectsAll;
import com.apideck.unify.operations.AccountingProjectsDelete;
import com.apideck.unify.operations.AccountingProjectsOne;
import com.apideck.unify.operations.AccountingProjectsUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Projects {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncProjects asyncSDK;

    Projects(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncProjects(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncProjects async() {
        return asyncSDK;
    }

    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @return The call builder
     */
    public AccountingProjectsAllRequestBuilder list() {
        return new AccountingProjectsAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsAllResponse list(AccountingProjectsAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List projects
     * 
     * <p>List projects
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsAllResponse list(AccountingProjectsAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProjectsAllRequest, AccountingProjectsAllResponse> operation
              = new AccountingProjectsAll.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @return The call builder
     */
    public AccountingProjectsAddRequestBuilder create() {
        return new AccountingProjectsAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsAddResponse create(AccountingProjectsAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create project
     * 
     * <p>Create project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsAddResponse create(AccountingProjectsAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProjectsAddRequest, AccountingProjectsAddResponse> operation
              = new AccountingProjectsAdd.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @return The call builder
     */
    public AccountingProjectsOneRequestBuilder get() {
        return new AccountingProjectsOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsOneResponse get(AccountingProjectsOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get project
     * 
     * <p>Get project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsOneResponse get(AccountingProjectsOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProjectsOneRequest, AccountingProjectsOneResponse> operation
              = new AccountingProjectsOne.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @return The call builder
     */
    public AccountingProjectsUpdateRequestBuilder update() {
        return new AccountingProjectsUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsUpdateResponse update(AccountingProjectsUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update project
     * 
     * <p>Update project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsUpdateResponse update(AccountingProjectsUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProjectsUpdateRequest, AccountingProjectsUpdateResponse> operation
              = new AccountingProjectsUpdate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @return The call builder
     */
    public AccountingProjectsDeleteRequestBuilder delete() {
        return new AccountingProjectsDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsDeleteResponse delete(AccountingProjectsDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete project
     * 
     * <p>Delete project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingProjectsDeleteResponse delete(AccountingProjectsDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingProjectsDeleteRequest, AccountingProjectsDeleteResponse> operation
              = new AccountingProjectsDelete.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
