/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingPurchaseOrdersAddRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAddResponse;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAllRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersAllResponse;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersDeleteRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersDeleteResponse;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersOneRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersOneResponse;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersUpdateRequest;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingPurchaseOrdersUpdateResponse;
import com.apideck.unify.operations.AccountingPurchaseOrdersAddOperation;
import com.apideck.unify.operations.AccountingPurchaseOrdersAllOperation;
import com.apideck.unify.operations.AccountingPurchaseOrdersDeleteOperation;
import com.apideck.unify.operations.AccountingPurchaseOrdersOneOperation;
import com.apideck.unify.operations.AccountingPurchaseOrdersUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class PurchaseOrders {
    private final SDKConfiguration sdkConfiguration;

    PurchaseOrders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @return The call builder
     */
    public AccountingPurchaseOrdersAllRequestBuilder list() {
        return new AccountingPurchaseOrdersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersAllResponse list(AccountingPurchaseOrdersAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Purchase Orders
     * 
     * <p>List Purchase Orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersAllResponse list(
            AccountingPurchaseOrdersAllRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingPurchaseOrdersAllRequest, AccountingPurchaseOrdersAllResponse> operation
              = new AccountingPurchaseOrdersAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @return The call builder
     */
    public AccountingPurchaseOrdersAddRequestBuilder create() {
        return new AccountingPurchaseOrdersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersAddResponse create(AccountingPurchaseOrdersAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Purchase Order
     * 
     * <p>Create Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersAddResponse create(
            AccountingPurchaseOrdersAddRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingPurchaseOrdersAddRequest, AccountingPurchaseOrdersAddResponse> operation
              = new AccountingPurchaseOrdersAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @return The call builder
     */
    public AccountingPurchaseOrdersOneRequestBuilder get() {
        return new AccountingPurchaseOrdersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersOneResponse get(AccountingPurchaseOrdersOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Purchase Order
     * 
     * <p>Get Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersOneResponse get(
            AccountingPurchaseOrdersOneRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingPurchaseOrdersOneRequest, AccountingPurchaseOrdersOneResponse> operation
              = new AccountingPurchaseOrdersOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @return The call builder
     */
    public AccountingPurchaseOrdersUpdateRequestBuilder update() {
        return new AccountingPurchaseOrdersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersUpdateResponse update(AccountingPurchaseOrdersUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Purchase Order
     * 
     * <p>Update Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersUpdateResponse update(
            AccountingPurchaseOrdersUpdateRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingPurchaseOrdersUpdateRequest, AccountingPurchaseOrdersUpdateResponse> operation
              = new AccountingPurchaseOrdersUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @return The call builder
     */
    public AccountingPurchaseOrdersDeleteRequestBuilder delete() {
        return new AccountingPurchaseOrdersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersDeleteResponse delete(AccountingPurchaseOrdersDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Purchase Order
     * 
     * <p>Delete Purchase Order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingPurchaseOrdersDeleteResponse delete(
            AccountingPurchaseOrdersDeleteRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<AccountingPurchaseOrdersDeleteRequest, AccountingPurchaseOrdersDeleteResponse> operation
              = new AccountingPurchaseOrdersDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
