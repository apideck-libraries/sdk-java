/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingQuotesAddRequest;
import com.apideck.unify.models.operations.AccountingQuotesAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingQuotesAddResponse;
import com.apideck.unify.models.operations.AccountingQuotesAllRequest;
import com.apideck.unify.models.operations.AccountingQuotesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingQuotesAllResponse;
import com.apideck.unify.models.operations.AccountingQuotesDeleteRequest;
import com.apideck.unify.models.operations.AccountingQuotesDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingQuotesDeleteResponse;
import com.apideck.unify.models.operations.AccountingQuotesOneRequest;
import com.apideck.unify.models.operations.AccountingQuotesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingQuotesOneResponse;
import com.apideck.unify.models.operations.AccountingQuotesUpdateRequest;
import com.apideck.unify.models.operations.AccountingQuotesUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingQuotesUpdateResponse;
import com.apideck.unify.operations.AccountingQuotesAdd;
import com.apideck.unify.operations.AccountingQuotesAll;
import com.apideck.unify.operations.AccountingQuotesDelete;
import com.apideck.unify.operations.AccountingQuotesOne;
import com.apideck.unify.operations.AccountingQuotesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Quotes {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncQuotes asyncSDK;

    Quotes(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncQuotes(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncQuotes async() {
        return asyncSDK;
    }

    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @return The call builder
     */
    public AccountingQuotesAllRequestBuilder list() {
        return new AccountingQuotesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesAllResponse list(AccountingQuotesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Quotes
     * 
     * <p>List Quotes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesAllResponse list(AccountingQuotesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingQuotesAllRequest, AccountingQuotesAllResponse> operation
              = new AccountingQuotesAll.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @return The call builder
     */
    public AccountingQuotesAddRequestBuilder create() {
        return new AccountingQuotesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesAddResponse create(AccountingQuotesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Quote
     * 
     * <p>Create Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesAddResponse create(AccountingQuotesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingQuotesAddRequest, AccountingQuotesAddResponse> operation
              = new AccountingQuotesAdd.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @return The call builder
     */
    public AccountingQuotesOneRequestBuilder get() {
        return new AccountingQuotesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesOneResponse get(AccountingQuotesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Quote
     * 
     * <p>Get Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesOneResponse get(AccountingQuotesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingQuotesOneRequest, AccountingQuotesOneResponse> operation
              = new AccountingQuotesOne.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @return The call builder
     */
    public AccountingQuotesUpdateRequestBuilder update() {
        return new AccountingQuotesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesUpdateResponse update(AccountingQuotesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Quote
     * 
     * <p>Update Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesUpdateResponse update(AccountingQuotesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingQuotesUpdateRequest, AccountingQuotesUpdateResponse> operation
              = new AccountingQuotesUpdate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @return The call builder
     */
    public AccountingQuotesDeleteRequestBuilder delete() {
        return new AccountingQuotesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesDeleteResponse delete(AccountingQuotesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Quote
     * 
     * <p>Delete Quote
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingQuotesDeleteResponse delete(AccountingQuotesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingQuotesDeleteRequest, AccountingQuotesDeleteResponse> operation
              = new AccountingQuotesDelete.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
