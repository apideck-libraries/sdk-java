/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.EcommerceStoresOneRequest;
import com.apideck.unify.models.operations.EcommerceStoresOneRequestBuilder;
import com.apideck.unify.models.operations.EcommerceStoresOneResponse;
import com.apideck.unify.operations.EcommerceStoresOne;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Stores {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncStores asyncSDK;

    Stores(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncStores(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncStores async() {
        return asyncSDK;
    }

    /**
     * Get Store
     * 
     * <p>Get Store
     * 
     * @return The call builder
     */
    public EcommerceStoresOneRequestBuilder get() {
        return new EcommerceStoresOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Store
     * 
     * <p>Get Store
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceStoresOneResponse get(EcommerceStoresOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Store
     * 
     * <p>Get Store
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public EcommerceStoresOneResponse get(EcommerceStoresOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<EcommerceStoresOneRequest, EcommerceStoresOneResponse> operation
              = new EcommerceStoresOne.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
