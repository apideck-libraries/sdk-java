/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingSubsidiariesAddRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingSubsidiariesAddResponse;
import com.apideck.unify.models.operations.AccountingSubsidiariesAllRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingSubsidiariesAllResponse;
import com.apideck.unify.models.operations.AccountingSubsidiariesDeleteRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingSubsidiariesDeleteResponse;
import com.apideck.unify.models.operations.AccountingSubsidiariesOneRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingSubsidiariesOneResponse;
import com.apideck.unify.models.operations.AccountingSubsidiariesUpdateRequest;
import com.apideck.unify.models.operations.AccountingSubsidiariesUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingSubsidiariesUpdateResponse;
import com.apideck.unify.operations.AccountingSubsidiariesAddOperation;
import com.apideck.unify.operations.AccountingSubsidiariesAllOperation;
import com.apideck.unify.operations.AccountingSubsidiariesDeleteOperation;
import com.apideck.unify.operations.AccountingSubsidiariesOneOperation;
import com.apideck.unify.operations.AccountingSubsidiariesUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Subsidiaries {
    private final SDKConfiguration sdkConfiguration;

    Subsidiaries(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @return The call builder
     */
    public AccountingSubsidiariesAllRequestBuilder list() {
        return new AccountingSubsidiariesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesAllResponse list(@Nonnull AccountingSubsidiariesAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Subsidiaries
     * 
     * <p>List Subsidiaries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesAllResponse list(
            @Nonnull AccountingSubsidiariesAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSubsidiariesAllRequest, AccountingSubsidiariesAllResponse> operation
              = new AccountingSubsidiariesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @return The call builder
     */
    public AccountingSubsidiariesAddRequestBuilder create() {
        return new AccountingSubsidiariesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesAddResponse create(@Nonnull AccountingSubsidiariesAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Subsidiary
     * 
     * <p>Create Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesAddResponse create(
            @Nonnull AccountingSubsidiariesAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSubsidiariesAddRequest, AccountingSubsidiariesAddResponse> operation
              = new AccountingSubsidiariesAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @return The call builder
     */
    public AccountingSubsidiariesOneRequestBuilder get() {
        return new AccountingSubsidiariesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesOneResponse get(@Nonnull AccountingSubsidiariesOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Subsidiary
     * 
     * <p>Get Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesOneResponse get(
            @Nonnull AccountingSubsidiariesOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSubsidiariesOneRequest, AccountingSubsidiariesOneResponse> operation
              = new AccountingSubsidiariesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @return The call builder
     */
    public AccountingSubsidiariesUpdateRequestBuilder update() {
        return new AccountingSubsidiariesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesUpdateResponse update(@Nonnull AccountingSubsidiariesUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Subsidiary
     * 
     * <p>Update Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesUpdateResponse update(
            @Nonnull AccountingSubsidiariesUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSubsidiariesUpdateRequest, AccountingSubsidiariesUpdateResponse> operation
              = new AccountingSubsidiariesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @return The call builder
     */
    public AccountingSubsidiariesDeleteRequestBuilder delete() {
        return new AccountingSubsidiariesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesDeleteResponse delete(@Nonnull AccountingSubsidiariesDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Subsidiary
     * 
     * <p>Delete Subsidiary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSubsidiariesDeleteResponse delete(
            @Nonnull AccountingSubsidiariesDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSubsidiariesDeleteRequest, AccountingSubsidiariesDeleteResponse> operation
              = new AccountingSubsidiariesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
