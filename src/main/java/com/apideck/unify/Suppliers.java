/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingSuppliersAddRequest;
import com.apideck.unify.models.operations.AccountingSuppliersAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingSuppliersAddResponse;
import com.apideck.unify.models.operations.AccountingSuppliersAllRequest;
import com.apideck.unify.models.operations.AccountingSuppliersAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingSuppliersAllResponse;
import com.apideck.unify.models.operations.AccountingSuppliersDeleteRequest;
import com.apideck.unify.models.operations.AccountingSuppliersDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingSuppliersDeleteResponse;
import com.apideck.unify.models.operations.AccountingSuppliersOneRequest;
import com.apideck.unify.models.operations.AccountingSuppliersOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingSuppliersOneResponse;
import com.apideck.unify.models.operations.AccountingSuppliersUpdateRequest;
import com.apideck.unify.models.operations.AccountingSuppliersUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingSuppliersUpdateResponse;
import com.apideck.unify.operations.AccountingSuppliersAddOperation;
import com.apideck.unify.operations.AccountingSuppliersAllOperation;
import com.apideck.unify.operations.AccountingSuppliersDeleteOperation;
import com.apideck.unify.operations.AccountingSuppliersOneOperation;
import com.apideck.unify.operations.AccountingSuppliersUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class Suppliers {
    private final SDKConfiguration sdkConfiguration;

    Suppliers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @return The call builder
     */
    public AccountingSuppliersAllRequestBuilder list() {
        return new AccountingSuppliersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersAllResponse list(@Nonnull AccountingSuppliersAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Suppliers
     * 
     * <p>List Suppliers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersAllResponse list(
            @Nonnull AccountingSuppliersAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSuppliersAllRequest, AccountingSuppliersAllResponse> operation
              = new AccountingSuppliersAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @return The call builder
     */
    public AccountingSuppliersAddRequestBuilder create() {
        return new AccountingSuppliersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersAddResponse create(@Nonnull AccountingSuppliersAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Supplier
     * 
     * <p>Create Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersAddResponse create(
            @Nonnull AccountingSuppliersAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSuppliersAddRequest, AccountingSuppliersAddResponse> operation
              = new AccountingSuppliersAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @return The call builder
     */
    public AccountingSuppliersOneRequestBuilder get() {
        return new AccountingSuppliersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersOneResponse get(@Nonnull AccountingSuppliersOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Supplier
     * 
     * <p>Get Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersOneResponse get(
            @Nonnull AccountingSuppliersOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSuppliersOneRequest, AccountingSuppliersOneResponse> operation
              = new AccountingSuppliersOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @return The call builder
     */
    public AccountingSuppliersUpdateRequestBuilder update() {
        return new AccountingSuppliersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersUpdateResponse update(@Nonnull AccountingSuppliersUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Supplier
     * 
     * <p>Update Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersUpdateResponse update(
            @Nonnull AccountingSuppliersUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSuppliersUpdateRequest, AccountingSuppliersUpdateResponse> operation
              = new AccountingSuppliersUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @return The call builder
     */
    public AccountingSuppliersDeleteRequestBuilder delete() {
        return new AccountingSuppliersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersDeleteResponse delete(@Nonnull AccountingSuppliersDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Supplier
     * 
     * <p>Delete Supplier
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingSuppliersDeleteResponse delete(
            @Nonnull AccountingSuppliersDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingSuppliersDeleteRequest, AccountingSuppliersDeleteResponse> operation
              = new AccountingSuppliersDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
