/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingTaxRatesAddRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingTaxRatesAddResponse;
import com.apideck.unify.models.operations.AccountingTaxRatesAllRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingTaxRatesAllResponse;
import com.apideck.unify.models.operations.AccountingTaxRatesDeleteRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingTaxRatesDeleteResponse;
import com.apideck.unify.models.operations.AccountingTaxRatesOneRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingTaxRatesOneResponse;
import com.apideck.unify.models.operations.AccountingTaxRatesUpdateRequest;
import com.apideck.unify.models.operations.AccountingTaxRatesUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingTaxRatesUpdateResponse;
import com.apideck.unify.operations.AccountingTaxRatesAddOperation;
import com.apideck.unify.operations.AccountingTaxRatesAllOperation;
import com.apideck.unify.operations.AccountingTaxRatesDeleteOperation;
import com.apideck.unify.operations.AccountingTaxRatesOneOperation;
import com.apideck.unify.operations.AccountingTaxRatesUpdateOperation;
import com.apideck.unify.utils.Options;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class TaxRates {
    private final SDKConfiguration sdkConfiguration;

    TaxRates(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
     * 
     * @return The call builder
     */
    public AccountingTaxRatesAllRequestBuilder list() {
        return new AccountingTaxRatesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesAllResponse list(@Nonnull AccountingTaxRatesAllRequest request) throws Exception {
        return list(request, null);
    }

    /**
     * List Tax Rates
     * 
     * <p>List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesAllResponse list(
            @Nonnull AccountingTaxRatesAllRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingTaxRatesAllRequest, AccountingTaxRatesAllResponse> operation
              = new AccountingTaxRatesAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @return The call builder
     */
    public AccountingTaxRatesAddRequestBuilder create() {
        return new AccountingTaxRatesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesAddResponse create(@Nonnull AccountingTaxRatesAddRequest request) throws Exception {
        return create(request, null);
    }

    /**
     * Create Tax Rate
     * 
     * <p>Create Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesAddResponse create(
            @Nonnull AccountingTaxRatesAddRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingTaxRatesAddRequest, AccountingTaxRatesAddResponse> operation
              = new AccountingTaxRatesAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @return The call builder
     */
    public AccountingTaxRatesOneRequestBuilder get() {
        return new AccountingTaxRatesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesOneResponse get(@Nonnull AccountingTaxRatesOneRequest request) throws Exception {
        return get(request, null);
    }

    /**
     * Get Tax Rate
     * 
     * <p>Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesOneResponse get(
            @Nonnull AccountingTaxRatesOneRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingTaxRatesOneRequest, AccountingTaxRatesOneResponse> operation
              = new AccountingTaxRatesOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @return The call builder
     */
    public AccountingTaxRatesUpdateRequestBuilder update() {
        return new AccountingTaxRatesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesUpdateResponse update(@Nonnull AccountingTaxRatesUpdateRequest request) throws Exception {
        return update(request, null);
    }

    /**
     * Update Tax Rate
     * 
     * <p>Update Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesUpdateResponse update(
            @Nonnull AccountingTaxRatesUpdateRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingTaxRatesUpdateRequest, AccountingTaxRatesUpdateResponse> operation
              = new AccountingTaxRatesUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @return The call builder
     */
    public AccountingTaxRatesDeleteRequestBuilder delete() {
        return new AccountingTaxRatesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesDeleteResponse delete(@Nonnull AccountingTaxRatesDeleteRequest request) throws Exception {
        return delete(request, null);
    }

    /**
     * Delete Tax Rate
     * 
     * <p>Delete Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTaxRatesDeleteResponse delete(
            @Nonnull AccountingTaxRatesDeleteRequest request,
            @Nullable Options options) throws Exception {
        RequestOperation<AccountingTaxRatesDeleteRequest, AccountingTaxRatesDeleteResponse> operation
              = new AccountingTaxRatesDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
