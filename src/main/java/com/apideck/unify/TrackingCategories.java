/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.AccountingTrackingCategoriesAddRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAddRequestBuilder;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAddResponse;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAllRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAllRequestBuilder;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAllResponse;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesDeleteRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesDeleteRequestBuilder;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesDeleteResponse;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesOneRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesOneRequestBuilder;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesOneResponse;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesUpdateRequest;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesUpdateRequestBuilder;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesUpdateResponse;
import com.apideck.unify.operations.AccountingTrackingCategoriesAdd;
import com.apideck.unify.operations.AccountingTrackingCategoriesAll;
import com.apideck.unify.operations.AccountingTrackingCategoriesDelete;
import com.apideck.unify.operations.AccountingTrackingCategoriesOne;
import com.apideck.unify.operations.AccountingTrackingCategoriesUpdate;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class TrackingCategories {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTrackingCategories asyncSDK;

    TrackingCategories(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncTrackingCategories(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncTrackingCategories async() {
        return asyncSDK;
    }

    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @return The call builder
     */
    public AccountingTrackingCategoriesAllRequestBuilder list() {
        return new AccountingTrackingCategoriesAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesAllResponse list(AccountingTrackingCategoriesAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List Tracking Categories
     * 
     * <p>List Tracking Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesAllResponse list(AccountingTrackingCategoriesAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingTrackingCategoriesAllRequest, AccountingTrackingCategoriesAllResponse> operation
              = new AccountingTrackingCategoriesAll.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @return The call builder
     */
    public AccountingTrackingCategoriesAddRequestBuilder create() {
        return new AccountingTrackingCategoriesAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesAddResponse create(AccountingTrackingCategoriesAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create Tracking Category
     * 
     * <p>Create Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesAddResponse create(AccountingTrackingCategoriesAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingTrackingCategoriesAddRequest, AccountingTrackingCategoriesAddResponse> operation
              = new AccountingTrackingCategoriesAdd.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @return The call builder
     */
    public AccountingTrackingCategoriesOneRequestBuilder get() {
        return new AccountingTrackingCategoriesOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesOneResponse get(AccountingTrackingCategoriesOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get Tracking Category
     * 
     * <p>Get Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesOneResponse get(AccountingTrackingCategoriesOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingTrackingCategoriesOneRequest, AccountingTrackingCategoriesOneResponse> operation
              = new AccountingTrackingCategoriesOne.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @return The call builder
     */
    public AccountingTrackingCategoriesUpdateRequestBuilder update() {
        return new AccountingTrackingCategoriesUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesUpdateResponse update(AccountingTrackingCategoriesUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update Tracking Category
     * 
     * <p>Update Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesUpdateResponse update(AccountingTrackingCategoriesUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingTrackingCategoriesUpdateRequest, AccountingTrackingCategoriesUpdateResponse> operation
              = new AccountingTrackingCategoriesUpdate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @return The call builder
     */
    public AccountingTrackingCategoriesDeleteRequestBuilder delete() {
        return new AccountingTrackingCategoriesDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesDeleteResponse delete(AccountingTrackingCategoriesDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete Tracking Category
     * 
     * <p>Delete Tracking Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingTrackingCategoriesDeleteResponse delete(AccountingTrackingCategoriesDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingTrackingCategoriesDeleteRequest, AccountingTrackingCategoriesDeleteResponse> operation
              = new AccountingTrackingCategoriesDelete.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
