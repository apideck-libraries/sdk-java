/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.CrmUsersAddRequest;
import com.apideck.unify.models.operations.CrmUsersAddRequestBuilder;
import com.apideck.unify.models.operations.CrmUsersAddResponse;
import com.apideck.unify.models.operations.CrmUsersAllRequest;
import com.apideck.unify.models.operations.CrmUsersAllRequestBuilder;
import com.apideck.unify.models.operations.CrmUsersAllResponse;
import com.apideck.unify.models.operations.CrmUsersDeleteRequest;
import com.apideck.unify.models.operations.CrmUsersDeleteRequestBuilder;
import com.apideck.unify.models.operations.CrmUsersDeleteResponse;
import com.apideck.unify.models.operations.CrmUsersOneRequest;
import com.apideck.unify.models.operations.CrmUsersOneRequestBuilder;
import com.apideck.unify.models.operations.CrmUsersOneResponse;
import com.apideck.unify.models.operations.CrmUsersUpdateRequest;
import com.apideck.unify.models.operations.CrmUsersUpdateRequestBuilder;
import com.apideck.unify.models.operations.CrmUsersUpdateResponse;
import com.apideck.unify.operations.CrmUsersAddOperation;
import com.apideck.unify.operations.CrmUsersAllOperation;
import com.apideck.unify.operations.CrmUsersDeleteOperation;
import com.apideck.unify.operations.CrmUsersOneOperation;
import com.apideck.unify.operations.CrmUsersUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Users {
    private final SDKConfiguration sdkConfiguration;

    Users(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @return The call builder
     */
    public CrmUsersAllRequestBuilder list() {
        return new CrmUsersAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersAllResponse list(CrmUsersAllRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersAllResponse list(CrmUsersAllRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmUsersAllRequest, CrmUsersAllResponse> operation
              = new CrmUsersAllOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @return The call builder
     */
    public CrmUsersAddRequestBuilder create() {
        return new CrmUsersAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersAddResponse create(CrmUsersAddRequest request) throws Exception {
        return create(request, Optional.empty());
    }

    /**
     * Create user
     * 
     * <p>Create user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersAddResponse create(CrmUsersAddRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmUsersAddRequest, CrmUsersAddResponse> operation
              = new CrmUsersAddOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @return The call builder
     */
    public CrmUsersOneRequestBuilder get() {
        return new CrmUsersOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersOneResponse get(CrmUsersOneRequest request) throws Exception {
        return get(request, Optional.empty());
    }

    /**
     * Get user
     * 
     * <p>Get user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersOneResponse get(CrmUsersOneRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmUsersOneRequest, CrmUsersOneResponse> operation
              = new CrmUsersOneOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @return The call builder
     */
    public CrmUsersUpdateRequestBuilder update() {
        return new CrmUsersUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersUpdateResponse update(CrmUsersUpdateRequest request) throws Exception {
        return update(request, Optional.empty());
    }

    /**
     * Update user
     * 
     * <p>Update user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersUpdateResponse update(CrmUsersUpdateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmUsersUpdateRequest, CrmUsersUpdateResponse> operation
              = new CrmUsersUpdateOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @return The call builder
     */
    public CrmUsersDeleteRequestBuilder delete() {
        return new CrmUsersDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersDeleteResponse delete(CrmUsersDeleteRequest request) throws Exception {
        return delete(request, Optional.empty());
    }

    /**
     * Delete user
     * 
     * <p>Delete user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CrmUsersDeleteResponse delete(CrmUsersDeleteRequest request, Optional<Options> options) throws Exception {
        RequestOperation<CrmUsersDeleteRequest, CrmUsersDeleteResponse> operation
              = new CrmUsersDeleteOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
