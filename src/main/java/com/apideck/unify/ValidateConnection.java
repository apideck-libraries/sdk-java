/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.operations.VaultValidateConnectionStateRequest;
import com.apideck.unify.models.operations.VaultValidateConnectionStateRequestBuilder;
import com.apideck.unify.models.operations.VaultValidateConnectionStateResponse;
import com.apideck.unify.operations.VaultValidateConnectionState;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class ValidateConnection {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncValidateConnection asyncSDK;

    ValidateConnection(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncValidateConnection(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncValidateConnection async() {
        return asyncSDK;
    }

    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks
     * based on the connection auth type. For basic and apiKey auth types, the presence of required fields
     * is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token
     * regardless of its expiry.
     * 
     * <p>Note:
     * - Do not include any credentials in the request body. This operation does not persist changes, but
     * only triggers the validation of connection state.
     * - If a refresh token flow was performed and successful, the new access token will then be used for
     * subsequent API requests.
     * 
     * @return The call builder
     */
    public VaultValidateConnectionStateRequestBuilder state() {
        return new VaultValidateConnectionStateRequestBuilder(sdkConfiguration);
    }

    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks
     * based on the connection auth type. For basic and apiKey auth types, the presence of required fields
     * is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token
     * regardless of its expiry.
     * 
     * <p>Note:
     * - Do not include any credentials in the request body. This operation does not persist changes, but
     * only triggers the validation of connection state.
     * - If a refresh token flow was performed and successful, the new access token will then be used for
     * subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultValidateConnectionStateResponse state(VaultValidateConnectionStateRequest request) throws Exception {
        return state(request, Optional.empty());
    }

    /**
     * Validate Connection State
     * 
     * <p>This endpoint validates the current state of a given connection. This will perform different checks
     * based on the connection auth type. For basic and apiKey auth types, the presence of required fields
     * is checked.
     * For connectors that implement OAuth2, this operation forces the refresh flow for an access token
     * regardless of its expiry.
     * 
     * <p>Note:
     * - Do not include any credentials in the request body. This operation does not persist changes, but
     * only triggers the validation of connection state.
     * - If a refresh token flow was performed and successful, the new access token will then be used for
     * subsequent API requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VaultValidateConnectionStateResponse state(VaultValidateConnectionStateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<VaultValidateConnectionStateRequest, VaultValidateConnectionStateResponse> operation
              = new VaultValidateConnectionState.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
