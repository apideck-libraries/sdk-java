/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.models.components.CreateWebhookRequest;
import com.apideck.unify.models.components.UpdateWebhookRequest;
import com.apideck.unify.models.operations.WebhookWebhooksAddRequest;
import com.apideck.unify.models.operations.WebhookWebhooksAddRequestBuilder;
import com.apideck.unify.models.operations.WebhookWebhooksAddResponse;
import com.apideck.unify.models.operations.WebhookWebhooksAllRequest;
import com.apideck.unify.models.operations.WebhookWebhooksAllRequestBuilder;
import com.apideck.unify.models.operations.WebhookWebhooksAllResponse;
import com.apideck.unify.models.operations.WebhookWebhooksDeleteRequest;
import com.apideck.unify.models.operations.WebhookWebhooksDeleteRequestBuilder;
import com.apideck.unify.models.operations.WebhookWebhooksDeleteResponse;
import com.apideck.unify.models.operations.WebhookWebhooksOneRequest;
import com.apideck.unify.models.operations.WebhookWebhooksOneRequestBuilder;
import com.apideck.unify.models.operations.WebhookWebhooksOneResponse;
import com.apideck.unify.models.operations.WebhookWebhooksUpdateRequest;
import com.apideck.unify.models.operations.WebhookWebhooksUpdateRequestBuilder;
import com.apideck.unify.models.operations.WebhookWebhooksUpdateResponse;
import com.apideck.unify.operations.WebhookWebhooksAddOperation;
import com.apideck.unify.operations.WebhookWebhooksAllOperation;
import com.apideck.unify.operations.WebhookWebhooksDeleteOperation;
import com.apideck.unify.operations.WebhookWebhooksOneOperation;
import com.apideck.unify.operations.WebhookWebhooksUpdateOperation;
import com.apideck.unify.utils.Options;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Webhooks {
    private final SDKConfiguration sdkConfiguration;

    Webhooks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @return The call builder
     */
    public WebhookWebhooksAllRequestBuilder list() {
        return new WebhookWebhooksAllRequestBuilder(sdkConfiguration);
    }

    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksAllResponse listDirect() throws Exception {
        return list(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List webhook subscriptions
     * 
     * <p>List all webhook subscriptions
     * 
     * @param appId The ID of your Unify application
     * @param cursor Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     * @param limit Number of results to return. Minimum 1, Maximum 200, Default 20
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<Options> options) throws Exception {
        WebhookWebhooksAllRequest request =
            WebhookWebhooksAllRequest
                .builder()
                .appId(appId)
                .cursor(cursor)
                .limit(limit)
                .build();
        RequestOperation<WebhookWebhooksAllRequest, WebhookWebhooksAllResponse> operation
              = new WebhookWebhooksAllOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @return The call builder
     */
    public WebhookWebhooksAddRequestBuilder create() {
        return new WebhookWebhooksAddRequestBuilder(sdkConfiguration);
    }

    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @param createWebhookRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksAddResponse create(CreateWebhookRequest createWebhookRequest) throws Exception {
        return create(Optional.empty(), createWebhookRequest, Optional.empty());
    }

    /**
     * Create webhook subscription
     * 
     * <p>Create a webhook subscription to receive events
     * 
     * @param appId The ID of your Unify application
     * @param createWebhookRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksAddResponse create(
            Optional<String> appId,
            CreateWebhookRequest createWebhookRequest,
            Optional<Options> options) throws Exception {
        WebhookWebhooksAddRequest request =
            WebhookWebhooksAddRequest
                .builder()
                .appId(appId)
                .createWebhookRequest(createWebhookRequest)
                .build();
        RequestOperation<WebhookWebhooksAddRequest, WebhookWebhooksAddResponse> operation
              = new WebhookWebhooksAddOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @return The call builder
     */
    public WebhookWebhooksOneRequestBuilder get() {
        return new WebhookWebhooksOneRequestBuilder(sdkConfiguration);
    }

    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksOneResponse get(String id) throws Exception {
        return get(id, Optional.empty(), Optional.empty());
    }

    /**
     * Get webhook subscription
     * 
     * <p>Get the webhook subscription details
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksOneResponse get(
            String id,
            Optional<String> appId,
            Optional<Options> options) throws Exception {
        WebhookWebhooksOneRequest request =
            WebhookWebhooksOneRequest
                .builder()
                .id(id)
                .appId(appId)
                .build();
        RequestOperation<WebhookWebhooksOneRequest, WebhookWebhooksOneResponse> operation
              = new WebhookWebhooksOneOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @return The call builder
     */
    public WebhookWebhooksUpdateRequestBuilder update() {
        return new WebhookWebhooksUpdateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param updateWebhookRequest 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksUpdateResponse update(
            String id,
            UpdateWebhookRequest updateWebhookRequest) throws Exception {
        return update(id, Optional.empty(), updateWebhookRequest,
            Optional.empty());
    }

    /**
     * Update webhook subscription
     * 
     * <p>Update a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param updateWebhookRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksUpdateResponse update(
            String id,
            Optional<String> appId,
            UpdateWebhookRequest updateWebhookRequest,
            Optional<Options> options) throws Exception {
        WebhookWebhooksUpdateRequest request =
            WebhookWebhooksUpdateRequest
                .builder()
                .id(id)
                .appId(appId)
                .updateWebhookRequest(updateWebhookRequest)
                .build();
        RequestOperation<WebhookWebhooksUpdateRequest, WebhookWebhooksUpdateResponse> operation
              = new WebhookWebhooksUpdateOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @return The call builder
     */
    public WebhookWebhooksDeleteRequestBuilder delete() {
        return new WebhookWebhooksDeleteRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksDeleteResponse delete(String id) throws Exception {
        return delete(id, Optional.empty(), Optional.empty());
    }

    /**
     * Delete webhook subscription
     * 
     * <p>Delete a webhook subscription
     * 
     * @param id JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
     * @param appId The ID of your Unify application
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WebhookWebhooksDeleteResponse delete(
            String id,
            Optional<String> appId,
            Optional<Options> options) throws Exception {
        WebhookWebhooksDeleteRequest request =
            WebhookWebhooksDeleteRequest
                .builder()
                .id(id)
                .appId(appId)
                .build();
        RequestOperation<WebhookWebhooksDeleteRequest, WebhookWebhooksDeleteResponse> operation
              = new WebhookWebhooksDeleteOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
