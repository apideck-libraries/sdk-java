/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountingBankAccountInput {
    /**
     * Display ID for the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * The name of the bank account as it appears in the accounting system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The bank account number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    private JsonNullable<String> accountNumber;

    /**
     * The type of bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_type")
    private Optional<? extends AccountingBankAccountAccountType> accountType;

    /**
     * The name of the bank or financial institution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    private JsonNullable<String> bankName;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The current balance of the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * The available balance (considering pending transactions and overdraft)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_balance")
    private JsonNullable<Double> availableBalance;

    /**
     * The overdraft limit for the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overdraft_limit")
    private JsonNullable<Double> overdraftLimit;

    /**
     * Bank routing number (US)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routing_number")
    private JsonNullable<String> routingNumber;

    /**
     * International Bank Account Number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    private JsonNullable<String> iban;

    /**
     * Bank Identifier Code / SWIFT Code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bic")
    private JsonNullable<String> bic;

    /**
     * Bank State Branch number (Australia/New Zealand)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bsb_number")
    private JsonNullable<String> bsbNumber;

    /**
     * Bank branch identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch_identifier")
    private JsonNullable<String> branchIdentifier;

    /**
     * Bank code assigned by central bank
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_code")
    private JsonNullable<String> bankCode;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The status of the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends AccountingBankAccountStatus> status;

    /**
     * Description or notes about the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    @JsonCreator
    public AccountingBankAccountInput(
            @JsonProperty("display_id") JsonNullable<String> displayId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("account_number") JsonNullable<String> accountNumber,
            @JsonProperty("account_type") Optional<? extends AccountingBankAccountAccountType> accountType,
            @JsonProperty("bank_name") JsonNullable<String> bankName,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("balance") JsonNullable<Double> balance,
            @JsonProperty("available_balance") JsonNullable<Double> availableBalance,
            @JsonProperty("overdraft_limit") JsonNullable<Double> overdraftLimit,
            @JsonProperty("routing_number") JsonNullable<String> routingNumber,
            @JsonProperty("iban") JsonNullable<String> iban,
            @JsonProperty("bic") JsonNullable<String> bic,
            @JsonProperty("bsb_number") JsonNullable<String> bsbNumber,
            @JsonProperty("branch_identifier") JsonNullable<String> branchIdentifier,
            @JsonProperty("bank_code") JsonNullable<String> bankCode,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("status") JsonNullable<? extends AccountingBankAccountStatus> status,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(bankName, "bankName");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(availableBalance, "availableBalance");
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        Utils.checkNotNull(routingNumber, "routingNumber");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(bic, "bic");
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        Utils.checkNotNull(bankCode, "bankCode");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(customFields, "customFields");
        this.displayId = displayId;
        this.name = name;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.bankName = bankName;
        this.currency = currency;
        this.balance = balance;
        this.availableBalance = availableBalance;
        this.overdraftLimit = overdraftLimit;
        this.routingNumber = routingNumber;
        this.iban = iban;
        this.bic = bic;
        this.bsbNumber = bsbNumber;
        this.branchIdentifier = branchIdentifier;
        this.bankCode = bankCode;
        this.country = country;
        this.status = status;
        this.description = description;
        this.customFields = customFields;
    }
    
    public AccountingBankAccountInput() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Display ID for the bank account
     */
    @JsonIgnore
    public JsonNullable<String> displayId() {
        return displayId;
    }

    /**
     * The name of the bank account as it appears in the accounting system
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The bank account number
     */
    @JsonIgnore
    public JsonNullable<String> accountNumber() {
        return accountNumber;
    }

    /**
     * The type of bank account
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingBankAccountAccountType> accountType() {
        return (Optional<AccountingBankAccountAccountType>) accountType;
    }

    /**
     * The name of the bank or financial institution
     */
    @JsonIgnore
    public JsonNullable<String> bankName() {
        return bankName;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The current balance of the bank account
     */
    @JsonIgnore
    public JsonNullable<Double> balance() {
        return balance;
    }

    /**
     * The available balance (considering pending transactions and overdraft)
     */
    @JsonIgnore
    public JsonNullable<Double> availableBalance() {
        return availableBalance;
    }

    /**
     * The overdraft limit for the account
     */
    @JsonIgnore
    public JsonNullable<Double> overdraftLimit() {
        return overdraftLimit;
    }

    /**
     * Bank routing number (US)
     */
    @JsonIgnore
    public JsonNullable<String> routingNumber() {
        return routingNumber;
    }

    /**
     * International Bank Account Number
     */
    @JsonIgnore
    public JsonNullable<String> iban() {
        return iban;
    }

    /**
     * Bank Identifier Code / SWIFT Code
     */
    @JsonIgnore
    public JsonNullable<String> bic() {
        return bic;
    }

    /**
     * Bank State Branch number (Australia/New Zealand)
     */
    @JsonIgnore
    public JsonNullable<String> bsbNumber() {
        return bsbNumber;
    }

    /**
     * Bank branch identifier
     */
    @JsonIgnore
    public JsonNullable<String> branchIdentifier() {
        return branchIdentifier;
    }

    /**
     * Bank code assigned by central bank
     */
    @JsonIgnore
    public JsonNullable<String> bankCode() {
        return bankCode;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The status of the bank account
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AccountingBankAccountStatus> status() {
        return (JsonNullable<AccountingBankAccountStatus>) status;
    }

    /**
     * Description or notes about the bank account
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Display ID for the bank account
     */
    public AccountingBankAccountInput withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = JsonNullable.of(displayId);
        return this;
    }

    /**
     * Display ID for the bank account
     */
    public AccountingBankAccountInput withDisplayId(JsonNullable<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * The name of the bank account as it appears in the accounting system
     */
    public AccountingBankAccountInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the bank account as it appears in the accounting system
     */
    public AccountingBankAccountInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The bank account number
     */
    public AccountingBankAccountInput withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * The bank account number
     */
    public AccountingBankAccountInput withAccountNumber(JsonNullable<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The type of bank account
     */
    public AccountingBankAccountInput withAccountType(AccountingBankAccountAccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }


    /**
     * The type of bank account
     */
    public AccountingBankAccountInput withAccountType(Optional<? extends AccountingBankAccountAccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * The name of the bank or financial institution
     */
    public AccountingBankAccountInput withBankName(String bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = JsonNullable.of(bankName);
        return this;
    }

    /**
     * The name of the bank or financial institution
     */
    public AccountingBankAccountInput withBankName(JsonNullable<String> bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = bankName;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public AccountingBankAccountInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public AccountingBankAccountInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The current balance of the bank account
     */
    public AccountingBankAccountInput withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * The current balance of the bank account
     */
    public AccountingBankAccountInput withBalance(JsonNullable<Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * The available balance (considering pending transactions and overdraft)
     */
    public AccountingBankAccountInput withAvailableBalance(double availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = JsonNullable.of(availableBalance);
        return this;
    }

    /**
     * The available balance (considering pending transactions and overdraft)
     */
    public AccountingBankAccountInput withAvailableBalance(JsonNullable<Double> availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * The overdraft limit for the account
     */
    public AccountingBankAccountInput withOverdraftLimit(double overdraftLimit) {
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        this.overdraftLimit = JsonNullable.of(overdraftLimit);
        return this;
    }

    /**
     * The overdraft limit for the account
     */
    public AccountingBankAccountInput withOverdraftLimit(JsonNullable<Double> overdraftLimit) {
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        this.overdraftLimit = overdraftLimit;
        return this;
    }

    /**
     * Bank routing number (US)
     */
    public AccountingBankAccountInput withRoutingNumber(String routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = JsonNullable.of(routingNumber);
        return this;
    }

    /**
     * Bank routing number (US)
     */
    public AccountingBankAccountInput withRoutingNumber(JsonNullable<String> routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * International Bank Account Number
     */
    public AccountingBankAccountInput withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = JsonNullable.of(iban);
        return this;
    }

    /**
     * International Bank Account Number
     */
    public AccountingBankAccountInput withIban(JsonNullable<String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    /**
     * Bank Identifier Code / SWIFT Code
     */
    public AccountingBankAccountInput withBic(String bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = JsonNullable.of(bic);
        return this;
    }

    /**
     * Bank Identifier Code / SWIFT Code
     */
    public AccountingBankAccountInput withBic(JsonNullable<String> bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = bic;
        return this;
    }

    /**
     * Bank State Branch number (Australia/New Zealand)
     */
    public AccountingBankAccountInput withBsbNumber(String bsbNumber) {
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        this.bsbNumber = JsonNullable.of(bsbNumber);
        return this;
    }

    /**
     * Bank State Branch number (Australia/New Zealand)
     */
    public AccountingBankAccountInput withBsbNumber(JsonNullable<String> bsbNumber) {
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        this.bsbNumber = bsbNumber;
        return this;
    }

    /**
     * Bank branch identifier
     */
    public AccountingBankAccountInput withBranchIdentifier(String branchIdentifier) {
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        this.branchIdentifier = JsonNullable.of(branchIdentifier);
        return this;
    }

    /**
     * Bank branch identifier
     */
    public AccountingBankAccountInput withBranchIdentifier(JsonNullable<String> branchIdentifier) {
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        this.branchIdentifier = branchIdentifier;
        return this;
    }

    /**
     * Bank code assigned by central bank
     */
    public AccountingBankAccountInput withBankCode(String bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = JsonNullable.of(bankCode);
        return this;
    }

    /**
     * Bank code assigned by central bank
     */
    public AccountingBankAccountInput withBankCode(JsonNullable<String> bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = bankCode;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public AccountingBankAccountInput withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public AccountingBankAccountInput withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The status of the bank account
     */
    public AccountingBankAccountInput withStatus(AccountingBankAccountStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the bank account
     */
    public AccountingBankAccountInput withStatus(JsonNullable<? extends AccountingBankAccountStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Description or notes about the bank account
     */
    public AccountingBankAccountInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description or notes about the bank account
     */
    public AccountingBankAccountInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public AccountingBankAccountInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public AccountingBankAccountInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingBankAccountInput other = (AccountingBankAccountInput) o;
        return 
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.accountNumber, other.accountNumber) &&
            Utils.enhancedDeepEquals(this.accountType, other.accountType) &&
            Utils.enhancedDeepEquals(this.bankName, other.bankName) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.balance, other.balance) &&
            Utils.enhancedDeepEquals(this.availableBalance, other.availableBalance) &&
            Utils.enhancedDeepEquals(this.overdraftLimit, other.overdraftLimit) &&
            Utils.enhancedDeepEquals(this.routingNumber, other.routingNumber) &&
            Utils.enhancedDeepEquals(this.iban, other.iban) &&
            Utils.enhancedDeepEquals(this.bic, other.bic) &&
            Utils.enhancedDeepEquals(this.bsbNumber, other.bsbNumber) &&
            Utils.enhancedDeepEquals(this.branchIdentifier, other.branchIdentifier) &&
            Utils.enhancedDeepEquals(this.bankCode, other.bankCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            displayId, name, accountNumber,
            accountType, bankName, currency,
            balance, availableBalance, overdraftLimit,
            routingNumber, iban, bic,
            bsbNumber, branchIdentifier, bankCode,
            country, status, description,
            customFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingBankAccountInput.class,
                "displayId", displayId,
                "name", name,
                "accountNumber", accountNumber,
                "accountType", accountType,
                "bankName", bankName,
                "currency", currency,
                "balance", balance,
                "availableBalance", availableBalance,
                "overdraftLimit", overdraftLimit,
                "routingNumber", routingNumber,
                "iban", iban,
                "bic", bic,
                "bsbNumber", bsbNumber,
                "branchIdentifier", branchIdentifier,
                "bankCode", bankCode,
                "country", country,
                "status", status,
                "description", description,
                "customFields", customFields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> displayId = JsonNullable.undefined();

        private Optional<String> name = Optional.empty();

        private JsonNullable<String> accountNumber = JsonNullable.undefined();

        private Optional<? extends AccountingBankAccountAccountType> accountType = Optional.empty();

        private JsonNullable<String> bankName = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> balance = JsonNullable.undefined();

        private JsonNullable<Double> availableBalance = JsonNullable.undefined();

        private JsonNullable<Double> overdraftLimit = JsonNullable.undefined();

        private JsonNullable<String> routingNumber = JsonNullable.undefined();

        private JsonNullable<String> iban = JsonNullable.undefined();

        private JsonNullable<String> bic = JsonNullable.undefined();

        private JsonNullable<String> bsbNumber = JsonNullable.undefined();

        private JsonNullable<String> branchIdentifier = JsonNullable.undefined();

        private JsonNullable<String> bankCode = JsonNullable.undefined();

        private JsonNullable<String> country = JsonNullable.undefined();

        private JsonNullable<? extends AccountingBankAccountStatus> status = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Display ID for the bank account
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * Display ID for the bank account
         */
        public Builder displayId(JsonNullable<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }


        /**
         * The name of the bank account as it appears in the accounting system
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the bank account as it appears in the accounting system
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The bank account number
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * The bank account number
         */
        public Builder accountNumber(JsonNullable<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }


        /**
         * The type of bank account
         */
        public Builder accountType(AccountingBankAccountAccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * The type of bank account
         */
        public Builder accountType(Optional<? extends AccountingBankAccountAccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }


        /**
         * The name of the bank or financial institution
         */
        public Builder bankName(String bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = JsonNullable.of(bankName);
            return this;
        }

        /**
         * The name of the bank or financial institution
         */
        public Builder bankName(JsonNullable<String> bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = bankName;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The current balance of the bank account
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * The current balance of the bank account
         */
        public Builder balance(JsonNullable<Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }


        /**
         * The available balance (considering pending transactions and overdraft)
         */
        public Builder availableBalance(double availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = JsonNullable.of(availableBalance);
            return this;
        }

        /**
         * The available balance (considering pending transactions and overdraft)
         */
        public Builder availableBalance(JsonNullable<Double> availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = availableBalance;
            return this;
        }


        /**
         * The overdraft limit for the account
         */
        public Builder overdraftLimit(double overdraftLimit) {
            Utils.checkNotNull(overdraftLimit, "overdraftLimit");
            this.overdraftLimit = JsonNullable.of(overdraftLimit);
            return this;
        }

        /**
         * The overdraft limit for the account
         */
        public Builder overdraftLimit(JsonNullable<Double> overdraftLimit) {
            Utils.checkNotNull(overdraftLimit, "overdraftLimit");
            this.overdraftLimit = overdraftLimit;
            return this;
        }


        /**
         * Bank routing number (US)
         */
        public Builder routingNumber(String routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = JsonNullable.of(routingNumber);
            return this;
        }

        /**
         * Bank routing number (US)
         */
        public Builder routingNumber(JsonNullable<String> routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = routingNumber;
            return this;
        }


        /**
         * International Bank Account Number
         */
        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = JsonNullable.of(iban);
            return this;
        }

        /**
         * International Bank Account Number
         */
        public Builder iban(JsonNullable<String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }


        /**
         * Bank Identifier Code / SWIFT Code
         */
        public Builder bic(String bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = JsonNullable.of(bic);
            return this;
        }

        /**
         * Bank Identifier Code / SWIFT Code
         */
        public Builder bic(JsonNullable<String> bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = bic;
            return this;
        }


        /**
         * Bank State Branch number (Australia/New Zealand)
         */
        public Builder bsbNumber(String bsbNumber) {
            Utils.checkNotNull(bsbNumber, "bsbNumber");
            this.bsbNumber = JsonNullable.of(bsbNumber);
            return this;
        }

        /**
         * Bank State Branch number (Australia/New Zealand)
         */
        public Builder bsbNumber(JsonNullable<String> bsbNumber) {
            Utils.checkNotNull(bsbNumber, "bsbNumber");
            this.bsbNumber = bsbNumber;
            return this;
        }


        /**
         * Bank branch identifier
         */
        public Builder branchIdentifier(String branchIdentifier) {
            Utils.checkNotNull(branchIdentifier, "branchIdentifier");
            this.branchIdentifier = JsonNullable.of(branchIdentifier);
            return this;
        }

        /**
         * Bank branch identifier
         */
        public Builder branchIdentifier(JsonNullable<String> branchIdentifier) {
            Utils.checkNotNull(branchIdentifier, "branchIdentifier");
            this.branchIdentifier = branchIdentifier;
            return this;
        }


        /**
         * Bank code assigned by central bank
         */
        public Builder bankCode(String bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = JsonNullable.of(bankCode);
            return this;
        }

        /**
         * Bank code assigned by central bank
         */
        public Builder bankCode(JsonNullable<String> bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = bankCode;
            return this;
        }


        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The status of the bank account
         */
        public Builder status(AccountingBankAccountStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the bank account
         */
        public Builder status(JsonNullable<? extends AccountingBankAccountStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Description or notes about the bank account
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description or notes about the bank account
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public AccountingBankAccountInput build() {

            return new AccountingBankAccountInput(
                displayId, name, accountNumber,
                accountType, bankName, currency,
                balance, availableBalance, overdraftLimit,
                routingNumber, iban, bic,
                bsbNumber, branchIdentifier, bankCode,
                country, status, description,
                customFields);
        }

    }
}
