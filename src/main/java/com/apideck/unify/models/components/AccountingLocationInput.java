/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountingLocationInput {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The display name of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private LocationStatus status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiaries")
    private List<SubsidiaryReferenceInput> subsidiaries;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public AccountingLocationInput(
            @JsonProperty("parent_id") @Nullable JsonNullable<String> parentId,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("status") @Nullable LocationStatus status,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("subsidiaries") @Nullable List<SubsidiaryReferenceInput> subsidiaries,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.parentId = Optional.ofNullable(parentId)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.addresses = addresses;
        this.subsidiaries = subsidiaries;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public AccountingLocationInput() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The display name of the location.
     */
    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public Optional<LocationStatus> status() {
        return Optional.ofNullable(this.status);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<SubsidiaryReferenceInput>> subsidiaries() {
        return Optional.ofNullable(this.subsidiaries);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public AccountingLocationInput withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The name of the company.
     */
    public AccountingLocationInput withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The display name of the location.
     */
    public AccountingLocationInput withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public AccountingLocationInput withStatus(@Nullable LocationStatus status) {
        this.status = status;
        return this;
    }


    public AccountingLocationInput withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public AccountingLocationInput withSubsidiaries(@Nullable List<SubsidiaryReferenceInput> subsidiaries) {
        this.subsidiaries = subsidiaries;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public AccountingLocationInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public AccountingLocationInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingLocationInput other = (AccountingLocationInput) o;
        return 
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.subsidiaries, other.subsidiaries) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parentId, companyName, displayName,
            status, addresses, subsidiaries,
            rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingLocationInput.class,
                "parentId", parentId,
                "companyName", companyName,
                "displayName", displayName,
                "status", status,
                "addresses", addresses,
                "subsidiaries", subsidiaries,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> parentId;

        private JsonNullable<String> companyName;

        private JsonNullable<String> displayName;

        private LocationStatus status;

        private List<Address> addresses;

        private List<SubsidiaryReferenceInput> subsidiaries;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The display name of the location.
         */
        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * Based on the status some functionality is enabled or disabled.
         */
        public Builder status(@Nullable LocationStatus status) {
            this.status = status;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder subsidiaries(@Nullable List<SubsidiaryReferenceInput> subsidiaries) {
            this.subsidiaries = subsidiaries;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public AccountingLocationInput build() {
            return new AccountingLocationInput(
                parentId, companyName, displayName,
                status, addresses, subsidiaries,
                rowVersion, passThrough);
        }

    }
}
