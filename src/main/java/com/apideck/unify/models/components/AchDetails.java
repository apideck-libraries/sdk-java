/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * AchDetails - ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
 */

public class AchDetails {

    /**
     * The routing number for the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routing_number")
    private Optional<String> routingNumber;

    /**
     * The last few digits of the bank account number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number_suffix")
    private Optional<String> accountNumberSuffix;

    /**
     * The type of the bank account performing the transfer. The account type can be `CHECKING`,
     * `SAVINGS`, or `UNKNOWN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_type")
    private Optional<String> accountType;

    @JsonCreator
    public AchDetails(
            @JsonProperty("routing_number") Optional<String> routingNumber,
            @JsonProperty("account_number_suffix") Optional<String> accountNumberSuffix,
            @JsonProperty("account_type") Optional<String> accountType) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        Utils.checkNotNull(accountNumberSuffix, "accountNumberSuffix");
        Utils.checkNotNull(accountType, "accountType");
        this.routingNumber = routingNumber;
        this.accountNumberSuffix = accountNumberSuffix;
        this.accountType = accountType;
    }
    
    public AchDetails() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The routing number for the bank account.
     */
    @JsonIgnore
    public Optional<String> routingNumber() {
        return routingNumber;
    }

    /**
     * The last few digits of the bank account number.
     */
    @JsonIgnore
    public Optional<String> accountNumberSuffix() {
        return accountNumberSuffix;
    }

    /**
     * The type of the bank account performing the transfer. The account type can be `CHECKING`,
     * `SAVINGS`, or `UNKNOWN`.
     */
    @JsonIgnore
    public Optional<String> accountType() {
        return accountType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The routing number for the bank account.
     */
    public AchDetails withRoutingNumber(String routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = Optional.ofNullable(routingNumber);
        return this;
    }

    /**
     * The routing number for the bank account.
     */
    public AchDetails withRoutingNumber(Optional<String> routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * The last few digits of the bank account number.
     */
    public AchDetails withAccountNumberSuffix(String accountNumberSuffix) {
        Utils.checkNotNull(accountNumberSuffix, "accountNumberSuffix");
        this.accountNumberSuffix = Optional.ofNullable(accountNumberSuffix);
        return this;
    }

    /**
     * The last few digits of the bank account number.
     */
    public AchDetails withAccountNumberSuffix(Optional<String> accountNumberSuffix) {
        Utils.checkNotNull(accountNumberSuffix, "accountNumberSuffix");
        this.accountNumberSuffix = accountNumberSuffix;
        return this;
    }

    /**
     * The type of the bank account performing the transfer. The account type can be `CHECKING`,
     * `SAVINGS`, or `UNKNOWN`.
     */
    public AchDetails withAccountType(String accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }

    /**
     * The type of the bank account performing the transfer. The account type can be `CHECKING`,
     * `SAVINGS`, or `UNKNOWN`.
     */
    public AchDetails withAccountType(Optional<String> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AchDetails other = (AchDetails) o;
        return 
            Objects.deepEquals(this.routingNumber, other.routingNumber) &&
            Objects.deepEquals(this.accountNumberSuffix, other.accountNumberSuffix) &&
            Objects.deepEquals(this.accountType, other.accountType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            routingNumber,
            accountNumberSuffix,
            accountType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AchDetails.class,
                "routingNumber", routingNumber,
                "accountNumberSuffix", accountNumberSuffix,
                "accountType", accountType);
    }
    
    public final static class Builder {
 
        private Optional<String> routingNumber = Optional.empty();
 
        private Optional<String> accountNumberSuffix = Optional.empty();
 
        private Optional<String> accountType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The routing number for the bank account.
         */
        public Builder routingNumber(String routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        /**
         * The routing number for the bank account.
         */
        public Builder routingNumber(Optional<String> routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = routingNumber;
            return this;
        }

        /**
         * The last few digits of the bank account number.
         */
        public Builder accountNumberSuffix(String accountNumberSuffix) {
            Utils.checkNotNull(accountNumberSuffix, "accountNumberSuffix");
            this.accountNumberSuffix = Optional.ofNullable(accountNumberSuffix);
            return this;
        }

        /**
         * The last few digits of the bank account number.
         */
        public Builder accountNumberSuffix(Optional<String> accountNumberSuffix) {
            Utils.checkNotNull(accountNumberSuffix, "accountNumberSuffix");
            this.accountNumberSuffix = accountNumberSuffix;
            return this;
        }

        /**
         * The type of the bank account performing the transfer. The account type can be `CHECKING`,
         * `SAVINGS`, or `UNKNOWN`.
         */
        public Builder accountType(String accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * The type of the bank account performing the transfer. The account type can be `CHECKING`,
         * `SAVINGS`, or `UNKNOWN`.
         */
        public Builder accountType(Optional<String> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }
        
        public AchDetails build() {
            return new AchDetails(
                routingNumber,
                accountNumberSuffix,
                accountType);
        }
    }
}

