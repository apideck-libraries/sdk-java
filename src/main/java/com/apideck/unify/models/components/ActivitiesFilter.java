/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ActivitiesFilter {
    /**
     * Company ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=company_id")
    private String companyId;

    /**
     * Owner ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=owner_id")
    private String ownerId;

    /**
     * Primary contact ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=contact_id")
    private String contactId;


    @SpeakeasyMetadata("queryParam:name=updated_since")
    private OffsetDateTime updatedSince;

    /**
     * Type to filter on
     */
    @SpeakeasyMetadata("queryParam:name=type")
    private String type;

    @JsonCreator
    public ActivitiesFilter(
            @Nullable String companyId,
            @Nullable String ownerId,
            @Nullable String contactId,
            @Nullable OffsetDateTime updatedSince,
            @Nullable String type) {
        this.companyId = companyId;
        this.ownerId = ownerId;
        this.contactId = contactId;
        this.updatedSince = updatedSince;
        this.type = type;
    }
    
    public ActivitiesFilter() {
        this(null, null, null,
            null, null);
    }

    /**
     * Company ID to filter on
     */
    public Optional<String> companyId() {
        return Optional.ofNullable(this.companyId);
    }

    /**
     * Owner ID to filter on
     */
    public Optional<String> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * Primary contact ID to filter on
     */
    public Optional<String> contactId() {
        return Optional.ofNullable(this.contactId);
    }

    public Optional<OffsetDateTime> updatedSince() {
        return Optional.ofNullable(this.updatedSince);
    }

    /**
     * Type to filter on
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Company ID to filter on
     */
    public ActivitiesFilter withCompanyId(@Nullable String companyId) {
        this.companyId = companyId;
        return this;
    }


    /**
     * Owner ID to filter on
     */
    public ActivitiesFilter withOwnerId(@Nullable String ownerId) {
        this.ownerId = ownerId;
        return this;
    }


    /**
     * Primary contact ID to filter on
     */
    public ActivitiesFilter withContactId(@Nullable String contactId) {
        this.contactId = contactId;
        return this;
    }


    public ActivitiesFilter withUpdatedSince(@Nullable OffsetDateTime updatedSince) {
        this.updatedSince = updatedSince;
        return this;
    }


    /**
     * Type to filter on
     */
    public ActivitiesFilter withType(@Nullable String type) {
        this.type = type;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivitiesFilter other = (ActivitiesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            companyId, ownerId, contactId,
            updatedSince, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivitiesFilter.class,
                "companyId", companyId,
                "ownerId", ownerId,
                "contactId", contactId,
                "updatedSince", updatedSince,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String companyId;

        private String ownerId;

        private String contactId;

        private OffsetDateTime updatedSince;

        private String type;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Company ID to filter on
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = companyId;
            return this;
        }

        /**
         * Owner ID to filter on
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        /**
         * Primary contact ID to filter on
         */
        public Builder contactId(@Nullable String contactId) {
            this.contactId = contactId;
            return this;
        }

        public Builder updatedSince(@Nullable OffsetDateTime updatedSince) {
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Type to filter on
         */
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }

        public ActivitiesFilter build() {
            return new ActivitiesFilter(
                companyId, ownerId, contactId,
                updatedSince, type);
        }

    }
}
