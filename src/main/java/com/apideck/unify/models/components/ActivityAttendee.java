/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class ActivityAttendee {

    /**
     * Unique identifier for the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Full name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * First name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Middle name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * Last name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Prefix of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * Suffix of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * Email address of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private JsonNullable<String> emailAddress;

    /**
     * Whether the attendee is the organizer of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_organizer")
    private JsonNullable<Boolean> isOrganizer;

    /**
     * Status of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends ActivityAttendeeStatus> status;

    /**
     * The identifier for a related user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private JsonNullable<String> userId;

    /**
     * The identifier for a related contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * The last time the attendee was updated (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The time the attendee was created (ISO 8601)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public ActivityAttendee(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("prefix") JsonNullable<String> prefix,
            @JsonProperty("suffix") JsonNullable<String> suffix,
            @JsonProperty("email_address") JsonNullable<String> emailAddress,
            @JsonProperty("is_organizer") JsonNullable<Boolean> isOrganizer,
            @JsonProperty("status") JsonNullable<? extends ActivityAttendeeStatus> status,
            @JsonProperty("user_id") JsonNullable<String> userId,
            @JsonProperty("contact_id") JsonNullable<String> contactId,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(suffix, "suffix");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.name = name;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.prefix = prefix;
        this.suffix = suffix;
        this.emailAddress = emailAddress;
        this.isOrganizer = isOrganizer;
        this.status = status;
        this.userId = userId;
        this.contactId = contactId;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public ActivityAttendee() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier for the attendee
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Full name of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * First name of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * Middle name of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * Last name of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Prefix of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> prefix() {
        return prefix;
    }

    /**
     * Suffix of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> suffix() {
        return suffix;
    }

    /**
     * Email address of the attendee
     */
    @JsonIgnore
    public JsonNullable<String> emailAddress() {
        return emailAddress;
    }

    /**
     * Whether the attendee is the organizer of the activity
     */
    @JsonIgnore
    public JsonNullable<Boolean> isOrganizer() {
        return isOrganizer;
    }

    /**
     * Status of the attendee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ActivityAttendeeStatus> status() {
        return (JsonNullable<ActivityAttendeeStatus>) status;
    }

    /**
     * The identifier for a related user
     */
    @JsonIgnore
    public JsonNullable<String> userId() {
        return userId;
    }

    /**
     * The identifier for a related contact
     */
    @JsonIgnore
    public JsonNullable<String> contactId() {
        return contactId;
    }

    /**
     * The last time the attendee was updated (ISO 8601)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The time the attendee was created (ISO 8601)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for the attendee
     */
    public ActivityAttendee withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier for the attendee
     */
    public ActivityAttendee withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Full name of the attendee
     */
    public ActivityAttendee withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Full name of the attendee
     */
    public ActivityAttendee withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * First name of the attendee
     */
    public ActivityAttendee withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * First name of the attendee
     */
    public ActivityAttendee withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Middle name of the attendee
     */
    public ActivityAttendee withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the attendee
     */
    public ActivityAttendee withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * Last name of the attendee
     */
    public ActivityAttendee withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * Last name of the attendee
     */
    public ActivityAttendee withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Prefix of the attendee
     */
    public ActivityAttendee withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = JsonNullable.of(prefix);
        return this;
    }

    /**
     * Prefix of the attendee
     */
    public ActivityAttendee withPrefix(JsonNullable<String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * Suffix of the attendee
     */
    public ActivityAttendee withSuffix(String suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = JsonNullable.of(suffix);
        return this;
    }

    /**
     * Suffix of the attendee
     */
    public ActivityAttendee withSuffix(JsonNullable<String> suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = suffix;
        return this;
    }

    /**
     * Email address of the attendee
     */
    public ActivityAttendee withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }

    /**
     * Email address of the attendee
     */
    public ActivityAttendee withEmailAddress(JsonNullable<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Whether the attendee is the organizer of the activity
     */
    public ActivityAttendee withIsOrganizer(boolean isOrganizer) {
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        this.isOrganizer = JsonNullable.of(isOrganizer);
        return this;
    }

    /**
     * Whether the attendee is the organizer of the activity
     */
    public ActivityAttendee withIsOrganizer(JsonNullable<Boolean> isOrganizer) {
        Utils.checkNotNull(isOrganizer, "isOrganizer");
        this.isOrganizer = isOrganizer;
        return this;
    }

    /**
     * Status of the attendee
     */
    public ActivityAttendee withStatus(ActivityAttendeeStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of the attendee
     */
    public ActivityAttendee withStatus(JsonNullable<? extends ActivityAttendeeStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The identifier for a related user
     */
    public ActivityAttendee withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = JsonNullable.of(userId);
        return this;
    }

    /**
     * The identifier for a related user
     */
    public ActivityAttendee withUserId(JsonNullable<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * The identifier for a related contact
     */
    public ActivityAttendee withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = JsonNullable.of(contactId);
        return this;
    }

    /**
     * The identifier for a related contact
     */
    public ActivityAttendee withContactId(JsonNullable<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    /**
     * The last time the attendee was updated (ISO 8601)
     */
    public ActivityAttendee withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The last time the attendee was updated (ISO 8601)
     */
    public ActivityAttendee withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The time the attendee was created (ISO 8601)
     */
    public ActivityAttendee withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The time the attendee was created (ISO 8601)
     */
    public ActivityAttendee withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityAttendee other = (ActivityAttendee) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.prefix, other.prefix) &&
            Objects.deepEquals(this.suffix, other.suffix) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.isOrganizer, other.isOrganizer) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.userId, other.userId) &&
            Objects.deepEquals(this.contactId, other.contactId) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            firstName,
            middleName,
            lastName,
            prefix,
            suffix,
            emailAddress,
            isOrganizer,
            status,
            userId,
            contactId,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityAttendee.class,
                "id", id,
                "name", name,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "prefix", prefix,
                "suffix", suffix,
                "emailAddress", emailAddress,
                "isOrganizer", isOrganizer,
                "status", status,
                "userId", userId,
                "contactId", contactId,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> middleName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> prefix = JsonNullable.undefined();
 
        private JsonNullable<String> suffix = JsonNullable.undefined();
 
        private JsonNullable<String> emailAddress = JsonNullable.undefined();
 
        private JsonNullable<Boolean> isOrganizer = JsonNullable.undefined();
 
        private JsonNullable<? extends ActivityAttendeeStatus> status = JsonNullable.undefined();
 
        private JsonNullable<String> userId = JsonNullable.undefined();
 
        private JsonNullable<String> contactId = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the attendee
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier for the attendee
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Full name of the attendee
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Full name of the attendee
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * First name of the attendee
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * First name of the attendee
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Middle name of the attendee
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the attendee
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * Last name of the attendee
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Last name of the attendee
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Prefix of the attendee
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * Prefix of the attendee
         */
        public Builder prefix(JsonNullable<String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }

        /**
         * Suffix of the attendee
         */
        public Builder suffix(String suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        /**
         * Suffix of the attendee
         */
        public Builder suffix(JsonNullable<String> suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = suffix;
            return this;
        }

        /**
         * Email address of the attendee
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * Email address of the attendee
         */
        public Builder emailAddress(JsonNullable<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Whether the attendee is the organizer of the activity
         */
        public Builder isOrganizer(boolean isOrganizer) {
            Utils.checkNotNull(isOrganizer, "isOrganizer");
            this.isOrganizer = JsonNullable.of(isOrganizer);
            return this;
        }

        /**
         * Whether the attendee is the organizer of the activity
         */
        public Builder isOrganizer(JsonNullable<Boolean> isOrganizer) {
            Utils.checkNotNull(isOrganizer, "isOrganizer");
            this.isOrganizer = isOrganizer;
            return this;
        }

        /**
         * Status of the attendee
         */
        public Builder status(ActivityAttendeeStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of the attendee
         */
        public Builder status(JsonNullable<? extends ActivityAttendeeStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The identifier for a related user
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = JsonNullable.of(userId);
            return this;
        }

        /**
         * The identifier for a related user
         */
        public Builder userId(JsonNullable<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * The identifier for a related contact
         */
        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * The identifier for a related contact
         */
        public Builder contactId(JsonNullable<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }

        /**
         * The last time the attendee was updated (ISO 8601)
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The last time the attendee was updated (ISO 8601)
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The time the attendee was created (ISO 8601)
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The time the attendee was created (ISO 8601)
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public ActivityAttendee build() {
            return new ActivityAttendee(
                id,
                name,
                firstName,
                middleName,
                lastName,
                prefix,
                suffix,
                emailAddress,
                isOrganizer,
                status,
                userId,
                contactId,
                updatedAt,
                createdAt);
        }
    }
}
