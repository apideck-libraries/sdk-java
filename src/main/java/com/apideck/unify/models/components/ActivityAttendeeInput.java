/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ActivityAttendeeInput {
    /**
     * Full name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * First name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Middle name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * Last name of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Prefix of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * Suffix of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * Email address of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    private JsonNullable<String> emailAddress;

    /**
     * Whether the attendee is the organizer of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_organizer")
    private JsonNullable<Boolean> isOrganizer;

    /**
     * Status of the attendee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<ActivityAttendeeStatus> status;

    @JsonCreator
    public ActivityAttendeeInput(
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("prefix") @Nullable JsonNullable<String> prefix,
            @JsonProperty("suffix") @Nullable JsonNullable<String> suffix,
            @JsonProperty("email_address") @Nullable JsonNullable<String> emailAddress,
            @JsonProperty("is_organizer") @Nullable JsonNullable<Boolean> isOrganizer,
            @JsonProperty("status") @Nullable JsonNullable<ActivityAttendeeStatus> status) {
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.prefix = Optional.ofNullable(prefix)
            .orElse(JsonNullable.undefined());
        this.suffix = Optional.ofNullable(suffix)
            .orElse(JsonNullable.undefined());
        this.emailAddress = Optional.ofNullable(emailAddress)
            .orElse(JsonNullable.undefined());
        this.isOrganizer = Optional.ofNullable(isOrganizer)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
    }
    
    public ActivityAttendeeInput() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * Full name of the attendee
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * First name of the attendee
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * Middle name of the attendee
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * Last name of the attendee
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Prefix of the attendee
     */
    public JsonNullable<String> prefix() {
        return this.prefix;
    }

    /**
     * Suffix of the attendee
     */
    public JsonNullable<String> suffix() {
        return this.suffix;
    }

    /**
     * Email address of the attendee
     */
    public JsonNullable<String> emailAddress() {
        return this.emailAddress;
    }

    /**
     * Whether the attendee is the organizer of the activity
     */
    public JsonNullable<Boolean> isOrganizer() {
        return this.isOrganizer;
    }

    /**
     * Status of the attendee
     */
    public JsonNullable<ActivityAttendeeStatus> status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Full name of the attendee
     */
    public ActivityAttendeeInput withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * First name of the attendee
     */
    public ActivityAttendeeInput withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * Middle name of the attendee
     */
    public ActivityAttendeeInput withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * Last name of the attendee
     */
    public ActivityAttendeeInput withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Prefix of the attendee
     */
    public ActivityAttendeeInput withPrefix(@Nullable String prefix) {
        this.prefix = JsonNullable.of(prefix);
        return this;
    }


    /**
     * Suffix of the attendee
     */
    public ActivityAttendeeInput withSuffix(@Nullable String suffix) {
        this.suffix = JsonNullable.of(suffix);
        return this;
    }


    /**
     * Email address of the attendee
     */
    public ActivityAttendeeInput withEmailAddress(@Nullable String emailAddress) {
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }


    /**
     * Whether the attendee is the organizer of the activity
     */
    public ActivityAttendeeInput withIsOrganizer(@Nullable Boolean isOrganizer) {
        this.isOrganizer = JsonNullable.of(isOrganizer);
        return this;
    }


    /**
     * Status of the attendee
     */
    public ActivityAttendeeInput withStatus(@Nullable ActivityAttendeeStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityAttendeeInput other = (ActivityAttendeeInput) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.prefix, other.prefix) &&
            Utils.enhancedDeepEquals(this.suffix, other.suffix) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress) &&
            Utils.enhancedDeepEquals(this.isOrganizer, other.isOrganizer) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, firstName, middleName,
            lastName, prefix, suffix,
            emailAddress, isOrganizer, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityAttendeeInput.class,
                "name", name,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "prefix", prefix,
                "suffix", suffix,
                "emailAddress", emailAddress,
                "isOrganizer", isOrganizer,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> prefix;

        private JsonNullable<String> suffix;

        private JsonNullable<String> emailAddress;

        private JsonNullable<Boolean> isOrganizer;

        private JsonNullable<ActivityAttendeeStatus> status;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Full name of the attendee
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * First name of the attendee
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * Middle name of the attendee
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Last name of the attendee
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Prefix of the attendee
         */
        public Builder prefix(@Nullable String prefix) {
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * Suffix of the attendee
         */
        public Builder suffix(@Nullable String suffix) {
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        /**
         * Email address of the attendee
         */
        public Builder emailAddress(@Nullable String emailAddress) {
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * Whether the attendee is the organizer of the activity
         */
        public Builder isOrganizer(@Nullable Boolean isOrganizer) {
            this.isOrganizer = JsonNullable.of(isOrganizer);
            return this;
        }

        /**
         * Status of the attendee
         */
        public Builder status(@Nullable ActivityAttendeeStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public ActivityAttendeeInput build() {
            return new ActivityAttendeeInput(
                name, firstName, middleName,
                lastName, prefix, suffix,
                emailAddress, isOrganizer, status);
        }

    }
}
