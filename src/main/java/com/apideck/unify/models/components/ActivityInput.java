/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ActivityInput {
    /**
     * The date and time of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activity_datetime")
    private JsonNullable<String> activityDatetime;

    /**
     * The duration of the activity in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration_seconds")
    private JsonNullable<Long> durationSeconds;

    /**
     * The user related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private JsonNullable<String> userId;

    /**
     * The account related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private JsonNullable<String> accountId;

    /**
     * The contact related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * The company related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The opportunity related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunity_id")
    private JsonNullable<String> opportunityId;

    /**
     * The lead related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The owner of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The campaign related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaign_id")
    private JsonNullable<String> campaignId;

    /**
     * The case related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("case_id")
    private JsonNullable<String> caseId;

    /**
     * The asset related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_id")
    private JsonNullable<String> assetId;

    /**
     * The contract related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contract_id")
    private JsonNullable<String> contractId;

    /**
     * The product related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private JsonNullable<String> productId;

    /**
     * The solution related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("solution_id")
    private JsonNullable<String> solutionId;

    /**
     * The custom object related to the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_object_id")
    private JsonNullable<String> customObjectId;

    /**
     * The type of the activity
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("type")
    private JsonNullable<ActivityType> type;

    /**
     * The title of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * A description of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * An internal note about the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * The location of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private JsonNullable<String> location;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_address")
    private Address locationAddress;

    /**
     * Whether the Activity is an all day event or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("all_day_event")
    private JsonNullable<Boolean> allDayEvent;

    /**
     * Whether the Activity is private or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private")
    private JsonNullable<Boolean> private_;

    /**
     * Whether the Activity is a group event or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_event")
    private JsonNullable<Boolean> groupEvent;

    /**
     * The sub type of the group event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_sub_type")
    private JsonNullable<String> eventSubType;

    /**
     * The type of the group event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_event_type")
    private JsonNullable<String> groupEventType;

    /**
     * Whether the activity is a child of another activity or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child")
    private JsonNullable<Boolean> child;

    /**
     * Whether the activity is archived or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<Boolean> archived;

    /**
     * Whether the activity is deleted or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_as")
    private JsonNullable<ShowAs> showAs;

    /**
     * Whether the Activity is done or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("done")
    private JsonNullable<Boolean> done;

    /**
     * The start date and time of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_datetime")
    private JsonNullable<String> startDatetime;

    /**
     * The end date and time of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_datetime")
    private JsonNullable<String> endDatetime;

    /**
     * The date of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activity_date")
    private JsonNullable<String> activityDate;

    /**
     * The end date of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<String> endDate;

    /**
     * Whether the activity is recurrent or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurrent")
    private Boolean recurrent;

    /**
     * The date and time of the reminder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reminder_datetime")
    private JsonNullable<String> reminderDatetime;

    /**
     * Whether the reminder is set or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reminder_set")
    private JsonNullable<Boolean> reminderSet;

    /**
     * The URL of the video conference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_conference_url")
    private JsonNullable<String> videoConferenceUrl;

    /**
     * The ID of the video conference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_conference_id")
    private JsonNullable<String> videoConferenceId;

    /**
     * Custom fields of the activity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees")
    private List<ActivityAttendeeInput> attendees;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public ActivityInput(
            @JsonProperty("activity_datetime") @Nullable JsonNullable<String> activityDatetime,
            @JsonProperty("duration_seconds") @Nullable JsonNullable<Long> durationSeconds,
            @JsonProperty("user_id") @Nullable JsonNullable<String> userId,
            @JsonProperty("account_id") @Nullable JsonNullable<String> accountId,
            @JsonProperty("contact_id") @Nullable JsonNullable<String> contactId,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("opportunity_id") @Nullable JsonNullable<String> opportunityId,
            @JsonProperty("lead_id") @Nullable JsonNullable<String> leadId,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("campaign_id") @Nullable JsonNullable<String> campaignId,
            @JsonProperty("case_id") @Nullable JsonNullable<String> caseId,
            @JsonProperty("asset_id") @Nullable JsonNullable<String> assetId,
            @JsonProperty("contract_id") @Nullable JsonNullable<String> contractId,
            @JsonProperty("product_id") @Nullable JsonNullable<String> productId,
            @JsonProperty("solution_id") @Nullable JsonNullable<String> solutionId,
            @JsonProperty("custom_object_id") @Nullable JsonNullable<String> customObjectId,
            @JsonProperty("type") @Nullable ActivityType type,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("note") @Nullable JsonNullable<String> note,
            @JsonProperty("location") @Nullable JsonNullable<String> location,
            @JsonProperty("location_address") @Nullable Address locationAddress,
            @JsonProperty("all_day_event") @Nullable JsonNullable<Boolean> allDayEvent,
            @JsonProperty("private") @Nullable JsonNullable<Boolean> private_,
            @JsonProperty("group_event") @Nullable JsonNullable<Boolean> groupEvent,
            @JsonProperty("event_sub_type") @Nullable JsonNullable<String> eventSubType,
            @JsonProperty("group_event_type") @Nullable JsonNullable<String> groupEventType,
            @JsonProperty("child") @Nullable JsonNullable<Boolean> child,
            @JsonProperty("archived") @Nullable JsonNullable<Boolean> archived,
            @JsonProperty("deleted") @Nullable JsonNullable<Boolean> deleted,
            @JsonProperty("show_as") @Nullable JsonNullable<ShowAs> showAs,
            @JsonProperty("done") @Nullable JsonNullable<Boolean> done,
            @JsonProperty("start_datetime") @Nullable JsonNullable<String> startDatetime,
            @JsonProperty("end_datetime") @Nullable JsonNullable<String> endDatetime,
            @JsonProperty("activity_date") @Nullable JsonNullable<String> activityDate,
            @JsonProperty("end_date") @Nullable JsonNullable<String> endDate,
            @JsonProperty("recurrent") @Nullable Boolean recurrent,
            @JsonProperty("reminder_datetime") @Nullable JsonNullable<String> reminderDatetime,
            @JsonProperty("reminder_set") @Nullable JsonNullable<Boolean> reminderSet,
            @JsonProperty("video_conference_url") @Nullable JsonNullable<String> videoConferenceUrl,
            @JsonProperty("video_conference_id") @Nullable JsonNullable<String> videoConferenceId,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("attendees") @Nullable List<ActivityAttendeeInput> attendees,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.activityDatetime = Optional.ofNullable(activityDatetime)
            .orElse(JsonNullable.undefined());
        this.durationSeconds = Optional.ofNullable(durationSeconds)
            .orElse(JsonNullable.undefined());
        this.userId = Optional.ofNullable(userId)
            .orElse(JsonNullable.undefined());
        this.accountId = Optional.ofNullable(accountId)
            .orElse(JsonNullable.undefined());
        this.contactId = Optional.ofNullable(contactId)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.opportunityId = Optional.ofNullable(opportunityId)
            .orElse(JsonNullable.undefined());
        this.leadId = Optional.ofNullable(leadId)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.campaignId = Optional.ofNullable(campaignId)
            .orElse(JsonNullable.undefined());
        this.caseId = Optional.ofNullable(caseId)
            .orElse(JsonNullable.undefined());
        this.assetId = Optional.ofNullable(assetId)
            .orElse(JsonNullable.undefined());
        this.contractId = Optional.ofNullable(contractId)
            .orElse(JsonNullable.undefined());
        this.productId = Optional.ofNullable(productId)
            .orElse(JsonNullable.undefined());
        this.solutionId = Optional.ofNullable(solutionId)
            .orElse(JsonNullable.undefined());
        this.customObjectId = Optional.ofNullable(customObjectId)
            .orElse(JsonNullable.undefined());
        this.type = JsonNullable.of(type);
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.note = Optional.ofNullable(note)
            .orElse(JsonNullable.undefined());
        this.location = Optional.ofNullable(location)
            .orElse(JsonNullable.undefined());
        this.locationAddress = locationAddress;
        this.allDayEvent = Optional.ofNullable(allDayEvent)
            .orElse(JsonNullable.undefined());
        this.private_ = Optional.ofNullable(private_)
            .orElse(JsonNullable.undefined());
        this.groupEvent = Optional.ofNullable(groupEvent)
            .orElse(JsonNullable.undefined());
        this.eventSubType = Optional.ofNullable(eventSubType)
            .orElse(JsonNullable.undefined());
        this.groupEventType = Optional.ofNullable(groupEventType)
            .orElse(JsonNullable.undefined());
        this.child = Optional.ofNullable(child)
            .orElse(JsonNullable.undefined());
        this.archived = Optional.ofNullable(archived)
            .orElse(JsonNullable.undefined());
        this.deleted = Optional.ofNullable(deleted)
            .orElse(JsonNullable.undefined());
        this.showAs = Optional.ofNullable(showAs)
            .orElse(JsonNullable.undefined());
        this.done = Optional.ofNullable(done)
            .orElse(JsonNullable.undefined());
        this.startDatetime = Optional.ofNullable(startDatetime)
            .orElse(JsonNullable.undefined());
        this.endDatetime = Optional.ofNullable(endDatetime)
            .orElse(JsonNullable.undefined());
        this.activityDate = Optional.ofNullable(activityDate)
            .orElse(JsonNullable.undefined());
        this.endDate = Optional.ofNullable(endDate)
            .orElse(JsonNullable.undefined());
        this.recurrent = recurrent;
        this.reminderDatetime = Optional.ofNullable(reminderDatetime)
            .orElse(JsonNullable.undefined());
        this.reminderSet = Optional.ofNullable(reminderSet)
            .orElse(JsonNullable.undefined());
        this.videoConferenceUrl = Optional.ofNullable(videoConferenceUrl)
            .orElse(JsonNullable.undefined());
        this.videoConferenceId = Optional.ofNullable(videoConferenceId)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.attendees = attendees;
        this.passThrough = passThrough;
    }
    
    public ActivityInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The date and time of the activity
     */
    public JsonNullable<String> activityDatetime() {
        return this.activityDatetime;
    }

    /**
     * The duration of the activity in seconds
     */
    public JsonNullable<Long> durationSeconds() {
        return this.durationSeconds;
    }

    /**
     * The user related to the activity
     */
    public JsonNullable<String> userId() {
        return this.userId;
    }

    /**
     * The account related to the activity
     */
    public JsonNullable<String> accountId() {
        return this.accountId;
    }

    /**
     * The contact related to the activity
     */
    public JsonNullable<String> contactId() {
        return this.contactId;
    }

    /**
     * The company related to the activity
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The opportunity related to the activity
     */
    public JsonNullable<String> opportunityId() {
        return this.opportunityId;
    }

    /**
     * The lead related to the activity
     */
    public JsonNullable<String> leadId() {
        return this.leadId;
    }

    /**
     * The owner of the activity
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The campaign related to the activity
     */
    public JsonNullable<String> campaignId() {
        return this.campaignId;
    }

    /**
     * The case related to the activity
     */
    public JsonNullable<String> caseId() {
        return this.caseId;
    }

    /**
     * The asset related to the activity
     */
    public JsonNullable<String> assetId() {
        return this.assetId;
    }

    /**
     * The contract related to the activity
     */
    public JsonNullable<String> contractId() {
        return this.contractId;
    }

    /**
     * The product related to the activity
     */
    public JsonNullable<String> productId() {
        return this.productId;
    }

    /**
     * The solution related to the activity
     */
    public JsonNullable<String> solutionId() {
        return this.solutionId;
    }

    /**
     * The custom object related to the activity
     */
    public JsonNullable<String> customObjectId() {
        return this.customObjectId;
    }

    /**
     * The type of the activity
     */
    public JsonNullable<ActivityType> type() {
        return this.type;
    }

    /**
     * The title of the activity
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * A description of the activity
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * An internal note about the activity
     */
    public JsonNullable<String> note() {
        return this.note;
    }

    /**
     * The location of the activity
     */
    public JsonNullable<String> location() {
        return this.location;
    }

    public Optional<Address> locationAddress() {
        return Optional.ofNullable(this.locationAddress);
    }

    /**
     * Whether the Activity is an all day event or not
     */
    public JsonNullable<Boolean> allDayEvent() {
        return this.allDayEvent;
    }

    /**
     * Whether the Activity is private or not
     */
    public JsonNullable<Boolean> private_() {
        return this.private_;
    }

    /**
     * Whether the Activity is a group event or not
     */
    public JsonNullable<Boolean> groupEvent() {
        return this.groupEvent;
    }

    /**
     * The sub type of the group event
     */
    public JsonNullable<String> eventSubType() {
        return this.eventSubType;
    }

    /**
     * The type of the group event
     */
    public JsonNullable<String> groupEventType() {
        return this.groupEventType;
    }

    /**
     * Whether the activity is a child of another activity or not
     */
    public JsonNullable<Boolean> child() {
        return this.child;
    }

    /**
     * Whether the activity is archived or not
     */
    public JsonNullable<Boolean> archived() {
        return this.archived;
    }

    /**
     * Whether the activity is deleted or not
     */
    public JsonNullable<Boolean> deleted() {
        return this.deleted;
    }

    public JsonNullable<ShowAs> showAs() {
        return this.showAs;
    }

    /**
     * Whether the Activity is done or not
     */
    public JsonNullable<Boolean> done() {
        return this.done;
    }

    /**
     * The start date and time of the activity
     */
    public JsonNullable<String> startDatetime() {
        return this.startDatetime;
    }

    /**
     * The end date and time of the activity
     */
    public JsonNullable<String> endDatetime() {
        return this.endDatetime;
    }

    /**
     * The date of the activity
     */
    public JsonNullable<String> activityDate() {
        return this.activityDate;
    }

    /**
     * The end date of the activity
     */
    public JsonNullable<String> endDate() {
        return this.endDate;
    }

    /**
     * Whether the activity is recurrent or not
     */
    public Optional<Boolean> recurrent() {
        return Optional.ofNullable(this.recurrent);
    }

    /**
     * The date and time of the reminder
     */
    public JsonNullable<String> reminderDatetime() {
        return this.reminderDatetime;
    }

    /**
     * Whether the reminder is set or not
     */
    public JsonNullable<Boolean> reminderSet() {
        return this.reminderSet;
    }

    /**
     * The URL of the video conference
     */
    public JsonNullable<String> videoConferenceUrl() {
        return this.videoConferenceUrl;
    }

    /**
     * The ID of the video conference
     */
    public JsonNullable<String> videoConferenceId() {
        return this.videoConferenceId;
    }

    /**
     * Custom fields of the activity
     */
    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public Optional<List<ActivityAttendeeInput>> attendees() {
        return Optional.ofNullable(this.attendees);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date and time of the activity
     */
    public ActivityInput withActivityDatetime(@Nullable String activityDatetime) {
        this.activityDatetime = JsonNullable.of(activityDatetime);
        return this;
    }


    /**
     * The duration of the activity in seconds
     */
    public ActivityInput withDurationSeconds(@Nullable Long durationSeconds) {
        this.durationSeconds = JsonNullable.of(durationSeconds);
        return this;
    }


    /**
     * The user related to the activity
     */
    public ActivityInput withUserId(@Nullable String userId) {
        this.userId = JsonNullable.of(userId);
        return this;
    }


    /**
     * The account related to the activity
     */
    public ActivityInput withAccountId(@Nullable String accountId) {
        this.accountId = JsonNullable.of(accountId);
        return this;
    }


    /**
     * The contact related to the activity
     */
    public ActivityInput withContactId(@Nullable String contactId) {
        this.contactId = JsonNullable.of(contactId);
        return this;
    }


    /**
     * The company related to the activity
     */
    public ActivityInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The opportunity related to the activity
     */
    public ActivityInput withOpportunityId(@Nullable String opportunityId) {
        this.opportunityId = JsonNullable.of(opportunityId);
        return this;
    }


    /**
     * The lead related to the activity
     */
    public ActivityInput withLeadId(@Nullable String leadId) {
        this.leadId = JsonNullable.of(leadId);
        return this;
    }


    /**
     * The owner of the activity
     */
    public ActivityInput withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The campaign related to the activity
     */
    public ActivityInput withCampaignId(@Nullable String campaignId) {
        this.campaignId = JsonNullable.of(campaignId);
        return this;
    }


    /**
     * The case related to the activity
     */
    public ActivityInput withCaseId(@Nullable String caseId) {
        this.caseId = JsonNullable.of(caseId);
        return this;
    }


    /**
     * The asset related to the activity
     */
    public ActivityInput withAssetId(@Nullable String assetId) {
        this.assetId = JsonNullable.of(assetId);
        return this;
    }


    /**
     * The contract related to the activity
     */
    public ActivityInput withContractId(@Nullable String contractId) {
        this.contractId = JsonNullable.of(contractId);
        return this;
    }


    /**
     * The product related to the activity
     */
    public ActivityInput withProductId(@Nullable String productId) {
        this.productId = JsonNullable.of(productId);
        return this;
    }


    /**
     * The solution related to the activity
     */
    public ActivityInput withSolutionId(@Nullable String solutionId) {
        this.solutionId = JsonNullable.of(solutionId);
        return this;
    }


    /**
     * The custom object related to the activity
     */
    public ActivityInput withCustomObjectId(@Nullable String customObjectId) {
        this.customObjectId = JsonNullable.of(customObjectId);
        return this;
    }


    /**
     * The type of the activity
     */
    public ActivityInput withType(@Nullable ActivityType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The title of the activity
     */
    public ActivityInput withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * A description of the activity
     */
    public ActivityInput withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * An internal note about the activity
     */
    public ActivityInput withNote(@Nullable String note) {
        this.note = JsonNullable.of(note);
        return this;
    }


    /**
     * The location of the activity
     */
    public ActivityInput withLocation(@Nullable String location) {
        this.location = JsonNullable.of(location);
        return this;
    }


    public ActivityInput withLocationAddress(@Nullable Address locationAddress) {
        this.locationAddress = locationAddress;
        return this;
    }


    /**
     * Whether the Activity is an all day event or not
     */
    public ActivityInput withAllDayEvent(@Nullable Boolean allDayEvent) {
        this.allDayEvent = JsonNullable.of(allDayEvent);
        return this;
    }


    /**
     * Whether the Activity is private or not
     */
    public ActivityInput withPrivate(@Nullable Boolean private_) {
        this.private_ = JsonNullable.of(private_);
        return this;
    }


    /**
     * Whether the Activity is a group event or not
     */
    public ActivityInput withGroupEvent(@Nullable Boolean groupEvent) {
        this.groupEvent = JsonNullable.of(groupEvent);
        return this;
    }


    /**
     * The sub type of the group event
     */
    public ActivityInput withEventSubType(@Nullable String eventSubType) {
        this.eventSubType = JsonNullable.of(eventSubType);
        return this;
    }


    /**
     * The type of the group event
     */
    public ActivityInput withGroupEventType(@Nullable String groupEventType) {
        this.groupEventType = JsonNullable.of(groupEventType);
        return this;
    }


    /**
     * Whether the activity is a child of another activity or not
     */
    public ActivityInput withChild(@Nullable Boolean child) {
        this.child = JsonNullable.of(child);
        return this;
    }


    /**
     * Whether the activity is archived or not
     */
    public ActivityInput withArchived(@Nullable Boolean archived) {
        this.archived = JsonNullable.of(archived);
        return this;
    }


    /**
     * Whether the activity is deleted or not
     */
    public ActivityInput withDeleted(@Nullable Boolean deleted) {
        this.deleted = JsonNullable.of(deleted);
        return this;
    }


    public ActivityInput withShowAs(@Nullable ShowAs showAs) {
        this.showAs = JsonNullable.of(showAs);
        return this;
    }


    /**
     * Whether the Activity is done or not
     */
    public ActivityInput withDone(@Nullable Boolean done) {
        this.done = JsonNullable.of(done);
        return this;
    }


    /**
     * The start date and time of the activity
     */
    public ActivityInput withStartDatetime(@Nullable String startDatetime) {
        this.startDatetime = JsonNullable.of(startDatetime);
        return this;
    }


    /**
     * The end date and time of the activity
     */
    public ActivityInput withEndDatetime(@Nullable String endDatetime) {
        this.endDatetime = JsonNullable.of(endDatetime);
        return this;
    }


    /**
     * The date of the activity
     */
    public ActivityInput withActivityDate(@Nullable String activityDate) {
        this.activityDate = JsonNullable.of(activityDate);
        return this;
    }


    /**
     * The end date of the activity
     */
    public ActivityInput withEndDate(@Nullable String endDate) {
        this.endDate = JsonNullable.of(endDate);
        return this;
    }


    /**
     * Whether the activity is recurrent or not
     */
    public ActivityInput withRecurrent(@Nullable Boolean recurrent) {
        this.recurrent = recurrent;
        return this;
    }


    /**
     * The date and time of the reminder
     */
    public ActivityInput withReminderDatetime(@Nullable String reminderDatetime) {
        this.reminderDatetime = JsonNullable.of(reminderDatetime);
        return this;
    }


    /**
     * Whether the reminder is set or not
     */
    public ActivityInput withReminderSet(@Nullable Boolean reminderSet) {
        this.reminderSet = JsonNullable.of(reminderSet);
        return this;
    }


    /**
     * The URL of the video conference
     */
    public ActivityInput withVideoConferenceUrl(@Nullable String videoConferenceUrl) {
        this.videoConferenceUrl = JsonNullable.of(videoConferenceUrl);
        return this;
    }


    /**
     * The ID of the video conference
     */
    public ActivityInput withVideoConferenceId(@Nullable String videoConferenceId) {
        this.videoConferenceId = JsonNullable.of(videoConferenceId);
        return this;
    }


    /**
     * Custom fields of the activity
     */
    public ActivityInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    public ActivityInput withAttendees(@Nullable List<ActivityAttendeeInput> attendees) {
        this.attendees = attendees;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ActivityInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityInput other = (ActivityInput) o;
        return 
            Utils.enhancedDeepEquals(this.activityDatetime, other.activityDatetime) &&
            Utils.enhancedDeepEquals(this.durationSeconds, other.durationSeconds) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.opportunityId, other.opportunityId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.campaignId, other.campaignId) &&
            Utils.enhancedDeepEquals(this.caseId, other.caseId) &&
            Utils.enhancedDeepEquals(this.assetId, other.assetId) &&
            Utils.enhancedDeepEquals(this.contractId, other.contractId) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.solutionId, other.solutionId) &&
            Utils.enhancedDeepEquals(this.customObjectId, other.customObjectId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.note, other.note) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.locationAddress, other.locationAddress) &&
            Utils.enhancedDeepEquals(this.allDayEvent, other.allDayEvent) &&
            Utils.enhancedDeepEquals(this.private_, other.private_) &&
            Utils.enhancedDeepEquals(this.groupEvent, other.groupEvent) &&
            Utils.enhancedDeepEquals(this.eventSubType, other.eventSubType) &&
            Utils.enhancedDeepEquals(this.groupEventType, other.groupEventType) &&
            Utils.enhancedDeepEquals(this.child, other.child) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.showAs, other.showAs) &&
            Utils.enhancedDeepEquals(this.done, other.done) &&
            Utils.enhancedDeepEquals(this.startDatetime, other.startDatetime) &&
            Utils.enhancedDeepEquals(this.endDatetime, other.endDatetime) &&
            Utils.enhancedDeepEquals(this.activityDate, other.activityDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.recurrent, other.recurrent) &&
            Utils.enhancedDeepEquals(this.reminderDatetime, other.reminderDatetime) &&
            Utils.enhancedDeepEquals(this.reminderSet, other.reminderSet) &&
            Utils.enhancedDeepEquals(this.videoConferenceUrl, other.videoConferenceUrl) &&
            Utils.enhancedDeepEquals(this.videoConferenceId, other.videoConferenceId) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.attendees, other.attendees) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            activityDatetime, durationSeconds, userId,
            accountId, contactId, companyId,
            opportunityId, leadId, ownerId,
            campaignId, caseId, assetId,
            contractId, productId, solutionId,
            customObjectId, type, title,
            description, note, location,
            locationAddress, allDayEvent, private_,
            groupEvent, eventSubType, groupEventType,
            child, archived, deleted,
            showAs, done, startDatetime,
            endDatetime, activityDate, endDate,
            recurrent, reminderDatetime, reminderSet,
            videoConferenceUrl, videoConferenceId, customFields,
            attendees, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityInput.class,
                "activityDatetime", activityDatetime,
                "durationSeconds", durationSeconds,
                "userId", userId,
                "accountId", accountId,
                "contactId", contactId,
                "companyId", companyId,
                "opportunityId", opportunityId,
                "leadId", leadId,
                "ownerId", ownerId,
                "campaignId", campaignId,
                "caseId", caseId,
                "assetId", assetId,
                "contractId", contractId,
                "productId", productId,
                "solutionId", solutionId,
                "customObjectId", customObjectId,
                "type", type,
                "title", title,
                "description", description,
                "note", note,
                "location", location,
                "locationAddress", locationAddress,
                "allDayEvent", allDayEvent,
                "private_", private_,
                "groupEvent", groupEvent,
                "eventSubType", eventSubType,
                "groupEventType", groupEventType,
                "child", child,
                "archived", archived,
                "deleted", deleted,
                "showAs", showAs,
                "done", done,
                "startDatetime", startDatetime,
                "endDatetime", endDatetime,
                "activityDate", activityDate,
                "endDate", endDate,
                "recurrent", recurrent,
                "reminderDatetime", reminderDatetime,
                "reminderSet", reminderSet,
                "videoConferenceUrl", videoConferenceUrl,
                "videoConferenceId", videoConferenceId,
                "customFields", customFields,
                "attendees", attendees,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> activityDatetime;

        private JsonNullable<Long> durationSeconds;

        private JsonNullable<String> userId;

        private JsonNullable<String> accountId;

        private JsonNullable<String> contactId;

        private JsonNullable<String> companyId;

        private JsonNullable<String> opportunityId;

        private JsonNullable<String> leadId;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> campaignId;

        private JsonNullable<String> caseId;

        private JsonNullable<String> assetId;

        private JsonNullable<String> contractId;

        private JsonNullable<String> productId;

        private JsonNullable<String> solutionId;

        private JsonNullable<String> customObjectId;

        private ActivityType type;

        private JsonNullable<String> title;

        private JsonNullable<String> description;

        private JsonNullable<String> note;

        private JsonNullable<String> location;

        private Address locationAddress;

        private JsonNullable<Boolean> allDayEvent;

        private JsonNullable<Boolean> private_;

        private JsonNullable<Boolean> groupEvent;

        private JsonNullable<String> eventSubType;

        private JsonNullable<String> groupEventType;

        private JsonNullable<Boolean> child;

        private JsonNullable<Boolean> archived;

        private JsonNullable<Boolean> deleted;

        private JsonNullable<ShowAs> showAs;

        private JsonNullable<Boolean> done;

        private JsonNullable<String> startDatetime;

        private JsonNullable<String> endDatetime;

        private JsonNullable<String> activityDate;

        private JsonNullable<String> endDate;

        private Boolean recurrent;

        private JsonNullable<String> reminderDatetime;

        private JsonNullable<Boolean> reminderSet;

        private JsonNullable<String> videoConferenceUrl;

        private JsonNullable<String> videoConferenceId;

        private List<CustomField> customFields;

        private List<ActivityAttendeeInput> attendees;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date and time of the activity
         */
        public Builder activityDatetime(@Nullable String activityDatetime) {
            this.activityDatetime = JsonNullable.of(activityDatetime);
            return this;
        }

        /**
         * The duration of the activity in seconds
         */
        public Builder durationSeconds(@Nullable Long durationSeconds) {
            this.durationSeconds = JsonNullable.of(durationSeconds);
            return this;
        }

        /**
         * The user related to the activity
         */
        public Builder userId(@Nullable String userId) {
            this.userId = JsonNullable.of(userId);
            return this;
        }

        /**
         * The account related to the activity
         */
        public Builder accountId(@Nullable String accountId) {
            this.accountId = JsonNullable.of(accountId);
            return this;
        }

        /**
         * The contact related to the activity
         */
        public Builder contactId(@Nullable String contactId) {
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * The company related to the activity
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The opportunity related to the activity
         */
        public Builder opportunityId(@Nullable String opportunityId) {
            this.opportunityId = JsonNullable.of(opportunityId);
            return this;
        }

        /**
         * The lead related to the activity
         */
        public Builder leadId(@Nullable String leadId) {
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The owner of the activity
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The campaign related to the activity
         */
        public Builder campaignId(@Nullable String campaignId) {
            this.campaignId = JsonNullable.of(campaignId);
            return this;
        }

        /**
         * The case related to the activity
         */
        public Builder caseId(@Nullable String caseId) {
            this.caseId = JsonNullable.of(caseId);
            return this;
        }

        /**
         * The asset related to the activity
         */
        public Builder assetId(@Nullable String assetId) {
            this.assetId = JsonNullable.of(assetId);
            return this;
        }

        /**
         * The contract related to the activity
         */
        public Builder contractId(@Nullable String contractId) {
            this.contractId = JsonNullable.of(contractId);
            return this;
        }

        /**
         * The product related to the activity
         */
        public Builder productId(@Nullable String productId) {
            this.productId = JsonNullable.of(productId);
            return this;
        }

        /**
         * The solution related to the activity
         */
        public Builder solutionId(@Nullable String solutionId) {
            this.solutionId = JsonNullable.of(solutionId);
            return this;
        }

        /**
         * The custom object related to the activity
         */
        public Builder customObjectId(@Nullable String customObjectId) {
            this.customObjectId = JsonNullable.of(customObjectId);
            return this;
        }

        /**
         * The type of the activity
         */
        public Builder type(@Nullable ActivityType type) {
            this.type = type;
            return this;
        }

        /**
         * The title of the activity
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * A description of the activity
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * An internal note about the activity
         */
        public Builder note(@Nullable String note) {
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * The location of the activity
         */
        public Builder location(@Nullable String location) {
            this.location = JsonNullable.of(location);
            return this;
        }

        public Builder locationAddress(@Nullable Address locationAddress) {
            this.locationAddress = locationAddress;
            return this;
        }

        /**
         * Whether the Activity is an all day event or not
         */
        public Builder allDayEvent(@Nullable Boolean allDayEvent) {
            this.allDayEvent = JsonNullable.of(allDayEvent);
            return this;
        }

        /**
         * Whether the Activity is private or not
         */
        public Builder private_(@Nullable Boolean private_) {
            this.private_ = JsonNullable.of(private_);
            return this;
        }

        /**
         * Whether the Activity is a group event or not
         */
        public Builder groupEvent(@Nullable Boolean groupEvent) {
            this.groupEvent = JsonNullable.of(groupEvent);
            return this;
        }

        /**
         * The sub type of the group event
         */
        public Builder eventSubType(@Nullable String eventSubType) {
            this.eventSubType = JsonNullable.of(eventSubType);
            return this;
        }

        /**
         * The type of the group event
         */
        public Builder groupEventType(@Nullable String groupEventType) {
            this.groupEventType = JsonNullable.of(groupEventType);
            return this;
        }

        /**
         * Whether the activity is a child of another activity or not
         */
        public Builder child(@Nullable Boolean child) {
            this.child = JsonNullable.of(child);
            return this;
        }

        /**
         * Whether the activity is archived or not
         */
        public Builder archived(@Nullable Boolean archived) {
            this.archived = JsonNullable.of(archived);
            return this;
        }

        /**
         * Whether the activity is deleted or not
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        public Builder showAs(@Nullable ShowAs showAs) {
            this.showAs = JsonNullable.of(showAs);
            return this;
        }

        /**
         * Whether the Activity is done or not
         */
        public Builder done(@Nullable Boolean done) {
            this.done = JsonNullable.of(done);
            return this;
        }

        /**
         * The start date and time of the activity
         */
        public Builder startDatetime(@Nullable String startDatetime) {
            this.startDatetime = JsonNullable.of(startDatetime);
            return this;
        }

        /**
         * The end date and time of the activity
         */
        public Builder endDatetime(@Nullable String endDatetime) {
            this.endDatetime = JsonNullable.of(endDatetime);
            return this;
        }

        /**
         * The date of the activity
         */
        public Builder activityDate(@Nullable String activityDate) {
            this.activityDate = JsonNullable.of(activityDate);
            return this;
        }

        /**
         * The end date of the activity
         */
        public Builder endDate(@Nullable String endDate) {
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * Whether the activity is recurrent or not
         */
        public Builder recurrent(@Nullable Boolean recurrent) {
            this.recurrent = recurrent;
            return this;
        }

        /**
         * The date and time of the reminder
         */
        public Builder reminderDatetime(@Nullable String reminderDatetime) {
            this.reminderDatetime = JsonNullable.of(reminderDatetime);
            return this;
        }

        /**
         * Whether the reminder is set or not
         */
        public Builder reminderSet(@Nullable Boolean reminderSet) {
            this.reminderSet = JsonNullable.of(reminderSet);
            return this;
        }

        /**
         * The URL of the video conference
         */
        public Builder videoConferenceUrl(@Nullable String videoConferenceUrl) {
            this.videoConferenceUrl = JsonNullable.of(videoConferenceUrl);
            return this;
        }

        /**
         * The ID of the video conference
         */
        public Builder videoConferenceId(@Nullable String videoConferenceId) {
            this.videoConferenceId = JsonNullable.of(videoConferenceId);
            return this;
        }

        /**
         * Custom fields of the activity
         */
        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder attendees(@Nullable List<ActivityAttendeeInput> attendees) {
            this.attendees = attendees;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public ActivityInput build() {
            return new ActivityInput(
                activityDatetime, durationSeconds, userId,
                accountId, contactId, companyId,
                opportunityId, leadId, ownerId,
                campaignId, caseId, assetId,
                contractId, productId, solutionId,
                customObjectId, type, title,
                description, note, location,
                locationAddress, allDayEvent, private_,
                groupEvent, eventSubType, groupEventType,
                child, archived, deleted,
                showAs, done, startDatetime,
                endDatetime, activityDate, endDate,
                recurrent, reminderDatetime, reminderSet,
                videoConferenceUrl, videoConferenceId, customFields,
                attendees, passThrough);
        }

    }
}
