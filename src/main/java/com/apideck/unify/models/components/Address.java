/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Address {
    /**
     * Unique identifier for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The type of address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<Type> type;

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("string")
    private JsonNullable<String> string;

    /**
     * The name of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * Line 2 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * Line 3 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line3")
    private JsonNullable<String> line3;

    /**
     * Line 4 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line4")
    private JsonNullable<String> line4;

    /**
     * Street number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_number")
    private JsonNullable<String> streetNumber;

    /**
     * Name of city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * Name of state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * Zip code or equivalent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * Latitude of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private JsonNullable<String> latitude;

    /**
     * Longitude of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private JsonNullable<String> longitude;

    /**
     * Address field that holds a sublocality, such as a county
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private JsonNullable<String> county;

    /**
     * Name of the contact person at the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_name")
    private JsonNullable<String> contactName;

    /**
     * Salutation of the contact person at the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * Phone number of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;

    /**
     * Fax number of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;

    /**
     * Email address of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * Website of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private JsonNullable<String> website;

    /**
     * Additional notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    @JsonCreator
    public Address(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("type") @Nullable JsonNullable<Type> type,
            @JsonProperty("string") @Nullable JsonNullable<String> string,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("line1") @Nullable JsonNullable<String> line1,
            @JsonProperty("line2") @Nullable JsonNullable<String> line2,
            @JsonProperty("line3") @Nullable JsonNullable<String> line3,
            @JsonProperty("line4") @Nullable JsonNullable<String> line4,
            @JsonProperty("street_number") @Nullable JsonNullable<String> streetNumber,
            @JsonProperty("city") @Nullable JsonNullable<String> city,
            @JsonProperty("state") @Nullable JsonNullable<String> state,
            @JsonProperty("postal_code") @Nullable JsonNullable<String> postalCode,
            @JsonProperty("country") @Nullable JsonNullable<String> country,
            @JsonProperty("latitude") @Nullable JsonNullable<String> latitude,
            @JsonProperty("longitude") @Nullable JsonNullable<String> longitude,
            @JsonProperty("county") @Nullable JsonNullable<String> county,
            @JsonProperty("contact_name") @Nullable JsonNullable<String> contactName,
            @JsonProperty("salutation") @Nullable JsonNullable<String> salutation,
            @JsonProperty("phone_number") @Nullable JsonNullable<String> phoneNumber,
            @JsonProperty("fax") @Nullable JsonNullable<String> fax,
            @JsonProperty("email") @Nullable JsonNullable<String> email,
            @JsonProperty("website") @Nullable JsonNullable<String> website,
            @JsonProperty("notes") @Nullable JsonNullable<String> notes,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.string = Optional.ofNullable(string)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.line1 = Optional.ofNullable(line1)
            .orElse(JsonNullable.undefined());
        this.line2 = Optional.ofNullable(line2)
            .orElse(JsonNullable.undefined());
        this.line3 = Optional.ofNullable(line3)
            .orElse(JsonNullable.undefined());
        this.line4 = Optional.ofNullable(line4)
            .orElse(JsonNullable.undefined());
        this.streetNumber = Optional.ofNullable(streetNumber)
            .orElse(JsonNullable.undefined());
        this.city = Optional.ofNullable(city)
            .orElse(JsonNullable.undefined());
        this.state = Optional.ofNullable(state)
            .orElse(JsonNullable.undefined());
        this.postalCode = Optional.ofNullable(postalCode)
            .orElse(JsonNullable.undefined());
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
        this.latitude = Optional.ofNullable(latitude)
            .orElse(JsonNullable.undefined());
        this.longitude = Optional.ofNullable(longitude)
            .orElse(JsonNullable.undefined());
        this.county = Optional.ofNullable(county)
            .orElse(JsonNullable.undefined());
        this.contactName = Optional.ofNullable(contactName)
            .orElse(JsonNullable.undefined());
        this.salutation = Optional.ofNullable(salutation)
            .orElse(JsonNullable.undefined());
        this.phoneNumber = Optional.ofNullable(phoneNumber)
            .orElse(JsonNullable.undefined());
        this.fax = Optional.ofNullable(fax)
            .orElse(JsonNullable.undefined());
        this.email = Optional.ofNullable(email)
            .orElse(JsonNullable.undefined());
        this.website = Optional.ofNullable(website)
            .orElse(JsonNullable.undefined());
        this.notes = Optional.ofNullable(notes)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
    }
    
    public Address() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * Unique identifier for the address.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The type of address.
     */
    public JsonNullable<Type> type() {
        return this.type;
    }

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    public JsonNullable<String> string() {
        return this.string;
    }

    /**
     * The name of the address.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    public JsonNullable<String> line1() {
        return this.line1;
    }

    /**
     * Line 2 of the address
     */
    public JsonNullable<String> line2() {
        return this.line2;
    }

    /**
     * Line 3 of the address
     */
    public JsonNullable<String> line3() {
        return this.line3;
    }

    /**
     * Line 4 of the address
     */
    public JsonNullable<String> line4() {
        return this.line4;
    }

    /**
     * Street number
     */
    public JsonNullable<String> streetNumber() {
        return this.streetNumber;
    }

    /**
     * Name of city.
     */
    public JsonNullable<String> city() {
        return this.city;
    }

    /**
     * Name of state
     */
    public JsonNullable<String> state() {
        return this.state;
    }

    /**
     * Zip code or equivalent.
     */
    public JsonNullable<String> postalCode() {
        return this.postalCode;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    /**
     * Latitude of the address
     */
    public JsonNullable<String> latitude() {
        return this.latitude;
    }

    /**
     * Longitude of the address
     */
    public JsonNullable<String> longitude() {
        return this.longitude;
    }

    /**
     * Address field that holds a sublocality, such as a county
     */
    public JsonNullable<String> county() {
        return this.county;
    }

    /**
     * Name of the contact person at the address
     */
    public JsonNullable<String> contactName() {
        return this.contactName;
    }

    /**
     * Salutation of the contact person at the address
     */
    public JsonNullable<String> salutation() {
        return this.salutation;
    }

    /**
     * Phone number of the address
     */
    public JsonNullable<String> phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Fax number of the address
     */
    public JsonNullable<String> fax() {
        return this.fax;
    }

    /**
     * Email address of the address
     */
    public JsonNullable<String> email() {
        return this.email;
    }

    /**
     * Website of the address
     */
    public JsonNullable<String> website() {
        return this.website;
    }

    /**
     * Additional notes
     */
    public JsonNullable<String> notes() {
        return this.notes;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the address.
     */
    public Address withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The type of address.
     */
    public Address withType(@Nullable Type type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The address string. Some APIs don't provide structured address data.
     */
    public Address withString(@Nullable String string) {
        this.string = JsonNullable.of(string);
        return this;
    }


    /**
     * The name of the address.
     */
    public Address withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    public Address withLine1(@Nullable String line1) {
        this.line1 = JsonNullable.of(line1);
        return this;
    }


    /**
     * Line 2 of the address
     */
    public Address withLine2(@Nullable String line2) {
        this.line2 = JsonNullable.of(line2);
        return this;
    }


    /**
     * Line 3 of the address
     */
    public Address withLine3(@Nullable String line3) {
        this.line3 = JsonNullable.of(line3);
        return this;
    }


    /**
     * Line 4 of the address
     */
    public Address withLine4(@Nullable String line4) {
        this.line4 = JsonNullable.of(line4);
        return this;
    }


    /**
     * Street number
     */
    public Address withStreetNumber(@Nullable String streetNumber) {
        this.streetNumber = JsonNullable.of(streetNumber);
        return this;
    }


    /**
     * Name of city.
     */
    public Address withCity(@Nullable String city) {
        this.city = JsonNullable.of(city);
        return this;
    }


    /**
     * Name of state
     */
    public Address withState(@Nullable String state) {
        this.state = JsonNullable.of(state);
        return this;
    }


    /**
     * Zip code or equivalent.
     */
    public Address withPostalCode(@Nullable String postalCode) {
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }


    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public Address withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    /**
     * Latitude of the address
     */
    public Address withLatitude(@Nullable String latitude) {
        this.latitude = JsonNullable.of(latitude);
        return this;
    }


    /**
     * Longitude of the address
     */
    public Address withLongitude(@Nullable String longitude) {
        this.longitude = JsonNullable.of(longitude);
        return this;
    }


    /**
     * Address field that holds a sublocality, such as a county
     */
    public Address withCounty(@Nullable String county) {
        this.county = JsonNullable.of(county);
        return this;
    }


    /**
     * Name of the contact person at the address
     */
    public Address withContactName(@Nullable String contactName) {
        this.contactName = JsonNullable.of(contactName);
        return this;
    }


    /**
     * Salutation of the contact person at the address
     */
    public Address withSalutation(@Nullable String salutation) {
        this.salutation = JsonNullable.of(salutation);
        return this;
    }


    /**
     * Phone number of the address
     */
    public Address withPhoneNumber(@Nullable String phoneNumber) {
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }


    /**
     * Fax number of the address
     */
    public Address withFax(@Nullable String fax) {
        this.fax = JsonNullable.of(fax);
        return this;
    }


    /**
     * Email address of the address
     */
    public Address withEmail(@Nullable String email) {
        this.email = JsonNullable.of(email);
        return this;
    }


    /**
     * Website of the address
     */
    public Address withWebsite(@Nullable String website) {
        this.website = JsonNullable.of(website);
        return this;
    }


    /**
     * Additional notes
     */
    public Address withNotes(@Nullable String notes) {
        this.notes = JsonNullable.of(notes);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Address withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.string, other.string) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.line1, other.line1) &&
            Utils.enhancedDeepEquals(this.line2, other.line2) &&
            Utils.enhancedDeepEquals(this.line3, other.line3) &&
            Utils.enhancedDeepEquals(this.line4, other.line4) &&
            Utils.enhancedDeepEquals(this.streetNumber, other.streetNumber) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.latitude, other.latitude) &&
            Utils.enhancedDeepEquals(this.longitude, other.longitude) &&
            Utils.enhancedDeepEquals(this.county, other.county) &&
            Utils.enhancedDeepEquals(this.contactName, other.contactName) &&
            Utils.enhancedDeepEquals(this.salutation, other.salutation) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.fax, other.fax) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.website, other.website) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, string,
            name, line1, line2,
            line3, line4, streetNumber,
            city, state, postalCode,
            country, latitude, longitude,
            county, contactName, salutation,
            phoneNumber, fax, email,
            website, notes, rowVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "id", id,
                "type", type,
                "string", string,
                "name", name,
                "line1", line1,
                "line2", line2,
                "line3", line3,
                "line4", line4,
                "streetNumber", streetNumber,
                "city", city,
                "state", state,
                "postalCode", postalCode,
                "country", country,
                "latitude", latitude,
                "longitude", longitude,
                "county", county,
                "contactName", contactName,
                "salutation", salutation,
                "phoneNumber", phoneNumber,
                "fax", fax,
                "email", email,
                "website", website,
                "notes", notes,
                "rowVersion", rowVersion);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<Type> type;

        private JsonNullable<String> string;

        private JsonNullable<String> name;

        private JsonNullable<String> line1;

        private JsonNullable<String> line2;

        private JsonNullable<String> line3;

        private JsonNullable<String> line4;

        private JsonNullable<String> streetNumber;

        private JsonNullable<String> city;

        private JsonNullable<String> state;

        private JsonNullable<String> postalCode;

        private JsonNullable<String> country;

        private JsonNullable<String> latitude;

        private JsonNullable<String> longitude;

        private JsonNullable<String> county;

        private JsonNullable<String> contactName;

        private JsonNullable<String> salutation;

        private JsonNullable<String> phoneNumber;

        private JsonNullable<String> fax;

        private JsonNullable<String> email;

        private JsonNullable<String> website;

        private JsonNullable<String> notes;

        private JsonNullable<String> rowVersion;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the address.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The type of address.
         */
        public Builder type(@Nullable Type type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The address string. Some APIs don't provide structured address data.
         */
        public Builder string(@Nullable String string) {
            this.string = JsonNullable.of(string);
            return this;
        }

        /**
         * The name of the address.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Line 1 of the address e.g. number, street, suite, apt #, etc.
         */
        public Builder line1(@Nullable String line1) {
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Line 2 of the address
         */
        public Builder line2(@Nullable String line2) {
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * Line 3 of the address
         */
        public Builder line3(@Nullable String line3) {
            this.line3 = JsonNullable.of(line3);
            return this;
        }

        /**
         * Line 4 of the address
         */
        public Builder line4(@Nullable String line4) {
            this.line4 = JsonNullable.of(line4);
            return this;
        }

        /**
         * Street number
         */
        public Builder streetNumber(@Nullable String streetNumber) {
            this.streetNumber = JsonNullable.of(streetNumber);
            return this;
        }

        /**
         * Name of city.
         */
        public Builder city(@Nullable String city) {
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * Name of state
         */
        public Builder state(@Nullable String state) {
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * Zip code or equivalent.
         */
        public Builder postalCode(@Nullable String postalCode) {
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Latitude of the address
         */
        public Builder latitude(@Nullable String latitude) {
            this.latitude = JsonNullable.of(latitude);
            return this;
        }

        /**
         * Longitude of the address
         */
        public Builder longitude(@Nullable String longitude) {
            this.longitude = JsonNullable.of(longitude);
            return this;
        }

        /**
         * Address field that holds a sublocality, such as a county
         */
        public Builder county(@Nullable String county) {
            this.county = JsonNullable.of(county);
            return this;
        }

        /**
         * Name of the contact person at the address
         */
        public Builder contactName(@Nullable String contactName) {
            this.contactName = JsonNullable.of(contactName);
            return this;
        }

        /**
         * Salutation of the contact person at the address
         */
        public Builder salutation(@Nullable String salutation) {
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * Phone number of the address
         */
        public Builder phoneNumber(@Nullable String phoneNumber) {
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * Fax number of the address
         */
        public Builder fax(@Nullable String fax) {
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * Email address of the address
         */
        public Builder email(@Nullable String email) {
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Website of the address
         */
        public Builder website(@Nullable String website) {
            this.website = JsonNullable.of(website);
            return this;
        }

        /**
         * Additional notes
         */
        public Builder notes(@Nullable String notes) {
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        public Address build() {
            return new Address(
                id, type, string,
                name, line1, line2,
                line3, line4, streetNumber,
                city, state, postalCode,
                country, latitude, longitude,
                county, contactName, salutation,
                phoneNumber, fax, email,
                website, notes, rowVersion);
        }

    }
}
