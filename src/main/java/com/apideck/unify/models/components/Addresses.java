/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Addresses {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private EcommerceCustomerType type;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * First line of the street address of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * Second line of the street address of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * City of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * State of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * Postal code of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Country of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonCreator
    public Addresses(
            @JsonProperty("type") @Nullable EcommerceCustomerType type,
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("line1") @Nullable JsonNullable<String> line1,
            @JsonProperty("line2") @Nullable JsonNullable<String> line2,
            @JsonProperty("city") @Nullable JsonNullable<String> city,
            @JsonProperty("state") @Nullable JsonNullable<String> state,
            @JsonProperty("postal_code") @Nullable JsonNullable<String> postalCode,
            @JsonProperty("country") @Nullable JsonNullable<String> country) {
        this.type = type;
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.line1 = Optional.ofNullable(line1)
            .orElse(JsonNullable.undefined());
        this.line2 = Optional.ofNullable(line2)
            .orElse(JsonNullable.undefined());
        this.city = Optional.ofNullable(city)
            .orElse(JsonNullable.undefined());
        this.state = Optional.ofNullable(state)
            .orElse(JsonNullable.undefined());
        this.postalCode = Optional.ofNullable(postalCode)
            .orElse(JsonNullable.undefined());
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
    }
    
    public Addresses() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    public Optional<EcommerceCustomerType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * First line of the street address of the customer
     */
    public JsonNullable<String> line1() {
        return this.line1;
    }

    /**
     * Second line of the street address of the customer
     */
    public JsonNullable<String> line2() {
        return this.line2;
    }

    /**
     * City of the customer
     */
    public JsonNullable<String> city() {
        return this.city;
    }

    /**
     * State of the customer
     */
    public JsonNullable<String> state() {
        return this.state;
    }

    /**
     * Postal code of the customer
     */
    public JsonNullable<String> postalCode() {
        return this.postalCode;
    }

    /**
     * Country of the customer
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Addresses withType(@Nullable EcommerceCustomerType type) {
        this.type = type;
        return this;
    }


    /**
     * A unique identifier for an object.
     */
    public Addresses withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * First line of the street address of the customer
     */
    public Addresses withLine1(@Nullable String line1) {
        this.line1 = JsonNullable.of(line1);
        return this;
    }


    /**
     * Second line of the street address of the customer
     */
    public Addresses withLine2(@Nullable String line2) {
        this.line2 = JsonNullable.of(line2);
        return this;
    }


    /**
     * City of the customer
     */
    public Addresses withCity(@Nullable String city) {
        this.city = JsonNullable.of(city);
        return this;
    }


    /**
     * State of the customer
     */
    public Addresses withState(@Nullable String state) {
        this.state = JsonNullable.of(state);
        return this;
    }


    /**
     * Postal code of the customer
     */
    public Addresses withPostalCode(@Nullable String postalCode) {
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }


    /**
     * Country of the customer
     */
    public Addresses withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Addresses other = (Addresses) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.line1, other.line1) &&
            Utils.enhancedDeepEquals(this.line2, other.line2) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, line1,
            line2, city, state,
            postalCode, country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Addresses.class,
                "type", type,
                "id", id,
                "line1", line1,
                "line2", line2,
                "city", city,
                "state", state,
                "postalCode", postalCode,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private EcommerceCustomerType type;

        private JsonNullable<String> id;

        private JsonNullable<String> line1;

        private JsonNullable<String> line2;

        private JsonNullable<String> city;

        private JsonNullable<String> state;

        private JsonNullable<String> postalCode;

        private JsonNullable<String> country;

        private Builder() {
          // force use of static builder() method
        }

        public Builder type(@Nullable EcommerceCustomerType type) {
            this.type = type;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * First line of the street address of the customer
         */
        public Builder line1(@Nullable String line1) {
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Second line of the street address of the customer
         */
        public Builder line2(@Nullable String line2) {
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * City of the customer
         */
        public Builder city(@Nullable String city) {
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * State of the customer
         */
        public Builder state(@Nullable String state) {
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * Postal code of the customer
         */
        public Builder postalCode(@Nullable String postalCode) {
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Country of the customer
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        public Addresses build() {
            return new Addresses(
                type, id, line1,
                line2, city, state,
                postalCode, country);
        }

    }
}
