/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class AgedDebtors {
    /**
     * The exact date and time the report was generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_generated_at")
    private OffsetDateTime reportGeneratedAt;

    /**
     * The cutoff date for transactions included in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_as_of_date")
    private LocalDate reportAsOfDate;

    /**
     * Number of aging periods shown in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_count")
    private Long periodCount;

    /**
     * Length of each aging period in days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_length")
    private Long periodLength;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outstanding_balances")
    private List<OutstandingBalanceByCustomer> outstandingBalances;

    @JsonCreator
    public AgedDebtors(
            @JsonProperty("report_generated_at") @Nullable OffsetDateTime reportGeneratedAt,
            @JsonProperty("report_as_of_date") @Nullable LocalDate reportAsOfDate,
            @JsonProperty("period_count") @Nullable Long periodCount,
            @JsonProperty("period_length") @Nullable Long periodLength,
            @JsonProperty("outstanding_balances") @Nullable List<OutstandingBalanceByCustomer> outstandingBalances) {
        this.reportGeneratedAt = reportGeneratedAt;
        this.reportAsOfDate = reportAsOfDate;
        this.periodCount = Optional.ofNullable(periodCount)
            .orElse(Builder._SINGLETON_VALUE_PeriodCount.value());
        this.periodLength = Optional.ofNullable(periodLength)
            .orElse(Builder._SINGLETON_VALUE_PeriodLength.value());
        this.outstandingBalances = outstandingBalances;
    }
    
    public AgedDebtors() {
        this(null, null, null,
            null, null);
    }

    /**
     * The exact date and time the report was generated.
     */
    public Optional<OffsetDateTime> reportGeneratedAt() {
        return Optional.ofNullable(this.reportGeneratedAt);
    }

    /**
     * The cutoff date for transactions included in the report.
     */
    public Optional<LocalDate> reportAsOfDate() {
        return Optional.ofNullable(this.reportAsOfDate);
    }

    /**
     * Number of aging periods shown in the report.
     */
    public Optional<Long> periodCount() {
        return Optional.ofNullable(this.periodCount);
    }

    /**
     * Length of each aging period in days.
     */
    public Optional<Long> periodLength() {
        return Optional.ofNullable(this.periodLength);
    }

    public Optional<List<OutstandingBalanceByCustomer>> outstandingBalances() {
        return Optional.ofNullable(this.outstandingBalances);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The exact date and time the report was generated.
     */
    public AgedDebtors withReportGeneratedAt(@Nullable OffsetDateTime reportGeneratedAt) {
        this.reportGeneratedAt = reportGeneratedAt;
        return this;
    }


    /**
     * The cutoff date for transactions included in the report.
     */
    public AgedDebtors withReportAsOfDate(@Nullable LocalDate reportAsOfDate) {
        this.reportAsOfDate = reportAsOfDate;
        return this;
    }


    /**
     * Number of aging periods shown in the report.
     */
    public AgedDebtors withPeriodCount(@Nullable Long periodCount) {
        this.periodCount = periodCount;
        return this;
    }


    /**
     * Length of each aging period in days.
     */
    public AgedDebtors withPeriodLength(@Nullable Long periodLength) {
        this.periodLength = periodLength;
        return this;
    }


    public AgedDebtors withOutstandingBalances(@Nullable List<OutstandingBalanceByCustomer> outstandingBalances) {
        this.outstandingBalances = outstandingBalances;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgedDebtors other = (AgedDebtors) o;
        return 
            Utils.enhancedDeepEquals(this.reportGeneratedAt, other.reportGeneratedAt) &&
            Utils.enhancedDeepEquals(this.reportAsOfDate, other.reportAsOfDate) &&
            Utils.enhancedDeepEquals(this.periodCount, other.periodCount) &&
            Utils.enhancedDeepEquals(this.periodLength, other.periodLength) &&
            Utils.enhancedDeepEquals(this.outstandingBalances, other.outstandingBalances);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            reportGeneratedAt, reportAsOfDate, periodCount,
            periodLength, outstandingBalances);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgedDebtors.class,
                "reportGeneratedAt", reportGeneratedAt,
                "reportAsOfDate", reportAsOfDate,
                "periodCount", periodCount,
                "periodLength", periodLength,
                "outstandingBalances", outstandingBalances);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime reportGeneratedAt;

        private LocalDate reportAsOfDate;

        private Long periodCount;

        private Long periodLength;

        private List<OutstandingBalanceByCustomer> outstandingBalances;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The exact date and time the report was generated.
         */
        public Builder reportGeneratedAt(@Nullable OffsetDateTime reportGeneratedAt) {
            this.reportGeneratedAt = reportGeneratedAt;
            return this;
        }

        /**
         * The cutoff date for transactions included in the report.
         */
        public Builder reportAsOfDate(@Nullable LocalDate reportAsOfDate) {
            this.reportAsOfDate = reportAsOfDate;
            return this;
        }

        /**
         * Number of aging periods shown in the report.
         */
        public Builder periodCount(@Nullable Long periodCount) {
            this.periodCount = periodCount;
            return this;
        }

        /**
         * Length of each aging period in days.
         */
        public Builder periodLength(@Nullable Long periodLength) {
            this.periodLength = periodLength;
            return this;
        }

        public Builder outstandingBalances(@Nullable List<OutstandingBalanceByCustomer> outstandingBalances) {
            this.outstandingBalances = outstandingBalances;
            return this;
        }

        public AgedDebtors build() {
            return new AgedDebtors(
                reportGeneratedAt, reportAsOfDate, periodCount,
                periodLength, outstandingBalances);
        }


        private static final LazySingletonValue<Long> _SINGLETON_VALUE_PeriodCount =
                new LazySingletonValue<>(
                        "period_count",
                        "4",
                        new TypeReference<Long>() {});

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_PeriodLength =
                new LazySingletonValue<>(
                        "period_length",
                        "30",
                        new TypeReference<Long>() {});
    }
}
