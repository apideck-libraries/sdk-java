/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class AgedReportFilter {
    /**
     * Filter by customer id
     */
    @SpeakeasyMetadata("queryParam:name=customer_id")
    private String customerId;

    /**
     * Filter by supplier id
     */
    @SpeakeasyMetadata("queryParam:name=supplier_id")
    private String supplierId;

    /**
     * The cutoff date for considering transactions
     */
    @SpeakeasyMetadata("queryParam:name=report_as_of_date")
    private String reportAsOfDate;

    /**
     * Number of periods to split the aged creditors report into
     */
    @SpeakeasyMetadata("queryParam:name=period_count")
    private Long periodCount;

    /**
     * Length of each period in days
     */
    @SpeakeasyMetadata("queryParam:name=period_length")
    private Long periodLength;

    @JsonCreator
    public AgedReportFilter(
            @Nullable String customerId,
            @Nullable String supplierId,
            @Nullable String reportAsOfDate,
            @Nullable Long periodCount,
            @Nullable Long periodLength) {
        this.customerId = customerId;
        this.supplierId = supplierId;
        this.reportAsOfDate = reportAsOfDate;
        this.periodCount = periodCount;
        this.periodLength = periodLength;
    }
    
    public AgedReportFilter() {
        this(null, null, null,
            null, null);
    }

    /**
     * Filter by customer id
     */
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * Filter by supplier id
     */
    public Optional<String> supplierId() {
        return Optional.ofNullable(this.supplierId);
    }

    /**
     * The cutoff date for considering transactions
     */
    public Optional<String> reportAsOfDate() {
        return Optional.ofNullable(this.reportAsOfDate);
    }

    /**
     * Number of periods to split the aged creditors report into
     */
    public Optional<Long> periodCount() {
        return Optional.ofNullable(this.periodCount);
    }

    /**
     * Length of each period in days
     */
    public Optional<Long> periodLength() {
        return Optional.ofNullable(this.periodLength);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter by customer id
     */
    public AgedReportFilter withCustomerId(@Nullable String customerId) {
        this.customerId = customerId;
        return this;
    }


    /**
     * Filter by supplier id
     */
    public AgedReportFilter withSupplierId(@Nullable String supplierId) {
        this.supplierId = supplierId;
        return this;
    }


    /**
     * The cutoff date for considering transactions
     */
    public AgedReportFilter withReportAsOfDate(@Nullable String reportAsOfDate) {
        this.reportAsOfDate = reportAsOfDate;
        return this;
    }


    /**
     * Number of periods to split the aged creditors report into
     */
    public AgedReportFilter withPeriodCount(@Nullable Long periodCount) {
        this.periodCount = periodCount;
        return this;
    }


    /**
     * Length of each period in days
     */
    public AgedReportFilter withPeriodLength(@Nullable Long periodLength) {
        this.periodLength = periodLength;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgedReportFilter other = (AgedReportFilter) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.supplierId, other.supplierId) &&
            Utils.enhancedDeepEquals(this.reportAsOfDate, other.reportAsOfDate) &&
            Utils.enhancedDeepEquals(this.periodCount, other.periodCount) &&
            Utils.enhancedDeepEquals(this.periodLength, other.periodLength);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, supplierId, reportAsOfDate,
            periodCount, periodLength);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgedReportFilter.class,
                "customerId", customerId,
                "supplierId", supplierId,
                "reportAsOfDate", reportAsOfDate,
                "periodCount", periodCount,
                "periodLength", periodLength);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private String supplierId;

        private String reportAsOfDate;

        private Long periodCount;

        private Long periodLength;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter by customer id
         */
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * Filter by supplier id
         */
        public Builder supplierId(@Nullable String supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        /**
         * The cutoff date for considering transactions
         */
        public Builder reportAsOfDate(@Nullable String reportAsOfDate) {
            this.reportAsOfDate = reportAsOfDate;
            return this;
        }

        /**
         * Number of periods to split the aged creditors report into
         */
        public Builder periodCount(@Nullable Long periodCount) {
            this.periodCount = periodCount;
            return this;
        }

        /**
         * Length of each period in days
         */
        public Builder periodLength(@Nullable Long periodLength) {
            this.periodLength = periodLength;
            return this;
        }

        public AgedReportFilter build() {
            return new AgedReportFilter(
                customerId, supplierId, reportAsOfDate,
                periodCount, periodLength);
        }

    }
}
