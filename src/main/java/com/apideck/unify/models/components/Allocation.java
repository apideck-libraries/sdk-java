/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Allocation {
    /**
     * Unique identifier of entity this payment should be attributed to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Type of entity this payment should be attributed to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AllocationType> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Double> amount;

    /**
     * Unique identifier of the allocation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocation_id")
    private Optional<String> allocationId;

    @JsonCreator
    public Allocation(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<? extends AllocationType> type,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("amount") JsonNullable<Double> amount,
            @JsonProperty("allocation_id") Optional<String> allocationId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(allocationId, "allocationId");
        this.id = id;
        this.type = type;
        this.code = code;
        this.amount = amount;
        this.allocationId = allocationId;
    }
    
    public Allocation() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Unique identifier of entity this payment should be attributed to.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Type of entity this payment should be attributed to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AllocationType> type() {
        return (Optional<AllocationType>) type;
    }

    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    @JsonIgnore
    public JsonNullable<Double> amount() {
        return amount;
    }

    /**
     * Unique identifier of the allocation
     */
    @JsonIgnore
    public Optional<String> allocationId() {
        return allocationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier of entity this payment should be attributed to.
     */
    public Allocation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * Unique identifier of entity this payment should be attributed to.
     */
    public Allocation withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Type of entity this payment should be attributed to.
     */
    public Allocation withType(AllocationType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    /**
     * Type of entity this payment should be attributed to.
     */
    public Allocation withType(Optional<? extends AllocationType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Allocation withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }


    public Allocation withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    public Allocation withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    public Allocation withAmount(JsonNullable<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Unique identifier of the allocation
     */
    public Allocation withAllocationId(String allocationId) {
        Utils.checkNotNull(allocationId, "allocationId");
        this.allocationId = Optional.ofNullable(allocationId);
        return this;
    }


    /**
     * Unique identifier of the allocation
     */
    public Allocation withAllocationId(Optional<String> allocationId) {
        Utils.checkNotNull(allocationId, "allocationId");
        this.allocationId = allocationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Allocation other = (Allocation) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.allocationId, other.allocationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, code,
            amount, allocationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Allocation.class,
                "id", id,
                "type", type,
                "code", code,
                "amount", amount,
                "allocationId", allocationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<? extends AllocationType> type = Optional.empty();

        private Optional<String> code = Optional.empty();

        private JsonNullable<Double> amount = JsonNullable.undefined();

        private Optional<String> allocationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier of entity this payment should be attributed to.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of entity this payment should be attributed to.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Type of entity this payment should be attributed to.
         */
        public Builder type(AllocationType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of entity this payment should be attributed to.
         */
        public Builder type(Optional<? extends AllocationType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
         */
        public Builder amount(JsonNullable<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Unique identifier of the allocation
         */
        public Builder allocationId(String allocationId) {
            Utils.checkNotNull(allocationId, "allocationId");
            this.allocationId = Optional.ofNullable(allocationId);
            return this;
        }

        /**
         * Unique identifier of the allocation
         */
        public Builder allocationId(Optional<String> allocationId) {
            Utils.checkNotNull(allocationId, "allocationId");
            this.allocationId = allocationId;
            return this;
        }

        public Allocation build() {

            return new Allocation(
                id, type, code,
                amount, allocationId);
        }

    }
}
