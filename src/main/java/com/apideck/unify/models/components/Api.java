/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Api {
    /**
     * ID of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private ApiType type;

    /**
     * Name of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Description of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private ApiStatus status;

    /**
     * Link to the latest OpenAPI specification of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec_url")
    private String specUrl;

    /**
     * Link to the API reference of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_reference_url")
    private String apiReferenceUrl;

    /**
     * ID of the Postman collection of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postman_collection_id")
    private JsonNullable<String> postmanCollectionId;

    /**
     * List of categories the API belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private List<String> categories;

    /**
     * List of resources supported in this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<Resources> resources;

    /**
     * List of event types this API supports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private List<String> events;

    @JsonCreator
    public Api(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("type") @Nullable ApiType type,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("status") @Nullable ApiStatus status,
            @JsonProperty("spec_url") @Nullable String specUrl,
            @JsonProperty("api_reference_url") @Nullable String apiReferenceUrl,
            @JsonProperty("postman_collection_id") @Nullable JsonNullable<String> postmanCollectionId,
            @JsonProperty("categories") @Nullable List<String> categories,
            @JsonProperty("resources") @Nullable List<Resources> resources,
            @JsonProperty("events") @Nullable List<String> events) {
        this.id = id;
        this.type = type;
        this.name = name;
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.specUrl = specUrl;
        this.apiReferenceUrl = apiReferenceUrl;
        this.postmanCollectionId = Optional.ofNullable(postmanCollectionId)
            .orElse(JsonNullable.undefined());
        this.categories = categories;
        this.resources = resources;
        this.events = events;
    }
    
    public Api() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * ID of the API.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
     */
    public Optional<ApiType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Name of the API.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Description of the API.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    public Optional<ApiStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Link to the latest OpenAPI specification of the API.
     */
    public Optional<String> specUrl() {
        return Optional.ofNullable(this.specUrl);
    }

    /**
     * Link to the API reference of the API.
     */
    public Optional<String> apiReferenceUrl() {
        return Optional.ofNullable(this.apiReferenceUrl);
    }

    /**
     * ID of the Postman collection of the API.
     */
    public JsonNullable<String> postmanCollectionId() {
        return this.postmanCollectionId;
    }

    /**
     * List of categories the API belongs to.
     */
    public Optional<List<String>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * List of resources supported in this API.
     */
    public Optional<List<Resources>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * List of event types this API supports.
     */
    public Optional<List<String>> events() {
        return Optional.ofNullable(this.events);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the API.
     */
    public Api withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
     */
    public Api withType(@Nullable ApiType type) {
        this.type = type;
        return this;
    }


    /**
     * Name of the API.
     */
    public Api withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Description of the API.
     */
    public Api withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    public Api withStatus(@Nullable ApiStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Link to the latest OpenAPI specification of the API.
     */
    public Api withSpecUrl(@Nullable String specUrl) {
        this.specUrl = specUrl;
        return this;
    }


    /**
     * Link to the API reference of the API.
     */
    public Api withApiReferenceUrl(@Nullable String apiReferenceUrl) {
        this.apiReferenceUrl = apiReferenceUrl;
        return this;
    }


    /**
     * ID of the Postman collection of the API.
     */
    public Api withPostmanCollectionId(@Nullable String postmanCollectionId) {
        this.postmanCollectionId = JsonNullable.of(postmanCollectionId);
        return this;
    }


    /**
     * List of categories the API belongs to.
     */
    public Api withCategories(@Nullable List<String> categories) {
        this.categories = categories;
        return this;
    }


    /**
     * List of resources supported in this API.
     */
    public Api withResources(@Nullable List<Resources> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * List of event types this API supports.
     */
    public Api withEvents(@Nullable List<String> events) {
        this.events = events;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Api other = (Api) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.specUrl, other.specUrl) &&
            Utils.enhancedDeepEquals(this.apiReferenceUrl, other.apiReferenceUrl) &&
            Utils.enhancedDeepEquals(this.postmanCollectionId, other.postmanCollectionId) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, name,
            description, status, specUrl,
            apiReferenceUrl, postmanCollectionId, categories,
            resources, events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Api.class,
                "id", id,
                "type", type,
                "name", name,
                "description", description,
                "status", status,
                "specUrl", specUrl,
                "apiReferenceUrl", apiReferenceUrl,
                "postmanCollectionId", postmanCollectionId,
                "categories", categories,
                "resources", resources,
                "events", events);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private ApiType type;

        private String name;

        private JsonNullable<String> description;

        private ApiStatus status;

        private String specUrl;

        private String apiReferenceUrl;

        private JsonNullable<String> postmanCollectionId;

        private List<String> categories;

        private List<Resources> resources;

        private List<String> events;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the API.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
         */
        public Builder type(@Nullable ApiType type) {
            this.type = type;
            return this;
        }

        /**
         * Name of the API.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Description of the API.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Status of the API. APIs with status live or beta are callable.
         */
        public Builder status(@Nullable ApiStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Link to the latest OpenAPI specification of the API.
         */
        public Builder specUrl(@Nullable String specUrl) {
            this.specUrl = specUrl;
            return this;
        }

        /**
         * Link to the API reference of the API.
         */
        public Builder apiReferenceUrl(@Nullable String apiReferenceUrl) {
            this.apiReferenceUrl = apiReferenceUrl;
            return this;
        }

        /**
         * ID of the Postman collection of the API.
         */
        public Builder postmanCollectionId(@Nullable String postmanCollectionId) {
            this.postmanCollectionId = JsonNullable.of(postmanCollectionId);
            return this;
        }

        /**
         * List of categories the API belongs to.
         */
        public Builder categories(@Nullable List<String> categories) {
            this.categories = categories;
            return this;
        }

        /**
         * List of resources supported in this API.
         */
        public Builder resources(@Nullable List<Resources> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * List of event types this API supports.
         */
        public Builder events(@Nullable List<String> events) {
            this.events = events;
            return this;
        }

        public Api build() {
            return new Api(
                id, type, name,
                description, status, specUrl,
                apiReferenceUrl, postmanCollectionId, categories,
                resources, events);
        }

    }
}
