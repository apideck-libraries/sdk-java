/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ApisFilter {
    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private ApiStatus status;

    @JsonCreator
    public ApisFilter(
            @Nullable ApiStatus status) {
        this.status = status;
    }
    
    public ApisFilter() {
        this(null);
    }

    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    public Optional<ApiStatus> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Status of the API. APIs with status live or beta are callable.
     */
    public ApisFilter withStatus(@Nullable ApiStatus status) {
        this.status = status;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApisFilter other = (ApisFilter) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApisFilter.class,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ApiStatus status;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Status of the API. APIs with status live or beta are callable.
         */
        public Builder status(@Nullable ApiStatus status) {
            this.status = status;
            return this;
        }

        public ApisFilter build() {
            return new ApisFilter(
                status);
        }

    }
}
