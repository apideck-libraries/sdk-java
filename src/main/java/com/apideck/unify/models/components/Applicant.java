/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Applicant {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private String coverLetter;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_url")
    private JsonNullable<String> jobUrl;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private String headline;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Websites> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLinks> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private String stageId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private String recruiterId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private String coordinatorId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<List<String>> applicationIds;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    private JsonNullable<List<String>> applications;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<List<String>> followers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<List<String>> sources;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private String sourceId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Boolean confidential;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Boolean anonymized;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<Boolean> archived;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_interaction_at")
    private JsonNullable<OffsetDateTime> lastInteractionAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourced_by")
    private JsonNullable<String> sourcedBy;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cv_url")
    private String cvUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_at")
    private JsonNullable<OffsetDateTime> rejectedAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The user who deleted the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_by")
    private JsonNullable<String> deletedBy;

    /**
     * The time at which the object was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_at")
    private JsonNullable<OffsetDateTime> deletedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Applicant(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("initials") @Nullable JsonNullable<String> initials,
            @JsonProperty("birthday") @Nullable JsonNullable<LocalDate> birthday,
            @JsonProperty("cover_letter") @Nullable String coverLetter,
            @JsonProperty("job_url") @Nullable JsonNullable<String> jobUrl,
            @JsonProperty("photo_url") @Nullable JsonNullable<String> photoUrl,
            @JsonProperty("headline") @Nullable String headline,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("websites") @Nullable List<Websites> websites,
            @JsonProperty("social_links") @Nullable List<SocialLinks> socialLinks,
            @JsonProperty("stage_id") @Nullable String stageId,
            @JsonProperty("recruiter_id") @Nullable String recruiterId,
            @JsonProperty("coordinator_id") @Nullable String coordinatorId,
            @JsonProperty("application_ids") @Nullable JsonNullable<List<String>> applicationIds,
            @JsonProperty("applications") @Nullable JsonNullable<List<String>> applications,
            @JsonProperty("followers") @Nullable JsonNullable<List<String>> followers,
            @JsonProperty("sources") @Nullable JsonNullable<List<String>> sources,
            @JsonProperty("source_id") @Nullable String sourceId,
            @JsonProperty("confidential") @Nullable Boolean confidential,
            @JsonProperty("anonymized") @Nullable Boolean anonymized,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("archived") @Nullable JsonNullable<Boolean> archived,
            @JsonProperty("last_interaction_at") @Nullable JsonNullable<OffsetDateTime> lastInteractionAt,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("sourced_by") @Nullable JsonNullable<String> sourcedBy,
            @JsonProperty("cv_url") @Nullable String cvUrl,
            @JsonProperty("record_url") @Nullable JsonNullable<String> recordUrl,
            @JsonProperty("rejected_at") @Nullable JsonNullable<OffsetDateTime> rejectedAt,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("deleted") @Nullable JsonNullable<Boolean> deleted,
            @JsonProperty("deleted_by") @Nullable JsonNullable<String> deletedBy,
            @JsonProperty("deleted_at") @Nullable JsonNullable<OffsetDateTime> deletedAt,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.name = name;
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.initials = Optional.ofNullable(initials)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.coverLetter = coverLetter;
        this.jobUrl = Optional.ofNullable(jobUrl)
            .orElse(JsonNullable.undefined());
        this.photoUrl = Optional.ofNullable(photoUrl)
            .orElse(JsonNullable.undefined());
        this.headline = headline;
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.emails = emails;
        this.customFields = customFields;
        this.phoneNumbers = phoneNumbers;
        this.addresses = addresses;
        this.websites = websites;
        this.socialLinks = socialLinks;
        this.stageId = stageId;
        this.recruiterId = recruiterId;
        this.coordinatorId = coordinatorId;
        this.applicationIds = Optional.ofNullable(applicationIds)
            .orElse(JsonNullable.undefined());
        this.applications = Optional.ofNullable(applications)
            .orElse(JsonNullable.undefined());
        this.followers = Optional.ofNullable(followers)
            .orElse(JsonNullable.undefined());
        this.sources = Optional.ofNullable(sources)
            .orElse(JsonNullable.undefined());
        this.sourceId = sourceId;
        this.confidential = confidential;
        this.anonymized = anonymized;
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.archived = Optional.ofNullable(archived)
            .orElse(JsonNullable.undefined());
        this.lastInteractionAt = Optional.ofNullable(lastInteractionAt)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.sourcedBy = Optional.ofNullable(sourcedBy)
            .orElse(JsonNullable.undefined());
        this.cvUrl = cvUrl;
        this.recordUrl = Optional.ofNullable(recordUrl)
            .orElse(JsonNullable.undefined());
        this.rejectedAt = Optional.ofNullable(rejectedAt)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.deleted = Optional.ofNullable(deleted)
            .orElse(JsonNullable.undefined());
        this.deletedBy = Optional.ofNullable(deletedBy)
            .orElse(JsonNullable.undefined());
        this.deletedAt = Optional.ofNullable(deletedAt)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Applicant() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of an applicant.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public JsonNullable<String> initials() {
        return this.initials;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<LocalDate> birthday() {
        return this.birthday;
    }

    public Optional<String> coverLetter() {
        return Optional.ofNullable(this.coverLetter);
    }

    public JsonNullable<String> jobUrl() {
        return this.jobUrl;
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<String> photoUrl() {
        return this.photoUrl;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Optional<String> headline() {
        return Optional.ofNullable(this.headline);
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<Websites>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<SocialLinks>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<String> stageId() {
        return Optional.ofNullable(this.stageId);
    }

    public Optional<String> recruiterId() {
        return Optional.ofNullable(this.recruiterId);
    }

    public Optional<String> coordinatorId() {
        return Optional.ofNullable(this.coordinatorId);
    }

    public JsonNullable<List<String>> applicationIds() {
        return this.applicationIds;
    }

    public JsonNullable<List<String>> applications() {
        return this.applications;
    }

    public JsonNullable<List<String>> followers() {
        return this.followers;
    }

    public JsonNullable<List<String>> sources() {
        return this.sources;
    }

    public Optional<String> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    public Optional<Boolean> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    public Optional<Boolean> anonymized() {
        return Optional.ofNullable(this.anonymized);
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    public JsonNullable<Boolean> archived() {
        return this.archived;
    }

    public JsonNullable<OffsetDateTime> lastInteractionAt() {
        return this.lastInteractionAt;
    }

    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    public JsonNullable<String> sourcedBy() {
        return this.sourcedBy;
    }

    public Optional<String> cvUrl() {
        return Optional.ofNullable(this.cvUrl);
    }

    public JsonNullable<String> recordUrl() {
        return this.recordUrl;
    }

    public JsonNullable<OffsetDateTime> rejectedAt() {
        return this.rejectedAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<Boolean> deleted() {
        return this.deleted;
    }

    /**
     * The user who deleted the object.
     */
    public JsonNullable<String> deletedBy() {
        return this.deletedBy;
    }

    /**
     * The time at which the object was deleted.
     */
    public JsonNullable<OffsetDateTime> deletedAt() {
        return this.deletedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Applicant withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of an applicant.
     */
    public Applicant withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * The first name of the person.
     */
    public Applicant withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public Applicant withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Middle name of the person.
     */
    public Applicant withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Applicant withInitials(@Nullable String initials) {
        this.initials = JsonNullable.of(initials);
        return this;
    }


    /**
     * The date of birth of the person.
     */
    public Applicant withBirthday(@Nullable LocalDate birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    public Applicant withCoverLetter(@Nullable String coverLetter) {
        this.coverLetter = coverLetter;
        return this;
    }


    public Applicant withJobUrl(@Nullable String jobUrl) {
        this.jobUrl = JsonNullable.of(jobUrl);
        return this;
    }


    /**
     * The URL of the photo of a person.
     */
    public Applicant withPhotoUrl(@Nullable String photoUrl) {
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }


    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Applicant withHeadline(@Nullable String headline) {
        this.headline = headline;
        return this;
    }


    /**
     * The job title of the person.
     */
    public Applicant withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    public Applicant withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public Applicant withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    public Applicant withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public Applicant withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Applicant withWebsites(@Nullable List<Websites> websites) {
        this.websites = websites;
        return this;
    }


    public Applicant withSocialLinks(@Nullable List<SocialLinks> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public Applicant withStageId(@Nullable String stageId) {
        this.stageId = stageId;
        return this;
    }


    public Applicant withRecruiterId(@Nullable String recruiterId) {
        this.recruiterId = recruiterId;
        return this;
    }


    public Applicant withCoordinatorId(@Nullable String coordinatorId) {
        this.coordinatorId = coordinatorId;
        return this;
    }


    public Applicant withApplicationIds(@Nullable List<String> applicationIds) {
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }


    public Applicant withApplications(@Nullable List<String> applications) {
        this.applications = JsonNullable.of(applications);
        return this;
    }


    public Applicant withFollowers(@Nullable List<String> followers) {
        this.followers = JsonNullable.of(followers);
        return this;
    }


    public Applicant withSources(@Nullable List<String> sources) {
        this.sources = JsonNullable.of(sources);
        return this;
    }


    public Applicant withSourceId(@Nullable String sourceId) {
        this.sourceId = sourceId;
        return this;
    }


    public Applicant withConfidential(@Nullable Boolean confidential) {
        this.confidential = confidential;
        return this;
    }


    public Applicant withAnonymized(@Nullable Boolean anonymized) {
        this.anonymized = anonymized;
        return this;
    }


    public Applicant withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    public Applicant withArchived(@Nullable Boolean archived) {
        this.archived = JsonNullable.of(archived);
        return this;
    }


    public Applicant withLastInteractionAt(@Nullable OffsetDateTime lastInteractionAt) {
        this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
        return this;
    }


    public Applicant withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    public Applicant withSourcedBy(@Nullable String sourcedBy) {
        this.sourcedBy = JsonNullable.of(sourcedBy);
        return this;
    }


    public Applicant withCvUrl(@Nullable String cvUrl) {
        this.cvUrl = cvUrl;
        return this;
    }


    public Applicant withRecordUrl(@Nullable String recordUrl) {
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }


    public Applicant withRejectedAt(@Nullable OffsetDateTime rejectedAt) {
        this.rejectedAt = JsonNullable.of(rejectedAt);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Applicant withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * Flag to indicate if the object is deleted.
     */
    public Applicant withDeleted(@Nullable Boolean deleted) {
        this.deleted = JsonNullable.of(deleted);
        return this;
    }


    /**
     * The user who deleted the object.
     */
    public Applicant withDeletedBy(@Nullable String deletedBy) {
        this.deletedBy = JsonNullable.of(deletedBy);
        return this;
    }


    /**
     * The time at which the object was deleted.
     */
    public Applicant withDeletedAt(@Nullable OffsetDateTime deletedAt) {
        this.deletedAt = JsonNullable.of(deletedAt);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Applicant withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Applicant withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Applicant withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Applicant withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Applicant withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Applicant other = (Applicant) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.coverLetter, other.coverLetter) &&
            Utils.enhancedDeepEquals(this.jobUrl, other.jobUrl) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.headline, other.headline) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.stageId, other.stageId) &&
            Utils.enhancedDeepEquals(this.recruiterId, other.recruiterId) &&
            Utils.enhancedDeepEquals(this.coordinatorId, other.coordinatorId) &&
            Utils.enhancedDeepEquals(this.applicationIds, other.applicationIds) &&
            Utils.enhancedDeepEquals(this.applications, other.applications) &&
            Utils.enhancedDeepEquals(this.followers, other.followers) &&
            Utils.enhancedDeepEquals(this.sources, other.sources) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.confidential, other.confidential) &&
            Utils.enhancedDeepEquals(this.anonymized, other.anonymized) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.lastInteractionAt, other.lastInteractionAt) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.sourcedBy, other.sourcedBy) &&
            Utils.enhancedDeepEquals(this.cvUrl, other.cvUrl) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.rejectedAt, other.rejectedAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.deletedBy, other.deletedBy) &&
            Utils.enhancedDeepEquals(this.deletedAt, other.deletedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, firstName,
            lastName, middleName, initials,
            birthday, coverLetter, jobUrl,
            photoUrl, headline, title,
            emails, customFields, phoneNumbers,
            addresses, websites, socialLinks,
            stageId, recruiterId, coordinatorId,
            applicationIds, applications, followers,
            sources, sourceId, confidential,
            anonymized, tags, archived,
            lastInteractionAt, ownerId, sourcedBy,
            cvUrl, recordUrl, rejectedAt,
            customMappings, deleted, deletedBy,
            deletedAt, updatedBy, createdBy,
            updatedAt, createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Applicant.class,
                "id", id,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "initials", initials,
                "birthday", birthday,
                "coverLetter", coverLetter,
                "jobUrl", jobUrl,
                "photoUrl", photoUrl,
                "headline", headline,
                "title", title,
                "emails", emails,
                "customFields", customFields,
                "phoneNumbers", phoneNumbers,
                "addresses", addresses,
                "websites", websites,
                "socialLinks", socialLinks,
                "stageId", stageId,
                "recruiterId", recruiterId,
                "coordinatorId", coordinatorId,
                "applicationIds", applicationIds,
                "applications", applications,
                "followers", followers,
                "sources", sources,
                "sourceId", sourceId,
                "confidential", confidential,
                "anonymized", anonymized,
                "tags", tags,
                "archived", archived,
                "lastInteractionAt", lastInteractionAt,
                "ownerId", ownerId,
                "sourcedBy", sourcedBy,
                "cvUrl", cvUrl,
                "recordUrl", recordUrl,
                "rejectedAt", rejectedAt,
                "customMappings", customMappings,
                "deleted", deleted,
                "deletedBy", deletedBy,
                "deletedAt", deletedAt,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> initials;

        private JsonNullable<LocalDate> birthday;

        private String coverLetter;

        private JsonNullable<String> jobUrl;

        private JsonNullable<String> photoUrl;

        private String headline;

        private JsonNullable<String> title;

        private List<Email> emails;

        private List<CustomField> customFields;

        private List<PhoneNumber> phoneNumbers;

        private List<Address> addresses;

        private List<Websites> websites;

        private List<SocialLinks> socialLinks;

        private String stageId;

        private String recruiterId;

        private String coordinatorId;

        private JsonNullable<List<String>> applicationIds;

        private JsonNullable<List<String>> applications;

        private JsonNullable<List<String>> followers;

        private JsonNullable<List<String>> sources;

        private String sourceId;

        private Boolean confidential;

        private Boolean anonymized;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Boolean> archived;

        private JsonNullable<OffsetDateTime> lastInteractionAt;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> sourcedBy;

        private String cvUrl;

        private JsonNullable<String> recordUrl;

        private JsonNullable<OffsetDateTime> rejectedAt;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<Boolean> deleted;

        private JsonNullable<String> deletedBy;

        private JsonNullable<OffsetDateTime> deletedAt;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(@Nullable String initials) {
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(@Nullable LocalDate birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        public Builder coverLetter(@Nullable String coverLetter) {
            this.coverLetter = coverLetter;
            return this;
        }

        public Builder jobUrl(@Nullable String jobUrl) {
            this.jobUrl = JsonNullable.of(jobUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(@Nullable String photoUrl) {
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(@Nullable String headline) {
            this.headline = headline;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder websites(@Nullable List<Websites> websites) {
            this.websites = websites;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLinks> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder stageId(@Nullable String stageId) {
            this.stageId = stageId;
            return this;
        }

        public Builder recruiterId(@Nullable String recruiterId) {
            this.recruiterId = recruiterId;
            return this;
        }

        public Builder coordinatorId(@Nullable String coordinatorId) {
            this.coordinatorId = coordinatorId;
            return this;
        }

        public Builder applicationIds(@Nullable List<String> applicationIds) {
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applications(@Nullable List<String> applications) {
            this.applications = JsonNullable.of(applications);
            return this;
        }

        public Builder followers(@Nullable List<String> followers) {
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder sources(@Nullable List<String> sources) {
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder sourceId(@Nullable String sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        public Builder confidential(@Nullable Boolean confidential) {
            this.confidential = confidential;
            return this;
        }

        public Builder anonymized(@Nullable Boolean anonymized) {
            this.anonymized = anonymized;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder archived(@Nullable Boolean archived) {
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder lastInteractionAt(@Nullable OffsetDateTime lastInteractionAt) {
            this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder sourcedBy(@Nullable String sourcedBy) {
            this.sourcedBy = JsonNullable.of(sourcedBy);
            return this;
        }

        public Builder cvUrl(@Nullable String cvUrl) {
            this.cvUrl = cvUrl;
            return this;
        }

        public Builder recordUrl(@Nullable String recordUrl) {
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder rejectedAt(@Nullable OffsetDateTime rejectedAt) {
            this.rejectedAt = JsonNullable.of(rejectedAt);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * The user who deleted the object.
         */
        public Builder deletedBy(@Nullable String deletedBy) {
            this.deletedBy = JsonNullable.of(deletedBy);
            return this;
        }

        /**
         * The time at which the object was deleted.
         */
        public Builder deletedAt(@Nullable OffsetDateTime deletedAt) {
            this.deletedAt = JsonNullable.of(deletedAt);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Applicant build() {
            return new Applicant(
                id, name, firstName,
                lastName, middleName, initials,
                birthday, coverLetter, jobUrl,
                photoUrl, headline, title,
                emails, customFields, phoneNumbers,
                addresses, websites, socialLinks,
                stageId, recruiterId, coordinatorId,
                applicationIds, applications, followers,
                sources, sourceId, confidential,
                anonymized, tags, archived,
                lastInteractionAt, ownerId, sourcedBy,
                cvUrl, recordUrl, rejectedAt,
                customMappings, deleted, deletedBy,
                deletedAt, updatedBy, createdBy,
                updatedAt, createdAt, passThrough);
        }

    }
}
