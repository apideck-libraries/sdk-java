/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Applicant {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * The gender represents the gender identity of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends ApplicantGender> gender;

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_security_number")
    private JsonNullable<String> socialSecurityNumber;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private Optional<String> coverLetter;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_url")
    private JsonNullable<String> jobUrl;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private Optional<String> headline;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Websites>> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLinks>> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private Optional<String> stageId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private Optional<String> recruiterId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private Optional<String> coordinatorId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<? extends List<String>> applicationIds;

    /**
     * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    @Deprecated
    private JsonNullable<? extends List<String>> applications;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends List<String>> followers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<? extends List<String>> sources;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private Optional<String> sourceId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<Boolean> confidential;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Optional<Boolean> anonymized;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<Boolean> archived;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_interaction_at")
    private JsonNullable<OffsetDateTime> lastInteractionAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourced_by")
    private JsonNullable<String> sourcedBy;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cv_url")
    private Optional<String> cvUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_at")
    private JsonNullable<OffsetDateTime> rejectedAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The user who deleted the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_by")
    private JsonNullable<String> deletedBy;

    /**
     * The time at which the object was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_at")
    private JsonNullable<OffsetDateTime> deletedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Applicant(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("salutation") JsonNullable<String> salutation,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("initials") JsonNullable<String> initials,
            @JsonProperty("birthday") JsonNullable<LocalDate> birthday,
            @JsonProperty("gender") JsonNullable<? extends ApplicantGender> gender,
            @JsonProperty("social_security_number") JsonNullable<String> socialSecurityNumber,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("cover_letter") Optional<String> coverLetter,
            @JsonProperty("job_url") JsonNullable<String> jobUrl,
            @JsonProperty("photo_url") JsonNullable<String> photoUrl,
            @JsonProperty("headline") Optional<String> headline,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("websites") Optional<? extends List<Websites>> websites,
            @JsonProperty("social_links") Optional<? extends List<SocialLinks>> socialLinks,
            @JsonProperty("stage_id") Optional<String> stageId,
            @JsonProperty("recruiter_id") Optional<String> recruiterId,
            @JsonProperty("coordinator_id") Optional<String> coordinatorId,
            @JsonProperty("application_ids") JsonNullable<? extends List<String>> applicationIds,
            @JsonProperty("applications") JsonNullable<? extends List<String>> applications,
            @JsonProperty("followers") JsonNullable<? extends List<String>> followers,
            @JsonProperty("sources") JsonNullable<? extends List<String>> sources,
            @JsonProperty("source_id") Optional<String> sourceId,
            @JsonProperty("confidential") Optional<Boolean> confidential,
            @JsonProperty("anonymized") Optional<Boolean> anonymized,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("archived") JsonNullable<Boolean> archived,
            @JsonProperty("last_interaction_at") JsonNullable<OffsetDateTime> lastInteractionAt,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("sourced_by") JsonNullable<String> sourcedBy,
            @JsonProperty("cv_url") Optional<String> cvUrl,
            @JsonProperty("record_url") JsonNullable<String> recordUrl,
            @JsonProperty("rejected_at") JsonNullable<OffsetDateTime> rejectedAt,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("deleted_by") JsonNullable<String> deletedBy,
            @JsonProperty("deleted_at") JsonNullable<OffsetDateTime> deletedAt,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(salutation, "salutation");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(initials, "initials");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(coverLetter, "coverLetter");
        Utils.checkNotNull(jobUrl, "jobUrl");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(headline, "headline");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(stageId, "stageId");
        Utils.checkNotNull(recruiterId, "recruiterId");
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        Utils.checkNotNull(applicationIds, "applicationIds");
        Utils.checkNotNull(applications, "applications");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(sources, "sources");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(anonymized, "anonymized");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        Utils.checkNotNull(cvUrl, "cvUrl");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(deletedBy, "deletedBy");
        Utils.checkNotNull(deletedAt, "deletedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.name = name;
        this.salutation = salutation;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleName = middleName;
        this.initials = initials;
        this.birthday = birthday;
        this.gender = gender;
        this.socialSecurityNumber = socialSecurityNumber;
        this.type = type;
        this.coverLetter = coverLetter;
        this.jobUrl = jobUrl;
        this.photoUrl = photoUrl;
        this.headline = headline;
        this.title = title;
        this.emails = emails;
        this.customFields = customFields;
        this.phoneNumbers = phoneNumbers;
        this.addresses = addresses;
        this.websites = websites;
        this.socialLinks = socialLinks;
        this.stageId = stageId;
        this.recruiterId = recruiterId;
        this.coordinatorId = coordinatorId;
        this.applicationIds = applicationIds;
        this.applications = applications;
        this.followers = followers;
        this.sources = sources;
        this.sourceId = sourceId;
        this.confidential = confidential;
        this.anonymized = anonymized;
        this.tags = tags;
        this.archived = archived;
        this.lastInteractionAt = lastInteractionAt;
        this.ownerId = ownerId;
        this.sourcedBy = sourcedBy;
        this.cvUrl = cvUrl;
        this.recordUrl = recordUrl;
        this.rejectedAt = rejectedAt;
        this.customMappings = customMappings;
        this.deleted = deleted;
        this.deletedBy = deletedBy;
        this.deletedAt = deletedAt;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public Applicant() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of an applicant.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonIgnore
    public JsonNullable<String> salutation() {
        return salutation;
    }

    /**
     * The first name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Middle name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonIgnore
    public JsonNullable<String> initials() {
        return initials;
    }

    /**
     * The date of birth of the person.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> birthday() {
        return birthday;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ApplicantGender> gender() {
        return (JsonNullable<ApplicantGender>) gender;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    @JsonIgnore
    public JsonNullable<String> socialSecurityNumber() {
        return socialSecurityNumber;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> coverLetter() {
        return coverLetter;
    }

    @JsonIgnore
    public JsonNullable<String> jobUrl() {
        return jobUrl;
    }

    /**
     * The URL of the photo of a person.
     */
    @JsonIgnore
    public JsonNullable<String> photoUrl() {
        return photoUrl;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonIgnore
    public Optional<String> headline() {
        return headline;
    }

    /**
     * The job title of the person.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Websites>> websites() {
        return (Optional<List<Websites>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLinks>> socialLinks() {
        return (Optional<List<SocialLinks>>) socialLinks;
    }

    @JsonIgnore
    public Optional<String> stageId() {
        return stageId;
    }

    @JsonIgnore
    public Optional<String> recruiterId() {
        return recruiterId;
    }

    @JsonIgnore
    public Optional<String> coordinatorId() {
        return coordinatorId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> applicationIds() {
        return (JsonNullable<List<String>>) applicationIds;
    }

    /**
     * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> applications() {
        return (JsonNullable<List<String>>) applications;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> followers() {
        return (JsonNullable<List<String>>) followers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> sources() {
        return (JsonNullable<List<String>>) sources;
    }

    @JsonIgnore
    public Optional<String> sourceId() {
        return sourceId;
    }

    @JsonIgnore
    public Optional<Boolean> confidential() {
        return confidential;
    }

    @JsonIgnore
    public Optional<Boolean> anonymized() {
        return anonymized;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    @JsonIgnore
    public JsonNullable<Boolean> archived() {
        return archived;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastInteractionAt() {
        return lastInteractionAt;
    }

    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    @JsonIgnore
    public JsonNullable<String> sourcedBy() {
        return sourcedBy;
    }

    @JsonIgnore
    public Optional<String> cvUrl() {
        return cvUrl;
    }

    @JsonIgnore
    public JsonNullable<String> recordUrl() {
        return recordUrl;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> rejectedAt() {
        return rejectedAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * The user who deleted the object.
     */
    @JsonIgnore
    public JsonNullable<String> deletedBy() {
        return deletedBy;
    }

    /**
     * The time at which the object was deleted.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> deletedAt() {
        return deletedAt;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Applicant withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * A unique identifier for an object.
     */
    public Applicant withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of an applicant.
     */
    public Applicant withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of an applicant.
     */
    public Applicant withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public Applicant withSalutation(String salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = JsonNullable.of(salutation);
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public Applicant withSalutation(JsonNullable<String> salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = salutation;
        return this;
    }

    /**
     * The first name of the person.
     */
    public Applicant withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public Applicant withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the person.
     */
    public Applicant withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public Applicant withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Applicant withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Applicant withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Applicant withInitials(String initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = JsonNullable.of(initials);
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Applicant withInitials(JsonNullable<String> initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = initials;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public Applicant withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public Applicant withBirthday(JsonNullable<LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public Applicant withGender(ApplicantGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public Applicant withGender(JsonNullable<? extends ApplicantGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public Applicant withSocialSecurityNumber(String socialSecurityNumber) {
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
        return this;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public Applicant withSocialSecurityNumber(JsonNullable<String> socialSecurityNumber) {
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        this.socialSecurityNumber = socialSecurityNumber;
        return this;
    }

    public Applicant withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public Applicant withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Applicant withCoverLetter(String coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = Optional.ofNullable(coverLetter);
        return this;
    }


    public Applicant withCoverLetter(Optional<String> coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = coverLetter;
        return this;
    }

    public Applicant withJobUrl(String jobUrl) {
        Utils.checkNotNull(jobUrl, "jobUrl");
        this.jobUrl = JsonNullable.of(jobUrl);
        return this;
    }

    public Applicant withJobUrl(JsonNullable<String> jobUrl) {
        Utils.checkNotNull(jobUrl, "jobUrl");
        this.jobUrl = jobUrl;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Applicant withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Applicant withPhotoUrl(JsonNullable<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Applicant withHeadline(String headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = Optional.ofNullable(headline);
        return this;
    }


    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Applicant withHeadline(Optional<String> headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = headline;
        return this;
    }

    /**
     * The job title of the person.
     */
    public Applicant withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public Applicant withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Applicant withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }


    public Applicant withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public Applicant withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public Applicant withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public Applicant withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }


    public Applicant withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public Applicant withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }


    public Applicant withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Applicant withWebsites(List<Websites> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }


    public Applicant withWebsites(Optional<? extends List<Websites>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public Applicant withSocialLinks(List<SocialLinks> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }


    public Applicant withSocialLinks(Optional<? extends List<SocialLinks>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public Applicant withStageId(String stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = Optional.ofNullable(stageId);
        return this;
    }


    public Applicant withStageId(Optional<String> stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = stageId;
        return this;
    }

    public Applicant withRecruiterId(String recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = Optional.ofNullable(recruiterId);
        return this;
    }


    public Applicant withRecruiterId(Optional<String> recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = recruiterId;
        return this;
    }

    public Applicant withCoordinatorId(String coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = Optional.ofNullable(coordinatorId);
        return this;
    }


    public Applicant withCoordinatorId(Optional<String> coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = coordinatorId;
        return this;
    }

    public Applicant withApplicationIds(List<String> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }

    public Applicant withApplicationIds(JsonNullable<? extends List<String>> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = applicationIds;
        return this;
    }

    /**
     * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Applicant withApplications(List<String> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = JsonNullable.of(applications);
        return this;
    }

    /**
     * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Applicant withApplications(JsonNullable<? extends List<String>> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    public Applicant withFollowers(List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public Applicant withFollowers(JsonNullable<? extends List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    public Applicant withSources(List<String> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = JsonNullable.of(sources);
        return this;
    }

    public Applicant withSources(JsonNullable<? extends List<String>> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = sources;
        return this;
    }

    public Applicant withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }


    public Applicant withSourceId(Optional<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public Applicant withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }


    public Applicant withConfidential(Optional<Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    public Applicant withAnonymized(boolean anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = Optional.ofNullable(anonymized);
        return this;
    }


    public Applicant withAnonymized(Optional<Boolean> anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = anonymized;
        return this;
    }

    public Applicant withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Applicant withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public Applicant withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = JsonNullable.of(archived);
        return this;
    }

    public Applicant withArchived(JsonNullable<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    public Applicant withLastInteractionAt(OffsetDateTime lastInteractionAt) {
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
        return this;
    }

    public Applicant withLastInteractionAt(JsonNullable<OffsetDateTime> lastInteractionAt) {
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        this.lastInteractionAt = lastInteractionAt;
        return this;
    }

    public Applicant withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public Applicant withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public Applicant withSourcedBy(String sourcedBy) {
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        this.sourcedBy = JsonNullable.of(sourcedBy);
        return this;
    }

    public Applicant withSourcedBy(JsonNullable<String> sourcedBy) {
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        this.sourcedBy = sourcedBy;
        return this;
    }

    public Applicant withCvUrl(String cvUrl) {
        Utils.checkNotNull(cvUrl, "cvUrl");
        this.cvUrl = Optional.ofNullable(cvUrl);
        return this;
    }


    public Applicant withCvUrl(Optional<String> cvUrl) {
        Utils.checkNotNull(cvUrl, "cvUrl");
        this.cvUrl = cvUrl;
        return this;
    }

    public Applicant withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    public Applicant withRecordUrl(JsonNullable<String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    public Applicant withRejectedAt(OffsetDateTime rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = JsonNullable.of(rejectedAt);
        return this;
    }

    public Applicant withRejectedAt(JsonNullable<OffsetDateTime> rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = rejectedAt;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Applicant withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Applicant withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Applicant withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Applicant withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The user who deleted the object.
     */
    public Applicant withDeletedBy(String deletedBy) {
        Utils.checkNotNull(deletedBy, "deletedBy");
        this.deletedBy = JsonNullable.of(deletedBy);
        return this;
    }

    /**
     * The user who deleted the object.
     */
    public Applicant withDeletedBy(JsonNullable<String> deletedBy) {
        Utils.checkNotNull(deletedBy, "deletedBy");
        this.deletedBy = deletedBy;
        return this;
    }

    /**
     * The time at which the object was deleted.
     */
    public Applicant withDeletedAt(OffsetDateTime deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = JsonNullable.of(deletedAt);
        return this;
    }

    /**
     * The time at which the object was deleted.
     */
    public Applicant withDeletedAt(JsonNullable<OffsetDateTime> deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = deletedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Applicant withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Applicant withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Applicant withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Applicant withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Applicant withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Applicant withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Applicant withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Applicant withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Applicant withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Applicant withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Applicant other = (Applicant) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.salutation, other.salutation) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.socialSecurityNumber, other.socialSecurityNumber) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.coverLetter, other.coverLetter) &&
            Utils.enhancedDeepEquals(this.jobUrl, other.jobUrl) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.headline, other.headline) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.stageId, other.stageId) &&
            Utils.enhancedDeepEquals(this.recruiterId, other.recruiterId) &&
            Utils.enhancedDeepEquals(this.coordinatorId, other.coordinatorId) &&
            Utils.enhancedDeepEquals(this.applicationIds, other.applicationIds) &&
            Utils.enhancedDeepEquals(this.applications, other.applications) &&
            Utils.enhancedDeepEquals(this.followers, other.followers) &&
            Utils.enhancedDeepEquals(this.sources, other.sources) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.confidential, other.confidential) &&
            Utils.enhancedDeepEquals(this.anonymized, other.anonymized) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.lastInteractionAt, other.lastInteractionAt) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.sourcedBy, other.sourcedBy) &&
            Utils.enhancedDeepEquals(this.cvUrl, other.cvUrl) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.rejectedAt, other.rejectedAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.deletedBy, other.deletedBy) &&
            Utils.enhancedDeepEquals(this.deletedAt, other.deletedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, salutation,
            firstName, lastName, middleName,
            initials, birthday, gender,
            socialSecurityNumber, type, coverLetter,
            jobUrl, photoUrl, headline,
            title, emails, customFields,
            phoneNumbers, addresses, websites,
            socialLinks, stageId, recruiterId,
            coordinatorId, applicationIds, applications,
            followers, sources, sourceId,
            confidential, anonymized, tags,
            archived, lastInteractionAt, ownerId,
            sourcedBy, cvUrl, recordUrl,
            rejectedAt, customMappings, deleted,
            deletedBy, deletedAt, updatedBy,
            createdBy, updatedAt, createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Applicant.class,
                "id", id,
                "name", name,
                "salutation", salutation,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "initials", initials,
                "birthday", birthday,
                "gender", gender,
                "socialSecurityNumber", socialSecurityNumber,
                "type", type,
                "coverLetter", coverLetter,
                "jobUrl", jobUrl,
                "photoUrl", photoUrl,
                "headline", headline,
                "title", title,
                "emails", emails,
                "customFields", customFields,
                "phoneNumbers", phoneNumbers,
                "addresses", addresses,
                "websites", websites,
                "socialLinks", socialLinks,
                "stageId", stageId,
                "recruiterId", recruiterId,
                "coordinatorId", coordinatorId,
                "applicationIds", applicationIds,
                "applications", applications,
                "followers", followers,
                "sources", sources,
                "sourceId", sourceId,
                "confidential", confidential,
                "anonymized", anonymized,
                "tags", tags,
                "archived", archived,
                "lastInteractionAt", lastInteractionAt,
                "ownerId", ownerId,
                "sourcedBy", sourcedBy,
                "cvUrl", cvUrl,
                "recordUrl", recordUrl,
                "rejectedAt", rejectedAt,
                "customMappings", customMappings,
                "deleted", deleted,
                "deletedBy", deletedBy,
                "deletedAt", deletedAt,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private JsonNullable<String> salutation = JsonNullable.undefined();

        private JsonNullable<String> firstName = JsonNullable.undefined();

        private JsonNullable<String> lastName = JsonNullable.undefined();

        private JsonNullable<String> middleName = JsonNullable.undefined();

        private JsonNullable<String> initials = JsonNullable.undefined();

        private JsonNullable<LocalDate> birthday = JsonNullable.undefined();

        private JsonNullable<? extends ApplicantGender> gender = JsonNullable.undefined();

        private JsonNullable<String> socialSecurityNumber = JsonNullable.undefined();

        private Optional<String> type = Optional.empty();

        private Optional<String> coverLetter = Optional.empty();

        private JsonNullable<String> jobUrl = JsonNullable.undefined();

        private JsonNullable<String> photoUrl = JsonNullable.undefined();

        private Optional<String> headline = Optional.empty();

        private JsonNullable<String> title = JsonNullable.undefined();

        private Optional<? extends List<Email>> emails = Optional.empty();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();

        private Optional<? extends List<Address>> addresses = Optional.empty();

        private Optional<? extends List<Websites>> websites = Optional.empty();

        private Optional<? extends List<SocialLinks>> socialLinks = Optional.empty();

        private Optional<String> stageId = Optional.empty();

        private Optional<String> recruiterId = Optional.empty();

        private Optional<String> coordinatorId = Optional.empty();

        private JsonNullable<? extends List<String>> applicationIds = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends List<String>> applications = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> followers = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> sources = JsonNullable.undefined();

        private Optional<String> sourceId = Optional.empty();

        private Optional<Boolean> confidential = Optional.empty();

        private Optional<Boolean> anonymized = Optional.empty();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private JsonNullable<Boolean> archived = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> lastInteractionAt = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<String> sourcedBy = JsonNullable.undefined();

        private Optional<String> cvUrl = Optional.empty();

        private JsonNullable<String> recordUrl = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> rejectedAt = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();

        private JsonNullable<Boolean> deleted = JsonNullable.undefined();

        private JsonNullable<String> deletedBy = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> deletedAt = JsonNullable.undefined();

        private JsonNullable<String> updatedBy = JsonNullable.undefined();

        private JsonNullable<String> createdBy = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The name of an applicant.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(String salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(JsonNullable<String> salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = salutation;
            return this;
        }


        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }


        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(String initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(JsonNullable<String> initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = initials;
            return this;
        }


        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }


        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(ApplicantGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(JsonNullable<? extends ApplicantGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }


        /**
         * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
         */
        public Builder socialSecurityNumber(String socialSecurityNumber) {
            Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
            this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
            return this;
        }

        /**
         * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
         */
        public Builder socialSecurityNumber(JsonNullable<String> socialSecurityNumber) {
            Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
            this.socialSecurityNumber = socialSecurityNumber;
            return this;
        }


        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder coverLetter(String coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = Optional.ofNullable(coverLetter);
            return this;
        }

        public Builder coverLetter(Optional<String> coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = coverLetter;
            return this;
        }


        public Builder jobUrl(String jobUrl) {
            Utils.checkNotNull(jobUrl, "jobUrl");
            this.jobUrl = JsonNullable.of(jobUrl);
            return this;
        }

        public Builder jobUrl(JsonNullable<String> jobUrl) {
            Utils.checkNotNull(jobUrl, "jobUrl");
            this.jobUrl = jobUrl;
            return this;
        }


        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }


        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(String headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = Optional.ofNullable(headline);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(Optional<String> headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = headline;
            return this;
        }


        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }


        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder websites(List<Websites> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Websites>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }


        public Builder socialLinks(List<SocialLinks> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLinks>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }


        public Builder stageId(String stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = Optional.ofNullable(stageId);
            return this;
        }

        public Builder stageId(Optional<String> stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = stageId;
            return this;
        }


        public Builder recruiterId(String recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = Optional.ofNullable(recruiterId);
            return this;
        }

        public Builder recruiterId(Optional<String> recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = recruiterId;
            return this;
        }


        public Builder coordinatorId(String coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = Optional.ofNullable(coordinatorId);
            return this;
        }

        public Builder coordinatorId(Optional<String> coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = coordinatorId;
            return this;
        }


        public Builder applicationIds(List<String> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applicationIds(JsonNullable<? extends List<String>> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = applicationIds;
            return this;
        }


        /**
         * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder applications(List<String> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = JsonNullable.of(applications);
            return this;
        }

        /**
         * Deprecated: Use application_ids instead. Array of application IDs associated with the applicant.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder applications(JsonNullable<? extends List<String>> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }


        public Builder followers(List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }


        public Builder sources(List<String> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder sources(JsonNullable<? extends List<String>> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = sources;
            return this;
        }


        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        public Builder sourceId(Optional<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }


        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }


        public Builder anonymized(boolean anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = Optional.ofNullable(anonymized);
            return this;
        }

        public Builder anonymized(Optional<Boolean> anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = anonymized;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder archived(JsonNullable<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }


        public Builder lastInteractionAt(OffsetDateTime lastInteractionAt) {
            Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
            this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
            return this;
        }

        public Builder lastInteractionAt(JsonNullable<OffsetDateTime> lastInteractionAt) {
            Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
            this.lastInteractionAt = lastInteractionAt;
            return this;
        }


        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        public Builder sourcedBy(String sourcedBy) {
            Utils.checkNotNull(sourcedBy, "sourcedBy");
            this.sourcedBy = JsonNullable.of(sourcedBy);
            return this;
        }

        public Builder sourcedBy(JsonNullable<String> sourcedBy) {
            Utils.checkNotNull(sourcedBy, "sourcedBy");
            this.sourcedBy = sourcedBy;
            return this;
        }


        public Builder cvUrl(String cvUrl) {
            Utils.checkNotNull(cvUrl, "cvUrl");
            this.cvUrl = Optional.ofNullable(cvUrl);
            return this;
        }

        public Builder cvUrl(Optional<String> cvUrl) {
            Utils.checkNotNull(cvUrl, "cvUrl");
            this.cvUrl = cvUrl;
            return this;
        }


        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder recordUrl(JsonNullable<String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }


        public Builder rejectedAt(OffsetDateTime rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = JsonNullable.of(rejectedAt);
            return this;
        }

        public Builder rejectedAt(JsonNullable<OffsetDateTime> rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = rejectedAt;
            return this;
        }


        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }


        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }


        /**
         * The user who deleted the object.
         */
        public Builder deletedBy(String deletedBy) {
            Utils.checkNotNull(deletedBy, "deletedBy");
            this.deletedBy = JsonNullable.of(deletedBy);
            return this;
        }

        /**
         * The user who deleted the object.
         */
        public Builder deletedBy(JsonNullable<String> deletedBy) {
            Utils.checkNotNull(deletedBy, "deletedBy");
            this.deletedBy = deletedBy;
            return this;
        }


        /**
         * The time at which the object was deleted.
         */
        public Builder deletedAt(OffsetDateTime deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = JsonNullable.of(deletedAt);
            return this;
        }

        /**
         * The time at which the object was deleted.
         */
        public Builder deletedAt(JsonNullable<OffsetDateTime> deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = deletedAt;
            return this;
        }


        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }


        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public Applicant build() {

            return new Applicant(
                id, name, salutation,
                firstName, lastName, middleName,
                initials, birthday, gender,
                socialSecurityNumber, type, coverLetter,
                jobUrl, photoUrl, headline,
                title, emails, customFields,
                phoneNumbers, addresses, websites,
                socialLinks, stageId, recruiterId,
                coordinatorId, applicationIds, applications,
                followers, sources, sourceId,
                confidential, anonymized, tags,
                archived, lastInteractionAt, ownerId,
                sourcedBy, cvUrl, recordUrl,
                rejectedAt, customMappings, deleted,
                deletedBy, deletedAt, updatedBy,
                createdBy, updatedAt, createdAt,
                passThrough);
        }

    }
}
