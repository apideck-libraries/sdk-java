/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ApplicantInput {

    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private Optional<String> coverLetter;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private Optional<String> headline;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Websites>> websites;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLinks>> socialLinks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private Optional<String> stageId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private Optional<String> recruiterId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private Optional<String> coordinatorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<? extends List<String>> applicationIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    private JsonNullable<? extends List<String>> applications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends List<String>> followers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<? extends List<String>> sources;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<Boolean> confidential;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Optional<Boolean> anonymized;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<Boolean> archived;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public ApplicantInput(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("initials") JsonNullable<String> initials,
            @JsonProperty("birthday") JsonNullable<LocalDate> birthday,
            @JsonProperty("cover_letter") Optional<String> coverLetter,
            @JsonProperty("photo_url") JsonNullable<String> photoUrl,
            @JsonProperty("headline") Optional<String> headline,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("websites") Optional<? extends List<Websites>> websites,
            @JsonProperty("social_links") Optional<? extends List<SocialLinks>> socialLinks,
            @JsonProperty("stage_id") Optional<String> stageId,
            @JsonProperty("recruiter_id") Optional<String> recruiterId,
            @JsonProperty("coordinator_id") Optional<String> coordinatorId,
            @JsonProperty("application_ids") JsonNullable<? extends List<String>> applicationIds,
            @JsonProperty("applications") JsonNullable<? extends List<String>> applications,
            @JsonProperty("followers") JsonNullable<? extends List<String>> followers,
            @JsonProperty("sources") JsonNullable<? extends List<String>> sources,
            @JsonProperty("confidential") Optional<Boolean> confidential,
            @JsonProperty("anonymized") Optional<Boolean> anonymized,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("archived") JsonNullable<Boolean> archived,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("record_url") JsonNullable<String> recordUrl,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(initials, "initials");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(coverLetter, "coverLetter");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(headline, "headline");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(stageId, "stageId");
        Utils.checkNotNull(recruiterId, "recruiterId");
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        Utils.checkNotNull(applicationIds, "applicationIds");
        Utils.checkNotNull(applications, "applications");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(sources, "sources");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(anonymized, "anonymized");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleName = middleName;
        this.initials = initials;
        this.birthday = birthday;
        this.coverLetter = coverLetter;
        this.photoUrl = photoUrl;
        this.headline = headline;
        this.title = title;
        this.emails = emails;
        this.customFields = customFields;
        this.phoneNumbers = phoneNumbers;
        this.addresses = addresses;
        this.websites = websites;
        this.socialLinks = socialLinks;
        this.stageId = stageId;
        this.recruiterId = recruiterId;
        this.coordinatorId = coordinatorId;
        this.applicationIds = applicationIds;
        this.applications = applications;
        this.followers = followers;
        this.sources = sources;
        this.confidential = confidential;
        this.anonymized = anonymized;
        this.tags = tags;
        this.archived = archived;
        this.ownerId = ownerId;
        this.recordUrl = recordUrl;
        this.deleted = deleted;
        this.passThrough = passThrough;
    }
    
    public ApplicantInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of an applicant.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The first name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Middle name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonIgnore
    public JsonNullable<String> initials() {
        return initials;
    }

    /**
     * The date of birth of the person.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> birthday() {
        return birthday;
    }

    @JsonIgnore
    public Optional<String> coverLetter() {
        return coverLetter;
    }

    /**
     * The URL of the photo of a person.
     */
    @JsonIgnore
    public JsonNullable<String> photoUrl() {
        return photoUrl;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonIgnore
    public Optional<String> headline() {
        return headline;
    }

    /**
     * The job title of the person.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Websites>> websites() {
        return (Optional<List<Websites>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLinks>> socialLinks() {
        return (Optional<List<SocialLinks>>) socialLinks;
    }

    @JsonIgnore
    public Optional<String> stageId() {
        return stageId;
    }

    @JsonIgnore
    public Optional<String> recruiterId() {
        return recruiterId;
    }

    @JsonIgnore
    public Optional<String> coordinatorId() {
        return coordinatorId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> applicationIds() {
        return (JsonNullable<List<String>>) applicationIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> applications() {
        return (JsonNullable<List<String>>) applications;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> followers() {
        return (JsonNullable<List<String>>) followers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> sources() {
        return (JsonNullable<List<String>>) sources;
    }

    @JsonIgnore
    public Optional<Boolean> confidential() {
        return confidential;
    }

    @JsonIgnore
    public Optional<Boolean> anonymized() {
        return anonymized;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    @JsonIgnore
    public JsonNullable<Boolean> archived() {
        return archived;
    }

    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    @JsonIgnore
    public JsonNullable<String> recordUrl() {
        return recordUrl;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of an applicant.
     */
    public ApplicantInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of an applicant.
     */
    public ApplicantInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The first name of the person.
     */
    public ApplicantInput withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public ApplicantInput withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the person.
     */
    public ApplicantInput withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public ApplicantInput withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public ApplicantInput withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public ApplicantInput withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public ApplicantInput withInitials(String initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = JsonNullable.of(initials);
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public ApplicantInput withInitials(JsonNullable<String> initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = initials;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public ApplicantInput withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public ApplicantInput withBirthday(JsonNullable<LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    public ApplicantInput withCoverLetter(String coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = Optional.ofNullable(coverLetter);
        return this;
    }

    public ApplicantInput withCoverLetter(Optional<String> coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = coverLetter;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public ApplicantInput withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public ApplicantInput withPhotoUrl(JsonNullable<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public ApplicantInput withHeadline(String headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = Optional.ofNullable(headline);
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public ApplicantInput withHeadline(Optional<String> headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = headline;
        return this;
    }

    /**
     * The job title of the person.
     */
    public ApplicantInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public ApplicantInput withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public ApplicantInput withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public ApplicantInput withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public ApplicantInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public ApplicantInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public ApplicantInput withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public ApplicantInput withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public ApplicantInput withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public ApplicantInput withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public ApplicantInput withWebsites(List<Websites> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public ApplicantInput withWebsites(Optional<? extends List<Websites>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public ApplicantInput withSocialLinks(List<SocialLinks> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }

    public ApplicantInput withSocialLinks(Optional<? extends List<SocialLinks>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public ApplicantInput withStageId(String stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = Optional.ofNullable(stageId);
        return this;
    }

    public ApplicantInput withStageId(Optional<String> stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = stageId;
        return this;
    }

    public ApplicantInput withRecruiterId(String recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = Optional.ofNullable(recruiterId);
        return this;
    }

    public ApplicantInput withRecruiterId(Optional<String> recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = recruiterId;
        return this;
    }

    public ApplicantInput withCoordinatorId(String coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = Optional.ofNullable(coordinatorId);
        return this;
    }

    public ApplicantInput withCoordinatorId(Optional<String> coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = coordinatorId;
        return this;
    }

    public ApplicantInput withApplicationIds(List<String> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }

    public ApplicantInput withApplicationIds(JsonNullable<? extends List<String>> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = applicationIds;
        return this;
    }

    public ApplicantInput withApplications(List<String> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = JsonNullable.of(applications);
        return this;
    }

    public ApplicantInput withApplications(JsonNullable<? extends List<String>> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    public ApplicantInput withFollowers(List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public ApplicantInput withFollowers(JsonNullable<? extends List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    public ApplicantInput withSources(List<String> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = JsonNullable.of(sources);
        return this;
    }

    public ApplicantInput withSources(JsonNullable<? extends List<String>> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = sources;
        return this;
    }

    public ApplicantInput withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }

    public ApplicantInput withConfidential(Optional<Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    public ApplicantInput withAnonymized(boolean anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = Optional.ofNullable(anonymized);
        return this;
    }

    public ApplicantInput withAnonymized(Optional<Boolean> anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = anonymized;
        return this;
    }

    public ApplicantInput withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public ApplicantInput withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public ApplicantInput withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = JsonNullable.of(archived);
        return this;
    }

    public ApplicantInput withArchived(JsonNullable<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    public ApplicantInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public ApplicantInput withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public ApplicantInput withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    public ApplicantInput withRecordUrl(JsonNullable<String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ApplicantInput withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ApplicantInput withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicantInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicantInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicantInput other = (ApplicantInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.initials, other.initials) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.coverLetter, other.coverLetter) &&
            Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            Objects.deepEquals(this.headline, other.headline) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.websites, other.websites) &&
            Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            Objects.deepEquals(this.stageId, other.stageId) &&
            Objects.deepEquals(this.recruiterId, other.recruiterId) &&
            Objects.deepEquals(this.coordinatorId, other.coordinatorId) &&
            Objects.deepEquals(this.applicationIds, other.applicationIds) &&
            Objects.deepEquals(this.applications, other.applications) &&
            Objects.deepEquals(this.followers, other.followers) &&
            Objects.deepEquals(this.sources, other.sources) &&
            Objects.deepEquals(this.confidential, other.confidential) &&
            Objects.deepEquals(this.anonymized, other.anonymized) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.archived, other.archived) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.recordUrl, other.recordUrl) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            firstName,
            lastName,
            middleName,
            initials,
            birthday,
            coverLetter,
            photoUrl,
            headline,
            title,
            emails,
            customFields,
            phoneNumbers,
            addresses,
            websites,
            socialLinks,
            stageId,
            recruiterId,
            coordinatorId,
            applicationIds,
            applications,
            followers,
            sources,
            confidential,
            anonymized,
            tags,
            archived,
            ownerId,
            recordUrl,
            deleted,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicantInput.class,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "initials", initials,
                "birthday", birthday,
                "coverLetter", coverLetter,
                "photoUrl", photoUrl,
                "headline", headline,
                "title", title,
                "emails", emails,
                "customFields", customFields,
                "phoneNumbers", phoneNumbers,
                "addresses", addresses,
                "websites", websites,
                "socialLinks", socialLinks,
                "stageId", stageId,
                "recruiterId", recruiterId,
                "coordinatorId", coordinatorId,
                "applicationIds", applicationIds,
                "applications", applications,
                "followers", followers,
                "sources", sources,
                "confidential", confidential,
                "anonymized", anonymized,
                "tags", tags,
                "archived", archived,
                "ownerId", ownerId,
                "recordUrl", recordUrl,
                "deleted", deleted,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> middleName = JsonNullable.undefined();
 
        private JsonNullable<String> initials = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> birthday = JsonNullable.undefined();
 
        private Optional<String> coverLetter = Optional.empty();
 
        private JsonNullable<String> photoUrl = JsonNullable.undefined();
 
        private Optional<String> headline = Optional.empty();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private Optional<? extends List<Email>> emails = Optional.empty();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Address>> addresses = Optional.empty();
 
        private Optional<? extends List<Websites>> websites = Optional.empty();
 
        private Optional<? extends List<SocialLinks>> socialLinks = Optional.empty();
 
        private Optional<String> stageId = Optional.empty();
 
        private Optional<String> recruiterId = Optional.empty();
 
        private Optional<String> coordinatorId = Optional.empty();
 
        private JsonNullable<? extends List<String>> applicationIds = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> applications = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> followers = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> sources = JsonNullable.undefined();
 
        private Optional<Boolean> confidential = Optional.empty();
 
        private Optional<Boolean> anonymized = Optional.empty();
 
        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<Boolean> archived = JsonNullable.undefined();
 
        private JsonNullable<String> ownerId = JsonNullable.undefined();
 
        private JsonNullable<String> recordUrl = JsonNullable.undefined();
 
        private JsonNullable<Boolean> deleted = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of an applicant.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(String initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(JsonNullable<String> initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = initials;
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        public Builder coverLetter(String coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = Optional.ofNullable(coverLetter);
            return this;
        }

        public Builder coverLetter(Optional<String> coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = coverLetter;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(String headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = Optional.ofNullable(headline);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(Optional<String> headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = headline;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder websites(List<Websites> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Websites>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }

        public Builder socialLinks(List<SocialLinks> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLinks>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder stageId(String stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = Optional.ofNullable(stageId);
            return this;
        }

        public Builder stageId(Optional<String> stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = stageId;
            return this;
        }

        public Builder recruiterId(String recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = Optional.ofNullable(recruiterId);
            return this;
        }

        public Builder recruiterId(Optional<String> recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = recruiterId;
            return this;
        }

        public Builder coordinatorId(String coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = Optional.ofNullable(coordinatorId);
            return this;
        }

        public Builder coordinatorId(Optional<String> coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = coordinatorId;
            return this;
        }

        public Builder applicationIds(List<String> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applicationIds(JsonNullable<? extends List<String>> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = applicationIds;
            return this;
        }

        public Builder applications(List<String> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = JsonNullable.of(applications);
            return this;
        }

        public Builder applications(JsonNullable<? extends List<String>> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }

        public Builder followers(List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }

        public Builder sources(List<String> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder sources(JsonNullable<? extends List<String>> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = sources;
            return this;
        }

        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }

        public Builder anonymized(boolean anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = Optional.ofNullable(anonymized);
            return this;
        }

        public Builder anonymized(Optional<Boolean> anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = anonymized;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder archived(JsonNullable<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder recordUrl(JsonNullable<String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public ApplicantInput build() {
            return new ApplicantInput(
                name,
                firstName,
                lastName,
                middleName,
                initials,
                birthday,
                coverLetter,
                photoUrl,
                headline,
                title,
                emails,
                customFields,
                phoneNumbers,
                addresses,
                websites,
                socialLinks,
                stageId,
                recruiterId,
                coordinatorId,
                applicationIds,
                applications,
                followers,
                sources,
                confidential,
                anonymized,
                tags,
                archived,
                ownerId,
                recordUrl,
                deleted,
                passThrough);
        }
    }
}
