/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicantInput {
    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private String coverLetter;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private String headline;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Websites> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLinks> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private String stageId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private String recruiterId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private String coordinatorId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<List<String>> applicationIds;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    private JsonNullable<List<String>> applications;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<List<String>> followers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<List<String>> sources;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Boolean confidential;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Boolean anonymized;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<Boolean> archived;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public ApplicantInput(
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("initials") @Nullable JsonNullable<String> initials,
            @JsonProperty("birthday") @Nullable JsonNullable<LocalDate> birthday,
            @JsonProperty("cover_letter") @Nullable String coverLetter,
            @JsonProperty("photo_url") @Nullable JsonNullable<String> photoUrl,
            @JsonProperty("headline") @Nullable String headline,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("websites") @Nullable List<Websites> websites,
            @JsonProperty("social_links") @Nullable List<SocialLinks> socialLinks,
            @JsonProperty("stage_id") @Nullable String stageId,
            @JsonProperty("recruiter_id") @Nullable String recruiterId,
            @JsonProperty("coordinator_id") @Nullable String coordinatorId,
            @JsonProperty("application_ids") @Nullable JsonNullable<List<String>> applicationIds,
            @JsonProperty("applications") @Nullable JsonNullable<List<String>> applications,
            @JsonProperty("followers") @Nullable JsonNullable<List<String>> followers,
            @JsonProperty("sources") @Nullable JsonNullable<List<String>> sources,
            @JsonProperty("confidential") @Nullable Boolean confidential,
            @JsonProperty("anonymized") @Nullable Boolean anonymized,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("archived") @Nullable JsonNullable<Boolean> archived,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("record_url") @Nullable JsonNullable<String> recordUrl,
            @JsonProperty("deleted") @Nullable JsonNullable<Boolean> deleted,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.name = name;
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.initials = Optional.ofNullable(initials)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.coverLetter = coverLetter;
        this.photoUrl = Optional.ofNullable(photoUrl)
            .orElse(JsonNullable.undefined());
        this.headline = headline;
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.emails = emails;
        this.customFields = customFields;
        this.phoneNumbers = phoneNumbers;
        this.addresses = addresses;
        this.websites = websites;
        this.socialLinks = socialLinks;
        this.stageId = stageId;
        this.recruiterId = recruiterId;
        this.coordinatorId = coordinatorId;
        this.applicationIds = Optional.ofNullable(applicationIds)
            .orElse(JsonNullable.undefined());
        this.applications = Optional.ofNullable(applications)
            .orElse(JsonNullable.undefined());
        this.followers = Optional.ofNullable(followers)
            .orElse(JsonNullable.undefined());
        this.sources = Optional.ofNullable(sources)
            .orElse(JsonNullable.undefined());
        this.confidential = confidential;
        this.anonymized = anonymized;
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.archived = Optional.ofNullable(archived)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.recordUrl = Optional.ofNullable(recordUrl)
            .orElse(JsonNullable.undefined());
        this.deleted = Optional.ofNullable(deleted)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public ApplicantInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The name of an applicant.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public JsonNullable<String> initials() {
        return this.initials;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<LocalDate> birthday() {
        return this.birthday;
    }

    public Optional<String> coverLetter() {
        return Optional.ofNullable(this.coverLetter);
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<String> photoUrl() {
        return this.photoUrl;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Optional<String> headline() {
        return Optional.ofNullable(this.headline);
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<Websites>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<SocialLinks>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<String> stageId() {
        return Optional.ofNullable(this.stageId);
    }

    public Optional<String> recruiterId() {
        return Optional.ofNullable(this.recruiterId);
    }

    public Optional<String> coordinatorId() {
        return Optional.ofNullable(this.coordinatorId);
    }

    public JsonNullable<List<String>> applicationIds() {
        return this.applicationIds;
    }

    public JsonNullable<List<String>> applications() {
        return this.applications;
    }

    public JsonNullable<List<String>> followers() {
        return this.followers;
    }

    public JsonNullable<List<String>> sources() {
        return this.sources;
    }

    public Optional<Boolean> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    public Optional<Boolean> anonymized() {
        return Optional.ofNullable(this.anonymized);
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    public JsonNullable<Boolean> archived() {
        return this.archived;
    }

    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    public JsonNullable<String> recordUrl() {
        return this.recordUrl;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<Boolean> deleted() {
        return this.deleted;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of an applicant.
     */
    public ApplicantInput withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * The first name of the person.
     */
    public ApplicantInput withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public ApplicantInput withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Middle name of the person.
     */
    public ApplicantInput withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public ApplicantInput withInitials(@Nullable String initials) {
        this.initials = JsonNullable.of(initials);
        return this;
    }


    /**
     * The date of birth of the person.
     */
    public ApplicantInput withBirthday(@Nullable LocalDate birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    public ApplicantInput withCoverLetter(@Nullable String coverLetter) {
        this.coverLetter = coverLetter;
        return this;
    }


    /**
     * The URL of the photo of a person.
     */
    public ApplicantInput withPhotoUrl(@Nullable String photoUrl) {
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }


    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public ApplicantInput withHeadline(@Nullable String headline) {
        this.headline = headline;
        return this;
    }


    /**
     * The job title of the person.
     */
    public ApplicantInput withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    public ApplicantInput withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public ApplicantInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    public ApplicantInput withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public ApplicantInput withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public ApplicantInput withWebsites(@Nullable List<Websites> websites) {
        this.websites = websites;
        return this;
    }


    public ApplicantInput withSocialLinks(@Nullable List<SocialLinks> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public ApplicantInput withStageId(@Nullable String stageId) {
        this.stageId = stageId;
        return this;
    }


    public ApplicantInput withRecruiterId(@Nullable String recruiterId) {
        this.recruiterId = recruiterId;
        return this;
    }


    public ApplicantInput withCoordinatorId(@Nullable String coordinatorId) {
        this.coordinatorId = coordinatorId;
        return this;
    }


    public ApplicantInput withApplicationIds(@Nullable List<String> applicationIds) {
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }


    public ApplicantInput withApplications(@Nullable List<String> applications) {
        this.applications = JsonNullable.of(applications);
        return this;
    }


    public ApplicantInput withFollowers(@Nullable List<String> followers) {
        this.followers = JsonNullable.of(followers);
        return this;
    }


    public ApplicantInput withSources(@Nullable List<String> sources) {
        this.sources = JsonNullable.of(sources);
        return this;
    }


    public ApplicantInput withConfidential(@Nullable Boolean confidential) {
        this.confidential = confidential;
        return this;
    }


    public ApplicantInput withAnonymized(@Nullable Boolean anonymized) {
        this.anonymized = anonymized;
        return this;
    }


    public ApplicantInput withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    public ApplicantInput withArchived(@Nullable Boolean archived) {
        this.archived = JsonNullable.of(archived);
        return this;
    }


    public ApplicantInput withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    public ApplicantInput withRecordUrl(@Nullable String recordUrl) {
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }


    /**
     * Flag to indicate if the object is deleted.
     */
    public ApplicantInput withDeleted(@Nullable Boolean deleted) {
        this.deleted = JsonNullable.of(deleted);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicantInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicantInput other = (ApplicantInput) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.coverLetter, other.coverLetter) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.headline, other.headline) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.stageId, other.stageId) &&
            Utils.enhancedDeepEquals(this.recruiterId, other.recruiterId) &&
            Utils.enhancedDeepEquals(this.coordinatorId, other.coordinatorId) &&
            Utils.enhancedDeepEquals(this.applicationIds, other.applicationIds) &&
            Utils.enhancedDeepEquals(this.applications, other.applications) &&
            Utils.enhancedDeepEquals(this.followers, other.followers) &&
            Utils.enhancedDeepEquals(this.sources, other.sources) &&
            Utils.enhancedDeepEquals(this.confidential, other.confidential) &&
            Utils.enhancedDeepEquals(this.anonymized, other.anonymized) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, firstName, lastName,
            middleName, initials, birthday,
            coverLetter, photoUrl, headline,
            title, emails, customFields,
            phoneNumbers, addresses, websites,
            socialLinks, stageId, recruiterId,
            coordinatorId, applicationIds, applications,
            followers, sources, confidential,
            anonymized, tags, archived,
            ownerId, recordUrl, deleted,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicantInput.class,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "initials", initials,
                "birthday", birthday,
                "coverLetter", coverLetter,
                "photoUrl", photoUrl,
                "headline", headline,
                "title", title,
                "emails", emails,
                "customFields", customFields,
                "phoneNumbers", phoneNumbers,
                "addresses", addresses,
                "websites", websites,
                "socialLinks", socialLinks,
                "stageId", stageId,
                "recruiterId", recruiterId,
                "coordinatorId", coordinatorId,
                "applicationIds", applicationIds,
                "applications", applications,
                "followers", followers,
                "sources", sources,
                "confidential", confidential,
                "anonymized", anonymized,
                "tags", tags,
                "archived", archived,
                "ownerId", ownerId,
                "recordUrl", recordUrl,
                "deleted", deleted,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> initials;

        private JsonNullable<LocalDate> birthday;

        private String coverLetter;

        private JsonNullable<String> photoUrl;

        private String headline;

        private JsonNullable<String> title;

        private List<Email> emails;

        private List<CustomField> customFields;

        private List<PhoneNumber> phoneNumbers;

        private List<Address> addresses;

        private List<Websites> websites;

        private List<SocialLinks> socialLinks;

        private String stageId;

        private String recruiterId;

        private String coordinatorId;

        private JsonNullable<List<String>> applicationIds;

        private JsonNullable<List<String>> applications;

        private JsonNullable<List<String>> followers;

        private JsonNullable<List<String>> sources;

        private Boolean confidential;

        private Boolean anonymized;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Boolean> archived;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> recordUrl;

        private JsonNullable<Boolean> deleted;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of an applicant.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(@Nullable String initials) {
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(@Nullable LocalDate birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        public Builder coverLetter(@Nullable String coverLetter) {
            this.coverLetter = coverLetter;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(@Nullable String photoUrl) {
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(@Nullable String headline) {
            this.headline = headline;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder websites(@Nullable List<Websites> websites) {
            this.websites = websites;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLinks> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder stageId(@Nullable String stageId) {
            this.stageId = stageId;
            return this;
        }

        public Builder recruiterId(@Nullable String recruiterId) {
            this.recruiterId = recruiterId;
            return this;
        }

        public Builder coordinatorId(@Nullable String coordinatorId) {
            this.coordinatorId = coordinatorId;
            return this;
        }

        public Builder applicationIds(@Nullable List<String> applicationIds) {
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applications(@Nullable List<String> applications) {
            this.applications = JsonNullable.of(applications);
            return this;
        }

        public Builder followers(@Nullable List<String> followers) {
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder sources(@Nullable List<String> sources) {
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder confidential(@Nullable Boolean confidential) {
            this.confidential = confidential;
            return this;
        }

        public Builder anonymized(@Nullable Boolean anonymized) {
            this.anonymized = anonymized;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder archived(@Nullable Boolean archived) {
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder recordUrl(@Nullable String recordUrl) {
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public ApplicantInput build() {
            return new ApplicantInput(
                name, firstName, lastName,
                middleName, initials, birthday,
                coverLetter, photoUrl, headline,
                title, emails, customFields,
                phoneNumbers, addresses, websites,
                socialLinks, stageId, recruiterId,
                coordinatorId, applicationIds, applications,
                followers, sources, confidential,
                anonymized, tags, archived,
                ownerId, recordUrl, deleted,
                passThrough);
        }

    }
}
