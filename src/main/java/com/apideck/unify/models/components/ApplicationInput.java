/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicationInput {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("applicant_id")
    private Optional<String> applicantId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("job_id")
    private Optional<String> jobId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends ApplicationStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage")
    private Optional<? extends Stage> stage;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public ApplicationInput(
            @JsonProperty("applicant_id") Optional<String> applicantId,
            @JsonProperty("job_id") Optional<String> jobId,
            @JsonProperty("status") JsonNullable<? extends ApplicationStatus> status,
            @JsonProperty("stage") Optional<? extends Stage> stage,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(applicantId, "applicantId");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(stage, "stage");
        Utils.checkNotNull(passThrough, "passThrough");
        this.applicantId = applicantId;
        this.jobId = jobId;
        this.status = status;
        this.stage = stage;
        this.passThrough = passThrough;
    }
    
    public ApplicationInput() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> applicantId() {
        return applicantId;
    }

    @JsonIgnore
    public Optional<String> jobId() {
        return jobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ApplicationStatus> status() {
        return (JsonNullable<ApplicationStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Stage> stage() {
        return (Optional<Stage>) stage;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ApplicationInput withApplicantId(String applicantId) {
        Utils.checkNotNull(applicantId, "applicantId");
        this.applicantId = Optional.ofNullable(applicantId);
        return this;
    }


    public ApplicationInput withApplicantId(Optional<String> applicantId) {
        Utils.checkNotNull(applicantId, "applicantId");
        this.applicantId = applicantId;
        return this;
    }

    public ApplicationInput withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }


    public ApplicationInput withJobId(Optional<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public ApplicationInput withStatus(ApplicationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public ApplicationInput withStatus(JsonNullable<? extends ApplicationStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ApplicationInput withStage(Stage stage) {
        Utils.checkNotNull(stage, "stage");
        this.stage = Optional.ofNullable(stage);
        return this;
    }


    public ApplicationInput withStage(Optional<? extends Stage> stage) {
        Utils.checkNotNull(stage, "stage");
        this.stage = stage;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicationInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicationInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationInput other = (ApplicationInput) o;
        return 
            Utils.enhancedDeepEquals(this.applicantId, other.applicantId) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.stage, other.stage) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            applicantId, jobId, status,
            stage, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationInput.class,
                "applicantId", applicantId,
                "jobId", jobId,
                "status", status,
                "stage", stage,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> applicantId = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private JsonNullable<? extends ApplicationStatus> status = JsonNullable.undefined();

        private Optional<? extends Stage> stage = Optional.empty();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder applicantId(String applicantId) {
            Utils.checkNotNull(applicantId, "applicantId");
            this.applicantId = Optional.ofNullable(applicantId);
            return this;
        }

        public Builder applicantId(Optional<String> applicantId) {
            Utils.checkNotNull(applicantId, "applicantId");
            this.applicantId = applicantId;
            return this;
        }


        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Optional<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }


        public Builder status(ApplicationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<? extends ApplicationStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder stage(Stage stage) {
            Utils.checkNotNull(stage, "stage");
            this.stage = Optional.ofNullable(stage);
            return this;
        }

        public Builder stage(Optional<? extends Stage> stage) {
            Utils.checkNotNull(stage, "stage");
            this.stage = stage;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public ApplicationInput build() {

            return new ApplicationInput(
                applicantId, jobId, status,
                stage, passThrough);
        }

    }
}
