/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicationInput {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("applicant_id")
    private JsonNullable<String> applicantId;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("job_id")
    private JsonNullable<String> jobId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<ApplicationStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage")
    private Stage stage;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public ApplicationInput(
            @JsonProperty("applicant_id") @Nullable String applicantId,
            @JsonProperty("job_id") @Nullable String jobId,
            @JsonProperty("status") @Nullable JsonNullable<ApplicationStatus> status,
            @JsonProperty("stage") @Nullable Stage stage,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.applicantId = JsonNullable.of(applicantId);
        this.jobId = JsonNullable.of(jobId);
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.stage = stage;
        this.passThrough = passThrough;
    }
    
    public ApplicationInput() {
        this(null, null, null,
            null, null);
    }

    public JsonNullable<String> applicantId() {
        return this.applicantId;
    }

    public JsonNullable<String> jobId() {
        return this.jobId;
    }

    public JsonNullable<ApplicationStatus> status() {
        return this.status;
    }

    public Optional<Stage> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ApplicationInput withApplicantId(@Nullable String applicantId) {
        this.applicantId = JsonNullable.of(applicantId);
        return this;
    }


    public ApplicationInput withJobId(@Nullable String jobId) {
        this.jobId = JsonNullable.of(jobId);
        return this;
    }


    public ApplicationInput withStatus(@Nullable ApplicationStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    public ApplicationInput withStage(@Nullable Stage stage) {
        this.stage = stage;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ApplicationInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationInput other = (ApplicationInput) o;
        return 
            Utils.enhancedDeepEquals(this.applicantId, other.applicantId) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.stage, other.stage) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            applicantId, jobId, status,
            stage, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationInput.class,
                "applicantId", applicantId,
                "jobId", jobId,
                "status", status,
                "stage", stage,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String applicantId;

        private String jobId;

        private JsonNullable<ApplicationStatus> status;

        private Stage stage;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        public Builder applicantId(@Nullable String applicantId) {
            this.applicantId = applicantId;
            return this;
        }

        public Builder jobId(@Nullable String jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder status(@Nullable ApplicationStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder stage(@Nullable Stage stage) {
            this.stage = stage;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public ApplicationInput build() {
            return new ApplicationInput(
                applicantId, jobId, status,
                stage, passThrough);
        }

    }
}
