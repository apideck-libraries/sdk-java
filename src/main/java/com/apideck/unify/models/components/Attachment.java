/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Attachment {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The display id of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * The name of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    private JsonNullable<String> mimeType;

    /**
     * The size of the file in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private AttachmentReference reference;

    /**
     * Optional description of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The folder id where this attachment belong to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folder_id")
    private JsonNullable<String> parentFolderId;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Attachment(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("display_id") @Nullable JsonNullable<String> displayId,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("mime_type") @Nullable JsonNullable<String> mimeType,
            @JsonProperty("size") @Nullable JsonNullable<Long> size,
            @JsonProperty("reference") @Nullable AttachmentReference reference,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("parent_folder_id") @Nullable JsonNullable<String> parentFolderId,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.displayId = Optional.ofNullable(displayId)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.mimeType = Optional.ofNullable(mimeType)
            .orElse(JsonNullable.undefined());
        this.size = Optional.ofNullable(size)
            .orElse(JsonNullable.undefined());
        this.reference = reference;
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.parentFolderId = Optional.ofNullable(parentFolderId)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Attachment() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The display id of the file
     */
    public JsonNullable<String> displayId() {
        return this.displayId;
    }

    /**
     * The name of the file
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The MIME type of the file.
     */
    public JsonNullable<String> mimeType() {
        return this.mimeType;
    }

    /**
     * The size of the file in bytes
     */
    public JsonNullable<Long> size() {
        return this.size;
    }

    public Optional<AttachmentReference> reference() {
        return Optional.ofNullable(this.reference);
    }

    /**
     * Optional description of the file
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The folder id where this attachment belong to
     */
    public JsonNullable<String> parentFolderId() {
        return this.parentFolderId;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Attachment withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The display id of the file
     */
    public Attachment withDisplayId(@Nullable String displayId) {
        this.displayId = JsonNullable.of(displayId);
        return this;
    }


    /**
     * The name of the file
     */
    public Attachment withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The MIME type of the file.
     */
    public Attachment withMimeType(@Nullable String mimeType) {
        this.mimeType = JsonNullable.of(mimeType);
        return this;
    }


    /**
     * The size of the file in bytes
     */
    public Attachment withSize(@Nullable Long size) {
        this.size = JsonNullable.of(size);
        return this;
    }


    public Attachment withReference(@Nullable AttachmentReference reference) {
        this.reference = reference;
        return this;
    }


    /**
     * Optional description of the file
     */
    public Attachment withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The folder id where this attachment belong to
     */
    public Attachment withParentFolderId(@Nullable String parentFolderId) {
        this.parentFolderId = JsonNullable.of(parentFolderId);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Attachment withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Attachment withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Attachment withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Attachment withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Attachment withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Attachment other = (Attachment) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.mimeType, other.mimeType) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.parentFolderId, other.parentFolderId) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, displayId, name,
            mimeType, size, reference,
            description, parentFolderId, updatedBy,
            createdBy, updatedAt, createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Attachment.class,
                "id", id,
                "displayId", displayId,
                "name", name,
                "mimeType", mimeType,
                "size", size,
                "reference", reference,
                "description", description,
                "parentFolderId", parentFolderId,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> displayId;

        private JsonNullable<String> name;

        private JsonNullable<String> mimeType;

        private JsonNullable<Long> size;

        private AttachmentReference reference;

        private JsonNullable<String> description;

        private JsonNullable<String> parentFolderId;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The display id of the file
         */
        public Builder displayId(@Nullable String displayId) {
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * The name of the file
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The MIME type of the file.
         */
        public Builder mimeType(@Nullable String mimeType) {
            this.mimeType = JsonNullable.of(mimeType);
            return this;
        }

        /**
         * The size of the file in bytes
         */
        public Builder size(@Nullable Long size) {
            this.size = JsonNullable.of(size);
            return this;
        }

        public Builder reference(@Nullable AttachmentReference reference) {
            this.reference = reference;
            return this;
        }

        /**
         * Optional description of the file
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The folder id where this attachment belong to
         */
        public Builder parentFolderId(@Nullable String parentFolderId) {
            this.parentFolderId = JsonNullable.of(parentFolderId);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Attachment build() {
            return new Attachment(
                id, displayId, name,
                mimeType, size, reference,
                description, parentFolderId, updatedBy,
                createdBy, updatedAt, createdAt,
                passThrough);
        }

    }
}
