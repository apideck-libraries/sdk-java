/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BalanceByPeriod {
    /**
     * The starting date of the period. If not provided, it represents the oldest period, where all transactions due before the specified `end_date` are included.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<LocalDate> startDate;

    /**
     * The ending date of the period. If not provided, it represents an open-ended period starting from the `start_date`, typically capturing future-dated transactions that are not yet aged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<LocalDate> endDate;

    /**
     * Total amount of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Double totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balances_by_transaction")
    private List<BalanceByTransaction> balancesByTransaction;

    @JsonCreator
    public BalanceByPeriod(
            @JsonProperty("start_date") @Nullable JsonNullable<LocalDate> startDate,
            @JsonProperty("end_date") @Nullable JsonNullable<LocalDate> endDate,
            @JsonProperty("total_amount") @Nullable Double totalAmount,
            @JsonProperty("balances_by_transaction") @Nullable List<BalanceByTransaction> balancesByTransaction) {
        this.startDate = Optional.ofNullable(startDate)
            .orElse(JsonNullable.undefined());
        this.endDate = Optional.ofNullable(endDate)
            .orElse(JsonNullable.undefined());
        this.totalAmount = totalAmount;
        this.balancesByTransaction = balancesByTransaction;
    }
    
    public BalanceByPeriod() {
        this(null, null, null,
            null);
    }

    /**
     * The starting date of the period. If not provided, it represents the oldest period, where all transactions due before the specified `end_date` are included.
     */
    public JsonNullable<LocalDate> startDate() {
        return this.startDate;
    }

    /**
     * The ending date of the period. If not provided, it represents an open-ended period starting from the `start_date`, typically capturing future-dated transactions that are not yet aged.
     */
    public JsonNullable<LocalDate> endDate() {
        return this.endDate;
    }

    /**
     * Total amount of the period.
     */
    public Optional<Double> totalAmount() {
        return Optional.ofNullable(this.totalAmount);
    }

    public Optional<List<BalanceByTransaction>> balancesByTransaction() {
        return Optional.ofNullable(this.balancesByTransaction);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The starting date of the period. If not provided, it represents the oldest period, where all transactions due before the specified `end_date` are included.
     */
    public BalanceByPeriod withStartDate(@Nullable LocalDate startDate) {
        this.startDate = JsonNullable.of(startDate);
        return this;
    }


    /**
     * The ending date of the period. If not provided, it represents an open-ended period starting from the `start_date`, typically capturing future-dated transactions that are not yet aged.
     */
    public BalanceByPeriod withEndDate(@Nullable LocalDate endDate) {
        this.endDate = JsonNullable.of(endDate);
        return this;
    }


    /**
     * Total amount of the period.
     */
    public BalanceByPeriod withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }


    public BalanceByPeriod withBalancesByTransaction(@Nullable List<BalanceByTransaction> balancesByTransaction) {
        this.balancesByTransaction = balancesByTransaction;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BalanceByPeriod other = (BalanceByPeriod) o;
        return 
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.balancesByTransaction, other.balancesByTransaction);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            startDate, endDate, totalAmount,
            balancesByTransaction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BalanceByPeriod.class,
                "startDate", startDate,
                "endDate", endDate,
                "totalAmount", totalAmount,
                "balancesByTransaction", balancesByTransaction);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<LocalDate> startDate;

        private JsonNullable<LocalDate> endDate;

        private Double totalAmount;

        private List<BalanceByTransaction> balancesByTransaction;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The starting date of the period. If not provided, it represents the oldest period, where all transactions due before the specified `end_date` are included.
         */
        public Builder startDate(@Nullable LocalDate startDate) {
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The ending date of the period. If not provided, it represents an open-ended period starting from the `start_date`, typically capturing future-dated transactions that are not yet aged.
         */
        public Builder endDate(@Nullable LocalDate endDate) {
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * Total amount of the period.
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder balancesByTransaction(@Nullable List<BalanceByTransaction> balancesByTransaction) {
            this.balancesByTransaction = balancesByTransaction;
            return this;
        }

        public BalanceByPeriod build() {
            return new BalanceByPeriod(
                startDate, endDate, totalAmount,
                balancesByTransaction);
        }

    }
}
