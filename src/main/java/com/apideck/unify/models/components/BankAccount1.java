/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankAccount1 {
    /**
     * The name of the bank
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    private JsonNullable<String> bankName;

    /**
     * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_number")
    private JsonNullable<String> accountNumber;

    /**
     * The name which you used in opening your bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_name")
    private JsonNullable<String> accountName;

    /**
     * The type of bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_type")
    private JsonNullable<? extends BankAccount1AccountType> accountType;

    /**
     * The International Bank Account Number (IBAN).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    private JsonNullable<String> iban;

    /**
     * The Bank Identifier Code (BIC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bic")
    private JsonNullable<String> bic;

    /**
     * A routing number is a nine-digit code used to identify a financial institution in the United States.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routing_number")
    private JsonNullable<String> routingNumber;

    /**
     * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bsb_number")
    private JsonNullable<String> bsbNumber;

    /**
     * A branch identifier is a unique identifier for a branch of a bank or financial institution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch_identifier")
    private JsonNullable<String> branchIdentifier;

    /**
     * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_code")
    private JsonNullable<String> bankCode;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonCreator
    public BankAccount1(
            @JsonProperty("bank_name") JsonNullable<String> bankName,
            @JsonProperty("account_number") JsonNullable<String> accountNumber,
            @JsonProperty("account_name") JsonNullable<String> accountName,
            @JsonProperty("account_type") JsonNullable<? extends BankAccount1AccountType> accountType,
            @JsonProperty("iban") JsonNullable<String> iban,
            @JsonProperty("bic") JsonNullable<String> bic,
            @JsonProperty("routing_number") JsonNullable<String> routingNumber,
            @JsonProperty("bsb_number") JsonNullable<String> bsbNumber,
            @JsonProperty("branch_identifier") JsonNullable<String> branchIdentifier,
            @JsonProperty("bank_code") JsonNullable<String> bankCode,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("country") JsonNullable<String> country) {
        Utils.checkNotNull(bankName, "bankName");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(accountName, "accountName");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(bic, "bic");
        Utils.checkNotNull(routingNumber, "routingNumber");
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        Utils.checkNotNull(bankCode, "bankCode");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(country, "country");
        this.bankName = bankName;
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.accountType = accountType;
        this.iban = iban;
        this.bic = bic;
        this.routingNumber = routingNumber;
        this.bsbNumber = bsbNumber;
        this.branchIdentifier = branchIdentifier;
        this.bankCode = bankCode;
        this.currency = currency;
        this.country = country;
    }
    
    public BankAccount1() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the bank
     */
    @JsonIgnore
    public JsonNullable<String> bankName() {
        return bankName;
    }

    /**
     * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
     */
    @JsonIgnore
    public JsonNullable<String> accountNumber() {
        return accountNumber;
    }

    /**
     * The name which you used in opening your bank account.
     */
    @JsonIgnore
    public JsonNullable<String> accountName() {
        return accountName;
    }

    /**
     * The type of bank account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BankAccount1AccountType> accountType() {
        return (JsonNullable<BankAccount1AccountType>) accountType;
    }

    /**
     * The International Bank Account Number (IBAN).
     */
    @JsonIgnore
    public JsonNullable<String> iban() {
        return iban;
    }

    /**
     * The Bank Identifier Code (BIC).
     */
    @JsonIgnore
    public JsonNullable<String> bic() {
        return bic;
    }

    /**
     * A routing number is a nine-digit code used to identify a financial institution in the United States.
     */
    @JsonIgnore
    public JsonNullable<String> routingNumber() {
        return routingNumber;
    }

    /**
     * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
     */
    @JsonIgnore
    public JsonNullable<String> bsbNumber() {
        return bsbNumber;
    }

    /**
     * A branch identifier is a unique identifier for a branch of a bank or financial institution.
     */
    @JsonIgnore
    public JsonNullable<String> branchIdentifier() {
        return branchIdentifier;
    }

    /**
     * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
     */
    @JsonIgnore
    public JsonNullable<String> bankCode() {
        return bankCode;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the bank
     */
    public BankAccount1 withBankName(String bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = JsonNullable.of(bankName);
        return this;
    }

    /**
     * The name of the bank
     */
    public BankAccount1 withBankName(JsonNullable<String> bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = bankName;
        return this;
    }

    /**
     * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
     */
    public BankAccount1 withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
     */
    public BankAccount1 withAccountNumber(JsonNullable<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The name which you used in opening your bank account.
     */
    public BankAccount1 withAccountName(String accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = JsonNullable.of(accountName);
        return this;
    }

    /**
     * The name which you used in opening your bank account.
     */
    public BankAccount1 withAccountName(JsonNullable<String> accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = accountName;
        return this;
    }

    /**
     * The type of bank account.
     */
    public BankAccount1 withAccountType(BankAccount1AccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = JsonNullable.of(accountType);
        return this;
    }

    /**
     * The type of bank account.
     */
    public BankAccount1 withAccountType(JsonNullable<? extends BankAccount1AccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * The International Bank Account Number (IBAN).
     */
    public BankAccount1 withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = JsonNullable.of(iban);
        return this;
    }

    /**
     * The International Bank Account Number (IBAN).
     */
    public BankAccount1 withIban(JsonNullable<String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    /**
     * The Bank Identifier Code (BIC).
     */
    public BankAccount1 withBic(String bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = JsonNullable.of(bic);
        return this;
    }

    /**
     * The Bank Identifier Code (BIC).
     */
    public BankAccount1 withBic(JsonNullable<String> bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = bic;
        return this;
    }

    /**
     * A routing number is a nine-digit code used to identify a financial institution in the United States.
     */
    public BankAccount1 withRoutingNumber(String routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = JsonNullable.of(routingNumber);
        return this;
    }

    /**
     * A routing number is a nine-digit code used to identify a financial institution in the United States.
     */
    public BankAccount1 withRoutingNumber(JsonNullable<String> routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
     */
    public BankAccount1 withBsbNumber(String bsbNumber) {
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        this.bsbNumber = JsonNullable.of(bsbNumber);
        return this;
    }

    /**
     * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
     */
    public BankAccount1 withBsbNumber(JsonNullable<String> bsbNumber) {
        Utils.checkNotNull(bsbNumber, "bsbNumber");
        this.bsbNumber = bsbNumber;
        return this;
    }

    /**
     * A branch identifier is a unique identifier for a branch of a bank or financial institution.
     */
    public BankAccount1 withBranchIdentifier(String branchIdentifier) {
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        this.branchIdentifier = JsonNullable.of(branchIdentifier);
        return this;
    }

    /**
     * A branch identifier is a unique identifier for a branch of a bank or financial institution.
     */
    public BankAccount1 withBranchIdentifier(JsonNullable<String> branchIdentifier) {
        Utils.checkNotNull(branchIdentifier, "branchIdentifier");
        this.branchIdentifier = branchIdentifier;
        return this;
    }

    /**
     * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
     */
    public BankAccount1 withBankCode(String bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = JsonNullable.of(bankCode);
        return this;
    }

    /**
     * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
     */
    public BankAccount1 withBankCode(JsonNullable<String> bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = bankCode;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankAccount1 withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankAccount1 withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankAccount1 withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankAccount1 withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankAccount1 other = (BankAccount1) o;
        return 
            Utils.enhancedDeepEquals(this.bankName, other.bankName) &&
            Utils.enhancedDeepEquals(this.accountNumber, other.accountNumber) &&
            Utils.enhancedDeepEquals(this.accountName, other.accountName) &&
            Utils.enhancedDeepEquals(this.accountType, other.accountType) &&
            Utils.enhancedDeepEquals(this.iban, other.iban) &&
            Utils.enhancedDeepEquals(this.bic, other.bic) &&
            Utils.enhancedDeepEquals(this.routingNumber, other.routingNumber) &&
            Utils.enhancedDeepEquals(this.bsbNumber, other.bsbNumber) &&
            Utils.enhancedDeepEquals(this.branchIdentifier, other.branchIdentifier) &&
            Utils.enhancedDeepEquals(this.bankCode, other.bankCode) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            bankName, accountNumber, accountName,
            accountType, iban, bic,
            routingNumber, bsbNumber, branchIdentifier,
            bankCode, currency, country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankAccount1.class,
                "bankName", bankName,
                "accountNumber", accountNumber,
                "accountName", accountName,
                "accountType", accountType,
                "iban", iban,
                "bic", bic,
                "routingNumber", routingNumber,
                "bsbNumber", bsbNumber,
                "branchIdentifier", branchIdentifier,
                "bankCode", bankCode,
                "currency", currency,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> bankName = JsonNullable.undefined();

        private JsonNullable<String> accountNumber = JsonNullable.undefined();

        private JsonNullable<String> accountName = JsonNullable.undefined();

        private JsonNullable<? extends BankAccount1AccountType> accountType = JsonNullable.undefined();

        private JsonNullable<String> iban = JsonNullable.undefined();

        private JsonNullable<String> bic = JsonNullable.undefined();

        private JsonNullable<String> routingNumber = JsonNullable.undefined();

        private JsonNullable<String> bsbNumber = JsonNullable.undefined();

        private JsonNullable<String> branchIdentifier = JsonNullable.undefined();

        private JsonNullable<String> bankCode = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<String> country = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the bank
         */
        public Builder bankName(String bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = JsonNullable.of(bankName);
            return this;
        }

        /**
         * The name of the bank
         */
        public Builder bankName(JsonNullable<String> bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = bankName;
            return this;
        }


        /**
         * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
         */
        public Builder accountNumber(JsonNullable<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }


        /**
         * The name which you used in opening your bank account.
         */
        public Builder accountName(String accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = JsonNullable.of(accountName);
            return this;
        }

        /**
         * The name which you used in opening your bank account.
         */
        public Builder accountName(JsonNullable<String> accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = accountName;
            return this;
        }


        /**
         * The type of bank account.
         */
        public Builder accountType(BankAccount1AccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = JsonNullable.of(accountType);
            return this;
        }

        /**
         * The type of bank account.
         */
        public Builder accountType(JsonNullable<? extends BankAccount1AccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }


        /**
         * The International Bank Account Number (IBAN).
         */
        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = JsonNullable.of(iban);
            return this;
        }

        /**
         * The International Bank Account Number (IBAN).
         */
        public Builder iban(JsonNullable<String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }


        /**
         * The Bank Identifier Code (BIC).
         */
        public Builder bic(String bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = JsonNullable.of(bic);
            return this;
        }

        /**
         * The Bank Identifier Code (BIC).
         */
        public Builder bic(JsonNullable<String> bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = bic;
            return this;
        }


        /**
         * A routing number is a nine-digit code used to identify a financial institution in the United States.
         */
        public Builder routingNumber(String routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = JsonNullable.of(routingNumber);
            return this;
        }

        /**
         * A routing number is a nine-digit code used to identify a financial institution in the United States.
         */
        public Builder routingNumber(JsonNullable<String> routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = routingNumber;
            return this;
        }


        /**
         * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
         */
        public Builder bsbNumber(String bsbNumber) {
            Utils.checkNotNull(bsbNumber, "bsbNumber");
            this.bsbNumber = JsonNullable.of(bsbNumber);
            return this;
        }

        /**
         * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
         */
        public Builder bsbNumber(JsonNullable<String> bsbNumber) {
            Utils.checkNotNull(bsbNumber, "bsbNumber");
            this.bsbNumber = bsbNumber;
            return this;
        }


        /**
         * A branch identifier is a unique identifier for a branch of a bank or financial institution.
         */
        public Builder branchIdentifier(String branchIdentifier) {
            Utils.checkNotNull(branchIdentifier, "branchIdentifier");
            this.branchIdentifier = JsonNullable.of(branchIdentifier);
            return this;
        }

        /**
         * A branch identifier is a unique identifier for a branch of a bank or financial institution.
         */
        public Builder branchIdentifier(JsonNullable<String> branchIdentifier) {
            Utils.checkNotNull(branchIdentifier, "branchIdentifier");
            this.branchIdentifier = branchIdentifier;
            return this;
        }


        /**
         * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
         */
        public Builder bankCode(String bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = JsonNullable.of(bankCode);
            return this;
        }

        /**
         * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
         */
        public Builder bankCode(JsonNullable<String> bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = bankCode;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public BankAccount1 build() {

            return new BankAccount1(
                bankName, accountNumber, accountName,
                accountType, iban, bic,
                routingNumber, bsbNumber, branchIdentifier,
                bankCode, currency, country);
        }

    }
}
