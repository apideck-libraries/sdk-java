/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class BankFeedAccount {

    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Type of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account_type")
    private Optional<? extends BankAccountType> bankAccountType;

    /**
     * The source account's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_account_id")
    private Optional<String> sourceAccountId;

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_id")
    private Optional<String> targetAccountId;

    /**
     * Name associated with the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_name")
    private Optional<String> targetAccountName;

    /**
     * Account number of the destination bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_number")
    private Optional<String> targetAccountNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Current status of the bank feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feed_status")
    private Optional<? extends FeedStatus> feedStatus;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    @JsonCreator
    public BankFeedAccount(
            @JsonProperty("id") String id,
            @JsonProperty("bank_account_type") Optional<? extends BankAccountType> bankAccountType,
            @JsonProperty("source_account_id") Optional<String> sourceAccountId,
            @JsonProperty("target_account_id") Optional<String> targetAccountId,
            @JsonProperty("target_account_name") Optional<String> targetAccountName,
            @JsonProperty("target_account_number") Optional<String> targetAccountNumber,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("feed_status") Optional<? extends FeedStatus> feedStatus,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(feedStatus, "feedStatus");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        this.id = id;
        this.bankAccountType = bankAccountType;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
        this.targetAccountName = targetAccountName;
        this.targetAccountNumber = targetAccountNumber;
        this.currency = currency;
        this.feedStatus = feedStatus;
        this.country = country;
        this.customFields = customFields;
        this.customMappings = customMappings;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
    }
    
    public BankFeedAccount(
            String id) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Type of the bank account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccountType> bankAccountType() {
        return (Optional<BankAccountType>) bankAccountType;
    }

    /**
     * The source account's unique identifier.
     */
    @JsonIgnore
    public Optional<String> sourceAccountId() {
        return sourceAccountId;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonIgnore
    public Optional<String> targetAccountId() {
        return targetAccountId;
    }

    /**
     * Name associated with the target account.
     */
    @JsonIgnore
    public Optional<String> targetAccountName() {
        return targetAccountName;
    }

    /**
     * Account number of the destination bank account.
     */
    @JsonIgnore
    public Optional<String> targetAccountNumber() {
        return targetAccountNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Current status of the bank feed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedStatus> feedStatus() {
        return (Optional<FeedStatus>) feedStatus;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for an object.
     */
    public BankFeedAccount withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Type of the bank account.
     */
    public BankFeedAccount withBankAccountType(BankAccountType bankAccountType) {
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        this.bankAccountType = Optional.ofNullable(bankAccountType);
        return this;
    }

    /**
     * Type of the bank account.
     */
    public BankFeedAccount withBankAccountType(Optional<? extends BankAccountType> bankAccountType) {
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        this.bankAccountType = bankAccountType;
        return this;
    }

    /**
     * The source account's unique identifier.
     */
    public BankFeedAccount withSourceAccountId(String sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = Optional.ofNullable(sourceAccountId);
        return this;
    }

    /**
     * The source account's unique identifier.
     */
    public BankFeedAccount withSourceAccountId(Optional<String> sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccount withTargetAccountId(String targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = Optional.ofNullable(targetAccountId);
        return this;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccount withTargetAccountId(Optional<String> targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = targetAccountId;
        return this;
    }

    /**
     * Name associated with the target account.
     */
    public BankFeedAccount withTargetAccountName(String targetAccountName) {
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        this.targetAccountName = Optional.ofNullable(targetAccountName);
        return this;
    }

    /**
     * Name associated with the target account.
     */
    public BankFeedAccount withTargetAccountName(Optional<String> targetAccountName) {
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        this.targetAccountName = targetAccountName;
        return this;
    }

    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccount withTargetAccountNumber(String targetAccountNumber) {
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        this.targetAccountNumber = Optional.ofNullable(targetAccountNumber);
        return this;
    }

    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccount withTargetAccountNumber(Optional<String> targetAccountNumber) {
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        this.targetAccountNumber = targetAccountNumber;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccount withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccount withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Current status of the bank feed.
     */
    public BankFeedAccount withFeedStatus(FeedStatus feedStatus) {
        Utils.checkNotNull(feedStatus, "feedStatus");
        this.feedStatus = Optional.ofNullable(feedStatus);
        return this;
    }

    /**
     * Current status of the bank feed.
     */
    public BankFeedAccount withFeedStatus(Optional<? extends FeedStatus> feedStatus) {
        Utils.checkNotNull(feedStatus, "feedStatus");
        this.feedStatus = feedStatus;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccount withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccount withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public BankFeedAccount withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public BankFeedAccount withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BankFeedAccount withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BankFeedAccount withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BankFeedAccount withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BankFeedAccount withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BankFeedAccount withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BankFeedAccount withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BankFeedAccount withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BankFeedAccount withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public BankFeedAccount withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public BankFeedAccount withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedAccount other = (BankFeedAccount) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.bankAccountType, other.bankAccountType) &&
            Objects.deepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Objects.deepEquals(this.targetAccountId, other.targetAccountId) &&
            Objects.deepEquals(this.targetAccountName, other.targetAccountName) &&
            Objects.deepEquals(this.targetAccountNumber, other.targetAccountNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.feedStatus, other.feedStatus) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            bankAccountType,
            sourceAccountId,
            targetAccountId,
            targetAccountName,
            targetAccountNumber,
            currency,
            feedStatus,
            country,
            customFields,
            customMappings,
            createdAt,
            updatedAt,
            updatedBy,
            createdBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedAccount.class,
                "id", id,
                "bankAccountType", bankAccountType,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId,
                "targetAccountName", targetAccountName,
                "targetAccountNumber", targetAccountNumber,
                "currency", currency,
                "feedStatus", feedStatus,
                "country", country,
                "customFields", customFields,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "createdBy", createdBy);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends BankAccountType> bankAccountType = Optional.empty();
 
        private Optional<String> sourceAccountId = Optional.empty();
 
        private Optional<String> targetAccountId = Optional.empty();
 
        private Optional<String> targetAccountName = Optional.empty();
 
        private Optional<String> targetAccountNumber = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends FeedStatus> feedStatus = Optional.empty();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(BankAccountType bankAccountType) {
            Utils.checkNotNull(bankAccountType, "bankAccountType");
            this.bankAccountType = Optional.ofNullable(bankAccountType);
            return this;
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(Optional<? extends BankAccountType> bankAccountType) {
            Utils.checkNotNull(bankAccountType, "bankAccountType");
            this.bankAccountType = bankAccountType;
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(String sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = Optional.ofNullable(sourceAccountId);
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(Optional<String> sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(String targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = Optional.ofNullable(targetAccountId);
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(Optional<String> targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = targetAccountId;
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(String targetAccountName) {
            Utils.checkNotNull(targetAccountName, "targetAccountName");
            this.targetAccountName = Optional.ofNullable(targetAccountName);
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(Optional<String> targetAccountName) {
            Utils.checkNotNull(targetAccountName, "targetAccountName");
            this.targetAccountName = targetAccountName;
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(String targetAccountNumber) {
            Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
            this.targetAccountNumber = Optional.ofNullable(targetAccountNumber);
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(Optional<String> targetAccountNumber) {
            Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
            this.targetAccountNumber = targetAccountNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(FeedStatus feedStatus) {
            Utils.checkNotNull(feedStatus, "feedStatus");
            this.feedStatus = Optional.ofNullable(feedStatus);
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(Optional<? extends FeedStatus> feedStatus) {
            Utils.checkNotNull(feedStatus, "feedStatus");
            this.feedStatus = feedStatus;
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }
        
        public BankFeedAccount build() {
            return new BankFeedAccount(
                id,
                bankAccountType,
                sourceAccountId,
                targetAccountId,
                targetAccountName,
                targetAccountNumber,
                currency,
                feedStatus,
                country,
                customFields,
                customMappings,
                createdAt,
                updatedAt,
                updatedBy,
                createdBy);
        }
    }
}
