/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankFeedAccount {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Type of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account_type")
    private BankAccountType bankAccountType;

    /**
     * The source account's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_account_id")
    private String sourceAccountId;

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_id")
    private String targetAccountId;

    /**
     * Name associated with the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_name")
    private String targetAccountName;

    /**
     * Account number of the destination bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_number")
    private String targetAccountNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Current status of the bank feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feed_status")
    private FeedStatus feedStatus;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    @JsonCreator
    public BankFeedAccount(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("bank_account_type") @Nullable BankAccountType bankAccountType,
            @JsonProperty("source_account_id") @Nullable String sourceAccountId,
            @JsonProperty("target_account_id") @Nullable String targetAccountId,
            @JsonProperty("target_account_name") @Nullable String targetAccountName,
            @JsonProperty("target_account_number") @Nullable String targetAccountNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("feed_status") @Nullable FeedStatus feedStatus,
            @JsonProperty("country") @Nullable JsonNullable<String> country,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.bankAccountType = bankAccountType;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
        this.targetAccountName = targetAccountName;
        this.targetAccountNumber = targetAccountNumber;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.feedStatus = feedStatus;
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
    }
    
    public BankFeedAccount(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * Type of the bank account.
     */
    public Optional<BankAccountType> bankAccountType() {
        return Optional.ofNullable(this.bankAccountType);
    }

    /**
     * The source account's unique identifier.
     */
    public Optional<String> sourceAccountId() {
        return Optional.ofNullable(this.sourceAccountId);
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public Optional<String> targetAccountId() {
        return Optional.ofNullable(this.targetAccountId);
    }

    /**
     * Name associated with the target account.
     */
    public Optional<String> targetAccountName() {
        return Optional.ofNullable(this.targetAccountName);
    }

    /**
     * Account number of the destination bank account.
     */
    public Optional<String> targetAccountNumber() {
        return Optional.ofNullable(this.targetAccountNumber);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Current status of the bank feed.
     */
    public Optional<FeedStatus> feedStatus() {
        return Optional.ofNullable(this.feedStatus);
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BankFeedAccount withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * Type of the bank account.
     */
    public BankFeedAccount withBankAccountType(@Nullable BankAccountType bankAccountType) {
        this.bankAccountType = bankAccountType;
        return this;
    }


    /**
     * The source account's unique identifier.
     */
    public BankFeedAccount withSourceAccountId(@Nullable String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
        return this;
    }


    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccount withTargetAccountId(@Nullable String targetAccountId) {
        this.targetAccountId = targetAccountId;
        return this;
    }


    /**
     * Name associated with the target account.
     */
    public BankFeedAccount withTargetAccountName(@Nullable String targetAccountName) {
        this.targetAccountName = targetAccountName;
        return this;
    }


    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccount withTargetAccountNumber(@Nullable String targetAccountNumber) {
        this.targetAccountNumber = targetAccountNumber;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccount withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Current status of the bank feed.
     */
    public BankFeedAccount withFeedStatus(@Nullable FeedStatus feedStatus) {
        this.feedStatus = feedStatus;
        return this;
    }


    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccount withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    public BankFeedAccount withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BankFeedAccount withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public BankFeedAccount withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public BankFeedAccount withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public BankFeedAccount withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public BankFeedAccount withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedAccount other = (BankFeedAccount) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.bankAccountType, other.bankAccountType) &&
            Utils.enhancedDeepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Utils.enhancedDeepEquals(this.targetAccountId, other.targetAccountId) &&
            Utils.enhancedDeepEquals(this.targetAccountName, other.targetAccountName) &&
            Utils.enhancedDeepEquals(this.targetAccountNumber, other.targetAccountNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.feedStatus, other.feedStatus) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, bankAccountType, sourceAccountId,
            targetAccountId, targetAccountName, targetAccountNumber,
            currency, feedStatus, country,
            customFields, customMappings, createdAt,
            updatedAt, updatedBy, createdBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedAccount.class,
                "id", id,
                "bankAccountType", bankAccountType,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId,
                "targetAccountName", targetAccountName,
                "targetAccountNumber", targetAccountNumber,
                "currency", currency,
                "feedStatus", feedStatus,
                "country", country,
                "customFields", customFields,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "createdBy", createdBy);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private BankAccountType bankAccountType;

        private String sourceAccountId;

        private String targetAccountId;

        private String targetAccountName;

        private String targetAccountNumber;

        private JsonNullable<Currency> currency;

        private FeedStatus feedStatus;

        private JsonNullable<String> country;

        private List<CustomField> customFields;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(@Nullable BankAccountType bankAccountType) {
            this.bankAccountType = bankAccountType;
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(@Nullable String sourceAccountId) {
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(@Nullable String targetAccountId) {
            this.targetAccountId = targetAccountId;
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(@Nullable String targetAccountName) {
            this.targetAccountName = targetAccountName;
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(@Nullable String targetAccountNumber) {
            this.targetAccountNumber = targetAccountNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(@Nullable FeedStatus feedStatus) {
            this.feedStatus = feedStatus;
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        public BankFeedAccount build() {
            return new BankFeedAccount(
                id, bankAccountType, sourceAccountId,
                targetAccountId, targetAccountName, targetAccountNumber,
                currency, feedStatus, country,
                customFields, customMappings, createdAt,
                updatedAt, updatedBy, createdBy);
        }

    }
}
