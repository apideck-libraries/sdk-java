/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class BankFeedAccountInput {

    /**
     * Type of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account_type")
    private Optional<? extends BankAccountType> bankAccountType;

    /**
     * The source account's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_account_id")
    private Optional<String> sourceAccountId;

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_id")
    private Optional<String> targetAccountId;

    /**
     * Name associated with the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_name")
    private Optional<String> targetAccountName;

    /**
     * Account number of the destination bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_number")
    private Optional<String> targetAccountNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Current status of the bank feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feed_status")
    private Optional<? extends FeedStatus> feedStatus;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    @JsonCreator
    public BankFeedAccountInput(
            @JsonProperty("bank_account_type") Optional<? extends BankAccountType> bankAccountType,
            @JsonProperty("source_account_id") Optional<String> sourceAccountId,
            @JsonProperty("target_account_id") Optional<String> targetAccountId,
            @JsonProperty("target_account_name") Optional<String> targetAccountName,
            @JsonProperty("target_account_number") Optional<String> targetAccountNumber,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("feed_status") Optional<? extends FeedStatus> feedStatus,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(feedStatus, "feedStatus");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(customFields, "customFields");
        this.bankAccountType = bankAccountType;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
        this.targetAccountName = targetAccountName;
        this.targetAccountNumber = targetAccountNumber;
        this.currency = currency;
        this.feedStatus = feedStatus;
        this.country = country;
        this.customFields = customFields;
    }
    
    public BankFeedAccountInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Type of the bank account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccountType> bankAccountType() {
        return (Optional<BankAccountType>) bankAccountType;
    }

    /**
     * The source account's unique identifier.
     */
    @JsonIgnore
    public Optional<String> sourceAccountId() {
        return sourceAccountId;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonIgnore
    public Optional<String> targetAccountId() {
        return targetAccountId;
    }

    /**
     * Name associated with the target account.
     */
    @JsonIgnore
    public Optional<String> targetAccountName() {
        return targetAccountName;
    }

    /**
     * Account number of the destination bank account.
     */
    @JsonIgnore
    public Optional<String> targetAccountNumber() {
        return targetAccountNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Current status of the bank feed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeedStatus> feedStatus() {
        return (Optional<FeedStatus>) feedStatus;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Type of the bank account.
     */
    public BankFeedAccountInput withBankAccountType(BankAccountType bankAccountType) {
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        this.bankAccountType = Optional.ofNullable(bankAccountType);
        return this;
    }

    /**
     * Type of the bank account.
     */
    public BankFeedAccountInput withBankAccountType(Optional<? extends BankAccountType> bankAccountType) {
        Utils.checkNotNull(bankAccountType, "bankAccountType");
        this.bankAccountType = bankAccountType;
        return this;
    }

    /**
     * The source account's unique identifier.
     */
    public BankFeedAccountInput withSourceAccountId(String sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = Optional.ofNullable(sourceAccountId);
        return this;
    }

    /**
     * The source account's unique identifier.
     */
    public BankFeedAccountInput withSourceAccountId(Optional<String> sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccountInput withTargetAccountId(String targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = Optional.ofNullable(targetAccountId);
        return this;
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccountInput withTargetAccountId(Optional<String> targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = targetAccountId;
        return this;
    }

    /**
     * Name associated with the target account.
     */
    public BankFeedAccountInput withTargetAccountName(String targetAccountName) {
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        this.targetAccountName = Optional.ofNullable(targetAccountName);
        return this;
    }

    /**
     * Name associated with the target account.
     */
    public BankFeedAccountInput withTargetAccountName(Optional<String> targetAccountName) {
        Utils.checkNotNull(targetAccountName, "targetAccountName");
        this.targetAccountName = targetAccountName;
        return this;
    }

    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccountInput withTargetAccountNumber(String targetAccountNumber) {
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        this.targetAccountNumber = Optional.ofNullable(targetAccountNumber);
        return this;
    }

    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccountInput withTargetAccountNumber(Optional<String> targetAccountNumber) {
        Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
        this.targetAccountNumber = targetAccountNumber;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccountInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccountInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Current status of the bank feed.
     */
    public BankFeedAccountInput withFeedStatus(FeedStatus feedStatus) {
        Utils.checkNotNull(feedStatus, "feedStatus");
        this.feedStatus = Optional.ofNullable(feedStatus);
        return this;
    }

    /**
     * Current status of the bank feed.
     */
    public BankFeedAccountInput withFeedStatus(Optional<? extends FeedStatus> feedStatus) {
        Utils.checkNotNull(feedStatus, "feedStatus");
        this.feedStatus = feedStatus;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccountInput withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccountInput withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public BankFeedAccountInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public BankFeedAccountInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedAccountInput other = (BankFeedAccountInput) o;
        return 
            Objects.deepEquals(this.bankAccountType, other.bankAccountType) &&
            Objects.deepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Objects.deepEquals(this.targetAccountId, other.targetAccountId) &&
            Objects.deepEquals(this.targetAccountName, other.targetAccountName) &&
            Objects.deepEquals(this.targetAccountNumber, other.targetAccountNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.feedStatus, other.feedStatus) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.customFields, other.customFields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankAccountType,
            sourceAccountId,
            targetAccountId,
            targetAccountName,
            targetAccountNumber,
            currency,
            feedStatus,
            country,
            customFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedAccountInput.class,
                "bankAccountType", bankAccountType,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId,
                "targetAccountName", targetAccountName,
                "targetAccountNumber", targetAccountNumber,
                "currency", currency,
                "feedStatus", feedStatus,
                "country", country,
                "customFields", customFields);
    }
    
    public final static class Builder {
 
        private Optional<? extends BankAccountType> bankAccountType = Optional.empty();
 
        private Optional<String> sourceAccountId = Optional.empty();
 
        private Optional<String> targetAccountId = Optional.empty();
 
        private Optional<String> targetAccountName = Optional.empty();
 
        private Optional<String> targetAccountNumber = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends FeedStatus> feedStatus = Optional.empty();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(BankAccountType bankAccountType) {
            Utils.checkNotNull(bankAccountType, "bankAccountType");
            this.bankAccountType = Optional.ofNullable(bankAccountType);
            return this;
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(Optional<? extends BankAccountType> bankAccountType) {
            Utils.checkNotNull(bankAccountType, "bankAccountType");
            this.bankAccountType = bankAccountType;
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(String sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = Optional.ofNullable(sourceAccountId);
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(Optional<String> sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(String targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = Optional.ofNullable(targetAccountId);
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(Optional<String> targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = targetAccountId;
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(String targetAccountName) {
            Utils.checkNotNull(targetAccountName, "targetAccountName");
            this.targetAccountName = Optional.ofNullable(targetAccountName);
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(Optional<String> targetAccountName) {
            Utils.checkNotNull(targetAccountName, "targetAccountName");
            this.targetAccountName = targetAccountName;
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(String targetAccountNumber) {
            Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
            this.targetAccountNumber = Optional.ofNullable(targetAccountNumber);
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(Optional<String> targetAccountNumber) {
            Utils.checkNotNull(targetAccountNumber, "targetAccountNumber");
            this.targetAccountNumber = targetAccountNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(FeedStatus feedStatus) {
            Utils.checkNotNull(feedStatus, "feedStatus");
            this.feedStatus = Optional.ofNullable(feedStatus);
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(Optional<? extends FeedStatus> feedStatus) {
            Utils.checkNotNull(feedStatus, "feedStatus");
            this.feedStatus = feedStatus;
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }
        
        public BankFeedAccountInput build() {
            return new BankFeedAccountInput(
                bankAccountType,
                sourceAccountId,
                targetAccountId,
                targetAccountName,
                targetAccountNumber,
                currency,
                feedStatus,
                country,
                customFields);
        }
    }
}
