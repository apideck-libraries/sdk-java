/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankFeedAccountInput {
    /**
     * Type of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account_type")
    private BankAccountType bankAccountType;

    /**
     * The source account's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_account_id")
    private String sourceAccountId;

    /**
     * The target account's unique identifier in the accounting connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_id")
    private String targetAccountId;

    /**
     * Name associated with the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_name")
    private String targetAccountName;

    /**
     * Account number of the destination bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_account_number")
    private String targetAccountNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Current status of the bank feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feed_status")
    private FeedStatus feedStatus;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    @JsonCreator
    public BankFeedAccountInput(
            @JsonProperty("bank_account_type") @Nullable BankAccountType bankAccountType,
            @JsonProperty("source_account_id") @Nullable String sourceAccountId,
            @JsonProperty("target_account_id") @Nullable String targetAccountId,
            @JsonProperty("target_account_name") @Nullable String targetAccountName,
            @JsonProperty("target_account_number") @Nullable String targetAccountNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("feed_status") @Nullable FeedStatus feedStatus,
            @JsonProperty("country") @Nullable JsonNullable<String> country,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields) {
        this.bankAccountType = bankAccountType;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
        this.targetAccountName = targetAccountName;
        this.targetAccountNumber = targetAccountNumber;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.feedStatus = feedStatus;
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
    }
    
    public BankFeedAccountInput() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * Type of the bank account.
     */
    public Optional<BankAccountType> bankAccountType() {
        return Optional.ofNullable(this.bankAccountType);
    }

    /**
     * The source account's unique identifier.
     */
    public Optional<String> sourceAccountId() {
        return Optional.ofNullable(this.sourceAccountId);
    }

    /**
     * The target account's unique identifier in the accounting connector.
     */
    public Optional<String> targetAccountId() {
        return Optional.ofNullable(this.targetAccountId);
    }

    /**
     * Name associated with the target account.
     */
    public Optional<String> targetAccountName() {
        return Optional.ofNullable(this.targetAccountName);
    }

    /**
     * Account number of the destination bank account.
     */
    public Optional<String> targetAccountNumber() {
        return Optional.ofNullable(this.targetAccountNumber);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Current status of the bank feed.
     */
    public Optional<FeedStatus> feedStatus() {
        return Optional.ofNullable(this.feedStatus);
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Type of the bank account.
     */
    public BankFeedAccountInput withBankAccountType(@Nullable BankAccountType bankAccountType) {
        this.bankAccountType = bankAccountType;
        return this;
    }


    /**
     * The source account's unique identifier.
     */
    public BankFeedAccountInput withSourceAccountId(@Nullable String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
        return this;
    }


    /**
     * The target account's unique identifier in the accounting connector.
     */
    public BankFeedAccountInput withTargetAccountId(@Nullable String targetAccountId) {
        this.targetAccountId = targetAccountId;
        return this;
    }


    /**
     * Name associated with the target account.
     */
    public BankFeedAccountInput withTargetAccountName(@Nullable String targetAccountName) {
        this.targetAccountName = targetAccountName;
        return this;
    }


    /**
     * Account number of the destination bank account.
     */
    public BankFeedAccountInput withTargetAccountNumber(@Nullable String targetAccountNumber) {
        this.targetAccountNumber = targetAccountNumber;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BankFeedAccountInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Current status of the bank feed.
     */
    public BankFeedAccountInput withFeedStatus(@Nullable FeedStatus feedStatus) {
        this.feedStatus = feedStatus;
        return this;
    }


    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public BankFeedAccountInput withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    public BankFeedAccountInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedAccountInput other = (BankFeedAccountInput) o;
        return 
            Utils.enhancedDeepEquals(this.bankAccountType, other.bankAccountType) &&
            Utils.enhancedDeepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Utils.enhancedDeepEquals(this.targetAccountId, other.targetAccountId) &&
            Utils.enhancedDeepEquals(this.targetAccountName, other.targetAccountName) &&
            Utils.enhancedDeepEquals(this.targetAccountNumber, other.targetAccountNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.feedStatus, other.feedStatus) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            bankAccountType, sourceAccountId, targetAccountId,
            targetAccountName, targetAccountNumber, currency,
            feedStatus, country, customFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedAccountInput.class,
                "bankAccountType", bankAccountType,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId,
                "targetAccountName", targetAccountName,
                "targetAccountNumber", targetAccountNumber,
                "currency", currency,
                "feedStatus", feedStatus,
                "country", country,
                "customFields", customFields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BankAccountType bankAccountType;

        private String sourceAccountId;

        private String targetAccountId;

        private String targetAccountName;

        private String targetAccountNumber;

        private JsonNullable<Currency> currency;

        private FeedStatus feedStatus;

        private JsonNullable<String> country;

        private List<CustomField> customFields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of the bank account.
         */
        public Builder bankAccountType(@Nullable BankAccountType bankAccountType) {
            this.bankAccountType = bankAccountType;
            return this;
        }

        /**
         * The source account's unique identifier.
         */
        public Builder sourceAccountId(@Nullable String sourceAccountId) {
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * The target account's unique identifier in the accounting connector.
         */
        public Builder targetAccountId(@Nullable String targetAccountId) {
            this.targetAccountId = targetAccountId;
            return this;
        }

        /**
         * Name associated with the target account.
         */
        public Builder targetAccountName(@Nullable String targetAccountName) {
            this.targetAccountName = targetAccountName;
            return this;
        }

        /**
         * Account number of the destination bank account.
         */
        public Builder targetAccountNumber(@Nullable String targetAccountNumber) {
            this.targetAccountNumber = targetAccountNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Current status of the bank feed.
         */
        public Builder feedStatus(@Nullable FeedStatus feedStatus) {
            this.feedStatus = feedStatus;
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public BankFeedAccountInput build() {
            return new BankFeedAccountInput(
                bankAccountType, sourceAccountId, targetAccountId,
                targetAccountName, targetAccountNumber, currency,
                feedStatus, country, customFields);
        }

    }
}
