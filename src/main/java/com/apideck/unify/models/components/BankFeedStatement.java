/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankFeedStatement {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_feed_account_id")
    private String bankFeedAccountId;

    /**
     * The current status of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private StatementStatus status;

    /**
     * Start date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * End date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private OffsetDateTime endDate;

    /**
     * Balance amount at the start of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance")
    private Double startBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance_credit_or_debit")
    private CreditOrDebit startBalanceCreditOrDebit;

    /**
     * Balance amount at the end of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance")
    private Double endBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance_credit_or_debit")
    private CreditOrDebit endBalanceCreditOrDebit;

    /**
     * List of transactions in the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private List<Transactions> transactions;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    @JsonCreator
    public BankFeedStatement(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("bank_feed_account_id") @Nullable String bankFeedAccountId,
            @JsonProperty("status") @Nullable StatementStatus status,
            @JsonProperty("start_date") @Nullable OffsetDateTime startDate,
            @JsonProperty("end_date") @Nullable OffsetDateTime endDate,
            @JsonProperty("start_balance") @Nullable Double startBalance,
            @JsonProperty("start_balance_credit_or_debit") @Nullable CreditOrDebit startBalanceCreditOrDebit,
            @JsonProperty("end_balance") @Nullable Double endBalance,
            @JsonProperty("end_balance_credit_or_debit") @Nullable CreditOrDebit endBalanceCreditOrDebit,
            @JsonProperty("transactions") @Nullable List<Transactions> transactions,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.bankFeedAccountId = bankFeedAccountId;
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.startBalance = startBalance;
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        this.endBalance = endBalance;
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        this.transactions = transactions;
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
    }
    
    public BankFeedStatement(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public Optional<String> bankFeedAccountId() {
        return Optional.ofNullable(this.bankFeedAccountId);
    }

    /**
     * The current status of the bank feed statement.
     */
    public Optional<StatementStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Start date of the bank feed statement.
     */
    public Optional<OffsetDateTime> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * End date of the bank feed statement.
     */
    public Optional<OffsetDateTime> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Balance amount at the start of the period.
     */
    public Optional<Double> startBalance() {
        return Optional.ofNullable(this.startBalance);
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public Optional<CreditOrDebit> startBalanceCreditOrDebit() {
        return Optional.ofNullable(this.startBalanceCreditOrDebit);
    }

    /**
     * Balance amount at the end of the period.
     */
    public Optional<Double> endBalance() {
        return Optional.ofNullable(this.endBalance);
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public Optional<CreditOrDebit> endBalanceCreditOrDebit() {
        return Optional.ofNullable(this.endBalanceCreditOrDebit);
    }

    /**
     * List of transactions in the bank feed statement.
     */
    public Optional<List<Transactions>> transactions() {
        return Optional.ofNullable(this.transactions);
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BankFeedStatement withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatement withBankFeedAccountId(@Nullable String bankFeedAccountId) {
        this.bankFeedAccountId = bankFeedAccountId;
        return this;
    }


    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatement withStatus(@Nullable StatementStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatement withStartDate(@Nullable OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }


    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatement withEndDate(@Nullable OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }


    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatement withStartBalance(@Nullable Double startBalance) {
        this.startBalance = startBalance;
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withStartBalanceCreditOrDebit(@Nullable CreditOrDebit startBalanceCreditOrDebit) {
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        return this;
    }


    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatement withEndBalance(@Nullable Double endBalance) {
        this.endBalance = endBalance;
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withEndBalanceCreditOrDebit(@Nullable CreditOrDebit endBalanceCreditOrDebit) {
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        return this;
    }


    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatement withTransactions(@Nullable List<Transactions> transactions) {
        this.transactions = transactions;
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public BankFeedStatement withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The user who created the object.
     */
    public BankFeedStatement withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public BankFeedStatement withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public BankFeedStatement withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedStatement other = (BankFeedStatement) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.bankFeedAccountId, other.bankFeedAccountId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.startBalance, other.startBalance) &&
            Utils.enhancedDeepEquals(this.startBalanceCreditOrDebit, other.startBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.endBalance, other.endBalance) &&
            Utils.enhancedDeepEquals(this.endBalanceCreditOrDebit, other.endBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.transactions, other.transactions) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, bankFeedAccountId, status,
            startDate, endDate, startBalance,
            startBalanceCreditOrDebit, endBalance, endBalanceCreditOrDebit,
            transactions, createdAt, createdBy,
            updatedAt, updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedStatement.class,
                "id", id,
                "bankFeedAccountId", bankFeedAccountId,
                "status", status,
                "startDate", startDate,
                "endDate", endDate,
                "startBalance", startBalance,
                "startBalanceCreditOrDebit", startBalanceCreditOrDebit,
                "endBalance", endBalance,
                "endBalanceCreditOrDebit", endBalanceCreditOrDebit,
                "transactions", transactions,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String bankFeedAccountId;

        private StatementStatus status;

        private OffsetDateTime startDate;

        private OffsetDateTime endDate;

        private Double startBalance;

        private CreditOrDebit startBalanceCreditOrDebit;

        private Double endBalance;

        private CreditOrDebit endBalanceCreditOrDebit;

        private List<Transactions> transactions;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<String> updatedBy;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(@Nullable String bankFeedAccountId) {
            this.bankFeedAccountId = bankFeedAccountId;
            return this;
        }

        /**
         * The current status of the bank feed statement.
         */
        public Builder status(@Nullable StatementStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(@Nullable OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(@Nullable OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(@Nullable Double startBalance) {
            this.startBalance = startBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(@Nullable CreditOrDebit startBalanceCreditOrDebit) {
            this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
            return this;
        }

        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(@Nullable Double endBalance) {
            this.endBalance = endBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(@Nullable CreditOrDebit endBalanceCreditOrDebit) {
            this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
            return this;
        }

        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(@Nullable List<Transactions> transactions) {
            this.transactions = transactions;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        public BankFeedStatement build() {
            return new BankFeedStatement(
                id, bankFeedAccountId, status,
                startDate, endDate, startBalance,
                startBalanceCreditOrDebit, endBalance, endBalanceCreditOrDebit,
                transactions, createdAt, createdBy,
                updatedAt, updatedBy);
        }

    }
}
