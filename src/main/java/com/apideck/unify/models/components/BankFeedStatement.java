/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankFeedStatement {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_feed_account_id")
    private Optional<String> bankFeedAccountId;

    /**
     * The current status of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends StatementStatus> status;

    /**
     * Start date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * End date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<OffsetDateTime> endDate;

    /**
     * Balance amount at the start of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance")
    private Optional<Double> startBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance_credit_or_debit")
    private Optional<? extends CreditOrDebit> startBalanceCreditOrDebit;

    /**
     * Balance amount at the end of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance")
    private Optional<Double> endBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance_credit_or_debit")
    private Optional<? extends CreditOrDebit> endBalanceCreditOrDebit;

    /**
     * List of transactions in the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends List<Transactions>> transactions;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    @JsonCreator
    public BankFeedStatement(
            @JsonProperty("id") String id,
            @JsonProperty("bank_feed_account_id") Optional<String> bankFeedAccountId,
            @JsonProperty("status") Optional<? extends StatementStatus> status,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("end_date") Optional<OffsetDateTime> endDate,
            @JsonProperty("start_balance") Optional<Double> startBalance,
            @JsonProperty("start_balance_credit_or_debit") Optional<? extends CreditOrDebit> startBalanceCreditOrDebit,
            @JsonProperty("end_balance") Optional<Double> endBalance,
            @JsonProperty("end_balance_credit_or_debit") Optional<? extends CreditOrDebit> endBalanceCreditOrDebit,
            @JsonProperty("transactions") Optional<? extends List<Transactions>> transactions,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(startBalance, "startBalance");
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        Utils.checkNotNull(endBalance, "endBalance");
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        Utils.checkNotNull(transactions, "transactions");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.id = id;
        this.bankFeedAccountId = bankFeedAccountId;
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.startBalance = startBalance;
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        this.endBalance = endBalance;
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        this.transactions = transactions;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }
    
    public BankFeedStatement(
            String id) {
        this(id, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonIgnore
    public Optional<String> bankFeedAccountId() {
        return bankFeedAccountId;
    }

    /**
     * The current status of the bank feed statement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StatementStatus> status() {
        return (Optional<StatementStatus>) status;
    }

    /**
     * Start date of the bank feed statement.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * End date of the bank feed statement.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * Balance amount at the start of the period.
     */
    @JsonIgnore
    public Optional<Double> startBalance() {
        return startBalance;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditOrDebit> startBalanceCreditOrDebit() {
        return (Optional<CreditOrDebit>) startBalanceCreditOrDebit;
    }

    /**
     * Balance amount at the end of the period.
     */
    @JsonIgnore
    public Optional<Double> endBalance() {
        return endBalance;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditOrDebit> endBalanceCreditOrDebit() {
        return (Optional<CreditOrDebit>) endBalanceCreditOrDebit;
    }

    /**
     * List of transactions in the bank feed statement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Transactions>> transactions() {
        return (Optional<List<Transactions>>) transactions;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BankFeedStatement withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatement withBankFeedAccountId(String bankFeedAccountId) {
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        this.bankFeedAccountId = Optional.ofNullable(bankFeedAccountId);
        return this;
    }


    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatement withBankFeedAccountId(Optional<String> bankFeedAccountId) {
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        this.bankFeedAccountId = bankFeedAccountId;
        return this;
    }

    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatement withStatus(StatementStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatement withStatus(Optional<? extends StatementStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatement withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatement withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatement withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }


    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatement withEndDate(Optional<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatement withStartBalance(double startBalance) {
        Utils.checkNotNull(startBalance, "startBalance");
        this.startBalance = Optional.ofNullable(startBalance);
        return this;
    }


    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatement withStartBalance(Optional<Double> startBalance) {
        Utils.checkNotNull(startBalance, "startBalance");
        this.startBalance = startBalance;
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withStartBalanceCreditOrDebit(CreditOrDebit startBalanceCreditOrDebit) {
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        this.startBalanceCreditOrDebit = Optional.ofNullable(startBalanceCreditOrDebit);
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withStartBalanceCreditOrDebit(Optional<? extends CreditOrDebit> startBalanceCreditOrDebit) {
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        return this;
    }

    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatement withEndBalance(double endBalance) {
        Utils.checkNotNull(endBalance, "endBalance");
        this.endBalance = Optional.ofNullable(endBalance);
        return this;
    }


    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatement withEndBalance(Optional<Double> endBalance) {
        Utils.checkNotNull(endBalance, "endBalance");
        this.endBalance = endBalance;
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withEndBalanceCreditOrDebit(CreditOrDebit endBalanceCreditOrDebit) {
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        this.endBalanceCreditOrDebit = Optional.ofNullable(endBalanceCreditOrDebit);
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatement withEndBalanceCreditOrDebit(Optional<? extends CreditOrDebit> endBalanceCreditOrDebit) {
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        return this;
    }

    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatement withTransactions(List<Transactions> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }


    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatement withTransactions(Optional<? extends List<Transactions>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BankFeedStatement withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BankFeedStatement withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The user who created the object.
     */
    public BankFeedStatement withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public BankFeedStatement withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BankFeedStatement withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BankFeedStatement withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BankFeedStatement withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BankFeedStatement withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedStatement other = (BankFeedStatement) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.bankFeedAccountId, other.bankFeedAccountId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.startBalance, other.startBalance) &&
            Utils.enhancedDeepEquals(this.startBalanceCreditOrDebit, other.startBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.endBalance, other.endBalance) &&
            Utils.enhancedDeepEquals(this.endBalanceCreditOrDebit, other.endBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.transactions, other.transactions) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, bankFeedAccountId, status,
            startDate, endDate, startBalance,
            startBalanceCreditOrDebit, endBalance, endBalanceCreditOrDebit,
            transactions, createdAt, createdBy,
            updatedAt, updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedStatement.class,
                "id", id,
                "bankFeedAccountId", bankFeedAccountId,
                "status", status,
                "startDate", startDate,
                "endDate", endDate,
                "startBalance", startBalance,
                "startBalanceCreditOrDebit", startBalanceCreditOrDebit,
                "endBalance", endBalance,
                "endBalanceCreditOrDebit", endBalanceCreditOrDebit,
                "transactions", transactions,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Optional<String> bankFeedAccountId = Optional.empty();

        private Optional<? extends StatementStatus> status = Optional.empty();

        private Optional<OffsetDateTime> startDate = Optional.empty();

        private Optional<OffsetDateTime> endDate = Optional.empty();

        private Optional<Double> startBalance = Optional.empty();

        private Optional<? extends CreditOrDebit> startBalanceCreditOrDebit = Optional.empty();

        private Optional<Double> endBalance = Optional.empty();

        private Optional<? extends CreditOrDebit> endBalanceCreditOrDebit = Optional.empty();

        private Optional<? extends List<Transactions>> transactions = Optional.empty();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private JsonNullable<String> createdBy = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private JsonNullable<String> updatedBy = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(String bankFeedAccountId) {
            Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
            this.bankFeedAccountId = Optional.ofNullable(bankFeedAccountId);
            return this;
        }

        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(Optional<String> bankFeedAccountId) {
            Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
            this.bankFeedAccountId = bankFeedAccountId;
            return this;
        }


        /**
         * The current status of the bank feed statement.
         */
        public Builder status(StatementStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current status of the bank feed statement.
         */
        public Builder status(Optional<? extends StatementStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(double startBalance) {
            Utils.checkNotNull(startBalance, "startBalance");
            this.startBalance = Optional.ofNullable(startBalance);
            return this;
        }

        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(Optional<Double> startBalance) {
            Utils.checkNotNull(startBalance, "startBalance");
            this.startBalance = startBalance;
            return this;
        }


        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(CreditOrDebit startBalanceCreditOrDebit) {
            Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
            this.startBalanceCreditOrDebit = Optional.ofNullable(startBalanceCreditOrDebit);
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(Optional<? extends CreditOrDebit> startBalanceCreditOrDebit) {
            Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
            this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
            return this;
        }


        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(double endBalance) {
            Utils.checkNotNull(endBalance, "endBalance");
            this.endBalance = Optional.ofNullable(endBalance);
            return this;
        }

        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(Optional<Double> endBalance) {
            Utils.checkNotNull(endBalance, "endBalance");
            this.endBalance = endBalance;
            return this;
        }


        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(CreditOrDebit endBalanceCreditOrDebit) {
            Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
            this.endBalanceCreditOrDebit = Optional.ofNullable(endBalanceCreditOrDebit);
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(Optional<? extends CreditOrDebit> endBalanceCreditOrDebit) {
            Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
            this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
            return this;
        }


        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(List<Transactions> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }

        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(Optional<? extends List<Transactions>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }


        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        public BankFeedStatement build() {

            return new BankFeedStatement(
                id, bankFeedAccountId, status,
                startDate, endDate, startBalance,
                startBalanceCreditOrDebit, endBalance, endBalanceCreditOrDebit,
                transactions, createdAt, createdBy,
                updatedAt, updatedBy);
        }

    }
}
