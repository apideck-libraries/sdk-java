/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class BankFeedStatementInput {

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_feed_account_id")
    private Optional<String> bankFeedAccountId;

    /**
     * The current status of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends StatementStatus> status;

    /**
     * Start date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * End date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<OffsetDateTime> endDate;

    /**
     * Balance amount at the start of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance")
    private Optional<Double> startBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance_credit_or_debit")
    private Optional<? extends CreditOrDebit> startBalanceCreditOrDebit;

    /**
     * Balance amount at the end of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance")
    private Optional<Double> endBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance_credit_or_debit")
    private Optional<? extends CreditOrDebit> endBalanceCreditOrDebit;

    /**
     * List of transactions in the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends List<Transactions>> transactions;

    @JsonCreator
    public BankFeedStatementInput(
            @JsonProperty("bank_feed_account_id") Optional<String> bankFeedAccountId,
            @JsonProperty("status") Optional<? extends StatementStatus> status,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("end_date") Optional<OffsetDateTime> endDate,
            @JsonProperty("start_balance") Optional<Double> startBalance,
            @JsonProperty("start_balance_credit_or_debit") Optional<? extends CreditOrDebit> startBalanceCreditOrDebit,
            @JsonProperty("end_balance") Optional<Double> endBalance,
            @JsonProperty("end_balance_credit_or_debit") Optional<? extends CreditOrDebit> endBalanceCreditOrDebit,
            @JsonProperty("transactions") Optional<? extends List<Transactions>> transactions) {
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(startBalance, "startBalance");
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        Utils.checkNotNull(endBalance, "endBalance");
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        Utils.checkNotNull(transactions, "transactions");
        this.bankFeedAccountId = bankFeedAccountId;
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.startBalance = startBalance;
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        this.endBalance = endBalance;
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        this.transactions = transactions;
    }
    
    public BankFeedStatementInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonIgnore
    public Optional<String> bankFeedAccountId() {
        return bankFeedAccountId;
    }

    /**
     * The current status of the bank feed statement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StatementStatus> status() {
        return (Optional<StatementStatus>) status;
    }

    /**
     * Start date of the bank feed statement.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * End date of the bank feed statement.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * Balance amount at the start of the period.
     */
    @JsonIgnore
    public Optional<Double> startBalance() {
        return startBalance;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditOrDebit> startBalanceCreditOrDebit() {
        return (Optional<CreditOrDebit>) startBalanceCreditOrDebit;
    }

    /**
     * Balance amount at the end of the period.
     */
    @JsonIgnore
    public Optional<Double> endBalance() {
        return endBalance;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditOrDebit> endBalanceCreditOrDebit() {
        return (Optional<CreditOrDebit>) endBalanceCreditOrDebit;
    }

    /**
     * List of transactions in the bank feed statement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Transactions>> transactions() {
        return (Optional<List<Transactions>>) transactions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatementInput withBankFeedAccountId(String bankFeedAccountId) {
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        this.bankFeedAccountId = Optional.ofNullable(bankFeedAccountId);
        return this;
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatementInput withBankFeedAccountId(Optional<String> bankFeedAccountId) {
        Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
        this.bankFeedAccountId = bankFeedAccountId;
        return this;
    }

    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatementInput withStatus(StatementStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatementInput withStatus(Optional<? extends StatementStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatementInput withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatementInput withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatementInput withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatementInput withEndDate(Optional<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatementInput withStartBalance(double startBalance) {
        Utils.checkNotNull(startBalance, "startBalance");
        this.startBalance = Optional.ofNullable(startBalance);
        return this;
    }

    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatementInput withStartBalance(Optional<Double> startBalance) {
        Utils.checkNotNull(startBalance, "startBalance");
        this.startBalance = startBalance;
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withStartBalanceCreditOrDebit(CreditOrDebit startBalanceCreditOrDebit) {
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        this.startBalanceCreditOrDebit = Optional.ofNullable(startBalanceCreditOrDebit);
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withStartBalanceCreditOrDebit(Optional<? extends CreditOrDebit> startBalanceCreditOrDebit) {
        Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        return this;
    }

    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatementInput withEndBalance(double endBalance) {
        Utils.checkNotNull(endBalance, "endBalance");
        this.endBalance = Optional.ofNullable(endBalance);
        return this;
    }

    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatementInput withEndBalance(Optional<Double> endBalance) {
        Utils.checkNotNull(endBalance, "endBalance");
        this.endBalance = endBalance;
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withEndBalanceCreditOrDebit(CreditOrDebit endBalanceCreditOrDebit) {
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        this.endBalanceCreditOrDebit = Optional.ofNullable(endBalanceCreditOrDebit);
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withEndBalanceCreditOrDebit(Optional<? extends CreditOrDebit> endBalanceCreditOrDebit) {
        Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        return this;
    }

    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatementInput withTransactions(List<Transactions> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }

    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatementInput withTransactions(Optional<? extends List<Transactions>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedStatementInput other = (BankFeedStatementInput) o;
        return 
            Objects.deepEquals(this.bankFeedAccountId, other.bankFeedAccountId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.startBalance, other.startBalance) &&
            Objects.deepEquals(this.startBalanceCreditOrDebit, other.startBalanceCreditOrDebit) &&
            Objects.deepEquals(this.endBalance, other.endBalance) &&
            Objects.deepEquals(this.endBalanceCreditOrDebit, other.endBalanceCreditOrDebit) &&
            Objects.deepEquals(this.transactions, other.transactions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankFeedAccountId,
            status,
            startDate,
            endDate,
            startBalance,
            startBalanceCreditOrDebit,
            endBalance,
            endBalanceCreditOrDebit,
            transactions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedStatementInput.class,
                "bankFeedAccountId", bankFeedAccountId,
                "status", status,
                "startDate", startDate,
                "endDate", endDate,
                "startBalance", startBalance,
                "startBalanceCreditOrDebit", startBalanceCreditOrDebit,
                "endBalance", endBalance,
                "endBalanceCreditOrDebit", endBalanceCreditOrDebit,
                "transactions", transactions);
    }
    
    public final static class Builder {
 
        private Optional<String> bankFeedAccountId = Optional.empty();
 
        private Optional<? extends StatementStatus> status = Optional.empty();
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private Optional<OffsetDateTime> endDate = Optional.empty();
 
        private Optional<Double> startBalance = Optional.empty();
 
        private Optional<? extends CreditOrDebit> startBalanceCreditOrDebit = Optional.empty();
 
        private Optional<Double> endBalance = Optional.empty();
 
        private Optional<? extends CreditOrDebit> endBalanceCreditOrDebit = Optional.empty();
 
        private Optional<? extends List<Transactions>> transactions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(String bankFeedAccountId) {
            Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
            this.bankFeedAccountId = Optional.ofNullable(bankFeedAccountId);
            return this;
        }

        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(Optional<String> bankFeedAccountId) {
            Utils.checkNotNull(bankFeedAccountId, "bankFeedAccountId");
            this.bankFeedAccountId = bankFeedAccountId;
            return this;
        }

        /**
         * The current status of the bank feed statement.
         */
        public Builder status(StatementStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current status of the bank feed statement.
         */
        public Builder status(Optional<? extends StatementStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(double startBalance) {
            Utils.checkNotNull(startBalance, "startBalance");
            this.startBalance = Optional.ofNullable(startBalance);
            return this;
        }

        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(Optional<Double> startBalance) {
            Utils.checkNotNull(startBalance, "startBalance");
            this.startBalance = startBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(CreditOrDebit startBalanceCreditOrDebit) {
            Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
            this.startBalanceCreditOrDebit = Optional.ofNullable(startBalanceCreditOrDebit);
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(Optional<? extends CreditOrDebit> startBalanceCreditOrDebit) {
            Utils.checkNotNull(startBalanceCreditOrDebit, "startBalanceCreditOrDebit");
            this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
            return this;
        }

        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(double endBalance) {
            Utils.checkNotNull(endBalance, "endBalance");
            this.endBalance = Optional.ofNullable(endBalance);
            return this;
        }

        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(Optional<Double> endBalance) {
            Utils.checkNotNull(endBalance, "endBalance");
            this.endBalance = endBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(CreditOrDebit endBalanceCreditOrDebit) {
            Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
            this.endBalanceCreditOrDebit = Optional.ofNullable(endBalanceCreditOrDebit);
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(Optional<? extends CreditOrDebit> endBalanceCreditOrDebit) {
            Utils.checkNotNull(endBalanceCreditOrDebit, "endBalanceCreditOrDebit");
            this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
            return this;
        }

        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(List<Transactions> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }

        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(Optional<? extends List<Transactions>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }
        
        public BankFeedStatementInput build() {
            return new BankFeedStatementInput(
                bankFeedAccountId,
                status,
                startDate,
                endDate,
                startBalance,
                startBalanceCreditOrDebit,
                endBalance,
                endBalanceCreditOrDebit,
                transactions);
        }
    }
}
