/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class BankFeedStatementInput {
    /**
     * The ID of the bank feed account this statement belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_feed_account_id")
    private String bankFeedAccountId;

    /**
     * The current status of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private StatementStatus status;

    /**
     * Start date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * End date of the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private OffsetDateTime endDate;

    /**
     * Balance amount at the start of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance")
    private Double startBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_balance_credit_or_debit")
    private CreditOrDebit startBalanceCreditOrDebit;

    /**
     * Balance amount at the end of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance")
    private Double endBalance;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_balance_credit_or_debit")
    private CreditOrDebit endBalanceCreditOrDebit;

    /**
     * List of transactions in the bank feed statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private List<Transactions> transactions;

    @JsonCreator
    public BankFeedStatementInput(
            @JsonProperty("bank_feed_account_id") @Nullable String bankFeedAccountId,
            @JsonProperty("status") @Nullable StatementStatus status,
            @JsonProperty("start_date") @Nullable OffsetDateTime startDate,
            @JsonProperty("end_date") @Nullable OffsetDateTime endDate,
            @JsonProperty("start_balance") @Nullable Double startBalance,
            @JsonProperty("start_balance_credit_or_debit") @Nullable CreditOrDebit startBalanceCreditOrDebit,
            @JsonProperty("end_balance") @Nullable Double endBalance,
            @JsonProperty("end_balance_credit_or_debit") @Nullable CreditOrDebit endBalanceCreditOrDebit,
            @JsonProperty("transactions") @Nullable List<Transactions> transactions) {
        this.bankFeedAccountId = bankFeedAccountId;
        this.status = status;
        this.startDate = startDate;
        this.endDate = endDate;
        this.startBalance = startBalance;
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        this.endBalance = endBalance;
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        this.transactions = transactions;
    }
    
    public BankFeedStatementInput() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public Optional<String> bankFeedAccountId() {
        return Optional.ofNullable(this.bankFeedAccountId);
    }

    /**
     * The current status of the bank feed statement.
     */
    public Optional<StatementStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Start date of the bank feed statement.
     */
    public Optional<OffsetDateTime> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * End date of the bank feed statement.
     */
    public Optional<OffsetDateTime> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Balance amount at the start of the period.
     */
    public Optional<Double> startBalance() {
        return Optional.ofNullable(this.startBalance);
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public Optional<CreditOrDebit> startBalanceCreditOrDebit() {
        return Optional.ofNullable(this.startBalanceCreditOrDebit);
    }

    /**
     * Balance amount at the end of the period.
     */
    public Optional<Double> endBalance() {
        return Optional.ofNullable(this.endBalance);
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public Optional<CreditOrDebit> endBalanceCreditOrDebit() {
        return Optional.ofNullable(this.endBalanceCreditOrDebit);
    }

    /**
     * List of transactions in the bank feed statement.
     */
    public Optional<List<Transactions>> transactions() {
        return Optional.ofNullable(this.transactions);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the bank feed account this statement belongs to.
     */
    public BankFeedStatementInput withBankFeedAccountId(@Nullable String bankFeedAccountId) {
        this.bankFeedAccountId = bankFeedAccountId;
        return this;
    }


    /**
     * The current status of the bank feed statement.
     */
    public BankFeedStatementInput withStatus(@Nullable StatementStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Start date of the bank feed statement.
     */
    public BankFeedStatementInput withStartDate(@Nullable OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }


    /**
     * End date of the bank feed statement.
     */
    public BankFeedStatementInput withEndDate(@Nullable OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }


    /**
     * Balance amount at the start of the period.
     */
    public BankFeedStatementInput withStartBalance(@Nullable Double startBalance) {
        this.startBalance = startBalance;
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withStartBalanceCreditOrDebit(@Nullable CreditOrDebit startBalanceCreditOrDebit) {
        this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
        return this;
    }


    /**
     * Balance amount at the end of the period.
     */
    public BankFeedStatementInput withEndBalance(@Nullable Double endBalance) {
        this.endBalance = endBalance;
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public BankFeedStatementInput withEndBalanceCreditOrDebit(@Nullable CreditOrDebit endBalanceCreditOrDebit) {
        this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
        return this;
    }


    /**
     * List of transactions in the bank feed statement.
     */
    public BankFeedStatementInput withTransactions(@Nullable List<Transactions> transactions) {
        this.transactions = transactions;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedStatementInput other = (BankFeedStatementInput) o;
        return 
            Utils.enhancedDeepEquals(this.bankFeedAccountId, other.bankFeedAccountId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.startBalance, other.startBalance) &&
            Utils.enhancedDeepEquals(this.startBalanceCreditOrDebit, other.startBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.endBalance, other.endBalance) &&
            Utils.enhancedDeepEquals(this.endBalanceCreditOrDebit, other.endBalanceCreditOrDebit) &&
            Utils.enhancedDeepEquals(this.transactions, other.transactions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            bankFeedAccountId, status, startDate,
            endDate, startBalance, startBalanceCreditOrDebit,
            endBalance, endBalanceCreditOrDebit, transactions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedStatementInput.class,
                "bankFeedAccountId", bankFeedAccountId,
                "status", status,
                "startDate", startDate,
                "endDate", endDate,
                "startBalance", startBalance,
                "startBalanceCreditOrDebit", startBalanceCreditOrDebit,
                "endBalance", endBalance,
                "endBalanceCreditOrDebit", endBalanceCreditOrDebit,
                "transactions", transactions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String bankFeedAccountId;

        private StatementStatus status;

        private OffsetDateTime startDate;

        private OffsetDateTime endDate;

        private Double startBalance;

        private CreditOrDebit startBalanceCreditOrDebit;

        private Double endBalance;

        private CreditOrDebit endBalanceCreditOrDebit;

        private List<Transactions> transactions;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the bank feed account this statement belongs to.
         */
        public Builder bankFeedAccountId(@Nullable String bankFeedAccountId) {
            this.bankFeedAccountId = bankFeedAccountId;
            return this;
        }

        /**
         * The current status of the bank feed statement.
         */
        public Builder status(@Nullable StatementStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Start date of the bank feed statement.
         */
        public Builder startDate(@Nullable OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * End date of the bank feed statement.
         */
        public Builder endDate(@Nullable OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Balance amount at the start of the period.
         */
        public Builder startBalance(@Nullable Double startBalance) {
            this.startBalance = startBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder startBalanceCreditOrDebit(@Nullable CreditOrDebit startBalanceCreditOrDebit) {
            this.startBalanceCreditOrDebit = startBalanceCreditOrDebit;
            return this;
        }

        /**
         * Balance amount at the end of the period.
         */
        public Builder endBalance(@Nullable Double endBalance) {
            this.endBalance = endBalance;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder endBalanceCreditOrDebit(@Nullable CreditOrDebit endBalanceCreditOrDebit) {
            this.endBalanceCreditOrDebit = endBalanceCreditOrDebit;
            return this;
        }

        /**
         * List of transactions in the bank feed statement.
         */
        public Builder transactions(@Nullable List<Transactions> transactions) {
            this.transactions = transactions;
            return this;
        }

        public BankFeedStatementInput build() {
            return new BankFeedStatementInput(
                bankFeedAccountId, status, startDate,
                endDate, startBalance, startBalanceCreditOrDebit,
                endBalance, endBalanceCreditOrDebit, transactions);
        }

    }
}
