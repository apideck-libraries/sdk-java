/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Benefit {
    /**
     * The name of the benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The amount deducted for benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction")
    private JsonNullable<Double> employeeDeduction;

    /**
     * The amount of employer contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer_contribution")
    private JsonNullable<Double> employerContribution;

    @JsonCreator
    public Benefit(
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("employee_deduction") @Nullable JsonNullable<Double> employeeDeduction,
            @JsonProperty("employer_contribution") @Nullable JsonNullable<Double> employerContribution) {
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.employeeDeduction = Optional.ofNullable(employeeDeduction)
            .orElse(JsonNullable.undefined());
        this.employerContribution = Optional.ofNullable(employerContribution)
            .orElse(JsonNullable.undefined());
    }
    
    public Benefit() {
        this(null, null, null);
    }

    /**
     * The name of the benefit.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The amount deducted for benefit.
     */
    public JsonNullable<Double> employeeDeduction() {
        return this.employeeDeduction;
    }

    /**
     * The amount of employer contribution.
     */
    public JsonNullable<Double> employerContribution() {
        return this.employerContribution;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the benefit.
     */
    public Benefit withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The amount deducted for benefit.
     */
    public Benefit withEmployeeDeduction(@Nullable Double employeeDeduction) {
        this.employeeDeduction = JsonNullable.of(employeeDeduction);
        return this;
    }


    /**
     * The amount of employer contribution.
     */
    public Benefit withEmployerContribution(@Nullable Double employerContribution) {
        this.employerContribution = JsonNullable.of(employerContribution);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Benefit other = (Benefit) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.employeeDeduction, other.employeeDeduction) &&
            Utils.enhancedDeepEquals(this.employerContribution, other.employerContribution);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, employeeDeduction, employerContribution);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Benefit.class,
                "name", name,
                "employeeDeduction", employeeDeduction,
                "employerContribution", employerContribution);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name;

        private JsonNullable<Double> employeeDeduction;

        private JsonNullable<Double> employerContribution;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the benefit.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The amount deducted for benefit.
         */
        public Builder employeeDeduction(@Nullable Double employeeDeduction) {
            this.employeeDeduction = JsonNullable.of(employeeDeduction);
            return this;
        }

        /**
         * The amount of employer contribution.
         */
        public Builder employerContribution(@Nullable Double employerContribution) {
            this.employerContribution = JsonNullable.of(employerContribution);
            return this;
        }

        public Benefit build() {
            return new Benefit(
                name, employeeDeduction, employerContribution);
        }

    }
}
