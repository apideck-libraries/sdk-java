/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Bill {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * Reference to supplier bill number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bill_number")
    private JsonNullable<String> billNumber;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<LinkedSupplier> supplier;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bill_date")
    private JsonNullable<LocalDate> billDate;

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<LocalDate> dueDate;

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid_date")
    private JsonNullable<LocalDate> paidDate;

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private List<BillLineItem> lineItems;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * Balance of bill due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * Amount of deposit made to this bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deposit")
    private JsonNullable<Double> deposit;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Total amount of bill, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    /**
     * Invoice status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<BillStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<LinkedLedgerAccount> ledgerAccount;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private BankAccount bankAccount;

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_document_url")
    private JsonNullable<String> sourceDocumentUrl;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    /**
     * Accounting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_period")
    private JsonNullable<String> accountingPeriod;

    @JsonCreator
    public Bill(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("downstream_id") @Nullable JsonNullable<String> downstreamId,
            @JsonProperty("bill_number") @Nullable JsonNullable<String> billNumber,
            @JsonProperty("supplier") @Nullable JsonNullable<LinkedSupplier> supplier,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") @Nullable JsonNullable<Boolean> taxInclusive,
            @JsonProperty("bill_date") @Nullable JsonNullable<LocalDate> billDate,
            @JsonProperty("due_date") @Nullable JsonNullable<LocalDate> dueDate,
            @JsonProperty("paid_date") @Nullable JsonNullable<LocalDate> paidDate,
            @JsonProperty("po_number") @Nullable JsonNullable<String> poNumber,
            @JsonProperty("reference") @Nullable JsonNullable<String> reference,
            @JsonProperty("line_items") @Nullable List<BillLineItem> lineItems,
            @JsonProperty("terms") @Nullable JsonNullable<String> terms,
            @JsonProperty("balance") @Nullable JsonNullable<Double> balance,
            @JsonProperty("deposit") @Nullable JsonNullable<Double> deposit,
            @JsonProperty("sub_total") @Nullable JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") @Nullable JsonNullable<Double> totalTax,
            @JsonProperty("total") @Nullable JsonNullable<Double> total,
            @JsonProperty("tax_code") @Nullable JsonNullable<String> taxCode,
            @JsonProperty("notes") @Nullable JsonNullable<String> notes,
            @JsonProperty("status") @Nullable JsonNullable<BillStatus> status,
            @JsonProperty("ledger_account") @Nullable JsonNullable<LinkedLedgerAccount> ledgerAccount,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("channel") @Nullable JsonNullable<String> channel,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("accounting_by_row") @Nullable JsonNullable<Boolean> accountingByRow,
            @JsonProperty("bank_account") @Nullable BankAccount bankAccount,
            @JsonProperty("discount_percentage") @Nullable JsonNullable<Double> discountPercentage,
            @JsonProperty("source_document_url") @Nullable JsonNullable<String> sourceDocumentUrl,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough,
            @JsonProperty("accounting_period") @Nullable JsonNullable<String> accountingPeriod) {
        this.id = id;
        this.downstreamId = Optional.ofNullable(downstreamId)
            .orElse(JsonNullable.undefined());
        this.billNumber = Optional.ofNullable(billNumber)
            .orElse(JsonNullable.undefined());
        this.supplier = Optional.ofNullable(supplier)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.taxInclusive = Optional.ofNullable(taxInclusive)
            .orElse(JsonNullable.undefined());
        this.billDate = Optional.ofNullable(billDate)
            .orElse(JsonNullable.undefined());
        this.dueDate = Optional.ofNullable(dueDate)
            .orElse(JsonNullable.undefined());
        this.paidDate = Optional.ofNullable(paidDate)
            .orElse(JsonNullable.undefined());
        this.poNumber = Optional.ofNullable(poNumber)
            .orElse(JsonNullable.undefined());
        this.reference = Optional.ofNullable(reference)
            .orElse(JsonNullable.undefined());
        this.lineItems = lineItems;
        this.terms = Optional.ofNullable(terms)
            .orElse(JsonNullable.undefined());
        this.balance = Optional.ofNullable(balance)
            .orElse(JsonNullable.undefined());
        this.deposit = Optional.ofNullable(deposit)
            .orElse(JsonNullable.undefined());
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.totalTax = Optional.ofNullable(totalTax)
            .orElse(JsonNullable.undefined());
        this.total = Optional.ofNullable(total)
            .orElse(JsonNullable.undefined());
        this.taxCode = Optional.ofNullable(taxCode)
            .orElse(JsonNullable.undefined());
        this.notes = Optional.ofNullable(notes)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.ledgerAccount = Optional.ofNullable(ledgerAccount)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.channel = Optional.ofNullable(channel)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.accountingByRow = Optional.ofNullable(accountingByRow)
            .orElse(JsonNullable.undefined());
        this.bankAccount = bankAccount;
        this.discountPercentage = Optional.ofNullable(discountPercentage)
            .orElse(JsonNullable.undefined());
        this.sourceDocumentUrl = Optional.ofNullable(sourceDocumentUrl)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
        this.accountingPeriod = Optional.ofNullable(accountingPeriod)
            .orElse(JsonNullable.undefined());
    }
    
    public Bill() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The third-party API ID of original entity
     */
    public JsonNullable<String> downstreamId() {
        return this.downstreamId;
    }

    /**
     * Reference to supplier bill number
     */
    public JsonNullable<String> billNumber() {
        return this.billNumber;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JsonNullable<LinkedSupplier> supplier() {
        return this.supplier;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * Amounts are including tax
     */
    public JsonNullable<Boolean> taxInclusive() {
        return this.taxInclusive;
    }

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> billDate() {
        return this.billDate;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> dueDate() {
        return this.dueDate;
    }

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> paidDate() {
        return this.paidDate;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public JsonNullable<String> poNumber() {
        return this.poNumber;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public JsonNullable<String> reference() {
        return this.reference;
    }

    public Optional<List<BillLineItem>> lineItems() {
        return Optional.ofNullable(this.lineItems);
    }

    /**
     * Terms of payment.
     */
    public JsonNullable<String> terms() {
        return this.terms;
    }

    /**
     * Balance of bill due.
     */
    public JsonNullable<Double> balance() {
        return this.balance;
    }

    /**
     * Amount of deposit made to this bill.
     */
    public JsonNullable<Double> deposit() {
        return this.deposit;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JsonNullable<Double> subTotal() {
        return this.subTotal;
    }

    /**
     * Total tax amount applied to this bill.
     */
    public JsonNullable<Double> totalTax() {
        return this.totalTax;
    }

    /**
     * Total amount of bill, including tax.
     */
    public JsonNullable<Double> total() {
        return this.total;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JsonNullable<String> taxCode() {
        return this.taxCode;
    }

    public JsonNullable<String> notes() {
        return this.notes;
    }

    /**
     * Invoice status
     */
    public JsonNullable<BillStatus> status() {
        return this.status;
    }

    public JsonNullable<LinkedLedgerAccount> ledgerAccount() {
        return this.ledgerAccount;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public JsonNullable<String> channel() {
        return this.channel;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public JsonNullable<Boolean> accountingByRow() {
        return this.accountingByRow;
    }

    public Optional<BankAccount> bankAccount() {
        return Optional.ofNullable(this.bankAccount);
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public JsonNullable<Double> discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public JsonNullable<String> sourceDocumentUrl() {
        return this.sourceDocumentUrl;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    /**
     * Accounting period
     */
    public JsonNullable<String> accountingPeriod() {
        return this.accountingPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Bill withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The third-party API ID of original entity
     */
    public Bill withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }


    /**
     * Reference to supplier bill number
     */
    public Bill withBillNumber(@Nullable String billNumber) {
        this.billNumber = JsonNullable.of(billNumber);
        return this;
    }


    /**
     * The supplier this entity is linked to.
     */
    public Bill withSupplier(@Nullable LinkedSupplier supplier) {
        this.supplier = JsonNullable.of(supplier);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public Bill withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Bill withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public Bill withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * Amounts are including tax
     */
    public Bill withTaxInclusive(@Nullable Boolean taxInclusive) {
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }


    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    public Bill withBillDate(@Nullable LocalDate billDate) {
        this.billDate = JsonNullable.of(billDate);
        return this;
    }


    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public Bill withDueDate(@Nullable LocalDate dueDate) {
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }


    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    public Bill withPaidDate(@Nullable LocalDate paidDate) {
        this.paidDate = JsonNullable.of(paidDate);
        return this;
    }


    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public Bill withPoNumber(@Nullable String poNumber) {
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }


    /**
     * Optional reference identifier for the transaction.
     */
    public Bill withReference(@Nullable String reference) {
        this.reference = JsonNullable.of(reference);
        return this;
    }


    public Bill withLineItems(@Nullable List<BillLineItem> lineItems) {
        this.lineItems = lineItems;
        return this;
    }


    /**
     * Terms of payment.
     */
    public Bill withTerms(@Nullable String terms) {
        this.terms = JsonNullable.of(terms);
        return this;
    }


    /**
     * Balance of bill due.
     */
    public Bill withBalance(@Nullable Double balance) {
        this.balance = JsonNullable.of(balance);
        return this;
    }


    /**
     * Amount of deposit made to this bill.
     */
    public Bill withDeposit(@Nullable Double deposit) {
        this.deposit = JsonNullable.of(deposit);
        return this;
    }


    /**
     * Sub-total amount, normally before tax.
     */
    public Bill withSubTotal(@Nullable Double subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * Total tax amount applied to this bill.
     */
    public Bill withTotalTax(@Nullable Double totalTax) {
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }


    /**
     * Total amount of bill, including tax.
     */
    public Bill withTotal(@Nullable Double total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public Bill withTaxCode(@Nullable String taxCode) {
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }


    public Bill withNotes(@Nullable String notes) {
        this.notes = JsonNullable.of(notes);
        return this;
    }


    /**
     * Invoice status
     */
    public Bill withStatus(@Nullable BillStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    public Bill withLedgerAccount(@Nullable LinkedLedgerAccount ledgerAccount) {
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }


    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public Bill withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * The channel through which the transaction is processed.
     */
    public Bill withChannel(@Nullable String channel) {
        this.channel = JsonNullable.of(channel);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Bill withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public Bill withAccountingByRow(@Nullable Boolean accountingByRow) {
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }


    public Bill withBankAccount(@Nullable BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }


    /**
     * Discount percentage applied to this transaction.
     */
    public Bill withDiscountPercentage(@Nullable Double discountPercentage) {
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }


    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public Bill withSourceDocumentUrl(@Nullable String sourceDocumentUrl) {
        this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public Bill withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Bill withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Bill withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Bill withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Bill withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Bill withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    public Bill withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Bill withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Bill withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    /**
     * Accounting period
     */
    public Bill withAccountingPeriod(@Nullable String accountingPeriod) {
        this.accountingPeriod = JsonNullable.of(accountingPeriod);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Bill other = (Bill) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.billNumber, other.billNumber) &&
            Utils.enhancedDeepEquals(this.supplier, other.supplier) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.billDate, other.billDate) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.paidDate, other.paidDate) &&
            Utils.enhancedDeepEquals(this.poNumber, other.poNumber) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.balance, other.balance) &&
            Utils.enhancedDeepEquals(this.deposit, other.deposit) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.accountingByRow, other.accountingByRow) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.sourceDocumentUrl, other.sourceDocumentUrl) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough) &&
            Utils.enhancedDeepEquals(this.accountingPeriod, other.accountingPeriod);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, downstreamId, billNumber,
            supplier, companyId, currency,
            currencyRate, taxInclusive, billDate,
            dueDate, paidDate, poNumber,
            reference, lineItems, terms,
            balance, deposit, subTotal,
            totalTax, total, taxCode,
            notes, status, ledgerAccount,
            paymentMethod, channel, language,
            accountingByRow, bankAccount, discountPercentage,
            sourceDocumentUrl, trackingCategories, updatedBy,
            createdBy, updatedAt, createdAt,
            rowVersion, customFields, customMappings,
            passThrough, accountingPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Bill.class,
                "id", id,
                "downstreamId", downstreamId,
                "billNumber", billNumber,
                "supplier", supplier,
                "companyId", companyId,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "billDate", billDate,
                "dueDate", dueDate,
                "paidDate", paidDate,
                "poNumber", poNumber,
                "reference", reference,
                "lineItems", lineItems,
                "terms", terms,
                "balance", balance,
                "deposit", deposit,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "total", total,
                "taxCode", taxCode,
                "notes", notes,
                "status", status,
                "ledgerAccount", ledgerAccount,
                "paymentMethod", paymentMethod,
                "channel", channel,
                "language", language,
                "accountingByRow", accountingByRow,
                "bankAccount", bankAccount,
                "discountPercentage", discountPercentage,
                "sourceDocumentUrl", sourceDocumentUrl,
                "trackingCategories", trackingCategories,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "rowVersion", rowVersion,
                "customFields", customFields,
                "customMappings", customMappings,
                "passThrough", passThrough,
                "accountingPeriod", accountingPeriod);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> downstreamId;

        private JsonNullable<String> billNumber;

        private JsonNullable<LinkedSupplier> supplier;

        private JsonNullable<String> companyId;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> currencyRate;

        private JsonNullable<Boolean> taxInclusive;

        private JsonNullable<LocalDate> billDate;

        private JsonNullable<LocalDate> dueDate;

        private JsonNullable<LocalDate> paidDate;

        private JsonNullable<String> poNumber;

        private JsonNullable<String> reference;

        private List<BillLineItem> lineItems;

        private JsonNullable<String> terms;

        private JsonNullable<Double> balance;

        private JsonNullable<Double> deposit;

        private JsonNullable<Double> subTotal;

        private JsonNullable<Double> totalTax;

        private JsonNullable<Double> total;

        private JsonNullable<String> taxCode;

        private JsonNullable<String> notes;

        private JsonNullable<BillStatus> status;

        private JsonNullable<LinkedLedgerAccount> ledgerAccount;

        private JsonNullable<String> paymentMethod;

        private JsonNullable<String> channel;

        private JsonNullable<String> language;

        private JsonNullable<Boolean> accountingByRow;

        private BankAccount bankAccount;

        private JsonNullable<Double> discountPercentage;

        private JsonNullable<String> sourceDocumentUrl;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<String> rowVersion;

        private List<CustomField> customFields;

        private JsonNullable<Map<String, Object>> customMappings;

        private List<PassThroughBody> passThrough;

        private JsonNullable<String> accountingPeriod;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * Reference to supplier bill number
         */
        public Builder billNumber(@Nullable String billNumber) {
            this.billNumber = JsonNullable.of(billNumber);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(@Nullable LinkedSupplier supplier) {
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(@Nullable Boolean taxInclusive) {
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Date bill was issued - YYYY-MM-DD.
         */
        public Builder billDate(@Nullable LocalDate billDate) {
            this.billDate = JsonNullable.of(billDate);
            return this;
        }

        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(@Nullable LocalDate dueDate) {
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
         */
        public Builder paidDate(@Nullable LocalDate paidDate) {
            this.paidDate = JsonNullable.of(paidDate);
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(@Nullable String poNumber) {
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = JsonNullable.of(reference);
            return this;
        }

        public Builder lineItems(@Nullable List<BillLineItem> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(@Nullable String terms) {
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Balance of bill due.
         */
        public Builder balance(@Nullable Double balance) {
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Amount of deposit made to this bill.
         */
        public Builder deposit(@Nullable Double deposit) {
            this.deposit = JsonNullable.of(deposit);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(@Nullable Double subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Total tax amount applied to this bill.
         */
        public Builder totalTax(@Nullable Double totalTax) {
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total amount of bill, including tax.
         */
        public Builder total(@Nullable Double total) {
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(@Nullable String taxCode) {
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        public Builder notes(@Nullable String notes) {
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * Invoice status
         */
        public Builder status(@Nullable BillStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder ledgerAccount(@Nullable LinkedLedgerAccount ledgerAccount) {
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(@Nullable String channel) {
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(@Nullable Boolean accountingByRow) {
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        public Builder bankAccount(@Nullable BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(@Nullable Double discountPercentage) {
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
         */
        public Builder sourceDocumentUrl(@Nullable String sourceDocumentUrl) {
            this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(@Nullable String accountingPeriod) {
            this.accountingPeriod = JsonNullable.of(accountingPeriod);
            return this;
        }

        public Bill build() {
            return new Bill(
                id, downstreamId, billNumber,
                supplier, companyId, currency,
                currencyRate, taxInclusive, billDate,
                dueDate, paidDate, poNumber,
                reference, lineItems, terms,
                balance, deposit, subTotal,
                totalTax, total, taxCode,
                notes, status, ledgerAccount,
                paymentMethod, channel, language,
                accountingByRow, bankAccount, discountPercentage,
                sourceDocumentUrl, trackingCategories, updatedBy,
                createdBy, updatedAt, createdAt,
                rowVersion, customFields, customMappings,
                passThrough, accountingPeriod);
        }

    }
}
