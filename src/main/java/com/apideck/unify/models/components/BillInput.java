/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillInput {

    /**
     * Reference to supplier bill number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bill_number")
    private JsonNullable<String> billNumber;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<? extends LinkedSupplierInput> supplier;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bill_date")
    private Optional<LocalDate> billDate;

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private Optional<LocalDate> dueDate;

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid_date")
    private JsonNullable<LocalDate> paidDate;

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional bill reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<BillLineItemInput>> lineItems;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * Balance of bill due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * Amount of deposit made to this bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deposit")
    private JsonNullable<Double> deposit;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Total amount of bill, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    /**
     * Invoice status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends BillStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private Optional<? extends BankAccount> bankAccount;

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    /**
     * Accounting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_period")
    private JsonNullable<String> accountingPeriod;

    @JsonCreator
    public BillInput(
            @JsonProperty("bill_number") JsonNullable<String> billNumber,
            @JsonProperty("supplier") JsonNullable<? extends LinkedSupplierInput> supplier,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") JsonNullable<Boolean> taxInclusive,
            @JsonProperty("bill_date") Optional<LocalDate> billDate,
            @JsonProperty("due_date") Optional<LocalDate> dueDate,
            @JsonProperty("paid_date") JsonNullable<LocalDate> paidDate,
            @JsonProperty("po_number") JsonNullable<String> poNumber,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("line_items") Optional<? extends List<BillLineItemInput>> lineItems,
            @JsonProperty("terms") JsonNullable<String> terms,
            @JsonProperty("balance") JsonNullable<Double> balance,
            @JsonProperty("deposit") JsonNullable<Double> deposit,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") JsonNullable<Double> totalTax,
            @JsonProperty("total") JsonNullable<Double> total,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("notes") JsonNullable<String> notes,
            @JsonProperty("status") JsonNullable<? extends BillStatus> status,
            @JsonProperty("ledger_account") JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("channel") JsonNullable<String> channel,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("accounting_by_row") JsonNullable<Boolean> accountingByRow,
            @JsonProperty("bank_account") Optional<? extends BankAccount> bankAccount,
            @JsonProperty("discount_percentage") JsonNullable<Double> discountPercentage,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough,
            @JsonProperty("accounting_period") JsonNullable<String> accountingPeriod) {
        Utils.checkNotNull(billNumber, "billNumber");
        Utils.checkNotNull(supplier, "supplier");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        Utils.checkNotNull(billDate, "billDate");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(paidDate, "paidDate");
        Utils.checkNotNull(poNumber, "poNumber");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(terms, "terms");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(deposit, "deposit");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(passThrough, "passThrough");
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        this.billNumber = billNumber;
        this.supplier = supplier;
        this.companyId = companyId;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.taxInclusive = taxInclusive;
        this.billDate = billDate;
        this.dueDate = dueDate;
        this.paidDate = paidDate;
        this.poNumber = poNumber;
        this.reference = reference;
        this.lineItems = lineItems;
        this.terms = terms;
        this.balance = balance;
        this.deposit = deposit;
        this.subTotal = subTotal;
        this.totalTax = totalTax;
        this.total = total;
        this.taxCode = taxCode;
        this.notes = notes;
        this.status = status;
        this.ledgerAccount = ledgerAccount;
        this.paymentMethod = paymentMethod;
        this.channel = channel;
        this.language = language;
        this.accountingByRow = accountingByRow;
        this.bankAccount = bankAccount;
        this.discountPercentage = discountPercentage;
        this.trackingCategories = trackingCategories;
        this.rowVersion = rowVersion;
        this.customFields = customFields;
        this.passThrough = passThrough;
        this.accountingPeriod = accountingPeriod;
    }
    
    public BillInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Reference to supplier bill number
     */
    @JsonIgnore
    public JsonNullable<String> billNumber() {
        return billNumber;
    }

    /**
     * The supplier this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedSupplierInput> supplier() {
        return (JsonNullable<LinkedSupplierInput>) supplier;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Amounts are including tax
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxInclusive() {
        return taxInclusive;
    }

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<LocalDate> billDate() {
        return billDate;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<LocalDate> dueDate() {
        return dueDate;
    }

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> paidDate() {
        return paidDate;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonIgnore
    public JsonNullable<String> poNumber() {
        return poNumber;
    }

    /**
     * Optional bill reference.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BillLineItemInput>> lineItems() {
        return (Optional<List<BillLineItemInput>>) lineItems;
    }

    /**
     * Terms of payment.
     */
    @JsonIgnore
    public JsonNullable<String> terms() {
        return terms;
    }

    /**
     * Balance of bill due.
     */
    @JsonIgnore
    public JsonNullable<Double> balance() {
        return balance;
    }

    /**
     * Amount of deposit made to this bill.
     */
    @JsonIgnore
    public JsonNullable<Double> deposit() {
        return deposit;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Total tax amount applied to this bill.
     */
    @JsonIgnore
    public JsonNullable<Double> totalTax() {
        return totalTax;
    }

    /**
     * Total amount of bill, including tax.
     */
    @JsonIgnore
    public JsonNullable<Double> total() {
        return total;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    @JsonIgnore
    public JsonNullable<String> notes() {
        return notes;
    }

    /**
     * Invoice status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BillStatus> status() {
        return (JsonNullable<BillStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) ledgerAccount;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The channel through which the transaction is processed.
     */
    @JsonIgnore
    public JsonNullable<String> channel() {
        return channel;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonIgnore
    public JsonNullable<Boolean> accountingByRow() {
        return accountingByRow;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccount> bankAccount() {
        return (Optional<BankAccount>) bankAccount;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonIgnore
    public JsonNullable<Double> discountPercentage() {
        return discountPercentage;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    /**
     * Accounting period
     */
    @JsonIgnore
    public JsonNullable<String> accountingPeriod() {
        return accountingPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to supplier bill number
     */
    public BillInput withBillNumber(String billNumber) {
        Utils.checkNotNull(billNumber, "billNumber");
        this.billNumber = JsonNullable.of(billNumber);
        return this;
    }

    /**
     * Reference to supplier bill number
     */
    public BillInput withBillNumber(JsonNullable<String> billNumber) {
        Utils.checkNotNull(billNumber, "billNumber");
        this.billNumber = billNumber;
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public BillInput withSupplier(LinkedSupplierInput supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = JsonNullable.of(supplier);
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public BillInput withSupplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = supplier;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public BillInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public BillInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BillInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BillInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public BillInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public BillInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Amounts are including tax
     */
    public BillInput withTaxInclusive(boolean taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }

    /**
     * Amounts are including tax
     */
    public BillInput withTaxInclusive(JsonNullable<Boolean> taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = taxInclusive;
        return this;
    }

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    public BillInput withBillDate(LocalDate billDate) {
        Utils.checkNotNull(billDate, "billDate");
        this.billDate = Optional.ofNullable(billDate);
        return this;
    }

    /**
     * Date bill was issued - YYYY-MM-DD.
     */
    public BillInput withBillDate(Optional<LocalDate> billDate) {
        Utils.checkNotNull(billDate, "billDate");
        this.billDate = billDate;
        return this;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public BillInput withDueDate(LocalDate dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = Optional.ofNullable(dueDate);
        return this;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public BillInput withDueDate(Optional<LocalDate> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    public BillInput withPaidDate(LocalDate paidDate) {
        Utils.checkNotNull(paidDate, "paidDate");
        this.paidDate = JsonNullable.of(paidDate);
        return this;
    }

    /**
     * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
     */
    public BillInput withPaidDate(JsonNullable<LocalDate> paidDate) {
        Utils.checkNotNull(paidDate, "paidDate");
        this.paidDate = paidDate;
        return this;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public BillInput withPoNumber(String poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public BillInput withPoNumber(JsonNullable<String> poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Optional bill reference.
     */
    public BillInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional bill reference.
     */
    public BillInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public BillInput withLineItems(List<BillLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    public BillInput withLineItems(Optional<? extends List<BillLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    /**
     * Terms of payment.
     */
    public BillInput withTerms(String terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = JsonNullable.of(terms);
        return this;
    }

    /**
     * Terms of payment.
     */
    public BillInput withTerms(JsonNullable<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    /**
     * Balance of bill due.
     */
    public BillInput withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * Balance of bill due.
     */
    public BillInput withBalance(JsonNullable<Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Amount of deposit made to this bill.
     */
    public BillInput withDeposit(double deposit) {
        Utils.checkNotNull(deposit, "deposit");
        this.deposit = JsonNullable.of(deposit);
        return this;
    }

    /**
     * Amount of deposit made to this bill.
     */
    public BillInput withDeposit(JsonNullable<Double> deposit) {
        Utils.checkNotNull(deposit, "deposit");
        this.deposit = deposit;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public BillInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public BillInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Total tax amount applied to this bill.
     */
    public BillInput withTotalTax(double totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax amount applied to this bill.
     */
    public BillInput withTotalTax(JsonNullable<Double> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Total amount of bill, including tax.
     */
    public BillInput withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = JsonNullable.of(total);
        return this;
    }

    /**
     * Total amount of bill, including tax.
     */
    public BillInput withTotal(JsonNullable<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public BillInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public BillInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    public BillInput withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    public BillInput withNotes(JsonNullable<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * Invoice status
     */
    public BillInput withStatus(BillStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Invoice status
     */
    public BillInput withStatus(JsonNullable<? extends BillStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public BillInput withLedgerAccount(LinkedLedgerAccountInput ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }

    public BillInput withLedgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = ledgerAccount;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public BillInput withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public BillInput withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public BillInput withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = JsonNullable.of(channel);
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public BillInput withChannel(JsonNullable<String> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public BillInput withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public BillInput withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public BillInput withAccountingByRow(boolean accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public BillInput withAccountingByRow(JsonNullable<Boolean> accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = accountingByRow;
        return this;
    }

    public BillInput withBankAccount(BankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }

    public BillInput withBankAccount(Optional<? extends BankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public BillInput withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public BillInput withDiscountPercentage(JsonNullable<Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public BillInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public BillInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    public BillInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public BillInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public BillInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public BillInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    /**
     * Accounting period
     */
    public BillInput withAccountingPeriod(String accountingPeriod) {
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        this.accountingPeriod = JsonNullable.of(accountingPeriod);
        return this;
    }

    /**
     * Accounting period
     */
    public BillInput withAccountingPeriod(JsonNullable<String> accountingPeriod) {
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        this.accountingPeriod = accountingPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillInput other = (BillInput) o;
        return 
            Objects.deepEquals(this.billNumber, other.billNumber) &&
            Objects.deepEquals(this.supplier, other.supplier) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.taxInclusive, other.taxInclusive) &&
            Objects.deepEquals(this.billDate, other.billDate) &&
            Objects.deepEquals(this.dueDate, other.dueDate) &&
            Objects.deepEquals(this.paidDate, other.paidDate) &&
            Objects.deepEquals(this.poNumber, other.poNumber) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.terms, other.terms) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.deposit, other.deposit) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.total, other.total) &&
            Objects.deepEquals(this.taxCode, other.taxCode) &&
            Objects.deepEquals(this.notes, other.notes) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.channel, other.channel) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.accountingByRow, other.accountingByRow) &&
            Objects.deepEquals(this.bankAccount, other.bankAccount) &&
            Objects.deepEquals(this.discountPercentage, other.discountPercentage) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.passThrough, other.passThrough) &&
            Objects.deepEquals(this.accountingPeriod, other.accountingPeriod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            billNumber,
            supplier,
            companyId,
            currency,
            currencyRate,
            taxInclusive,
            billDate,
            dueDate,
            paidDate,
            poNumber,
            reference,
            lineItems,
            terms,
            balance,
            deposit,
            subTotal,
            totalTax,
            total,
            taxCode,
            notes,
            status,
            ledgerAccount,
            paymentMethod,
            channel,
            language,
            accountingByRow,
            bankAccount,
            discountPercentage,
            trackingCategories,
            rowVersion,
            customFields,
            passThrough,
            accountingPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillInput.class,
                "billNumber", billNumber,
                "supplier", supplier,
                "companyId", companyId,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "billDate", billDate,
                "dueDate", dueDate,
                "paidDate", paidDate,
                "poNumber", poNumber,
                "reference", reference,
                "lineItems", lineItems,
                "terms", terms,
                "balance", balance,
                "deposit", deposit,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "total", total,
                "taxCode", taxCode,
                "notes", notes,
                "status", status,
                "ledgerAccount", ledgerAccount,
                "paymentMethod", paymentMethod,
                "channel", channel,
                "language", language,
                "accountingByRow", accountingByRow,
                "bankAccount", bankAccount,
                "discountPercentage", discountPercentage,
                "trackingCategories", trackingCategories,
                "rowVersion", rowVersion,
                "customFields", customFields,
                "passThrough", passThrough,
                "accountingPeriod", accountingPeriod);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> billNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedSupplierInput> supplier = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Double> currencyRate = JsonNullable.undefined();
 
        private JsonNullable<Boolean> taxInclusive = JsonNullable.undefined();
 
        private Optional<LocalDate> billDate = Optional.empty();
 
        private Optional<LocalDate> dueDate = Optional.empty();
 
        private JsonNullable<LocalDate> paidDate = JsonNullable.undefined();
 
        private JsonNullable<String> poNumber = JsonNullable.undefined();
 
        private JsonNullable<String> reference = JsonNullable.undefined();
 
        private Optional<? extends List<BillLineItemInput>> lineItems = Optional.empty();
 
        private JsonNullable<String> terms = JsonNullable.undefined();
 
        private JsonNullable<Double> balance = JsonNullable.undefined();
 
        private JsonNullable<Double> deposit = JsonNullable.undefined();
 
        private JsonNullable<Double> subTotal = JsonNullable.undefined();
 
        private JsonNullable<Double> totalTax = JsonNullable.undefined();
 
        private JsonNullable<Double> total = JsonNullable.undefined();
 
        private JsonNullable<String> taxCode = JsonNullable.undefined();
 
        private JsonNullable<String> notes = JsonNullable.undefined();
 
        private JsonNullable<? extends BillStatus> status = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethod = JsonNullable.undefined();
 
        private JsonNullable<String> channel = JsonNullable.undefined();
 
        private JsonNullable<String> language = JsonNullable.undefined();
 
        private JsonNullable<Boolean> accountingByRow = JsonNullable.undefined();
 
        private Optional<? extends BankAccount> bankAccount = Optional.empty();
 
        private JsonNullable<Double> discountPercentage = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();
 
        private JsonNullable<String> accountingPeriod = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to supplier bill number
         */
        public Builder billNumber(String billNumber) {
            Utils.checkNotNull(billNumber, "billNumber");
            this.billNumber = JsonNullable.of(billNumber);
            return this;
        }

        /**
         * Reference to supplier bill number
         */
        public Builder billNumber(JsonNullable<String> billNumber) {
            Utils.checkNotNull(billNumber, "billNumber");
            this.billNumber = billNumber;
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(LinkedSupplierInput supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = supplier;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(boolean taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(JsonNullable<Boolean> taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = taxInclusive;
            return this;
        }

        /**
         * Date bill was issued - YYYY-MM-DD.
         */
        public Builder billDate(LocalDate billDate) {
            Utils.checkNotNull(billDate, "billDate");
            this.billDate = Optional.ofNullable(billDate);
            return this;
        }

        /**
         * Date bill was issued - YYYY-MM-DD.
         */
        public Builder billDate(Optional<LocalDate> billDate) {
            Utils.checkNotNull(billDate, "billDate");
            this.billDate = billDate;
            return this;
        }

        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(LocalDate dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(Optional<LocalDate> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }

        /**
         * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
         */
        public Builder paidDate(LocalDate paidDate) {
            Utils.checkNotNull(paidDate, "paidDate");
            this.paidDate = JsonNullable.of(paidDate);
            return this;
        }

        /**
         * The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
         */
        public Builder paidDate(JsonNullable<LocalDate> paidDate) {
            Utils.checkNotNull(paidDate, "paidDate");
            this.paidDate = paidDate;
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(String poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(JsonNullable<String> poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = poNumber;
            return this;
        }

        /**
         * Optional bill reference.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional bill reference.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder lineItems(List<BillLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<BillLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(String terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(JsonNullable<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }

        /**
         * Balance of bill due.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Balance of bill due.
         */
        public Builder balance(JsonNullable<Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Amount of deposit made to this bill.
         */
        public Builder deposit(double deposit) {
            Utils.checkNotNull(deposit, "deposit");
            this.deposit = JsonNullable.of(deposit);
            return this;
        }

        /**
         * Amount of deposit made to this bill.
         */
        public Builder deposit(JsonNullable<Double> deposit) {
            Utils.checkNotNull(deposit, "deposit");
            this.deposit = deposit;
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Total tax amount applied to this bill.
         */
        public Builder totalTax(double totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax amount applied to this bill.
         */
        public Builder totalTax(JsonNullable<Double> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        /**
         * Total amount of bill, including tax.
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Total amount of bill, including tax.
         */
        public Builder total(JsonNullable<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }

        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        public Builder notes(JsonNullable<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        /**
         * Invoice status
         */
        public Builder status(BillStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Invoice status
         */
        public Builder status(JsonNullable<? extends BillStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder ledgerAccount(LinkedLedgerAccountInput ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        public Builder ledgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = ledgerAccount;
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(JsonNullable<String> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(boolean accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(JsonNullable<Boolean> accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = accountingByRow;
            return this;
        }

        public Builder bankAccount(BankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        public Builder bankAccount(Optional<? extends BankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(JsonNullable<Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(String accountingPeriod) {
            Utils.checkNotNull(accountingPeriod, "accountingPeriod");
            this.accountingPeriod = JsonNullable.of(accountingPeriod);
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(JsonNullable<String> accountingPeriod) {
            Utils.checkNotNull(accountingPeriod, "accountingPeriod");
            this.accountingPeriod = accountingPeriod;
            return this;
        }
        
        public BillInput build() {
            return new BillInput(
                billNumber,
                supplier,
                companyId,
                currency,
                currencyRate,
                taxInclusive,
                billDate,
                dueDate,
                paidDate,
                poNumber,
                reference,
                lineItems,
                terms,
                balance,
                deposit,
                subTotal,
                totalTax,
                total,
                taxCode,
                notes,
                status,
                ledgerAccount,
                paymentMethod,
                channel,
                language,
                accountingByRow,
                bankAccount,
                discountPercentage,
                trackingCategories,
                rowVersion,
                customFields,
                passThrough,
                accountingPeriod);
        }
    }
}

