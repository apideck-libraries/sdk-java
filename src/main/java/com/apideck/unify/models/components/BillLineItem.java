/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillLineItem {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Row ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_id")
    private String rowId;

    /**
     * User defined item code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Line number in the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    /**
     * User defined description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Bill Line Item type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<BillLineItemType> type;

    /**
     * Tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Double> taxAmount;

    /**
     * Total amount of the line item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Double> quantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_of_measure")
    private JsonNullable<String> unitOfMeasure;

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Double> discountAmount;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item")
    private LinkedInvoiceItem item;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRate taxRate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<LinkedLedgerAccount> ledgerAccount;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public BillLineItem(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("row_id") @Nullable String rowId,
            @JsonProperty("code") @Nullable JsonNullable<String> code,
            @JsonProperty("line_number") @Nullable JsonNullable<Long> lineNumber,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("type") @Nullable JsonNullable<BillLineItemType> type,
            @JsonProperty("tax_amount") @Nullable JsonNullable<Double> taxAmount,
            @JsonProperty("total_amount") @Nullable JsonNullable<Double> totalAmount,
            @JsonProperty("quantity") @Nullable JsonNullable<Double> quantity,
            @JsonProperty("unit_price") @Nullable JsonNullable<Double> unitPrice,
            @JsonProperty("unit_of_measure") @Nullable JsonNullable<String> unitOfMeasure,
            @JsonProperty("discount_percentage") @Nullable JsonNullable<Double> discountPercentage,
            @JsonProperty("discount_amount") @Nullable JsonNullable<Double> discountAmount,
            @JsonProperty("location_id") @Nullable JsonNullable<String> locationId,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("item") @Nullable LinkedInvoiceItem item,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRate taxRate,
            @JsonProperty("ledger_account") @Nullable JsonNullable<LinkedLedgerAccount> ledgerAccount,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt) {
        this.id = id;
        this.rowId = rowId;
        this.code = Optional.ofNullable(code)
            .orElse(JsonNullable.undefined());
        this.lineNumber = Optional.ofNullable(lineNumber)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.taxAmount = Optional.ofNullable(taxAmount)
            .orElse(JsonNullable.undefined());
        this.totalAmount = Optional.ofNullable(totalAmount)
            .orElse(JsonNullable.undefined());
        this.quantity = Optional.ofNullable(quantity)
            .orElse(JsonNullable.undefined());
        this.unitPrice = Optional.ofNullable(unitPrice)
            .orElse(JsonNullable.undefined());
        this.unitOfMeasure = Optional.ofNullable(unitOfMeasure)
            .orElse(JsonNullable.undefined());
        this.discountPercentage = Optional.ofNullable(discountPercentage)
            .orElse(JsonNullable.undefined());
        this.discountAmount = Optional.ofNullable(discountAmount)
            .orElse(JsonNullable.undefined());
        this.locationId = Optional.ofNullable(locationId)
            .orElse(JsonNullable.undefined());
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.item = item;
        this.taxRate = taxRate;
        this.ledgerAccount = Optional.ofNullable(ledgerAccount)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
    }
    
    public BillLineItem() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Row ID
     */
    public Optional<String> rowId() {
        return Optional.ofNullable(this.rowId);
    }

    /**
     * User defined item code
     */
    public JsonNullable<String> code() {
        return this.code;
    }

    /**
     * Line number in the invoice
     */
    public JsonNullable<Long> lineNumber() {
        return this.lineNumber;
    }

    /**
     * User defined description
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Bill Line Item type
     */
    public JsonNullable<BillLineItemType> type() {
        return this.type;
    }

    /**
     * Tax amount
     */
    public JsonNullable<Double> taxAmount() {
        return this.taxAmount;
    }

    /**
     * Total amount of the line item
     */
    public JsonNullable<Double> totalAmount() {
        return this.totalAmount;
    }

    public JsonNullable<Double> quantity() {
        return this.quantity;
    }

    public JsonNullable<Double> unitPrice() {
        return this.unitPrice;
    }

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public JsonNullable<String> unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    public JsonNullable<Double> discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    public JsonNullable<Double> discountAmount() {
        return this.discountAmount;
    }

    /**
     * The ID of the location
     */
    public JsonNullable<String> locationId() {
        return this.locationId;
    }

    /**
     * The ID of the department
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    public Optional<LinkedInvoiceItem> item() {
        return Optional.ofNullable(this.item);
    }

    public Optional<LinkedTaxRate> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    public JsonNullable<LinkedLedgerAccount> ledgerAccount() {
        return this.ledgerAccount;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BillLineItem withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Row ID
     */
    public BillLineItem withRowId(@Nullable String rowId) {
        this.rowId = rowId;
        return this;
    }


    /**
     * User defined item code
     */
    public BillLineItem withCode(@Nullable String code) {
        this.code = JsonNullable.of(code);
        return this;
    }


    /**
     * Line number in the invoice
     */
    public BillLineItem withLineNumber(@Nullable Long lineNumber) {
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }


    /**
     * User defined description
     */
    public BillLineItem withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Bill Line Item type
     */
    public BillLineItem withType(@Nullable BillLineItemType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * Tax amount
     */
    public BillLineItem withTaxAmount(@Nullable Double taxAmount) {
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }


    /**
     * Total amount of the line item
     */
    public BillLineItem withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    public BillLineItem withQuantity(@Nullable Double quantity) {
        this.quantity = JsonNullable.of(quantity);
        return this;
    }


    public BillLineItem withUnitPrice(@Nullable Double unitPrice) {
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }


    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public BillLineItem withUnitOfMeasure(@Nullable String unitOfMeasure) {
        this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
        return this;
    }


    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    public BillLineItem withDiscountPercentage(@Nullable Double discountPercentage) {
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }


    /**
     * Discount amount applied to the line item when supported downstream.
     */
    public BillLineItem withDiscountAmount(@Nullable Double discountAmount) {
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }


    /**
     * The ID of the location
     */
    public BillLineItem withLocationId(@Nullable String locationId) {
        this.locationId = JsonNullable.of(locationId);
        return this;
    }


    /**
     * The ID of the department
     */
    public BillLineItem withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    public BillLineItem withItem(@Nullable LinkedInvoiceItem item) {
        this.item = item;
        return this;
    }


    public BillLineItem withTaxRate(@Nullable LinkedTaxRate taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    public BillLineItem withLedgerAccount(@Nullable LinkedLedgerAccount ledgerAccount) {
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public BillLineItem withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillLineItem withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public BillLineItem withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public BillLineItem withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public BillLineItem withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public BillLineItem withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillLineItem other = (BillLineItem) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.rowId, other.rowId) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.unitOfMeasure, other.unitOfMeasure) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.item, other.item) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, rowId, code,
            lineNumber, description, type,
            taxAmount, totalAmount, quantity,
            unitPrice, unitOfMeasure, discountPercentage,
            discountAmount, locationId, departmentId,
            item, taxRate, ledgerAccount,
            trackingCategories, rowVersion, updatedBy,
            createdBy, createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillLineItem.class,
                "id", id,
                "rowId", rowId,
                "code", code,
                "lineNumber", lineNumber,
                "description", description,
                "type", type,
                "taxAmount", taxAmount,
                "totalAmount", totalAmount,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "unitOfMeasure", unitOfMeasure,
                "discountPercentage", discountPercentage,
                "discountAmount", discountAmount,
                "locationId", locationId,
                "departmentId", departmentId,
                "item", item,
                "taxRate", taxRate,
                "ledgerAccount", ledgerAccount,
                "trackingCategories", trackingCategories,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String rowId;

        private JsonNullable<String> code;

        private JsonNullable<Long> lineNumber;

        private JsonNullable<String> description;

        private JsonNullable<BillLineItemType> type;

        private JsonNullable<Double> taxAmount;

        private JsonNullable<Double> totalAmount;

        private JsonNullable<Double> quantity;

        private JsonNullable<Double> unitPrice;

        private JsonNullable<String> unitOfMeasure;

        private JsonNullable<Double> discountPercentage;

        private JsonNullable<Double> discountAmount;

        private JsonNullable<String> locationId;

        private JsonNullable<String> departmentId;

        private LinkedInvoiceItem item;

        private LinkedTaxRate taxRate;

        private JsonNullable<LinkedLedgerAccount> ledgerAccount;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private JsonNullable<String> rowVersion;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Row ID
         */
        public Builder rowId(@Nullable String rowId) {
            this.rowId = rowId;
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(@Nullable String code) {
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * Line number in the invoice
         */
        public Builder lineNumber(@Nullable Long lineNumber) {
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * User defined description
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Bill Line Item type
         */
        public Builder type(@Nullable BillLineItemType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Tax amount
         */
        public Builder taxAmount(@Nullable Double taxAmount) {
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Total amount of the line item
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        public Builder quantity(@Nullable Double quantity) {
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder unitPrice(@Nullable Double unitPrice) {
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        /**
         * Description of the unit type the item is sold as, ie: kg, hour.
         */
        public Builder unitOfMeasure(@Nullable String unitOfMeasure) {
            this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * Discount percentage applied to the line item when supported downstream.
         */
        public Builder discountPercentage(@Nullable Double discountPercentage) {
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount amount applied to the line item when supported downstream.
         */
        public Builder discountAmount(@Nullable Double discountAmount) {
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(@Nullable String locationId) {
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        public Builder item(@Nullable LinkedInvoiceItem item) {
            this.item = item;
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRate taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        public Builder ledgerAccount(@Nullable LinkedLedgerAccount ledgerAccount) {
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        public BillLineItem build() {
            return new BillLineItem(
                id, rowId, code,
                lineNumber, description, type,
                taxAmount, totalAmount, quantity,
                unitPrice, unitOfMeasure, discountPercentage,
                discountAmount, locationId, departmentId,
                item, taxRate, ledgerAccount,
                trackingCategories, rowVersion, updatedBy,
                createdBy, createdAt, updatedAt);
        }

    }
}
