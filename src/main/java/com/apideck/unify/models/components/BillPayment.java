/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class BillPayment {

    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * The total amount of the transaction or record
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_reference")
    private JsonNullable<String> paymentMethodReference;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_id")
    private JsonNullable<String> paymentMethodId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<? extends LinkedLedgerAccount> account;

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("transaction_date")
    private Optional<OffsetDateTime> transactionDate;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<? extends LinkedSupplier> supplier;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates if the transaction has been reconciled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciled")
    private JsonNullable<Boolean> reconciled;

    /**
     * Status of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PaymentStatus> status;

    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends BillPaymentType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    private Optional<? extends List<Allocations>> allocations;

    /**
     * Note associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * Number associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * Id to be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public BillPayment(
            @JsonProperty("id") String id,
            @JsonProperty("downstream_id") JsonNullable<String> downstreamId,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("payment_method_reference") JsonNullable<String> paymentMethodReference,
            @JsonProperty("payment_method_id") JsonNullable<String> paymentMethodId,
            @JsonProperty("account") JsonNullable<? extends LinkedLedgerAccount> account,
            @JsonProperty("transaction_date") Optional<OffsetDateTime> transactionDate,
            @JsonProperty("supplier") JsonNullable<? extends LinkedSupplier> supplier,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("reconciled") JsonNullable<Boolean> reconciled,
            @JsonProperty("status") Optional<? extends PaymentStatus> status,
            @JsonProperty("type") Optional<? extends BillPaymentType> type,
            @JsonProperty("allocations") Optional<? extends List<Allocations>> allocations,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("display_id") JsonNullable<String> displayId,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(downstreamId, "downstreamId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(transactionDate, "transactionDate");
        Utils.checkNotNull(supplier, "supplier");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(reconciled, "reconciled");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(allocations, "allocations");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.downstreamId = downstreamId;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.totalAmount = totalAmount;
        this.reference = reference;
        this.paymentMethod = paymentMethod;
        this.paymentMethodReference = paymentMethodReference;
        this.paymentMethodId = paymentMethodId;
        this.account = account;
        this.transactionDate = transactionDate;
        this.supplier = supplier;
        this.companyId = companyId;
        this.reconciled = reconciled;
        this.status = status;
        this.type = type;
        this.allocations = allocations;
        this.note = note;
        this.number = number;
        this.trackingCategories = trackingCategories;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.displayId = displayId;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.passThrough = passThrough;
    }
    
    public BillPayment(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The third-party API ID of original entity
     */
    @JsonIgnore
    public JsonNullable<String> downstreamId() {
        return downstreamId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * The total amount of the transaction or record
     */
    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodReference() {
        return paymentMethodReference;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodId() {
        return paymentMethodId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> account() {
        return (JsonNullable<LinkedLedgerAccount>) account;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonIgnore
    public Optional<OffsetDateTime> transactionDate() {
        return transactionDate;
    }

    /**
     * The supplier this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedSupplier> supplier() {
        return (JsonNullable<LinkedSupplier>) supplier;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reconciled() {
        return reconciled;
    }

    /**
     * Status of payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentStatus> status() {
        return (Optional<PaymentStatus>) status;
    }

    /**
     * Type of payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillPaymentType> type() {
        return (Optional<BillPaymentType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Allocations>> allocations() {
        return (Optional<List<Allocations>>) allocations;
    }

    /**
     * Note associated with the transaction
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * Number associated with the transaction
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * Id to be displayed.
     */
    @JsonIgnore
    public JsonNullable<String> displayId() {
        return displayId;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for an object.
     */
    public BillPayment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The third-party API ID of original entity
     */
    public BillPayment withDownstreamId(String downstreamId) {
        Utils.checkNotNull(downstreamId, "downstreamId");
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }

    /**
     * The third-party API ID of original entity
     */
    public BillPayment withDownstreamId(JsonNullable<String> downstreamId) {
        Utils.checkNotNull(downstreamId, "downstreamId");
        this.downstreamId = downstreamId;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BillPayment withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BillPayment withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public BillPayment withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public BillPayment withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * The total amount of the transaction or record
     */
    public BillPayment withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * The total amount of the transaction or record
     */
    public BillPayment withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public BillPayment withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public BillPayment withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public BillPayment withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public BillPayment withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    public BillPayment withPaymentMethodReference(String paymentMethodReference) {
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
        return this;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    public BillPayment withPaymentMethodReference(JsonNullable<String> paymentMethodReference) {
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        this.paymentMethodReference = paymentMethodReference;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public BillPayment withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = JsonNullable.of(paymentMethodId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public BillPayment withPaymentMethodId(JsonNullable<String> paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public BillPayment withAccount(LinkedLedgerAccount account) {
        Utils.checkNotNull(account, "account");
        this.account = JsonNullable.of(account);
        return this;
    }

    public BillPayment withAccount(JsonNullable<? extends LinkedLedgerAccount> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public BillPayment withTransactionDate(OffsetDateTime transactionDate) {
        Utils.checkNotNull(transactionDate, "transactionDate");
        this.transactionDate = Optional.ofNullable(transactionDate);
        return this;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public BillPayment withTransactionDate(Optional<OffsetDateTime> transactionDate) {
        Utils.checkNotNull(transactionDate, "transactionDate");
        this.transactionDate = transactionDate;
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public BillPayment withSupplier(LinkedSupplier supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = JsonNullable.of(supplier);
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public BillPayment withSupplier(JsonNullable<? extends LinkedSupplier> supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = supplier;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public BillPayment withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public BillPayment withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    public BillPayment withReconciled(boolean reconciled) {
        Utils.checkNotNull(reconciled, "reconciled");
        this.reconciled = JsonNullable.of(reconciled);
        return this;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    public BillPayment withReconciled(JsonNullable<Boolean> reconciled) {
        Utils.checkNotNull(reconciled, "reconciled");
        this.reconciled = reconciled;
        return this;
    }

    /**
     * Status of payment
     */
    public BillPayment withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of payment
     */
    public BillPayment withStatus(Optional<? extends PaymentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Type of payment
     */
    public BillPayment withType(BillPaymentType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of payment
     */
    public BillPayment withType(Optional<? extends BillPaymentType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public BillPayment withAllocations(List<Allocations> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = Optional.ofNullable(allocations);
        return this;
    }

    public BillPayment withAllocations(Optional<? extends List<Allocations>> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = allocations;
        return this;
    }

    /**
     * Note associated with the transaction
     */
    public BillPayment withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Note associated with the transaction
     */
    public BillPayment withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * Number associated with the transaction
     */
    public BillPayment withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Number associated with the transaction
     */
    public BillPayment withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public BillPayment withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public BillPayment withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public BillPayment withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public BillPayment withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillPayment withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillPayment withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * Id to be displayed.
     */
    public BillPayment withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = JsonNullable.of(displayId);
        return this;
    }

    /**
     * Id to be displayed.
     */
    public BillPayment withDisplayId(JsonNullable<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BillPayment withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BillPayment withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BillPayment withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public BillPayment withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public BillPayment withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public BillPayment withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BillPayment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public BillPayment withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BillPayment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public BillPayment withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public BillPayment withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public BillPayment withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillPayment other = (BillPayment) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.downstreamId, other.downstreamId) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.paymentMethodReference, other.paymentMethodReference) &&
            Objects.deepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.transactionDate, other.transactionDate) &&
            Objects.deepEquals(this.supplier, other.supplier) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.reconciled, other.reconciled) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.allocations, other.allocations) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.displayId, other.displayId) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            downstreamId,
            currency,
            currencyRate,
            totalAmount,
            reference,
            paymentMethod,
            paymentMethodReference,
            paymentMethodId,
            account,
            transactionDate,
            supplier,
            companyId,
            reconciled,
            status,
            type,
            allocations,
            note,
            number,
            trackingCategories,
            customFields,
            rowVersion,
            displayId,
            customMappings,
            updatedBy,
            createdBy,
            createdAt,
            updatedAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillPayment.class,
                "id", id,
                "downstreamId", downstreamId,
                "currency", currency,
                "currencyRate", currencyRate,
                "totalAmount", totalAmount,
                "reference", reference,
                "paymentMethod", paymentMethod,
                "paymentMethodReference", paymentMethodReference,
                "paymentMethodId", paymentMethodId,
                "account", account,
                "transactionDate", transactionDate,
                "supplier", supplier,
                "companyId", companyId,
                "reconciled", reconciled,
                "status", status,
                "type", type,
                "allocations", allocations,
                "note", note,
                "number", number,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "displayId", displayId,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> downstreamId = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Double> currencyRate = JsonNullable.undefined();
 
        private Optional<Double> totalAmount = Optional.empty();
 
        private JsonNullable<String> reference = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethod = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethodReference = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethodId = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccount> account = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> transactionDate = Optional.empty();
 
        private JsonNullable<? extends LinkedSupplier> supplier = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<Boolean> reconciled = JsonNullable.undefined();
 
        private Optional<? extends PaymentStatus> status = Optional.empty();
 
        private Optional<? extends BillPaymentType> type = Optional.empty();
 
        private Optional<? extends List<Allocations>> allocations = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private JsonNullable<String> displayId = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(String downstreamId) {
            Utils.checkNotNull(downstreamId, "downstreamId");
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(JsonNullable<String> downstreamId) {
            Utils.checkNotNull(downstreamId, "downstreamId");
            this.downstreamId = downstreamId;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Optional transaction reference message ie: Debit remittance detail.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional transaction reference message ie: Debit remittance detail.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * Optional reference message returned by payment method on processing
         */
        public Builder paymentMethodReference(String paymentMethodReference) {
            Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
            this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
            return this;
        }

        /**
         * Optional reference message returned by payment method on processing
         */
        public Builder paymentMethodReference(JsonNullable<String> paymentMethodReference) {
            Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
            this.paymentMethodReference = paymentMethodReference;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = JsonNullable.of(paymentMethodId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder paymentMethodId(JsonNullable<String> paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        public Builder account(LinkedLedgerAccount account) {
            Utils.checkNotNull(account, "account");
            this.account = JsonNullable.of(account);
            return this;
        }

        public Builder account(JsonNullable<? extends LinkedLedgerAccount> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(OffsetDateTime transactionDate) {
            Utils.checkNotNull(transactionDate, "transactionDate");
            this.transactionDate = Optional.ofNullable(transactionDate);
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(Optional<OffsetDateTime> transactionDate) {
            Utils.checkNotNull(transactionDate, "transactionDate");
            this.transactionDate = transactionDate;
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(LinkedSupplier supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(JsonNullable<? extends LinkedSupplier> supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = supplier;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Indicates if the transaction has been reconciled.
         */
        public Builder reconciled(boolean reconciled) {
            Utils.checkNotNull(reconciled, "reconciled");
            this.reconciled = JsonNullable.of(reconciled);
            return this;
        }

        /**
         * Indicates if the transaction has been reconciled.
         */
        public Builder reconciled(JsonNullable<Boolean> reconciled) {
            Utils.checkNotNull(reconciled, "reconciled");
            this.reconciled = reconciled;
            return this;
        }

        /**
         * Status of payment
         */
        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of payment
         */
        public Builder status(Optional<? extends PaymentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(BillPaymentType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(Optional<? extends BillPaymentType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder allocations(List<Allocations> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = Optional.ofNullable(allocations);
            return this;
        }

        public Builder allocations(Optional<? extends List<Allocations>> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = allocations;
            return this;
        }

        /**
         * Note associated with the transaction
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Note associated with the transaction
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * Number associated with the transaction
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Number associated with the transaction
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * Id to be displayed.
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * Id to be displayed.
         */
        public Builder displayId(JsonNullable<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public BillPayment build() {
            return new BillPayment(
                id,
                downstreamId,
                currency,
                currencyRate,
                totalAmount,
                reference,
                paymentMethod,
                paymentMethodReference,
                paymentMethodId,
                account,
                transactionDate,
                supplier,
                companyId,
                reconciled,
                status,
                type,
                allocations,
                note,
                number,
                trackingCategories,
                customFields,
                rowVersion,
                displayId,
                customMappings,
                updatedBy,
                createdBy,
                createdAt,
                updatedAt,
                passThrough);
        }
    }
}
