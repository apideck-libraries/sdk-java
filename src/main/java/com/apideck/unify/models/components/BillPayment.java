/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillPayment {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * The total amount of the transaction or record
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_reference")
    private JsonNullable<String> paymentMethodReference;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_id")
    private JsonNullable<String> paymentMethodId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<LinkedLedgerAccount> account;

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("transaction_date")
    private JsonNullable<OffsetDateTime> transactionDate;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<LinkedSupplier> supplier;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates if the transaction has been reconciled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciled")
    private JsonNullable<Boolean> reconciled;

    /**
     * Status of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private PaymentStatus status;

    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private BillPaymentType type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    private List<Allocations> allocations;

    /**
     * Note associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * Number associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * Id to be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public BillPayment(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("downstream_id") @Nullable JsonNullable<String> downstreamId,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("total_amount") @Nullable Double totalAmount,
            @JsonProperty("reference") @Nullable JsonNullable<String> reference,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("payment_method_reference") @Nullable JsonNullable<String> paymentMethodReference,
            @JsonProperty("payment_method_id") @Nullable JsonNullable<String> paymentMethodId,
            @JsonProperty("account") @Nullable JsonNullable<LinkedLedgerAccount> account,
            @JsonProperty("transaction_date") @Nullable OffsetDateTime transactionDate,
            @JsonProperty("supplier") @Nullable JsonNullable<LinkedSupplier> supplier,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("reconciled") @Nullable JsonNullable<Boolean> reconciled,
            @JsonProperty("status") @Nullable PaymentStatus status,
            @JsonProperty("type") @Nullable BillPaymentType type,
            @JsonProperty("allocations") @Nullable List<Allocations> allocations,
            @JsonProperty("note") @Nullable JsonNullable<String> note,
            @JsonProperty("number") @Nullable JsonNullable<String> number,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("display_id") @Nullable JsonNullable<String> displayId,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.downstreamId = Optional.ofNullable(downstreamId)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.totalAmount = JsonNullable.of(totalAmount);
        this.reference = Optional.ofNullable(reference)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.paymentMethodReference = Optional.ofNullable(paymentMethodReference)
            .orElse(JsonNullable.undefined());
        this.paymentMethodId = Optional.ofNullable(paymentMethodId)
            .orElse(JsonNullable.undefined());
        this.account = Optional.ofNullable(account)
            .orElse(JsonNullable.undefined());
        this.transactionDate = JsonNullable.of(transactionDate);
        this.supplier = Optional.ofNullable(supplier)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.reconciled = Optional.ofNullable(reconciled)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.type = type;
        this.allocations = allocations;
        this.note = Optional.ofNullable(note)
            .orElse(JsonNullable.undefined());
        this.number = Optional.ofNullable(number)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.displayId = Optional.ofNullable(displayId)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public BillPayment(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The third-party API ID of original entity
     */
    public JsonNullable<String> downstreamId() {
        return this.downstreamId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * The total amount of the transaction or record
     */
    public JsonNullable<Double> totalAmount() {
        return this.totalAmount;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public JsonNullable<String> reference() {
        return this.reference;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    public JsonNullable<String> paymentMethodReference() {
        return this.paymentMethodReference;
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> paymentMethodId() {
        return this.paymentMethodId;
    }

    public JsonNullable<LinkedLedgerAccount> account() {
        return this.account;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public JsonNullable<OffsetDateTime> transactionDate() {
        return this.transactionDate;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JsonNullable<LinkedSupplier> supplier() {
        return this.supplier;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    public JsonNullable<Boolean> reconciled() {
        return this.reconciled;
    }

    /**
     * Status of payment
     */
    public Optional<PaymentStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Type of payment
     */
    public Optional<BillPaymentType> type() {
        return Optional.ofNullable(this.type);
    }

    public Optional<List<Allocations>> allocations() {
        return Optional.ofNullable(this.allocations);
    }

    /**
     * Note associated with the transaction
     */
    public JsonNullable<String> note() {
        return this.note;
    }

    /**
     * Number associated with the transaction
     */
    public JsonNullable<String> number() {
        return this.number;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * Id to be displayed.
     */
    public JsonNullable<String> displayId() {
        return this.displayId;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BillPayment withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The third-party API ID of original entity
     */
    public BillPayment withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public BillPayment withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public BillPayment withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * The total amount of the transaction or record
     */
    public BillPayment withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public BillPayment withReference(@Nullable String reference) {
        this.reference = JsonNullable.of(reference);
        return this;
    }


    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public BillPayment withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * Optional reference message returned by payment method on processing
     */
    public BillPayment withPaymentMethodReference(@Nullable String paymentMethodReference) {
        this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
        return this;
    }


    /**
     * A unique identifier for an object.
     */
    public BillPayment withPaymentMethodId(@Nullable String paymentMethodId) {
        this.paymentMethodId = JsonNullable.of(paymentMethodId);
        return this;
    }


    public BillPayment withAccount(@Nullable LinkedLedgerAccount account) {
        this.account = JsonNullable.of(account);
        return this;
    }


    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public BillPayment withTransactionDate(@Nullable OffsetDateTime transactionDate) {
        this.transactionDate = JsonNullable.of(transactionDate);
        return this;
    }


    /**
     * The supplier this entity is linked to.
     */
    public BillPayment withSupplier(@Nullable LinkedSupplier supplier) {
        this.supplier = JsonNullable.of(supplier);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public BillPayment withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Indicates if the transaction has been reconciled.
     */
    public BillPayment withReconciled(@Nullable Boolean reconciled) {
        this.reconciled = JsonNullable.of(reconciled);
        return this;
    }


    /**
     * Status of payment
     */
    public BillPayment withStatus(@Nullable PaymentStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Type of payment
     */
    public BillPayment withType(@Nullable BillPaymentType type) {
        this.type = type;
        return this;
    }


    public BillPayment withAllocations(@Nullable List<Allocations> allocations) {
        this.allocations = allocations;
        return this;
    }


    /**
     * Note associated with the transaction
     */
    public BillPayment withNote(@Nullable String note) {
        this.note = JsonNullable.of(note);
        return this;
    }


    /**
     * Number associated with the transaction
     */
    public BillPayment withNumber(@Nullable String number) {
        this.number = JsonNullable.of(number);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public BillPayment withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    public BillPayment withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public BillPayment withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * Id to be displayed.
     */
    public BillPayment withDisplayId(@Nullable String displayId) {
        this.displayId = JsonNullable.of(displayId);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public BillPayment withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public BillPayment withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public BillPayment withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public BillPayment withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public BillPayment withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public BillPayment withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillPayment other = (BillPayment) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.paymentMethodReference, other.paymentMethodReference) &&
            Utils.enhancedDeepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Utils.enhancedDeepEquals(this.account, other.account) &&
            Utils.enhancedDeepEquals(this.transactionDate, other.transactionDate) &&
            Utils.enhancedDeepEquals(this.supplier, other.supplier) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.reconciled, other.reconciled) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.allocations, other.allocations) &&
            Utils.enhancedDeepEquals(this.note, other.note) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, downstreamId, currency,
            currencyRate, totalAmount, reference,
            paymentMethod, paymentMethodReference, paymentMethodId,
            account, transactionDate, supplier,
            companyId, reconciled, status,
            type, allocations, note,
            number, trackingCategories, customFields,
            rowVersion, displayId, customMappings,
            updatedBy, createdBy, createdAt,
            updatedAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillPayment.class,
                "id", id,
                "downstreamId", downstreamId,
                "currency", currency,
                "currencyRate", currencyRate,
                "totalAmount", totalAmount,
                "reference", reference,
                "paymentMethod", paymentMethod,
                "paymentMethodReference", paymentMethodReference,
                "paymentMethodId", paymentMethodId,
                "account", account,
                "transactionDate", transactionDate,
                "supplier", supplier,
                "companyId", companyId,
                "reconciled", reconciled,
                "status", status,
                "type", type,
                "allocations", allocations,
                "note", note,
                "number", number,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "displayId", displayId,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> downstreamId;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> currencyRate;

        private Double totalAmount;

        private JsonNullable<String> reference;

        private JsonNullable<String> paymentMethod;

        private JsonNullable<String> paymentMethodReference;

        private JsonNullable<String> paymentMethodId;

        private JsonNullable<LinkedLedgerAccount> account;

        private OffsetDateTime transactionDate;

        private JsonNullable<LinkedSupplier> supplier;

        private JsonNullable<String> companyId;

        private JsonNullable<Boolean> reconciled;

        private PaymentStatus status;

        private BillPaymentType type;

        private List<Allocations> allocations;

        private JsonNullable<String> note;

        private JsonNullable<String> number;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private JsonNullable<String> displayId;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Optional transaction reference message ie: Debit remittance detail.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Optional reference message returned by payment method on processing
         */
        public Builder paymentMethodReference(@Nullable String paymentMethodReference) {
            this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder paymentMethodId(@Nullable String paymentMethodId) {
            this.paymentMethodId = JsonNullable.of(paymentMethodId);
            return this;
        }

        public Builder account(@Nullable LinkedLedgerAccount account) {
            this.account = JsonNullable.of(account);
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(@Nullable OffsetDateTime transactionDate) {
            this.transactionDate = transactionDate;
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(@Nullable LinkedSupplier supplier) {
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Indicates if the transaction has been reconciled.
         */
        public Builder reconciled(@Nullable Boolean reconciled) {
            this.reconciled = JsonNullable.of(reconciled);
            return this;
        }

        /**
         * Status of payment
         */
        public Builder status(@Nullable PaymentStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(@Nullable BillPaymentType type) {
            this.type = type;
            return this;
        }

        public Builder allocations(@Nullable List<Allocations> allocations) {
            this.allocations = allocations;
            return this;
        }

        /**
         * Note associated with the transaction
         */
        public Builder note(@Nullable String note) {
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Number associated with the transaction
         */
        public Builder number(@Nullable String number) {
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * Id to be displayed.
         */
        public Builder displayId(@Nullable String displayId) {
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public BillPayment build() {
            return new BillPayment(
                id, downstreamId, currency,
                currencyRate, totalAmount, reference,
                paymentMethod, paymentMethodReference, paymentMethodId,
                account, transactionDate, supplier,
                companyId, reconciled, status,
                type, allocations, note,
                number, trackingCategories, customFields,
                rowVersion, displayId, customMappings,
                updatedBy, createdBy, createdAt,
                updatedAt, passThrough);
        }

    }
}
