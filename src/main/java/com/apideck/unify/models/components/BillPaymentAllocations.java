/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillPaymentAllocations {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Type of entity this payment should be attributed to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private BillPaymentAllocationType type;

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Double> amount;

    /**
     * Unique identifier of the allocation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocation_id")
    private String allocationId;

    @JsonCreator
    public BillPaymentAllocations(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("type") @Nullable BillPaymentAllocationType type,
            @JsonProperty("amount") @Nullable JsonNullable<Double> amount,
            @JsonProperty("allocation_id") @Nullable String allocationId) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.type = type;
        this.amount = Optional.ofNullable(amount)
            .orElse(JsonNullable.undefined());
        this.allocationId = allocationId;
    }
    
    public BillPaymentAllocations() {
        this(null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Type of entity this payment should be attributed to.
     */
    public Optional<BillPaymentAllocationType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    public JsonNullable<Double> amount() {
        return this.amount;
    }

    /**
     * Unique identifier of the allocation
     */
    public Optional<String> allocationId() {
        return Optional.ofNullable(this.allocationId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public BillPaymentAllocations withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Type of entity this payment should be attributed to.
     */
    public BillPaymentAllocations withType(@Nullable BillPaymentAllocationType type) {
        this.type = type;
        return this;
    }


    /**
     * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
     */
    public BillPaymentAllocations withAmount(@Nullable Double amount) {
        this.amount = JsonNullable.of(amount);
        return this;
    }


    /**
     * Unique identifier of the allocation
     */
    public BillPaymentAllocations withAllocationId(@Nullable String allocationId) {
        this.allocationId = allocationId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillPaymentAllocations other = (BillPaymentAllocations) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.allocationId, other.allocationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, amount,
            allocationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillPaymentAllocations.class,
                "id", id,
                "type", type,
                "amount", amount,
                "allocationId", allocationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private BillPaymentAllocationType type;

        private JsonNullable<Double> amount;

        private String allocationId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Type of entity this payment should be attributed to.
         */
        public Builder type(@Nullable BillPaymentAllocationType type) {
            this.type = type;
            return this;
        }

        /**
         * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
         */
        public Builder amount(@Nullable Double amount) {
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Unique identifier of the allocation
         */
        public Builder allocationId(@Nullable String allocationId) {
            this.allocationId = allocationId;
            return this;
        }

        public BillPaymentAllocations build() {
            return new BillPaymentAllocations(
                id, type, amount,
                allocationId);
        }

    }
}
