/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class Blocks {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private String title;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private String content;

    @JsonCreator
    public Blocks(
            @JsonProperty("title") @Nullable String title,
            @JsonProperty("content") @Nullable String content) {
        this.title = title;
        this.content = content;
    }
    
    public Blocks() {
        this(null, null);
    }

    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Blocks withTitle(@Nullable String title) {
        this.title = title;
        return this;
    }


    public Blocks withContent(@Nullable String content) {
        this.content = content;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Blocks other = (Blocks) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.content, other.content);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, content);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Blocks.class,
                "title", title,
                "content", content);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String title;

        private String content;

        private Builder() {
          // force use of static builder() method
        }

        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }

        public Builder content(@Nullable String content) {
            this.content = content;
            return this;
        }

        public Blocks build() {
            return new Blocks(
                title, content);
        }

    }
}
