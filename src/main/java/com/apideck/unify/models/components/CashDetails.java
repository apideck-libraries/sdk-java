/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * CashDetails - Cash details for this payment
 */

public class CashDetails {

    /**
     * The amount of cash given by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Object> amount;

    /**
     * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("charge_back_amount")
    private Optional<? extends Object> chargeBackAmount;

    @JsonCreator
    public CashDetails(
            @JsonProperty("amount") Optional<? extends Object> amount,
            @JsonProperty("charge_back_amount") Optional<? extends Object> chargeBackAmount) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(chargeBackAmount, "chargeBackAmount");
        this.amount = amount;
        this.chargeBackAmount = chargeBackAmount;
    }
    
    public CashDetails() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The amount of cash given by the customer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> amount() {
        return (Optional<Object>) amount;
    }

    /**
     * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> chargeBackAmount() {
        return (Optional<Object>) chargeBackAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The amount of cash given by the customer.
     */
    public CashDetails withAmount(Object amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of cash given by the customer.
     */
    public CashDetails withAmount(Optional<? extends Object> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
     */
    public CashDetails withChargeBackAmount(Object chargeBackAmount) {
        Utils.checkNotNull(chargeBackAmount, "chargeBackAmount");
        this.chargeBackAmount = Optional.ofNullable(chargeBackAmount);
        return this;
    }

    /**
     * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
     */
    public CashDetails withChargeBackAmount(Optional<? extends Object> chargeBackAmount) {
        Utils.checkNotNull(chargeBackAmount, "chargeBackAmount");
        this.chargeBackAmount = chargeBackAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CashDetails other = (CashDetails) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.chargeBackAmount, other.chargeBackAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            chargeBackAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CashDetails.class,
                "amount", amount,
                "chargeBackAmount", chargeBackAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> amount = Optional.empty();
 
        private Optional<? extends Object> chargeBackAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount of cash given by the customer.
         */
        public Builder amount(Object amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of cash given by the customer.
         */
        public Builder amount(Optional<? extends Object> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
         */
        public Builder chargeBackAmount(Object chargeBackAmount) {
            Utils.checkNotNull(chargeBackAmount, "chargeBackAmount");
            this.chargeBackAmount = Optional.ofNullable(chargeBackAmount);
            return this;
        }

        /**
         * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
         */
        public Builder chargeBackAmount(Optional<? extends Object> chargeBackAmount) {
            Utils.checkNotNull(chargeBackAmount, "chargeBackAmount");
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }
        
        public CashDetails build() {
            return new CashDetails(
                amount,
                chargeBackAmount);
        }
    }
}

