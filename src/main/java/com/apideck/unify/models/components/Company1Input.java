/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Company1Input {
    /**
     * Name of the company
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Owner ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The Image URL of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private JsonNullable<String> image;

    /**
     * A description of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The VAT number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vat_number")
    private JsonNullable<String> vatNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The status of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The fax number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;

    /**
     * The annual revenue of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_revenue")
    private JsonNullable<String> annualRevenue;

    /**
     * Number of employees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_of_employees")
    private JsonNullable<String> numberOfEmployees;

    /**
     * The industry represents the type of business the company is in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industry")
    private JsonNullable<String> industry;

    /**
     * The ownership indicates the type of ownership of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownership")
    private JsonNullable<String> ownership;

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_number")
    private JsonNullable<String> salesTaxNumber;

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_number")
    private JsonNullable<String> payeeNumber;

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abn_or_tfn")
    private JsonNullable<String> abnOrTfn;

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abn_branch")
    private JsonNullable<String> abnBranch;

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acn")
    private JsonNullable<String> acn;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private List<BankAccount1> bankAccounts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLink> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_type")
    private CompanyRowType rowType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;

    /**
     * Whether the company is read-only or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("read_only")
    private JsonNullable<Boolean> readOnly;

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Company1Input(
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("image") @Nullable JsonNullable<String> image,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("vat_number") @Nullable JsonNullable<String> vatNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("fax") @Nullable JsonNullable<String> fax,
            @JsonProperty("annual_revenue") @Nullable JsonNullable<String> annualRevenue,
            @JsonProperty("number_of_employees") @Nullable JsonNullable<String> numberOfEmployees,
            @JsonProperty("industry") @Nullable JsonNullable<String> industry,
            @JsonProperty("ownership") @Nullable JsonNullable<String> ownership,
            @JsonProperty("sales_tax_number") @Nullable JsonNullable<String> salesTaxNumber,
            @JsonProperty("payee_number") @Nullable JsonNullable<String> payeeNumber,
            @JsonProperty("abn_or_tfn") @Nullable JsonNullable<String> abnOrTfn,
            @JsonProperty("abn_branch") @Nullable JsonNullable<String> abnBranch,
            @JsonProperty("acn") @Nullable JsonNullable<String> acn,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("bank_accounts") @Nullable List<BankAccount1> bankAccounts,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("social_links") @Nullable List<SocialLink> socialLinks,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("row_type") @Nullable CompanyRowType rowType,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("read_only") @Nullable JsonNullable<Boolean> readOnly,
            @JsonProperty("salutation") @Nullable JsonNullable<String> salutation,
            @JsonProperty("birthday") @Nullable JsonNullable<LocalDate> birthday,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.name = JsonNullable.of(name);
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.image = Optional.ofNullable(image)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.vatNumber = Optional.ofNullable(vatNumber)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.fax = Optional.ofNullable(fax)
            .orElse(JsonNullable.undefined());
        this.annualRevenue = Optional.ofNullable(annualRevenue)
            .orElse(JsonNullable.undefined());
        this.numberOfEmployees = Optional.ofNullable(numberOfEmployees)
            .orElse(JsonNullable.undefined());
        this.industry = Optional.ofNullable(industry)
            .orElse(JsonNullable.undefined());
        this.ownership = Optional.ofNullable(ownership)
            .orElse(JsonNullable.undefined());
        this.salesTaxNumber = Optional.ofNullable(salesTaxNumber)
            .orElse(JsonNullable.undefined());
        this.payeeNumber = Optional.ofNullable(payeeNumber)
            .orElse(JsonNullable.undefined());
        this.abnOrTfn = Optional.ofNullable(abnOrTfn)
            .orElse(JsonNullable.undefined());
        this.abnBranch = Optional.ofNullable(abnBranch)
            .orElse(JsonNullable.undefined());
        this.acn = Optional.ofNullable(acn)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.bankAccounts = bankAccounts;
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.rowType = rowType;
        this.customFields = customFields;
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.readOnly = Optional.ofNullable(readOnly)
            .orElse(JsonNullable.undefined());
        this.salutation = Optional.ofNullable(salutation)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Company1Input() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Name of the company
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * Owner ID
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The Image URL of the company
     */
    public JsonNullable<String> image() {
        return this.image;
    }

    /**
     * A description of the company
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The VAT number of the company
     */
    public JsonNullable<String> vatNumber() {
        return this.vatNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The status of the company
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * The fax number of the company
     */
    public JsonNullable<String> fax() {
        return this.fax;
    }

    /**
     * The annual revenue of the company
     */
    public JsonNullable<String> annualRevenue() {
        return this.annualRevenue;
    }

    /**
     * Number of employees
     */
    public JsonNullable<String> numberOfEmployees() {
        return this.numberOfEmployees;
    }

    /**
     * The industry represents the type of business the company is in.
     */
    public JsonNullable<String> industry() {
        return this.industry;
    }

    /**
     * The ownership indicates the type of ownership of the company.
     */
    public JsonNullable<String> ownership() {
        return this.ownership;
    }

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    public JsonNullable<String> salesTaxNumber() {
        return this.salesTaxNumber;
    }

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    public JsonNullable<String> payeeNumber() {
        return this.payeeNumber;
    }

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    public JsonNullable<String> abnOrTfn() {
        return this.abnOrTfn;
    }

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    public JsonNullable<String> abnBranch() {
        return this.abnBranch;
    }

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    public JsonNullable<String> acn() {
        return this.acn;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    public Optional<List<BankAccount1>> bankAccounts() {
        return Optional.ofNullable(this.bankAccounts);
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<SocialLink>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<CompanyRowType> rowType() {
        return Optional.ofNullable(this.rowType);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    /**
     * Whether the company is read-only or not
     */
    public JsonNullable<Boolean> readOnly() {
        return this.readOnly;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public JsonNullable<String> salutation() {
        return this.salutation;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<LocalDate> birthday() {
        return this.birthday;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of the company
     */
    public Company1Input withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * Owner ID
     */
    public Company1Input withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The Image URL of the company
     */
    public Company1Input withImage(@Nullable String image) {
        this.image = JsonNullable.of(image);
        return this;
    }


    /**
     * A description of the company
     */
    public Company1Input withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The VAT number of the company
     */
    public Company1Input withVatNumber(@Nullable String vatNumber) {
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Company1Input withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The status of the company
     */
    public Company1Input withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * The fax number of the company
     */
    public Company1Input withFax(@Nullable String fax) {
        this.fax = JsonNullable.of(fax);
        return this;
    }


    /**
     * The annual revenue of the company
     */
    public Company1Input withAnnualRevenue(@Nullable String annualRevenue) {
        this.annualRevenue = JsonNullable.of(annualRevenue);
        return this;
    }


    /**
     * Number of employees
     */
    public Company1Input withNumberOfEmployees(@Nullable String numberOfEmployees) {
        this.numberOfEmployees = JsonNullable.of(numberOfEmployees);
        return this;
    }


    /**
     * The industry represents the type of business the company is in.
     */
    public Company1Input withIndustry(@Nullable String industry) {
        this.industry = JsonNullable.of(industry);
        return this;
    }


    /**
     * The ownership indicates the type of ownership of the company.
     */
    public Company1Input withOwnership(@Nullable String ownership) {
        this.ownership = JsonNullable.of(ownership);
        return this;
    }


    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    public Company1Input withSalesTaxNumber(@Nullable String salesTaxNumber) {
        this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
        return this;
    }


    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    public Company1Input withPayeeNumber(@Nullable String payeeNumber) {
        this.payeeNumber = JsonNullable.of(payeeNumber);
        return this;
    }


    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    public Company1Input withAbnOrTfn(@Nullable String abnOrTfn) {
        this.abnOrTfn = JsonNullable.of(abnOrTfn);
        return this;
    }


    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    public Company1Input withAbnBranch(@Nullable String abnBranch) {
        this.abnBranch = JsonNullable.of(abnBranch);
        return this;
    }


    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    public Company1Input withAcn(@Nullable String acn) {
        this.acn = JsonNullable.of(acn);
        return this;
    }


    /**
     * The first name of the person.
     */
    public Company1Input withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public Company1Input withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    public Company1Input withBankAccounts(@Nullable List<BankAccount1> bankAccounts) {
        this.bankAccounts = bankAccounts;
        return this;
    }


    public Company1Input withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public Company1Input withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Company1Input withSocialLinks(@Nullable List<SocialLink> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public Company1Input withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public Company1Input withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public Company1Input withRowType(@Nullable CompanyRowType rowType) {
        this.rowType = rowType;
        return this;
    }


    public Company1Input withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    public Company1Input withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    /**
     * Whether the company is read-only or not
     */
    public Company1Input withReadOnly(@Nullable Boolean readOnly) {
        this.readOnly = JsonNullable.of(readOnly);
        return this;
    }


    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public Company1Input withSalutation(@Nullable String salutation) {
        this.salutation = JsonNullable.of(salutation);
        return this;
    }


    /**
     * The date of birth of the person.
     */
    public Company1Input withBirthday(@Nullable LocalDate birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Company1Input withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Company1Input other = (Company1Input) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.fax, other.fax) &&
            Utils.enhancedDeepEquals(this.annualRevenue, other.annualRevenue) &&
            Utils.enhancedDeepEquals(this.numberOfEmployees, other.numberOfEmployees) &&
            Utils.enhancedDeepEquals(this.industry, other.industry) &&
            Utils.enhancedDeepEquals(this.ownership, other.ownership) &&
            Utils.enhancedDeepEquals(this.salesTaxNumber, other.salesTaxNumber) &&
            Utils.enhancedDeepEquals(this.payeeNumber, other.payeeNumber) &&
            Utils.enhancedDeepEquals(this.abnOrTfn, other.abnOrTfn) &&
            Utils.enhancedDeepEquals(this.abnBranch, other.abnBranch) &&
            Utils.enhancedDeepEquals(this.acn, other.acn) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.bankAccounts, other.bankAccounts) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.rowType, other.rowType) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.readOnly, other.readOnly) &&
            Utils.enhancedDeepEquals(this.salutation, other.salutation) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, ownerId, image,
            description, vatNumber, currency,
            status, fax, annualRevenue,
            numberOfEmployees, industry, ownership,
            salesTaxNumber, payeeNumber, abnOrTfn,
            abnBranch, acn, firstName,
            lastName, bankAccounts, websites,
            addresses, socialLinks, phoneNumbers,
            emails, rowType, customFields,
            tags, readOnly, salutation,
            birthday, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Company1Input.class,
                "name", name,
                "ownerId", ownerId,
                "image", image,
                "description", description,
                "vatNumber", vatNumber,
                "currency", currency,
                "status", status,
                "fax", fax,
                "annualRevenue", annualRevenue,
                "numberOfEmployees", numberOfEmployees,
                "industry", industry,
                "ownership", ownership,
                "salesTaxNumber", salesTaxNumber,
                "payeeNumber", payeeNumber,
                "abnOrTfn", abnOrTfn,
                "abnBranch", abnBranch,
                "acn", acn,
                "firstName", firstName,
                "lastName", lastName,
                "bankAccounts", bankAccounts,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "rowType", rowType,
                "customFields", customFields,
                "tags", tags,
                "readOnly", readOnly,
                "salutation", salutation,
                "birthday", birthday,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> image;

        private JsonNullable<String> description;

        private JsonNullable<String> vatNumber;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> status;

        private JsonNullable<String> fax;

        private JsonNullable<String> annualRevenue;

        private JsonNullable<String> numberOfEmployees;

        private JsonNullable<String> industry;

        private JsonNullable<String> ownership;

        private JsonNullable<String> salesTaxNumber;

        private JsonNullable<String> payeeNumber;

        private JsonNullable<String> abnOrTfn;

        private JsonNullable<String> abnBranch;

        private JsonNullable<String> acn;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private List<BankAccount1> bankAccounts;

        private List<Website> websites;

        private List<Address> addresses;

        private List<SocialLink> socialLinks;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private CompanyRowType rowType;

        private List<CustomField> customFields;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Boolean> readOnly;

        private JsonNullable<String> salutation;

        private JsonNullable<LocalDate> birthday;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the company
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Owner ID
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The Image URL of the company
         */
        public Builder image(@Nullable String image) {
            this.image = JsonNullable.of(image);
            return this;
        }

        /**
         * A description of the company
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The VAT number of the company
         */
        public Builder vatNumber(@Nullable String vatNumber) {
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The status of the company
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The fax number of the company
         */
        public Builder fax(@Nullable String fax) {
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * The annual revenue of the company
         */
        public Builder annualRevenue(@Nullable String annualRevenue) {
            this.annualRevenue = JsonNullable.of(annualRevenue);
            return this;
        }

        /**
         * Number of employees
         */
        public Builder numberOfEmployees(@Nullable String numberOfEmployees) {
            this.numberOfEmployees = JsonNullable.of(numberOfEmployees);
            return this;
        }

        /**
         * The industry represents the type of business the company is in.
         */
        public Builder industry(@Nullable String industry) {
            this.industry = JsonNullable.of(industry);
            return this;
        }

        /**
         * The ownership indicates the type of ownership of the company.
         */
        public Builder ownership(@Nullable String ownership) {
            this.ownership = JsonNullable.of(ownership);
            return this;
        }

        /**
         * A sales tax number is a unique number that identifies a company for tax purposes.
         */
        public Builder salesTaxNumber(@Nullable String salesTaxNumber) {
            this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
            return this;
        }

        /**
         * A payee number is a unique number that identifies a payee for tax purposes.
         */
        public Builder payeeNumber(@Nullable String payeeNumber) {
            this.payeeNumber = JsonNullable.of(payeeNumber);
            return this;
        }

        /**
         * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
         */
        public Builder abnOrTfn(@Nullable String abnOrTfn) {
            this.abnOrTfn = JsonNullable.of(abnOrTfn);
            return this;
        }

        /**
         * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
         */
        public Builder abnBranch(@Nullable String abnBranch) {
            this.abnBranch = JsonNullable.of(abnBranch);
            return this;
        }

        /**
         * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
         */
        public Builder acn(@Nullable String acn) {
            this.acn = JsonNullable.of(acn);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder bankAccounts(@Nullable List<BankAccount1> bankAccounts) {
            this.bankAccounts = bankAccounts;
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLink> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder rowType(@Nullable CompanyRowType rowType) {
            this.rowType = rowType;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * Whether the company is read-only or not
         */
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = JsonNullable.of(readOnly);
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(@Nullable String salutation) {
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(@Nullable LocalDate birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Company1Input build() {
            return new Company1Input(
                name, ownerId, image,
                description, vatNumber, currency,
                status, fax, annualRevenue,
                numberOfEmployees, industry, ownership,
                salesTaxNumber, payeeNumber, abnOrTfn,
                abnBranch, acn, firstName,
                lastName, bankAccounts, websites,
                addresses, socialLinks, phoneNumbers,
                emails, rowType, customFields,
                tags, readOnly, salutation,
                birthday, passThrough);
        }

    }
}
