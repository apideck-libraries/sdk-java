/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CompanyInfo {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CompanyStatus> status;

    /**
     * The legal name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_name")
    private Optional<String> legalName;

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_number")
    private JsonNullable<String> salesTaxNumber;

    /**
     * Whether sales tax is calculated automatically for the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automated_sales_tax")
    private Optional<Boolean> automatedSalesTax;

    /**
     * Whether sales tax is enabled for the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_enabled")
    private Optional<Boolean> salesTaxEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_sales_tax")
    private Optional<? extends TaxRate> defaultSalesTax;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * The start month of fiscal year.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fiscal_year_start_month")
    private Optional<? extends TheStartMonthOfFiscalYear> fiscalYearStartMonth;

    /**
     * Date when company file was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_start_date")
    private Optional<LocalDate> companyStartDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public CompanyInfo(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("status") Optional<? extends CompanyStatus> status,
            @JsonProperty("legal_name") Optional<String> legalName,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("sales_tax_number") JsonNullable<String> salesTaxNumber,
            @JsonProperty("automated_sales_tax") Optional<Boolean> automatedSalesTax,
            @JsonProperty("sales_tax_enabled") Optional<Boolean> salesTaxEnabled,
            @JsonProperty("default_sales_tax") Optional<? extends TaxRate> defaultSalesTax,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("fiscal_year_start_month") Optional<? extends TheStartMonthOfFiscalYear> fiscalYearStartMonth,
            @JsonProperty("company_start_date") Optional<LocalDate> companyStartDate,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(legalName, "legalName");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        Utils.checkNotNull(automatedSalesTax, "automatedSalesTax");
        Utils.checkNotNull(salesTaxEnabled, "salesTaxEnabled");
        Utils.checkNotNull(defaultSalesTax, "defaultSalesTax");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(fiscalYearStartMonth, "fiscalYearStartMonth");
        Utils.checkNotNull(companyStartDate, "companyStartDate");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.companyName = companyName;
        this.status = status;
        this.legalName = legalName;
        this.country = country;
        this.salesTaxNumber = salesTaxNumber;
        this.automatedSalesTax = automatedSalesTax;
        this.salesTaxEnabled = salesTaxEnabled;
        this.defaultSalesTax = defaultSalesTax;
        this.currency = currency;
        this.language = language;
        this.fiscalYearStartMonth = fiscalYearStartMonth;
        this.companyStartDate = companyStartDate;
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customMappings = customMappings;
        this.rowVersion = rowVersion;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public CompanyInfo() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the company.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyStatus> status() {
        return (Optional<CompanyStatus>) status;
    }

    /**
     * The legal name of the company
     */
    @JsonIgnore
    public Optional<String> legalName() {
        return legalName;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    @JsonIgnore
    public JsonNullable<String> salesTaxNumber() {
        return salesTaxNumber;
    }

    /**
     * Whether sales tax is calculated automatically for the company
     */
    @JsonIgnore
    public Optional<Boolean> automatedSalesTax() {
        return automatedSalesTax;
    }

    /**
     * Whether sales tax is enabled for the company
     */
    @JsonIgnore
    public Optional<Boolean> salesTaxEnabled() {
        return salesTaxEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxRate> defaultSalesTax() {
        return (Optional<TaxRate>) defaultSalesTax;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    /**
     * The start month of fiscal year.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TheStartMonthOfFiscalYear> fiscalYearStartMonth() {
        return (Optional<TheStartMonthOfFiscalYear>) fiscalYearStartMonth;
    }

    /**
     * Date when company file was created
     */
    @JsonIgnore
    public Optional<LocalDate> companyStartDate() {
        return companyStartDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public CompanyInfo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public CompanyInfo withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the company.
     */
    public CompanyInfo withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company.
     */
    public CompanyInfo withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public CompanyInfo withStatus(CompanyStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public CompanyInfo withStatus(Optional<? extends CompanyStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The legal name of the company
     */
    public CompanyInfo withLegalName(String legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = Optional.ofNullable(legalName);
        return this;
    }

    /**
     * The legal name of the company
     */
    public CompanyInfo withLegalName(Optional<String> legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = legalName;
        return this;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public CompanyInfo withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public CompanyInfo withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public CompanyInfo withSalesTaxNumber(String salesTaxNumber) {
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
        return this;
    }

    public CompanyInfo withSalesTaxNumber(JsonNullable<String> salesTaxNumber) {
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        this.salesTaxNumber = salesTaxNumber;
        return this;
    }

    /**
     * Whether sales tax is calculated automatically for the company
     */
    public CompanyInfo withAutomatedSalesTax(boolean automatedSalesTax) {
        Utils.checkNotNull(automatedSalesTax, "automatedSalesTax");
        this.automatedSalesTax = Optional.ofNullable(automatedSalesTax);
        return this;
    }

    /**
     * Whether sales tax is calculated automatically for the company
     */
    public CompanyInfo withAutomatedSalesTax(Optional<Boolean> automatedSalesTax) {
        Utils.checkNotNull(automatedSalesTax, "automatedSalesTax");
        this.automatedSalesTax = automatedSalesTax;
        return this;
    }

    /**
     * Whether sales tax is enabled for the company
     */
    public CompanyInfo withSalesTaxEnabled(boolean salesTaxEnabled) {
        Utils.checkNotNull(salesTaxEnabled, "salesTaxEnabled");
        this.salesTaxEnabled = Optional.ofNullable(salesTaxEnabled);
        return this;
    }

    /**
     * Whether sales tax is enabled for the company
     */
    public CompanyInfo withSalesTaxEnabled(Optional<Boolean> salesTaxEnabled) {
        Utils.checkNotNull(salesTaxEnabled, "salesTaxEnabled");
        this.salesTaxEnabled = salesTaxEnabled;
        return this;
    }

    public CompanyInfo withDefaultSalesTax(TaxRate defaultSalesTax) {
        Utils.checkNotNull(defaultSalesTax, "defaultSalesTax");
        this.defaultSalesTax = Optional.ofNullable(defaultSalesTax);
        return this;
    }

    public CompanyInfo withDefaultSalesTax(Optional<? extends TaxRate> defaultSalesTax) {
        Utils.checkNotNull(defaultSalesTax, "defaultSalesTax");
        this.defaultSalesTax = defaultSalesTax;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CompanyInfo withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CompanyInfo withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public CompanyInfo withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public CompanyInfo withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * The start month of fiscal year.
     */
    public CompanyInfo withFiscalYearStartMonth(TheStartMonthOfFiscalYear fiscalYearStartMonth) {
        Utils.checkNotNull(fiscalYearStartMonth, "fiscalYearStartMonth");
        this.fiscalYearStartMonth = Optional.ofNullable(fiscalYearStartMonth);
        return this;
    }

    /**
     * The start month of fiscal year.
     */
    public CompanyInfo withFiscalYearStartMonth(Optional<? extends TheStartMonthOfFiscalYear> fiscalYearStartMonth) {
        Utils.checkNotNull(fiscalYearStartMonth, "fiscalYearStartMonth");
        this.fiscalYearStartMonth = fiscalYearStartMonth;
        return this;
    }

    /**
     * Date when company file was created
     */
    public CompanyInfo withCompanyStartDate(LocalDate companyStartDate) {
        Utils.checkNotNull(companyStartDate, "companyStartDate");
        this.companyStartDate = Optional.ofNullable(companyStartDate);
        return this;
    }

    /**
     * Date when company file was created
     */
    public CompanyInfo withCompanyStartDate(Optional<LocalDate> companyStartDate) {
        Utils.checkNotNull(companyStartDate, "companyStartDate");
        this.companyStartDate = companyStartDate;
        return this;
    }

    public CompanyInfo withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public CompanyInfo withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public CompanyInfo withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public CompanyInfo withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public CompanyInfo withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public CompanyInfo withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public CompanyInfo withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public CompanyInfo withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public CompanyInfo withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public CompanyInfo withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public CompanyInfo withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public CompanyInfo withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public CompanyInfo withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public CompanyInfo withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public CompanyInfo withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public CompanyInfo withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public CompanyInfo withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public CompanyInfo withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyInfo other = (CompanyInfo) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.legalName, other.legalName) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.salesTaxNumber, other.salesTaxNumber) &&
            Objects.deepEquals(this.automatedSalesTax, other.automatedSalesTax) &&
            Objects.deepEquals(this.salesTaxEnabled, other.salesTaxEnabled) &&
            Objects.deepEquals(this.defaultSalesTax, other.defaultSalesTax) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.fiscalYearStartMonth, other.fiscalYearStartMonth) &&
            Objects.deepEquals(this.companyStartDate, other.companyStartDate) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            companyName,
            status,
            legalName,
            country,
            salesTaxNumber,
            automatedSalesTax,
            salesTaxEnabled,
            defaultSalesTax,
            currency,
            language,
            fiscalYearStartMonth,
            companyStartDate,
            addresses,
            phoneNumbers,
            emails,
            customMappings,
            rowVersion,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyInfo.class,
                "id", id,
                "companyName", companyName,
                "status", status,
                "legalName", legalName,
                "country", country,
                "salesTaxNumber", salesTaxNumber,
                "automatedSalesTax", automatedSalesTax,
                "salesTaxEnabled", salesTaxEnabled,
                "defaultSalesTax", defaultSalesTax,
                "currency", currency,
                "language", language,
                "fiscalYearStartMonth", fiscalYearStartMonth,
                "companyStartDate", companyStartDate,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customMappings", customMappings,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private Optional<? extends CompanyStatus> status = Optional.empty();
 
        private Optional<String> legalName = Optional.empty();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> salesTaxNumber = JsonNullable.undefined();
 
        private Optional<Boolean> automatedSalesTax = Optional.empty();
 
        private Optional<Boolean> salesTaxEnabled = Optional.empty();
 
        private Optional<? extends TaxRate> defaultSalesTax = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<String> language = JsonNullable.undefined();
 
        private Optional<? extends TheStartMonthOfFiscalYear> fiscalYearStartMonth = Optional.empty();
 
        private Optional<LocalDate> companyStartDate = Optional.empty();
 
        private Optional<? extends List<Address>> addresses = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Email>> emails = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * Based on the status some functionality is enabled or disabled.
         */
        public Builder status(CompanyStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Based on the status some functionality is enabled or disabled.
         */
        public Builder status(Optional<? extends CompanyStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The legal name of the company
         */
        public Builder legalName(String legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        /**
         * The legal name of the company
         */
        public Builder legalName(Optional<String> legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = legalName;
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder salesTaxNumber(String salesTaxNumber) {
            Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
            this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
            return this;
        }

        public Builder salesTaxNumber(JsonNullable<String> salesTaxNumber) {
            Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
            this.salesTaxNumber = salesTaxNumber;
            return this;
        }

        /**
         * Whether sales tax is calculated automatically for the company
         */
        public Builder automatedSalesTax(boolean automatedSalesTax) {
            Utils.checkNotNull(automatedSalesTax, "automatedSalesTax");
            this.automatedSalesTax = Optional.ofNullable(automatedSalesTax);
            return this;
        }

        /**
         * Whether sales tax is calculated automatically for the company
         */
        public Builder automatedSalesTax(Optional<Boolean> automatedSalesTax) {
            Utils.checkNotNull(automatedSalesTax, "automatedSalesTax");
            this.automatedSalesTax = automatedSalesTax;
            return this;
        }

        /**
         * Whether sales tax is enabled for the company
         */
        public Builder salesTaxEnabled(boolean salesTaxEnabled) {
            Utils.checkNotNull(salesTaxEnabled, "salesTaxEnabled");
            this.salesTaxEnabled = Optional.ofNullable(salesTaxEnabled);
            return this;
        }

        /**
         * Whether sales tax is enabled for the company
         */
        public Builder salesTaxEnabled(Optional<Boolean> salesTaxEnabled) {
            Utils.checkNotNull(salesTaxEnabled, "salesTaxEnabled");
            this.salesTaxEnabled = salesTaxEnabled;
            return this;
        }

        public Builder defaultSalesTax(TaxRate defaultSalesTax) {
            Utils.checkNotNull(defaultSalesTax, "defaultSalesTax");
            this.defaultSalesTax = Optional.ofNullable(defaultSalesTax);
            return this;
        }

        public Builder defaultSalesTax(Optional<? extends TaxRate> defaultSalesTax) {
            Utils.checkNotNull(defaultSalesTax, "defaultSalesTax");
            this.defaultSalesTax = defaultSalesTax;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * The start month of fiscal year.
         */
        public Builder fiscalYearStartMonth(TheStartMonthOfFiscalYear fiscalYearStartMonth) {
            Utils.checkNotNull(fiscalYearStartMonth, "fiscalYearStartMonth");
            this.fiscalYearStartMonth = Optional.ofNullable(fiscalYearStartMonth);
            return this;
        }

        /**
         * The start month of fiscal year.
         */
        public Builder fiscalYearStartMonth(Optional<? extends TheStartMonthOfFiscalYear> fiscalYearStartMonth) {
            Utils.checkNotNull(fiscalYearStartMonth, "fiscalYearStartMonth");
            this.fiscalYearStartMonth = fiscalYearStartMonth;
            return this;
        }

        /**
         * Date when company file was created
         */
        public Builder companyStartDate(LocalDate companyStartDate) {
            Utils.checkNotNull(companyStartDate, "companyStartDate");
            this.companyStartDate = Optional.ofNullable(companyStartDate);
            return this;
        }

        /**
         * Date when company file was created
         */
        public Builder companyStartDate(Optional<LocalDate> companyStartDate) {
            Utils.checkNotNull(companyStartDate, "companyStartDate");
            this.companyStartDate = companyStartDate;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public CompanyInfo build() {
            return new CompanyInfo(
                id,
                companyName,
                status,
                legalName,
                country,
                salesTaxNumber,
                automatedSalesTax,
                salesTaxEnabled,
                defaultSalesTax,
                currency,
                language,
                fiscalYearStartMonth,
                companyStartDate,
                addresses,
                phoneNumbers,
                emails,
                customMappings,
                rowVersion,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt);
        }
    }
}

