/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CompanyInfo {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private CompanyStatus status;

    /**
     * The legal name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_name")
    private String legalName;

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_number")
    private JsonNullable<String> salesTaxNumber;

    /**
     * Whether sales tax is calculated automatically for the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automated_sales_tax")
    private Boolean automatedSalesTax;

    /**
     * Whether sales tax is enabled for the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_enabled")
    private Boolean salesTaxEnabled;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_sales_tax")
    private TaxRate defaultSalesTax;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * The start month of fiscal year.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fiscal_year_start_month")
    private TheStartMonthOfFiscalYear fiscalYearStartMonth;

    /**
     * Date when company file was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_start_date")
    private LocalDate companyStartDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * Whether tracking categories are enabled for the company on transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories_enabled")
    private Boolean trackingCategoriesEnabled;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public CompanyInfo(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("status") @Nullable CompanyStatus status,
            @JsonProperty("legal_name") @Nullable String legalName,
            @JsonProperty("country") @Nullable JsonNullable<String> country,
            @JsonProperty("sales_tax_number") @Nullable JsonNullable<String> salesTaxNumber,
            @JsonProperty("automated_sales_tax") @Nullable Boolean automatedSalesTax,
            @JsonProperty("sales_tax_enabled") @Nullable Boolean salesTaxEnabled,
            @JsonProperty("default_sales_tax") @Nullable TaxRate defaultSalesTax,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("fiscal_year_start_month") @Nullable TheStartMonthOfFiscalYear fiscalYearStartMonth,
            @JsonProperty("company_start_date") @Nullable LocalDate companyStartDate,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("tracking_categories_enabled") @Nullable Boolean trackingCategoriesEnabled,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt) {
        this.id = id;
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.legalName = legalName;
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
        this.salesTaxNumber = Optional.ofNullable(salesTaxNumber)
            .orElse(JsonNullable.undefined());
        this.automatedSalesTax = automatedSalesTax;
        this.salesTaxEnabled = salesTaxEnabled;
        this.defaultSalesTax = defaultSalesTax;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.fiscalYearStartMonth = fiscalYearStartMonth;
        this.companyStartDate = companyStartDate;
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.trackingCategoriesEnabled = trackingCategoriesEnabled;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
    }
    
    public CompanyInfo() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public Optional<CompanyStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The legal name of the company
     */
    public Optional<String> legalName() {
        return Optional.ofNullable(this.legalName);
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    public JsonNullable<String> salesTaxNumber() {
        return this.salesTaxNumber;
    }

    /**
     * Whether sales tax is calculated automatically for the company
     */
    public Optional<Boolean> automatedSalesTax() {
        return Optional.ofNullable(this.automatedSalesTax);
    }

    /**
     * Whether sales tax is enabled for the company
     */
    public Optional<Boolean> salesTaxEnabled() {
        return Optional.ofNullable(this.salesTaxEnabled);
    }

    public Optional<TaxRate> defaultSalesTax() {
        return Optional.ofNullable(this.defaultSalesTax);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    /**
     * The start month of fiscal year.
     */
    public Optional<TheStartMonthOfFiscalYear> fiscalYearStartMonth() {
        return Optional.ofNullable(this.fiscalYearStartMonth);
    }

    /**
     * Date when company file was created
     */
    public Optional<LocalDate> companyStartDate() {
        return Optional.ofNullable(this.companyStartDate);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * Whether tracking categories are enabled for the company on transactions
     */
    public Optional<Boolean> trackingCategoriesEnabled() {
        return Optional.ofNullable(this.trackingCategoriesEnabled);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public CompanyInfo withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of the company.
     */
    public CompanyInfo withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public CompanyInfo withStatus(@Nullable CompanyStatus status) {
        this.status = status;
        return this;
    }


    /**
     * The legal name of the company
     */
    public CompanyInfo withLegalName(@Nullable String legalName) {
        this.legalName = legalName;
        return this;
    }


    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public CompanyInfo withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    public CompanyInfo withSalesTaxNumber(@Nullable String salesTaxNumber) {
        this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
        return this;
    }


    /**
     * Whether sales tax is calculated automatically for the company
     */
    public CompanyInfo withAutomatedSalesTax(@Nullable Boolean automatedSalesTax) {
        this.automatedSalesTax = automatedSalesTax;
        return this;
    }


    /**
     * Whether sales tax is enabled for the company
     */
    public CompanyInfo withSalesTaxEnabled(@Nullable Boolean salesTaxEnabled) {
        this.salesTaxEnabled = salesTaxEnabled;
        return this;
    }


    public CompanyInfo withDefaultSalesTax(@Nullable TaxRate defaultSalesTax) {
        this.defaultSalesTax = defaultSalesTax;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CompanyInfo withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public CompanyInfo withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    /**
     * The start month of fiscal year.
     */
    public CompanyInfo withFiscalYearStartMonth(@Nullable TheStartMonthOfFiscalYear fiscalYearStartMonth) {
        this.fiscalYearStartMonth = fiscalYearStartMonth;
        return this;
    }


    /**
     * Date when company file was created
     */
    public CompanyInfo withCompanyStartDate(@Nullable LocalDate companyStartDate) {
        this.companyStartDate = companyStartDate;
        return this;
    }


    public CompanyInfo withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public CompanyInfo withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public CompanyInfo withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public CompanyInfo withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * Whether tracking categories are enabled for the company on transactions
     */
    public CompanyInfo withTrackingCategoriesEnabled(@Nullable Boolean trackingCategoriesEnabled) {
        this.trackingCategoriesEnabled = trackingCategoriesEnabled;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public CompanyInfo withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public CompanyInfo withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public CompanyInfo withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public CompanyInfo withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public CompanyInfo withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyInfo other = (CompanyInfo) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.legalName, other.legalName) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.salesTaxNumber, other.salesTaxNumber) &&
            Utils.enhancedDeepEquals(this.automatedSalesTax, other.automatedSalesTax) &&
            Utils.enhancedDeepEquals(this.salesTaxEnabled, other.salesTaxEnabled) &&
            Utils.enhancedDeepEquals(this.defaultSalesTax, other.defaultSalesTax) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.fiscalYearStartMonth, other.fiscalYearStartMonth) &&
            Utils.enhancedDeepEquals(this.companyStartDate, other.companyStartDate) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.trackingCategoriesEnabled, other.trackingCategoriesEnabled) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, companyName, status,
            legalName, country, salesTaxNumber,
            automatedSalesTax, salesTaxEnabled, defaultSalesTax,
            currency, language, fiscalYearStartMonth,
            companyStartDate, addresses, phoneNumbers,
            emails, customMappings, trackingCategoriesEnabled,
            rowVersion, updatedBy, createdBy,
            updatedAt, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyInfo.class,
                "id", id,
                "companyName", companyName,
                "status", status,
                "legalName", legalName,
                "country", country,
                "salesTaxNumber", salesTaxNumber,
                "automatedSalesTax", automatedSalesTax,
                "salesTaxEnabled", salesTaxEnabled,
                "defaultSalesTax", defaultSalesTax,
                "currency", currency,
                "language", language,
                "fiscalYearStartMonth", fiscalYearStartMonth,
                "companyStartDate", companyStartDate,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customMappings", customMappings,
                "trackingCategoriesEnabled", trackingCategoriesEnabled,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> companyName;

        private CompanyStatus status;

        private String legalName;

        private JsonNullable<String> country;

        private JsonNullable<String> salesTaxNumber;

        private Boolean automatedSalesTax;

        private Boolean salesTaxEnabled;

        private TaxRate defaultSalesTax;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> language;

        private TheStartMonthOfFiscalYear fiscalYearStartMonth;

        private LocalDate companyStartDate;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private JsonNullable<Map<String, Object>> customMappings;

        private Boolean trackingCategoriesEnabled;

        private JsonNullable<String> rowVersion;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * Based on the status some functionality is enabled or disabled.
         */
        public Builder status(@Nullable CompanyStatus status) {
            this.status = status;
            return this;
        }

        /**
         * The legal name of the company
         */
        public Builder legalName(@Nullable String legalName) {
            this.legalName = legalName;
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        public Builder salesTaxNumber(@Nullable String salesTaxNumber) {
            this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
            return this;
        }

        /**
         * Whether sales tax is calculated automatically for the company
         */
        public Builder automatedSalesTax(@Nullable Boolean automatedSalesTax) {
            this.automatedSalesTax = automatedSalesTax;
            return this;
        }

        /**
         * Whether sales tax is enabled for the company
         */
        public Builder salesTaxEnabled(@Nullable Boolean salesTaxEnabled) {
            this.salesTaxEnabled = salesTaxEnabled;
            return this;
        }

        public Builder defaultSalesTax(@Nullable TaxRate defaultSalesTax) {
            this.defaultSalesTax = defaultSalesTax;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * The start month of fiscal year.
         */
        public Builder fiscalYearStartMonth(@Nullable TheStartMonthOfFiscalYear fiscalYearStartMonth) {
            this.fiscalYearStartMonth = fiscalYearStartMonth;
            return this;
        }

        /**
         * Date when company file was created
         */
        public Builder companyStartDate(@Nullable LocalDate companyStartDate) {
            this.companyStartDate = companyStartDate;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * Whether tracking categories are enabled for the company on transactions
         */
        public Builder trackingCategoriesEnabled(@Nullable Boolean trackingCategoriesEnabled) {
            this.trackingCategoriesEnabled = trackingCategoriesEnabled;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        public CompanyInfo build() {
            return new CompanyInfo(
                id, companyName, status,
                legalName, country, salesTaxNumber,
                automatedSalesTax, salesTaxEnabled, defaultSalesTax,
                currency, language, fiscalYearStartMonth,
                companyStartDate, addresses, phoneNumbers,
                emails, customMappings, trackingCategoriesEnabled,
                rowVersion, updatedBy, createdBy,
                updatedAt, createdAt);
        }

    }
}
