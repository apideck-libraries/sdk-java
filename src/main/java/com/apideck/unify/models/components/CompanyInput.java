/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CompanyInput {

    /**
     * Name of the company
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Owner ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The Image URL of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private JsonNullable<String> image;

    /**
     * A description of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The VAT number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vat_number")
    private JsonNullable<String> vatNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The status of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The fax number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;

    /**
     * The annual revenue of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_revenue")
    private JsonNullable<String> annualRevenue;

    /**
     * Number of employees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_of_employees")
    private JsonNullable<String> numberOfEmployees;

    /**
     * The industry represents the type of business the company is in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industry")
    private JsonNullable<String> industry;

    /**
     * The ownership indicates the type of ownership of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownership")
    private JsonNullable<String> ownership;

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_tax_number")
    private JsonNullable<String> salesTaxNumber;

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_number")
    private JsonNullable<String> payeeNumber;

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abn_or_tfn")
    private JsonNullable<String> abnOrTfn;

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abn_branch")
    private JsonNullable<String> abnBranch;

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acn")
    private JsonNullable<String> acn;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private Optional<? extends List<BankAccount>> bankAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Website>> websites;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLink>> socialLinks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_type")
    private Optional<? extends CompanyRowType> rowType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * Whether the company is read-only or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("read_only")
    private JsonNullable<Boolean> readOnly;

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CompanyInput(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("image") JsonNullable<String> image,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("vat_number") JsonNullable<String> vatNumber,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("fax") JsonNullable<String> fax,
            @JsonProperty("annual_revenue") JsonNullable<String> annualRevenue,
            @JsonProperty("number_of_employees") JsonNullable<String> numberOfEmployees,
            @JsonProperty("industry") JsonNullable<String> industry,
            @JsonProperty("ownership") JsonNullable<String> ownership,
            @JsonProperty("sales_tax_number") JsonNullable<String> salesTaxNumber,
            @JsonProperty("payee_number") JsonNullable<String> payeeNumber,
            @JsonProperty("abn_or_tfn") JsonNullable<String> abnOrTfn,
            @JsonProperty("abn_branch") JsonNullable<String> abnBranch,
            @JsonProperty("acn") JsonNullable<String> acn,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("bank_accounts") Optional<? extends List<BankAccount>> bankAccounts,
            @JsonProperty("websites") Optional<? extends List<Website>> websites,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("social_links") Optional<? extends List<SocialLink>> socialLinks,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("row_type") Optional<? extends CompanyRowType> rowType,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("read_only") JsonNullable<Boolean> readOnly,
            @JsonProperty("salutation") JsonNullable<String> salutation,
            @JsonProperty("birthday") JsonNullable<LocalDate> birthday,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(fax, "fax");
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        Utils.checkNotNull(industry, "industry");
        Utils.checkNotNull(ownership, "ownership");
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        Utils.checkNotNull(payeeNumber, "payeeNumber");
        Utils.checkNotNull(abnOrTfn, "abnOrTfn");
        Utils.checkNotNull(abnBranch, "abnBranch");
        Utils.checkNotNull(acn, "acn");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(rowType, "rowType");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(readOnly, "readOnly");
        Utils.checkNotNull(salutation, "salutation");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.ownerId = ownerId;
        this.image = image;
        this.description = description;
        this.vatNumber = vatNumber;
        this.currency = currency;
        this.status = status;
        this.fax = fax;
        this.annualRevenue = annualRevenue;
        this.numberOfEmployees = numberOfEmployees;
        this.industry = industry;
        this.ownership = ownership;
        this.salesTaxNumber = salesTaxNumber;
        this.payeeNumber = payeeNumber;
        this.abnOrTfn = abnOrTfn;
        this.abnBranch = abnBranch;
        this.acn = acn;
        this.firstName = firstName;
        this.lastName = lastName;
        this.bankAccounts = bankAccounts;
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.rowType = rowType;
        this.customFields = customFields;
        this.tags = tags;
        this.readOnly = readOnly;
        this.salutation = salutation;
        this.birthday = birthday;
        this.passThrough = passThrough;
    }
    
    public CompanyInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Name of the company
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Owner ID
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The Image URL of the company
     */
    @JsonIgnore
    public JsonNullable<String> image() {
        return image;
    }

    /**
     * A description of the company
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The VAT number of the company
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The status of the company
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * The fax number of the company
     */
    @JsonIgnore
    public JsonNullable<String> fax() {
        return fax;
    }

    /**
     * The annual revenue of the company
     */
    @JsonIgnore
    public JsonNullable<String> annualRevenue() {
        return annualRevenue;
    }

    /**
     * Number of employees
     */
    @JsonIgnore
    public JsonNullable<String> numberOfEmployees() {
        return numberOfEmployees;
    }

    /**
     * The industry represents the type of business the company is in.
     */
    @JsonIgnore
    public JsonNullable<String> industry() {
        return industry;
    }

    /**
     * The ownership indicates the type of ownership of the company.
     */
    @JsonIgnore
    public JsonNullable<String> ownership() {
        return ownership;
    }

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    @JsonIgnore
    public JsonNullable<String> salesTaxNumber() {
        return salesTaxNumber;
    }

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    @JsonIgnore
    public JsonNullable<String> payeeNumber() {
        return payeeNumber;
    }

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    @JsonIgnore
    public JsonNullable<String> abnOrTfn() {
        return abnOrTfn;
    }

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    @JsonIgnore
    public JsonNullable<String> abnBranch() {
        return abnBranch;
    }

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    @JsonIgnore
    public JsonNullable<String> acn() {
        return acn;
    }

    /**
     * The first name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BankAccount>> bankAccounts() {
        return (Optional<List<BankAccount>>) bankAccounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Website>> websites() {
        return (Optional<List<Website>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLink>> socialLinks() {
        return (Optional<List<SocialLink>>) socialLinks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyRowType> rowType() {
        return (Optional<CompanyRowType>) rowType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * Whether the company is read-only or not
     */
    @JsonIgnore
    public JsonNullable<Boolean> readOnly() {
        return readOnly;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonIgnore
    public JsonNullable<String> salutation() {
        return salutation;
    }

    /**
     * The date of birth of the person.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> birthday() {
        return birthday;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the company
     */
    public CompanyInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the company
     */
    public CompanyInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Owner ID
     */
    public CompanyInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * Owner ID
     */
    public CompanyInput withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The Image URL of the company
     */
    public CompanyInput withImage(String image) {
        Utils.checkNotNull(image, "image");
        this.image = JsonNullable.of(image);
        return this;
    }

    /**
     * The Image URL of the company
     */
    public CompanyInput withImage(JsonNullable<String> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * A description of the company
     */
    public CompanyInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the company
     */
    public CompanyInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The VAT number of the company
     */
    public CompanyInput withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number of the company
     */
    public CompanyInput withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CompanyInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CompanyInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The status of the company
     */
    public CompanyInput withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the company
     */
    public CompanyInput withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The fax number of the company
     */
    public CompanyInput withFax(String fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = JsonNullable.of(fax);
        return this;
    }

    /**
     * The fax number of the company
     */
    public CompanyInput withFax(JsonNullable<String> fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = fax;
        return this;
    }

    /**
     * The annual revenue of the company
     */
    public CompanyInput withAnnualRevenue(String annualRevenue) {
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        this.annualRevenue = JsonNullable.of(annualRevenue);
        return this;
    }

    /**
     * The annual revenue of the company
     */
    public CompanyInput withAnnualRevenue(JsonNullable<String> annualRevenue) {
        Utils.checkNotNull(annualRevenue, "annualRevenue");
        this.annualRevenue = annualRevenue;
        return this;
    }

    /**
     * Number of employees
     */
    public CompanyInput withNumberOfEmployees(String numberOfEmployees) {
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        this.numberOfEmployees = JsonNullable.of(numberOfEmployees);
        return this;
    }

    /**
     * Number of employees
     */
    public CompanyInput withNumberOfEmployees(JsonNullable<String> numberOfEmployees) {
        Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
        this.numberOfEmployees = numberOfEmployees;
        return this;
    }

    /**
     * The industry represents the type of business the company is in.
     */
    public CompanyInput withIndustry(String industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = JsonNullable.of(industry);
        return this;
    }

    /**
     * The industry represents the type of business the company is in.
     */
    public CompanyInput withIndustry(JsonNullable<String> industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = industry;
        return this;
    }

    /**
     * The ownership indicates the type of ownership of the company.
     */
    public CompanyInput withOwnership(String ownership) {
        Utils.checkNotNull(ownership, "ownership");
        this.ownership = JsonNullable.of(ownership);
        return this;
    }

    /**
     * The ownership indicates the type of ownership of the company.
     */
    public CompanyInput withOwnership(JsonNullable<String> ownership) {
        Utils.checkNotNull(ownership, "ownership");
        this.ownership = ownership;
        return this;
    }

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    public CompanyInput withSalesTaxNumber(String salesTaxNumber) {
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
        return this;
    }

    /**
     * A sales tax number is a unique number that identifies a company for tax purposes.
     */
    public CompanyInput withSalesTaxNumber(JsonNullable<String> salesTaxNumber) {
        Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
        this.salesTaxNumber = salesTaxNumber;
        return this;
    }

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    public CompanyInput withPayeeNumber(String payeeNumber) {
        Utils.checkNotNull(payeeNumber, "payeeNumber");
        this.payeeNumber = JsonNullable.of(payeeNumber);
        return this;
    }

    /**
     * A payee number is a unique number that identifies a payee for tax purposes.
     */
    public CompanyInput withPayeeNumber(JsonNullable<String> payeeNumber) {
        Utils.checkNotNull(payeeNumber, "payeeNumber");
        this.payeeNumber = payeeNumber;
        return this;
    }

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    public CompanyInput withAbnOrTfn(String abnOrTfn) {
        Utils.checkNotNull(abnOrTfn, "abnOrTfn");
        this.abnOrTfn = JsonNullable.of(abnOrTfn);
        return this;
    }

    /**
     * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
     */
    public CompanyInput withAbnOrTfn(JsonNullable<String> abnOrTfn) {
        Utils.checkNotNull(abnOrTfn, "abnOrTfn");
        this.abnOrTfn = abnOrTfn;
        return this;
    }

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    public CompanyInput withAbnBranch(String abnBranch) {
        Utils.checkNotNull(abnBranch, "abnBranch");
        this.abnBranch = JsonNullable.of(abnBranch);
        return this;
    }

    /**
     * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
     */
    public CompanyInput withAbnBranch(JsonNullable<String> abnBranch) {
        Utils.checkNotNull(abnBranch, "abnBranch");
        this.abnBranch = abnBranch;
        return this;
    }

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    public CompanyInput withAcn(String acn) {
        Utils.checkNotNull(acn, "acn");
        this.acn = JsonNullable.of(acn);
        return this;
    }

    /**
     * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
     */
    public CompanyInput withAcn(JsonNullable<String> acn) {
        Utils.checkNotNull(acn, "acn");
        this.acn = acn;
        return this;
    }

    /**
     * The first name of the person.
     */
    public CompanyInput withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public CompanyInput withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the person.
     */
    public CompanyInput withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public CompanyInput withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public CompanyInput withBankAccounts(List<BankAccount> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = Optional.ofNullable(bankAccounts);
        return this;
    }

    public CompanyInput withBankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = bankAccounts;
        return this;
    }

    public CompanyInput withWebsites(List<Website> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public CompanyInput withWebsites(Optional<? extends List<Website>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public CompanyInput withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public CompanyInput withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public CompanyInput withSocialLinks(List<SocialLink> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }

    public CompanyInput withSocialLinks(Optional<? extends List<SocialLink>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public CompanyInput withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public CompanyInput withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public CompanyInput withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public CompanyInput withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public CompanyInput withRowType(CompanyRowType rowType) {
        Utils.checkNotNull(rowType, "rowType");
        this.rowType = Optional.ofNullable(rowType);
        return this;
    }

    public CompanyInput withRowType(Optional<? extends CompanyRowType> rowType) {
        Utils.checkNotNull(rowType, "rowType");
        this.rowType = rowType;
        return this;
    }

    public CompanyInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public CompanyInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public CompanyInput withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public CompanyInput withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * Whether the company is read-only or not
     */
    public CompanyInput withReadOnly(boolean readOnly) {
        Utils.checkNotNull(readOnly, "readOnly");
        this.readOnly = JsonNullable.of(readOnly);
        return this;
    }

    /**
     * Whether the company is read-only or not
     */
    public CompanyInput withReadOnly(JsonNullable<Boolean> readOnly) {
        Utils.checkNotNull(readOnly, "readOnly");
        this.readOnly = readOnly;
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public CompanyInput withSalutation(String salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = JsonNullable.of(salutation);
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public CompanyInput withSalutation(JsonNullable<String> salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = salutation;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public CompanyInput withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public CompanyInput withBirthday(JsonNullable<LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CompanyInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CompanyInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyInput other = (CompanyInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.vatNumber, other.vatNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.fax, other.fax) &&
            Objects.deepEquals(this.annualRevenue, other.annualRevenue) &&
            Objects.deepEquals(this.numberOfEmployees, other.numberOfEmployees) &&
            Objects.deepEquals(this.industry, other.industry) &&
            Objects.deepEquals(this.ownership, other.ownership) &&
            Objects.deepEquals(this.salesTaxNumber, other.salesTaxNumber) &&
            Objects.deepEquals(this.payeeNumber, other.payeeNumber) &&
            Objects.deepEquals(this.abnOrTfn, other.abnOrTfn) &&
            Objects.deepEquals(this.abnBranch, other.abnBranch) &&
            Objects.deepEquals(this.acn, other.acn) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.bankAccounts, other.bankAccounts) &&
            Objects.deepEquals(this.websites, other.websites) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.rowType, other.rowType) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.readOnly, other.readOnly) &&
            Objects.deepEquals(this.salutation, other.salutation) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            ownerId,
            image,
            description,
            vatNumber,
            currency,
            status,
            fax,
            annualRevenue,
            numberOfEmployees,
            industry,
            ownership,
            salesTaxNumber,
            payeeNumber,
            abnOrTfn,
            abnBranch,
            acn,
            firstName,
            lastName,
            bankAccounts,
            websites,
            addresses,
            socialLinks,
            phoneNumbers,
            emails,
            rowType,
            customFields,
            tags,
            readOnly,
            salutation,
            birthday,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyInput.class,
                "name", name,
                "ownerId", ownerId,
                "image", image,
                "description", description,
                "vatNumber", vatNumber,
                "currency", currency,
                "status", status,
                "fax", fax,
                "annualRevenue", annualRevenue,
                "numberOfEmployees", numberOfEmployees,
                "industry", industry,
                "ownership", ownership,
                "salesTaxNumber", salesTaxNumber,
                "payeeNumber", payeeNumber,
                "abnOrTfn", abnOrTfn,
                "abnBranch", abnBranch,
                "acn", acn,
                "firstName", firstName,
                "lastName", lastName,
                "bankAccounts", bankAccounts,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "rowType", rowType,
                "customFields", customFields,
                "tags", tags,
                "readOnly", readOnly,
                "salutation", salutation,
                "birthday", birthday,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> ownerId = JsonNullable.undefined();
 
        private JsonNullable<String> image = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> vatNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private JsonNullable<String> fax = JsonNullable.undefined();
 
        private JsonNullable<String> annualRevenue = JsonNullable.undefined();
 
        private JsonNullable<String> numberOfEmployees = JsonNullable.undefined();
 
        private JsonNullable<String> industry = JsonNullable.undefined();
 
        private JsonNullable<String> ownership = JsonNullable.undefined();
 
        private JsonNullable<String> salesTaxNumber = JsonNullable.undefined();
 
        private JsonNullable<String> payeeNumber = JsonNullable.undefined();
 
        private JsonNullable<String> abnOrTfn = JsonNullable.undefined();
 
        private JsonNullable<String> abnBranch = JsonNullable.undefined();
 
        private JsonNullable<String> acn = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private Optional<? extends List<BankAccount>> bankAccounts = Optional.empty();
 
        private Optional<? extends List<Website>> websites = Optional.empty();
 
        private Optional<? extends List<Address>> addresses = Optional.empty();
 
        private Optional<? extends List<SocialLink>> socialLinks = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Email>> emails = Optional.empty();
 
        private Optional<? extends CompanyRowType> rowType = Optional.empty();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<Boolean> readOnly = JsonNullable.undefined();
 
        private JsonNullable<String> salutation = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> birthday = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the company
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the company
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Owner ID
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * Owner ID
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        /**
         * The Image URL of the company
         */
        public Builder image(String image) {
            Utils.checkNotNull(image, "image");
            this.image = JsonNullable.of(image);
            return this;
        }

        /**
         * The Image URL of the company
         */
        public Builder image(JsonNullable<String> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        /**
         * A description of the company
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the company
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The VAT number of the company
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number of the company
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The status of the company
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the company
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The fax number of the company
         */
        public Builder fax(String fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * The fax number of the company
         */
        public Builder fax(JsonNullable<String> fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = fax;
            return this;
        }

        /**
         * The annual revenue of the company
         */
        public Builder annualRevenue(String annualRevenue) {
            Utils.checkNotNull(annualRevenue, "annualRevenue");
            this.annualRevenue = JsonNullable.of(annualRevenue);
            return this;
        }

        /**
         * The annual revenue of the company
         */
        public Builder annualRevenue(JsonNullable<String> annualRevenue) {
            Utils.checkNotNull(annualRevenue, "annualRevenue");
            this.annualRevenue = annualRevenue;
            return this;
        }

        /**
         * Number of employees
         */
        public Builder numberOfEmployees(String numberOfEmployees) {
            Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
            this.numberOfEmployees = JsonNullable.of(numberOfEmployees);
            return this;
        }

        /**
         * Number of employees
         */
        public Builder numberOfEmployees(JsonNullable<String> numberOfEmployees) {
            Utils.checkNotNull(numberOfEmployees, "numberOfEmployees");
            this.numberOfEmployees = numberOfEmployees;
            return this;
        }

        /**
         * The industry represents the type of business the company is in.
         */
        public Builder industry(String industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = JsonNullable.of(industry);
            return this;
        }

        /**
         * The industry represents the type of business the company is in.
         */
        public Builder industry(JsonNullable<String> industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = industry;
            return this;
        }

        /**
         * The ownership indicates the type of ownership of the company.
         */
        public Builder ownership(String ownership) {
            Utils.checkNotNull(ownership, "ownership");
            this.ownership = JsonNullable.of(ownership);
            return this;
        }

        /**
         * The ownership indicates the type of ownership of the company.
         */
        public Builder ownership(JsonNullable<String> ownership) {
            Utils.checkNotNull(ownership, "ownership");
            this.ownership = ownership;
            return this;
        }

        /**
         * A sales tax number is a unique number that identifies a company for tax purposes.
         */
        public Builder salesTaxNumber(String salesTaxNumber) {
            Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
            this.salesTaxNumber = JsonNullable.of(salesTaxNumber);
            return this;
        }

        /**
         * A sales tax number is a unique number that identifies a company for tax purposes.
         */
        public Builder salesTaxNumber(JsonNullable<String> salesTaxNumber) {
            Utils.checkNotNull(salesTaxNumber, "salesTaxNumber");
            this.salesTaxNumber = salesTaxNumber;
            return this;
        }

        /**
         * A payee number is a unique number that identifies a payee for tax purposes.
         */
        public Builder payeeNumber(String payeeNumber) {
            Utils.checkNotNull(payeeNumber, "payeeNumber");
            this.payeeNumber = JsonNullable.of(payeeNumber);
            return this;
        }

        /**
         * A payee number is a unique number that identifies a payee for tax purposes.
         */
        public Builder payeeNumber(JsonNullable<String> payeeNumber) {
            Utils.checkNotNull(payeeNumber, "payeeNumber");
            this.payeeNumber = payeeNumber;
            return this;
        }

        /**
         * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
         */
        public Builder abnOrTfn(String abnOrTfn) {
            Utils.checkNotNull(abnOrTfn, "abnOrTfn");
            this.abnOrTfn = JsonNullable.of(abnOrTfn);
            return this;
        }

        /**
         * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
         */
        public Builder abnOrTfn(JsonNullable<String> abnOrTfn) {
            Utils.checkNotNull(abnOrTfn, "abnOrTfn");
            this.abnOrTfn = abnOrTfn;
            return this;
        }

        /**
         * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
         */
        public Builder abnBranch(String abnBranch) {
            Utils.checkNotNull(abnBranch, "abnBranch");
            this.abnBranch = JsonNullable.of(abnBranch);
            return this;
        }

        /**
         * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
         */
        public Builder abnBranch(JsonNullable<String> abnBranch) {
            Utils.checkNotNull(abnBranch, "abnBranch");
            this.abnBranch = abnBranch;
            return this;
        }

        /**
         * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
         */
        public Builder acn(String acn) {
            Utils.checkNotNull(acn, "acn");
            this.acn = JsonNullable.of(acn);
            return this;
        }

        /**
         * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
         */
        public Builder acn(JsonNullable<String> acn) {
            Utils.checkNotNull(acn, "acn");
            this.acn = acn;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder bankAccounts(List<BankAccount> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = Optional.ofNullable(bankAccounts);
            return this;
        }

        public Builder bankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = bankAccounts;
            return this;
        }

        public Builder websites(List<Website> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Website>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder socialLinks(List<SocialLink> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLink>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder rowType(CompanyRowType rowType) {
            Utils.checkNotNull(rowType, "rowType");
            this.rowType = Optional.ofNullable(rowType);
            return this;
        }

        public Builder rowType(Optional<? extends CompanyRowType> rowType) {
            Utils.checkNotNull(rowType, "rowType");
            this.rowType = rowType;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * Whether the company is read-only or not
         */
        public Builder readOnly(boolean readOnly) {
            Utils.checkNotNull(readOnly, "readOnly");
            this.readOnly = JsonNullable.of(readOnly);
            return this;
        }

        /**
         * Whether the company is read-only or not
         */
        public Builder readOnly(JsonNullable<Boolean> readOnly) {
            Utils.checkNotNull(readOnly, "readOnly");
            this.readOnly = readOnly;
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(String salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(JsonNullable<String> salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = salutation;
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public CompanyInput build() {
            return new CompanyInput(
                name,
                ownerId,
                image,
                description,
                vatNumber,
                currency,
                status,
                fax,
                annualRevenue,
                numberOfEmployees,
                industry,
                ownership,
                salesTaxNumber,
                payeeNumber,
                abnOrTfn,
                abnBranch,
                acn,
                firstName,
                lastName,
                bankAccounts,
                websites,
                addresses,
                socialLinks,
                phoneNumbers,
                emails,
                rowType,
                customFields,
                tags,
                readOnly,
                salutation,
                birthday,
                passThrough);
        }
    }
}

