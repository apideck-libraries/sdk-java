/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Compensation {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("employee_id")
    private JsonNullable<String> employeeId;

    /**
     * The employee's net pay. Only available when payroll has been processed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay")
    private JsonNullable<Double> netPay;

    /**
     * The employee's gross pay. Only available when payroll has been processed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_pay")
    private JsonNullable<Double> grossPay;

    /**
     * An array of employer and employee taxes for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    private JsonNullable<List<Tax>> taxes;

    /**
     * An array of employee deductions for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deductions")
    private JsonNullable<List<Deduction>> deductions;

    /**
     * An array of employee benefits for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefits")
    private JsonNullable<List<Benefit>> benefits;

    @JsonCreator
    public Compensation(
            @JsonProperty("employee_id") @Nullable String employeeId,
            @JsonProperty("net_pay") @Nullable JsonNullable<Double> netPay,
            @JsonProperty("gross_pay") @Nullable JsonNullable<Double> grossPay,
            @JsonProperty("taxes") @Nullable JsonNullable<List<Tax>> taxes,
            @JsonProperty("deductions") @Nullable JsonNullable<List<Deduction>> deductions,
            @JsonProperty("benefits") @Nullable JsonNullable<List<Benefit>> benefits) {
        this.employeeId = JsonNullable.of(employeeId);
        this.netPay = Optional.ofNullable(netPay)
            .orElse(JsonNullable.undefined());
        this.grossPay = Optional.ofNullable(grossPay)
            .orElse(JsonNullable.undefined());
        this.taxes = Optional.ofNullable(taxes)
            .orElse(JsonNullable.undefined());
        this.deductions = Optional.ofNullable(deductions)
            .orElse(JsonNullable.undefined());
        this.benefits = Optional.ofNullable(benefits)
            .orElse(JsonNullable.undefined());
    }
    
    public Compensation() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> employeeId() {
        return this.employeeId;
    }

    /**
     * The employee's net pay. Only available when payroll has been processed
     */
    public JsonNullable<Double> netPay() {
        return this.netPay;
    }

    /**
     * The employee's gross pay. Only available when payroll has been processed
     */
    public JsonNullable<Double> grossPay() {
        return this.grossPay;
    }

    /**
     * An array of employer and employee taxes for the pay period.
     */
    public JsonNullable<List<Tax>> taxes() {
        return this.taxes;
    }

    /**
     * An array of employee deductions for the pay period.
     */
    public JsonNullable<List<Deduction>> deductions() {
        return this.deductions;
    }

    /**
     * An array of employee benefits for the pay period.
     */
    public JsonNullable<List<Benefit>> benefits() {
        return this.benefits;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Compensation withEmployeeId(@Nullable String employeeId) {
        this.employeeId = JsonNullable.of(employeeId);
        return this;
    }


    /**
     * The employee's net pay. Only available when payroll has been processed
     */
    public Compensation withNetPay(@Nullable Double netPay) {
        this.netPay = JsonNullable.of(netPay);
        return this;
    }


    /**
     * The employee's gross pay. Only available when payroll has been processed
     */
    public Compensation withGrossPay(@Nullable Double grossPay) {
        this.grossPay = JsonNullable.of(grossPay);
        return this;
    }


    /**
     * An array of employer and employee taxes for the pay period.
     */
    public Compensation withTaxes(@Nullable List<Tax> taxes) {
        this.taxes = JsonNullable.of(taxes);
        return this;
    }


    /**
     * An array of employee deductions for the pay period.
     */
    public Compensation withDeductions(@Nullable List<Deduction> deductions) {
        this.deductions = JsonNullable.of(deductions);
        return this;
    }


    /**
     * An array of employee benefits for the pay period.
     */
    public Compensation withBenefits(@Nullable List<Benefit> benefits) {
        this.benefits = JsonNullable.of(benefits);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Compensation other = (Compensation) o;
        return 
            Utils.enhancedDeepEquals(this.employeeId, other.employeeId) &&
            Utils.enhancedDeepEquals(this.netPay, other.netPay) &&
            Utils.enhancedDeepEquals(this.grossPay, other.grossPay) &&
            Utils.enhancedDeepEquals(this.taxes, other.taxes) &&
            Utils.enhancedDeepEquals(this.deductions, other.deductions) &&
            Utils.enhancedDeepEquals(this.benefits, other.benefits);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            employeeId, netPay, grossPay,
            taxes, deductions, benefits);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Compensation.class,
                "employeeId", employeeId,
                "netPay", netPay,
                "grossPay", grossPay,
                "taxes", taxes,
                "deductions", deductions,
                "benefits", benefits);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String employeeId;

        private JsonNullable<Double> netPay;

        private JsonNullable<Double> grossPay;

        private JsonNullable<List<Tax>> taxes;

        private JsonNullable<List<Deduction>> deductions;

        private JsonNullable<List<Benefit>> benefits;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder employeeId(@Nullable String employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        /**
         * The employee's net pay. Only available when payroll has been processed
         */
        public Builder netPay(@Nullable Double netPay) {
            this.netPay = JsonNullable.of(netPay);
            return this;
        }

        /**
         * The employee's gross pay. Only available when payroll has been processed
         */
        public Builder grossPay(@Nullable Double grossPay) {
            this.grossPay = JsonNullable.of(grossPay);
            return this;
        }

        /**
         * An array of employer and employee taxes for the pay period.
         */
        public Builder taxes(@Nullable List<Tax> taxes) {
            this.taxes = JsonNullable.of(taxes);
            return this;
        }

        /**
         * An array of employee deductions for the pay period.
         */
        public Builder deductions(@Nullable List<Deduction> deductions) {
            this.deductions = JsonNullable.of(deductions);
            return this;
        }

        /**
         * An array of employee benefits for the pay period.
         */
        public Builder benefits(@Nullable List<Benefit> benefits) {
            this.benefits = JsonNullable.of(benefits);
            return this;
        }

        public Compensation build() {
            return new Compensation(
                employeeId, netPay, grossPay,
                taxes, deductions, benefits);
        }

    }
}
