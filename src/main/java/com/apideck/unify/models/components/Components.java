/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Components {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private JsonNullable<Double> rate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compound")
    private JsonNullable<Boolean> compound;

    @JsonCreator
    public Components(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("rate") JsonNullable<Double> rate,
            @JsonProperty("compound") JsonNullable<Boolean> compound) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(compound, "compound");
        this.id = id;
        this.name = name;
        this.rate = rate;
        this.compound = compound;
    }
    
    public Components() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<Double> rate() {
        return rate;
    }

    @JsonIgnore
    public JsonNullable<Boolean> compound() {
        return compound;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Components withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    public Components withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Components withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public Components withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Components withRate(double rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = JsonNullable.of(rate);
        return this;
    }

    public Components withRate(JsonNullable<Double> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    public Components withCompound(boolean compound) {
        Utils.checkNotNull(compound, "compound");
        this.compound = JsonNullable.of(compound);
        return this;
    }

    public Components withCompound(JsonNullable<Boolean> compound) {
        Utils.checkNotNull(compound, "compound");
        this.compound = compound;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Components other = (Components) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.rate, other.rate) &&
            Objects.deepEquals(this.compound, other.compound);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            rate,
            compound);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Components.class,
                "id", id,
                "name", name,
                "rate", rate,
                "compound", compound);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<Double> rate = JsonNullable.undefined();
 
        private JsonNullable<Boolean> compound = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder rate(double rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = JsonNullable.of(rate);
            return this;
        }

        public Builder rate(JsonNullable<Double> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }

        public Builder compound(boolean compound) {
            Utils.checkNotNull(compound, "compound");
            this.compound = JsonNullable.of(compound);
            return this;
        }

        public Builder compound(JsonNullable<Boolean> compound) {
            Utils.checkNotNull(compound, "compound");
            this.compound = compound;
            return this;
        }
        
        public Components build() {
            return new Components(
                id,
                name,
                rate,
                compound);
        }
    }
}

