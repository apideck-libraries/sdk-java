/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Configuration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private String resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaults")
    private List<Defaults> defaults;

    @JsonCreator
    public Configuration(
            @JsonProperty("resource") @Nullable String resource,
            @JsonProperty("defaults") @Nullable List<Defaults> defaults) {
        this.resource = resource;
        this.defaults = defaults;
    }
    
    public Configuration() {
        this(null, null);
    }

    public Optional<String> resource() {
        return Optional.ofNullable(this.resource);
    }

    public Optional<List<Defaults>> defaults() {
        return Optional.ofNullable(this.defaults);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Configuration withResource(@Nullable String resource) {
        this.resource = resource;
        return this;
    }


    public Configuration withDefaults(@Nullable List<Defaults> defaults) {
        this.defaults = defaults;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Configuration other = (Configuration) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.defaults, other.defaults);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, defaults);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Configuration.class,
                "resource", resource,
                "defaults", defaults);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private List<Defaults> defaults;

        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(@Nullable String resource) {
            this.resource = resource;
            return this;
        }

        public Builder defaults(@Nullable List<Defaults> defaults) {
            this.defaults = defaults;
            return this;
        }

        public Configuration build() {
            return new Configuration(
                resource, defaults);
        }

    }
}
