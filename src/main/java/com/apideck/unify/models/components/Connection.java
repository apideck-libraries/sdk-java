/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Connection {
    /**
     * The unique identifier of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The ID of the service this connection belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_id")
    private String serviceId;

    /**
     * The name of the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag_line")
    private String tagLine;

    /**
     * The unified API category where the connection belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_api")
    private String unifiedApi;

    /**
     * [Connection state flow](#section/Connection-state)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private ConnectionState state;

    /**
     * The current state of the Integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integration_state")
    private IntegrationState integrationState;

    /**
     * Type of authorization used by the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private AuthType authType;

    /**
     * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_grant_type")
    private OAuthGrantType oauthGrantType;

    /**
     * Status of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private ConnectionStatus status;

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Boolean enabled;

    /**
     * The website URL of the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private String website;

    /**
     * A visual icon of the connection, that will be shown in the Vault
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private String icon;

    /**
     * The logo of the connection, that will be shown in the Vault
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private String logo;

    /**
     * The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorize_url")
    private JsonNullable<String> authorizeUrl;

    /**
     * The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revoke_url")
    private JsonNullable<String> revokeUrl;

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private JsonNullable<Map<String, Object>> settings;

    /**
     * Attach your own consumer specific metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<Map<String, Object>> metadata;

    /**
     * The settings that are wanted to create a connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form_fields")
    private List<FormField> formFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private List<Configuration> configuration;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configurable_resources")
    private List<String> configurableResources;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_schema_support")
    private List<String> resourceSchemaSupport;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_settings_support")
    private List<String> resourceSettingsSupport;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation_support")
    private Boolean validationSupport;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema_support")
    private Boolean schemaSupport;

    /**
     * List of settings that are required to be configured on integration before authorization can occur
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings_required_for_authorization")
    private List<String> settingsRequiredForAuthorization;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptions")
    private List<WebhookSubscription> subscriptions;

    /**
     * Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_guide")
    private Boolean hasGuide;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Double createdAt;

    /**
     * List of custom mappings configured for this connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private List<CustomMapping> customMappings;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<Double> updatedAt;

    @JsonCreator
    public Connection(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("service_id") @Nullable String serviceId,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("tag_line") @Nullable String tagLine,
            @JsonProperty("unified_api") @Nullable String unifiedApi,
            @JsonProperty("state") @Nullable ConnectionState state,
            @JsonProperty("integration_state") @Nullable IntegrationState integrationState,
            @JsonProperty("auth_type") @Nullable AuthType authType,
            @JsonProperty("oauth_grant_type") @Nullable OAuthGrantType oauthGrantType,
            @JsonProperty("status") @Nullable ConnectionStatus status,
            @JsonProperty("enabled") @Nullable Boolean enabled,
            @JsonProperty("website") @Nullable String website,
            @JsonProperty("icon") @Nullable String icon,
            @JsonProperty("logo") @Nullable String logo,
            @JsonProperty("authorize_url") @Nullable JsonNullable<String> authorizeUrl,
            @JsonProperty("revoke_url") @Nullable JsonNullable<String> revokeUrl,
            @JsonProperty("settings") @Nullable JsonNullable<Map<String, Object>> settings,
            @JsonProperty("metadata") @Nullable JsonNullable<Map<String, Object>> metadata,
            @JsonProperty("form_fields") @Nullable List<FormField> formFields,
            @JsonProperty("configuration") @Nullable List<Configuration> configuration,
            @JsonProperty("configurable_resources") @Nullable List<String> configurableResources,
            @JsonProperty("resource_schema_support") @Nullable List<String> resourceSchemaSupport,
            @JsonProperty("resource_settings_support") @Nullable List<String> resourceSettingsSupport,
            @JsonProperty("validation_support") @Nullable Boolean validationSupport,
            @JsonProperty("schema_support") @Nullable Boolean schemaSupport,
            @JsonProperty("settings_required_for_authorization") @Nullable List<String> settingsRequiredForAuthorization,
            @JsonProperty("subscriptions") @Nullable List<WebhookSubscription> subscriptions,
            @JsonProperty("has_guide") @Nullable Boolean hasGuide,
            @JsonProperty("created_at") @Nullable Double createdAt,
            @JsonProperty("custom_mappings") @Nullable List<CustomMapping> customMappings,
            @JsonProperty("updated_at") @Nullable JsonNullable<Double> updatedAt) {
        this.id = id;
        this.serviceId = serviceId;
        this.name = name;
        this.tagLine = tagLine;
        this.unifiedApi = unifiedApi;
        this.state = state;
        this.integrationState = integrationState;
        this.authType = authType;
        this.oauthGrantType = oauthGrantType;
        this.status = status;
        this.enabled = enabled;
        this.website = website;
        this.icon = icon;
        this.logo = logo;
        this.authorizeUrl = Optional.ofNullable(authorizeUrl)
            .orElse(JsonNullable.undefined());
        this.revokeUrl = Optional.ofNullable(revokeUrl)
            .orElse(JsonNullable.undefined());
        this.settings = Optional.ofNullable(settings)
            .orElse(JsonNullable.undefined());
        this.metadata = Optional.ofNullable(metadata)
            .orElse(JsonNullable.undefined());
        this.formFields = formFields;
        this.configuration = configuration;
        this.configurableResources = configurableResources;
        this.resourceSchemaSupport = resourceSchemaSupport;
        this.resourceSettingsSupport = resourceSettingsSupport;
        this.validationSupport = validationSupport;
        this.schemaSupport = schemaSupport;
        this.settingsRequiredForAuthorization = settingsRequiredForAuthorization;
        this.subscriptions = subscriptions;
        this.hasGuide = hasGuide;
        this.createdAt = createdAt;
        this.customMappings = customMappings;
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
    }
    
    public Connection() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The unique identifier of the connection.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The ID of the service this connection belongs to.
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The name of the connection
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public Optional<String> tagLine() {
        return Optional.ofNullable(this.tagLine);
    }

    /**
     * The unified API category where the connection belongs to.
     */
    public Optional<String> unifiedApi() {
        return Optional.ofNullable(this.unifiedApi);
    }

    /**
     * [Connection state flow](#section/Connection-state)
     */
    public Optional<ConnectionState> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The current state of the Integration.
     */
    public Optional<IntegrationState> integrationState() {
        return Optional.ofNullable(this.integrationState);
    }

    /**
     * Type of authorization used by the connector
     */
    public Optional<AuthType> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
     */
    public Optional<OAuthGrantType> oauthGrantType() {
        return Optional.ofNullable(this.oauthGrantType);
    }

    /**
     * Status of the connection.
     */
    public Optional<ConnectionStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The website URL of the connection
     */
    public Optional<String> website() {
        return Optional.ofNullable(this.website);
    }

    /**
     * A visual icon of the connection, that will be shown in the Vault
     */
    public Optional<String> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The logo of the connection, that will be shown in the Vault
     */
    public Optional<String> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    public JsonNullable<String> authorizeUrl() {
        return this.authorizeUrl;
    }

    /**
     * The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    public JsonNullable<String> revokeUrl() {
        return this.revokeUrl;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public JsonNullable<Map<String, Object>> settings() {
        return this.settings;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public JsonNullable<Map<String, Object>> metadata() {
        return this.metadata;
    }

    /**
     * The settings that are wanted to create a connection.
     */
    public Optional<List<FormField>> formFields() {
        return Optional.ofNullable(this.formFields);
    }

    public Optional<List<Configuration>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    public Optional<List<String>> configurableResources() {
        return Optional.ofNullable(this.configurableResources);
    }

    public Optional<List<String>> resourceSchemaSupport() {
        return Optional.ofNullable(this.resourceSchemaSupport);
    }

    public Optional<List<String>> resourceSettingsSupport() {
        return Optional.ofNullable(this.resourceSettingsSupport);
    }

    public Optional<Boolean> validationSupport() {
        return Optional.ofNullable(this.validationSupport);
    }

    public Optional<Boolean> schemaSupport() {
        return Optional.ofNullable(this.schemaSupport);
    }

    /**
     * List of settings that are required to be configured on integration before authorization can occur
     */
    public Optional<List<String>> settingsRequiredForAuthorization() {
        return Optional.ofNullable(this.settingsRequiredForAuthorization);
    }

    public Optional<List<WebhookSubscription>> subscriptions() {
        return Optional.ofNullable(this.subscriptions);
    }

    /**
     * Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
     */
    public Optional<Boolean> hasGuide() {
        return Optional.ofNullable(this.hasGuide);
    }

    public Optional<Double> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * List of custom mappings configured for this connection
     */
    public Optional<List<CustomMapping>> customMappings() {
        return Optional.ofNullable(this.customMappings);
    }

    public JsonNullable<Double> updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the connection.
     */
    public Connection withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The ID of the service this connection belongs to.
     */
    public Connection withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * The name of the connection
     */
    public Connection withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    public Connection withTagLine(@Nullable String tagLine) {
        this.tagLine = tagLine;
        return this;
    }


    /**
     * The unified API category where the connection belongs to.
     */
    public Connection withUnifiedApi(@Nullable String unifiedApi) {
        this.unifiedApi = unifiedApi;
        return this;
    }


    /**
     * [Connection state flow](#section/Connection-state)
     */
    public Connection withState(@Nullable ConnectionState state) {
        this.state = state;
        return this;
    }


    /**
     * The current state of the Integration.
     */
    public Connection withIntegrationState(@Nullable IntegrationState integrationState) {
        this.integrationState = integrationState;
        return this;
    }


    /**
     * Type of authorization used by the connector
     */
    public Connection withAuthType(@Nullable AuthType authType) {
        this.authType = authType;
        return this;
    }


    /**
     * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
     */
    public Connection withOauthGrantType(@Nullable OAuthGrantType oauthGrantType) {
        this.oauthGrantType = oauthGrantType;
        return this;
    }


    /**
     * Status of the connection.
     */
    public Connection withStatus(@Nullable ConnectionStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public Connection withEnabled(@Nullable Boolean enabled) {
        this.enabled = enabled;
        return this;
    }


    /**
     * The website URL of the connection
     */
    public Connection withWebsite(@Nullable String website) {
        this.website = website;
        return this;
    }


    /**
     * A visual icon of the connection, that will be shown in the Vault
     */
    public Connection withIcon(@Nullable String icon) {
        this.icon = icon;
        return this;
    }


    /**
     * The logo of the connection, that will be shown in the Vault
     */
    public Connection withLogo(@Nullable String logo) {
        this.logo = logo;
        return this;
    }


    /**
     * The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    public Connection withAuthorizeUrl(@Nullable String authorizeUrl) {
        this.authorizeUrl = JsonNullable.of(authorizeUrl);
        return this;
    }


    /**
     * The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
     */
    public Connection withRevokeUrl(@Nullable String revokeUrl) {
        this.revokeUrl = JsonNullable.of(revokeUrl);
        return this;
    }


    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public Connection withSettings(@Nullable Map<String, Object> settings) {
        this.settings = JsonNullable.of(settings);
        return this;
    }


    /**
     * Attach your own consumer specific metadata
     */
    public Connection withMetadata(@Nullable Map<String, Object> metadata) {
        this.metadata = JsonNullable.of(metadata);
        return this;
    }


    /**
     * The settings that are wanted to create a connection.
     */
    public Connection withFormFields(@Nullable List<FormField> formFields) {
        this.formFields = formFields;
        return this;
    }


    public Connection withConfiguration(@Nullable List<Configuration> configuration) {
        this.configuration = configuration;
        return this;
    }


    public Connection withConfigurableResources(@Nullable List<String> configurableResources) {
        this.configurableResources = configurableResources;
        return this;
    }


    public Connection withResourceSchemaSupport(@Nullable List<String> resourceSchemaSupport) {
        this.resourceSchemaSupport = resourceSchemaSupport;
        return this;
    }


    public Connection withResourceSettingsSupport(@Nullable List<String> resourceSettingsSupport) {
        this.resourceSettingsSupport = resourceSettingsSupport;
        return this;
    }


    public Connection withValidationSupport(@Nullable Boolean validationSupport) {
        this.validationSupport = validationSupport;
        return this;
    }


    public Connection withSchemaSupport(@Nullable Boolean schemaSupport) {
        this.schemaSupport = schemaSupport;
        return this;
    }


    /**
     * List of settings that are required to be configured on integration before authorization can occur
     */
    public Connection withSettingsRequiredForAuthorization(@Nullable List<String> settingsRequiredForAuthorization) {
        this.settingsRequiredForAuthorization = settingsRequiredForAuthorization;
        return this;
    }


    public Connection withSubscriptions(@Nullable List<WebhookSubscription> subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }


    /**
     * Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
     */
    public Connection withHasGuide(@Nullable Boolean hasGuide) {
        this.hasGuide = hasGuide;
        return this;
    }


    public Connection withCreatedAt(@Nullable Double createdAt) {
        this.createdAt = createdAt;
        return this;
    }


    /**
     * List of custom mappings configured for this connection
     */
    public Connection withCustomMappings(@Nullable List<CustomMapping> customMappings) {
        this.customMappings = customMappings;
        return this;
    }


    public Connection withUpdatedAt(@Nullable Double updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Connection other = (Connection) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.tagLine, other.tagLine) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.integrationState, other.integrationState) &&
            Utils.enhancedDeepEquals(this.authType, other.authType) &&
            Utils.enhancedDeepEquals(this.oauthGrantType, other.oauthGrantType) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.website, other.website) &&
            Utils.enhancedDeepEquals(this.icon, other.icon) &&
            Utils.enhancedDeepEquals(this.logo, other.logo) &&
            Utils.enhancedDeepEquals(this.authorizeUrl, other.authorizeUrl) &&
            Utils.enhancedDeepEquals(this.revokeUrl, other.revokeUrl) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.formFields, other.formFields) &&
            Utils.enhancedDeepEquals(this.configuration, other.configuration) &&
            Utils.enhancedDeepEquals(this.configurableResources, other.configurableResources) &&
            Utils.enhancedDeepEquals(this.resourceSchemaSupport, other.resourceSchemaSupport) &&
            Utils.enhancedDeepEquals(this.resourceSettingsSupport, other.resourceSettingsSupport) &&
            Utils.enhancedDeepEquals(this.validationSupport, other.validationSupport) &&
            Utils.enhancedDeepEquals(this.schemaSupport, other.schemaSupport) &&
            Utils.enhancedDeepEquals(this.settingsRequiredForAuthorization, other.settingsRequiredForAuthorization) &&
            Utils.enhancedDeepEquals(this.subscriptions, other.subscriptions) &&
            Utils.enhancedDeepEquals(this.hasGuide, other.hasGuide) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, serviceId, name,
            tagLine, unifiedApi, state,
            integrationState, authType, oauthGrantType,
            status, enabled, website,
            icon, logo, authorizeUrl,
            revokeUrl, settings, metadata,
            formFields, configuration, configurableResources,
            resourceSchemaSupport, resourceSettingsSupport, validationSupport,
            schemaSupport, settingsRequiredForAuthorization, subscriptions,
            hasGuide, createdAt, customMappings,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Connection.class,
                "id", id,
                "serviceId", serviceId,
                "name", name,
                "tagLine", tagLine,
                "unifiedApi", unifiedApi,
                "state", state,
                "integrationState", integrationState,
                "authType", authType,
                "oauthGrantType", oauthGrantType,
                "status", status,
                "enabled", enabled,
                "website", website,
                "icon", icon,
                "logo", logo,
                "authorizeUrl", authorizeUrl,
                "revokeUrl", revokeUrl,
                "settings", settings,
                "metadata", metadata,
                "formFields", formFields,
                "configuration", configuration,
                "configurableResources", configurableResources,
                "resourceSchemaSupport", resourceSchemaSupport,
                "resourceSettingsSupport", resourceSettingsSupport,
                "validationSupport", validationSupport,
                "schemaSupport", schemaSupport,
                "settingsRequiredForAuthorization", settingsRequiredForAuthorization,
                "subscriptions", subscriptions,
                "hasGuide", hasGuide,
                "createdAt", createdAt,
                "customMappings", customMappings,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String serviceId;

        private String name;

        private String tagLine;

        private String unifiedApi;

        private ConnectionState state;

        private IntegrationState integrationState;

        private AuthType authType;

        private OAuthGrantType oauthGrantType;

        private ConnectionStatus status;

        private Boolean enabled;

        private String website;

        private String icon;

        private String logo;

        private JsonNullable<String> authorizeUrl;

        private JsonNullable<String> revokeUrl;

        private JsonNullable<Map<String, Object>> settings;

        private JsonNullable<Map<String, Object>> metadata;

        private List<FormField> formFields;

        private List<Configuration> configuration;

        private List<String> configurableResources;

        private List<String> resourceSchemaSupport;

        private List<String> resourceSettingsSupport;

        private Boolean validationSupport;

        private Boolean schemaSupport;

        private List<String> settingsRequiredForAuthorization;

        private List<WebhookSubscription> subscriptions;

        private Boolean hasGuide;

        private Double createdAt;

        private List<CustomMapping> customMappings;

        private JsonNullable<Double> updatedAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the connection.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The ID of the service this connection belongs to.
         */
        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * The name of the connection
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder tagLine(@Nullable String tagLine) {
            this.tagLine = tagLine;
            return this;
        }

        /**
         * The unified API category where the connection belongs to.
         */
        public Builder unifiedApi(@Nullable String unifiedApi) {
            this.unifiedApi = unifiedApi;
            return this;
        }

        /**
         * [Connection state flow](#section/Connection-state)
         */
        public Builder state(@Nullable ConnectionState state) {
            this.state = state;
            return this;
        }

        /**
         * The current state of the Integration.
         */
        public Builder integrationState(@Nullable IntegrationState integrationState) {
            this.integrationState = integrationState;
            return this;
        }

        /**
         * Type of authorization used by the connector
         */
        public Builder authType(@Nullable AuthType authType) {
            this.authType = authType;
            return this;
        }

        /**
         * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
         */
        public Builder oauthGrantType(@Nullable OAuthGrantType oauthGrantType) {
            this.oauthGrantType = oauthGrantType;
            return this;
        }

        /**
         * Status of the connection.
         */
        public Builder status(@Nullable ConnectionStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
         */
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        /**
         * The website URL of the connection
         */
        public Builder website(@Nullable String website) {
            this.website = website;
            return this;
        }

        /**
         * A visual icon of the connection, that will be shown in the Vault
         */
        public Builder icon(@Nullable String icon) {
            this.icon = icon;
            return this;
        }

        /**
         * The logo of the connection, that will be shown in the Vault
         */
        public Builder logo(@Nullable String logo) {
            this.logo = logo;
            return this;
        }

        /**
         * The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter to the `authorize_url`. Be sure to URL encode the `redirect_uri` part. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
         */
        public Builder authorizeUrl(@Nullable String authorizeUrl) {
            this.authorizeUrl = JsonNullable.of(authorizeUrl);
            return this;
        }

        /**
         * The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
         */
        public Builder revokeUrl(@Nullable String revokeUrl) {
            this.revokeUrl = JsonNullable.of(revokeUrl);
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(@Nullable Map<String, Object> settings) {
            this.settings = JsonNullable.of(settings);
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(@Nullable Map<String, Object> metadata) {
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * The settings that are wanted to create a connection.
         */
        public Builder formFields(@Nullable List<FormField> formFields) {
            this.formFields = formFields;
            return this;
        }

        public Builder configuration(@Nullable List<Configuration> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configurableResources(@Nullable List<String> configurableResources) {
            this.configurableResources = configurableResources;
            return this;
        }

        public Builder resourceSchemaSupport(@Nullable List<String> resourceSchemaSupport) {
            this.resourceSchemaSupport = resourceSchemaSupport;
            return this;
        }

        public Builder resourceSettingsSupport(@Nullable List<String> resourceSettingsSupport) {
            this.resourceSettingsSupport = resourceSettingsSupport;
            return this;
        }

        public Builder validationSupport(@Nullable Boolean validationSupport) {
            this.validationSupport = validationSupport;
            return this;
        }

        public Builder schemaSupport(@Nullable Boolean schemaSupport) {
            this.schemaSupport = schemaSupport;
            return this;
        }

        /**
         * List of settings that are required to be configured on integration before authorization can occur
         */
        public Builder settingsRequiredForAuthorization(@Nullable List<String> settingsRequiredForAuthorization) {
            this.settingsRequiredForAuthorization = settingsRequiredForAuthorization;
            return this;
        }

        public Builder subscriptions(@Nullable List<WebhookSubscription> subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }

        /**
         * Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
         */
        public Builder hasGuide(@Nullable Boolean hasGuide) {
            this.hasGuide = hasGuide;
            return this;
        }

        public Builder createdAt(@Nullable Double createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(@Nullable List<CustomMapping> customMappings) {
            this.customMappings = customMappings;
            return this;
        }

        public Builder updatedAt(@Nullable Double updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        public Connection build() {
            return new Connection(
                id, serviceId, name,
                tagLine, unifiedApi, state,
                integrationState, authType, oauthGrantType,
                status, enabled, website,
                icon, logo, authorizeUrl,
                revokeUrl, settings, metadata,
                formFields, configuration, configurableResources,
                resourceSchemaSupport, resourceSettingsSupport, validationSupport,
                schemaSupport, settingsRequiredForAuthorization, subscriptions,
                hasGuide, createdAt, customMappings,
                updatedAt);
        }

    }
}
