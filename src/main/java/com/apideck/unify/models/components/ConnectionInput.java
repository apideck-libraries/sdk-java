/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ConnectionInput {

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private JsonNullable<? extends Map<String, Object>> settings;

    /**
     * Attach your own consumer specific metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, Object>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private Optional<? extends List<ConnectionConfiguration>> configuration;

    /**
     * List of custom mappings configured for this connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private Optional<? extends List<CustomMappingInput>> customMappings;

    @JsonCreator
    public ConnectionInput(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("settings") JsonNullable<? extends Map<String, Object>> settings,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, Object>> metadata,
            @JsonProperty("configuration") Optional<? extends List<ConnectionConfiguration>> configuration,
            @JsonProperty("custom_mappings") Optional<? extends List<CustomMappingInput>> customMappings) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(settings, "settings");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(customMappings, "customMappings");
        this.enabled = enabled;
        this.settings = settings;
        this.metadata = metadata;
        this.configuration = configuration;
        this.customMappings = customMappings;
    }
    
    public ConnectionInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> settings() {
        return (JsonNullable<Map<String, Object>>) settings;
    }

    /**
     * Attach your own consumer specific metadata
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> metadata() {
        return (JsonNullable<Map<String, Object>>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ConnectionConfiguration>> configuration() {
        return (Optional<List<ConnectionConfiguration>>) configuration;
    }

    /**
     * List of custom mappings configured for this connection
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomMappingInput>> customMappings() {
        return (Optional<List<CustomMappingInput>>) customMappings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public ConnectionInput withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public ConnectionInput withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConnectionInput withSettings(Map<String, Object> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = JsonNullable.of(settings);
        return this;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConnectionInput withSettings(JsonNullable<? extends Map<String, Object>> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public ConnectionInput withMetadata(Map<String, Object> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public ConnectionInput withMetadata(JsonNullable<? extends Map<String, Object>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public ConnectionInput withConfiguration(List<ConnectionConfiguration> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = Optional.ofNullable(configuration);
        return this;
    }

    public ConnectionInput withConfiguration(Optional<? extends List<ConnectionConfiguration>> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    /**
     * List of custom mappings configured for this connection
     */
    public ConnectionInput withCustomMappings(List<CustomMappingInput> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = Optional.ofNullable(customMappings);
        return this;
    }

    /**
     * List of custom mappings configured for this connection
     */
    public ConnectionInput withCustomMappings(Optional<? extends List<CustomMappingInput>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionInput other = (ConnectionInput) o;
        return 
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.settings, other.settings) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.customMappings, other.customMappings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enabled,
            settings,
            metadata,
            configuration,
            customMappings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionInput.class,
                "enabled", enabled,
                "settings", settings,
                "metadata", metadata,
                "configuration", configuration,
                "customMappings", customMappings);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private JsonNullable<? extends Map<String, Object>> settings = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> metadata = JsonNullable.undefined();
 
        private Optional<? extends List<ConnectionConfiguration>> configuration = Optional.empty();
 
        private Optional<? extends List<CustomMappingInput>> customMappings = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(Map<String, Object> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = JsonNullable.of(settings);
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(JsonNullable<? extends Map<String, Object>> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(Map<String, Object> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(JsonNullable<? extends Map<String, Object>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder configuration(List<ConnectionConfiguration> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        public Builder configuration(Optional<? extends List<ConnectionConfiguration>> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(List<CustomMappingInput> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = Optional.ofNullable(customMappings);
            return this;
        }

        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(Optional<? extends List<CustomMappingInput>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }
        
        public ConnectionInput build() {
            return new ConnectionInput(
                enabled,
                settings,
                metadata,
                configuration,
                customMappings);
        }
    }
}

