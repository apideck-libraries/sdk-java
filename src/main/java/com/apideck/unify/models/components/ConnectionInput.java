/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ConnectionInput {
    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Boolean enabled;

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private JsonNullable<Map<String, Object>> settings;

    /**
     * Attach your own consumer specific metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<Map<String, Object>> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private List<ConnectionConfiguration> configuration;

    /**
     * List of custom mappings configured for this connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private List<CustomMappingInput> customMappings;

    @JsonCreator
    public ConnectionInput(
            @JsonProperty("enabled") @Nullable Boolean enabled,
            @JsonProperty("settings") @Nullable JsonNullable<Map<String, Object>> settings,
            @JsonProperty("metadata") @Nullable JsonNullable<Map<String, Object>> metadata,
            @JsonProperty("configuration") @Nullable List<ConnectionConfiguration> configuration,
            @JsonProperty("custom_mappings") @Nullable List<CustomMappingInput> customMappings) {
        this.enabled = enabled;
        this.settings = Optional.ofNullable(settings)
            .orElse(JsonNullable.undefined());
        this.metadata = Optional.ofNullable(metadata)
            .orElse(JsonNullable.undefined());
        this.configuration = configuration;
        this.customMappings = customMappings;
    }
    
    public ConnectionInput() {
        this(null, null, null,
            null, null);
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public JsonNullable<Map<String, Object>> settings() {
        return this.settings;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public JsonNullable<Map<String, Object>> metadata() {
        return this.metadata;
    }

    public Optional<List<ConnectionConfiguration>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * List of custom mappings configured for this connection
     */
    public Optional<List<CustomMappingInput>> customMappings() {
        return Optional.ofNullable(this.customMappings);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
     */
    public ConnectionInput withEnabled(@Nullable Boolean enabled) {
        this.enabled = enabled;
        return this;
    }


    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConnectionInput withSettings(@Nullable Map<String, Object> settings) {
        this.settings = JsonNullable.of(settings);
        return this;
    }


    /**
     * Attach your own consumer specific metadata
     */
    public ConnectionInput withMetadata(@Nullable Map<String, Object> metadata) {
        this.metadata = JsonNullable.of(metadata);
        return this;
    }


    public ConnectionInput withConfiguration(@Nullable List<ConnectionConfiguration> configuration) {
        this.configuration = configuration;
        return this;
    }


    /**
     * List of custom mappings configured for this connection
     */
    public ConnectionInput withCustomMappings(@Nullable List<CustomMappingInput> customMappings) {
        this.customMappings = customMappings;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionInput other = (ConnectionInput) o;
        return 
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.configuration, other.configuration) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            enabled, settings, metadata,
            configuration, customMappings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionInput.class,
                "enabled", enabled,
                "settings", settings,
                "metadata", metadata,
                "configuration", configuration,
                "customMappings", customMappings);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Boolean enabled;

        private JsonNullable<Map<String, Object>> settings;

        private JsonNullable<Map<String, Object>> metadata;

        private List<ConnectionConfiguration> configuration;

        private List<CustomMappingInput> customMappings;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
         */
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(@Nullable Map<String, Object> settings) {
            this.settings = JsonNullable.of(settings);
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(@Nullable Map<String, Object> metadata) {
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder configuration(@Nullable List<ConnectionConfiguration> configuration) {
            this.configuration = configuration;
            return this;
        }

        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(@Nullable List<CustomMappingInput> customMappings) {
            this.customMappings = customMappings;
            return this;
        }

        public ConnectionInput build() {
            return new ConnectionInput(
                enabled, settings, metadata,
                configuration, customMappings);
        }

    }
}
