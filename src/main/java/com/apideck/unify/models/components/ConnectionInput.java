/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ConnectionInput {
    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update
     * Connection API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private JsonNullable<? extends Map<String, Object>> settings;

    /**
     * Attach your own consumer specific metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, Object>> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private Optional<? extends List<ConnectionConfiguration>> configuration;

    /**
     * List of custom mappings configured for this connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private Optional<? extends List<CustomMappingInput>> customMappings;

    /**
     * The current consent state of the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consent_state")
    private Optional<? extends ConsentState> consentState;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_consent")
    private Optional<? extends ConsentRecordInput> latestConsent;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_data_scopes")
    private Optional<? extends DataScopesInput> applicationDataScopes;

    @JsonCreator
    public ConnectionInput(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("settings") JsonNullable<? extends Map<String, Object>> settings,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, Object>> metadata,
            @JsonProperty("configuration") Optional<? extends List<ConnectionConfiguration>> configuration,
            @JsonProperty("custom_mappings") Optional<? extends List<CustomMappingInput>> customMappings,
            @JsonProperty("consent_state") Optional<? extends ConsentState> consentState,
            @JsonProperty("latest_consent") Optional<? extends ConsentRecordInput> latestConsent,
            @JsonProperty("application_data_scopes") Optional<? extends DataScopesInput> applicationDataScopes) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(settings, "settings");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(consentState, "consentState");
        Utils.checkNotNull(latestConsent, "latestConsent");
        Utils.checkNotNull(applicationDataScopes, "applicationDataScopes");
        this.enabled = enabled;
        this.settings = settings;
        this.metadata = metadata;
        this.configuration = configuration;
        this.customMappings = customMappings;
        this.consentState = consentState;
        this.latestConsent = latestConsent;
        this.applicationDataScopes = applicationDataScopes;
    }
    
    public ConnectionInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update
     * Connection API.
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> settings() {
        return (JsonNullable<Map<String, Object>>) settings;
    }

    /**
     * Attach your own consumer specific metadata
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> metadata() {
        return (JsonNullable<Map<String, Object>>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ConnectionConfiguration>> configuration() {
        return (Optional<List<ConnectionConfiguration>>) configuration;
    }

    /**
     * List of custom mappings configured for this connection
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomMappingInput>> customMappings() {
        return (Optional<List<CustomMappingInput>>) customMappings;
    }

    /**
     * The current consent state of the connection
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConsentState> consentState() {
        return (Optional<ConsentState>) consentState;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConsentRecordInput> latestConsent() {
        return (Optional<ConsentRecordInput>) latestConsent;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataScopesInput> applicationDataScopes() {
        return (Optional<DataScopesInput>) applicationDataScopes;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update
     * Connection API.
     */
    public ConnectionInput withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }


    /**
     * Whether the connection is enabled or not. You can enable or disable a connection using the Update
     * Connection API.
     */
    public ConnectionInput withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConnectionInput withSettings(Map<String, Object> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = JsonNullable.of(settings);
        return this;
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConnectionInput withSettings(JsonNullable<? extends Map<String, Object>> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public ConnectionInput withMetadata(Map<String, Object> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public ConnectionInput withMetadata(JsonNullable<? extends Map<String, Object>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public ConnectionInput withConfiguration(List<ConnectionConfiguration> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = Optional.ofNullable(configuration);
        return this;
    }


    public ConnectionInput withConfiguration(Optional<? extends List<ConnectionConfiguration>> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    /**
     * List of custom mappings configured for this connection
     */
    public ConnectionInput withCustomMappings(List<CustomMappingInput> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = Optional.ofNullable(customMappings);
        return this;
    }


    /**
     * List of custom mappings configured for this connection
     */
    public ConnectionInput withCustomMappings(Optional<? extends List<CustomMappingInput>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The current consent state of the connection
     */
    public ConnectionInput withConsentState(ConsentState consentState) {
        Utils.checkNotNull(consentState, "consentState");
        this.consentState = Optional.ofNullable(consentState);
        return this;
    }


    /**
     * The current consent state of the connection
     */
    public ConnectionInput withConsentState(Optional<? extends ConsentState> consentState) {
        Utils.checkNotNull(consentState, "consentState");
        this.consentState = consentState;
        return this;
    }

    public ConnectionInput withLatestConsent(ConsentRecordInput latestConsent) {
        Utils.checkNotNull(latestConsent, "latestConsent");
        this.latestConsent = Optional.ofNullable(latestConsent);
        return this;
    }


    public ConnectionInput withLatestConsent(Optional<? extends ConsentRecordInput> latestConsent) {
        Utils.checkNotNull(latestConsent, "latestConsent");
        this.latestConsent = latestConsent;
        return this;
    }

    public ConnectionInput withApplicationDataScopes(DataScopesInput applicationDataScopes) {
        Utils.checkNotNull(applicationDataScopes, "applicationDataScopes");
        this.applicationDataScopes = Optional.ofNullable(applicationDataScopes);
        return this;
    }


    public ConnectionInput withApplicationDataScopes(Optional<? extends DataScopesInput> applicationDataScopes) {
        Utils.checkNotNull(applicationDataScopes, "applicationDataScopes");
        this.applicationDataScopes = applicationDataScopes;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionInput other = (ConnectionInput) o;
        return 
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.configuration, other.configuration) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.consentState, other.consentState) &&
            Utils.enhancedDeepEquals(this.latestConsent, other.latestConsent) &&
            Utils.enhancedDeepEquals(this.applicationDataScopes, other.applicationDataScopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            enabled, settings, metadata,
            configuration, customMappings, consentState,
            latestConsent, applicationDataScopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionInput.class,
                "enabled", enabled,
                "settings", settings,
                "metadata", metadata,
                "configuration", configuration,
                "customMappings", customMappings,
                "consentState", consentState,
                "latestConsent", latestConsent,
                "applicationDataScopes", applicationDataScopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> enabled = Optional.empty();

        private JsonNullable<? extends Map<String, Object>> settings = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> metadata = JsonNullable.undefined();

        private Optional<? extends List<ConnectionConfiguration>> configuration = Optional.empty();

        private Optional<? extends List<CustomMappingInput>> customMappings = Optional.empty();

        private Optional<? extends ConsentState> consentState = Optional.empty();

        private Optional<? extends ConsentRecordInput> latestConsent = Optional.empty();

        private Optional<? extends DataScopesInput> applicationDataScopes = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update
         * Connection API.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether the connection is enabled or not. You can enable or disable a connection using the Update
         * Connection API.
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }


        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(Map<String, Object> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = JsonNullable.of(settings);
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(JsonNullable<? extends Map<String, Object>> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }


        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(Map<String, Object> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(JsonNullable<? extends Map<String, Object>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder configuration(List<ConnectionConfiguration> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        public Builder configuration(Optional<? extends List<ConnectionConfiguration>> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }


        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(List<CustomMappingInput> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = Optional.ofNullable(customMappings);
            return this;
        }

        /**
         * List of custom mappings configured for this connection
         */
        public Builder customMappings(Optional<? extends List<CustomMappingInput>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }


        /**
         * The current consent state of the connection
         */
        public Builder consentState(ConsentState consentState) {
            Utils.checkNotNull(consentState, "consentState");
            this.consentState = Optional.ofNullable(consentState);
            return this;
        }

        /**
         * The current consent state of the connection
         */
        public Builder consentState(Optional<? extends ConsentState> consentState) {
            Utils.checkNotNull(consentState, "consentState");
            this.consentState = consentState;
            return this;
        }


        public Builder latestConsent(ConsentRecordInput latestConsent) {
            Utils.checkNotNull(latestConsent, "latestConsent");
            this.latestConsent = Optional.ofNullable(latestConsent);
            return this;
        }

        public Builder latestConsent(Optional<? extends ConsentRecordInput> latestConsent) {
            Utils.checkNotNull(latestConsent, "latestConsent");
            this.latestConsent = latestConsent;
            return this;
        }


        public Builder applicationDataScopes(DataScopesInput applicationDataScopes) {
            Utils.checkNotNull(applicationDataScopes, "applicationDataScopes");
            this.applicationDataScopes = Optional.ofNullable(applicationDataScopes);
            return this;
        }

        public Builder applicationDataScopes(Optional<? extends DataScopesInput> applicationDataScopes) {
            Utils.checkNotNull(applicationDataScopes, "applicationDataScopes");
            this.applicationDataScopes = applicationDataScopes;
            return this;
        }

        public ConnectionInput build() {

            return new ConnectionInput(
                enabled, settings, metadata,
                configuration, customMappings, consentState,
                latestConsent, applicationDataScopes);
        }

    }
}
