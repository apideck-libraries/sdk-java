/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ConnectorDoc {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Name of the doc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Audience for the doc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audience")
    private Audience audience;

    /**
     * Format of the doc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private Format format;

    /**
     * Link to fetch the content of the doc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private String url;

    @JsonCreator
    public ConnectorDoc(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("audience") @Nullable Audience audience,
            @JsonProperty("format") @Nullable Format format,
            @JsonProperty("url") @Nullable String url) {
        this.id = id;
        this.name = name;
        this.audience = audience;
        this.format = format;
        this.url = url;
    }
    
    public ConnectorDoc() {
        this(null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the doc.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Audience for the doc.
     */
    public Optional<Audience> audience() {
        return Optional.ofNullable(this.audience);
    }

    /**
     * Format of the doc.
     */
    public Optional<Format> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Link to fetch the content of the doc.
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public ConnectorDoc withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Name of the doc.
     */
    public ConnectorDoc withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Audience for the doc.
     */
    public ConnectorDoc withAudience(@Nullable Audience audience) {
        this.audience = audience;
        return this;
    }


    /**
     * Format of the doc.
     */
    public ConnectorDoc withFormat(@Nullable Format format) {
        this.format = format;
        return this;
    }


    /**
     * Link to fetch the content of the doc.
     */
    public ConnectorDoc withUrl(@Nullable String url) {
        this.url = url;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorDoc other = (ConnectorDoc) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.audience, other.audience) &&
            Utils.enhancedDeepEquals(this.format, other.format) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, audience,
            format, url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorDoc.class,
                "id", id,
                "name", name,
                "audience", audience,
                "format", format,
                "url", url);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private Audience audience;

        private Format format;

        private String url;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Name of the doc.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Audience for the doc.
         */
        public Builder audience(@Nullable Audience audience) {
            this.audience = audience;
            return this;
        }

        /**
         * Format of the doc.
         */
        public Builder format(@Nullable Format format) {
            this.format = format;
            return this;
        }

        /**
         * Link to fetch the content of the doc.
         */
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }

        public ConnectorDoc build() {
            return new ConnectorDoc(
                id, name, audience,
                format, url);
        }

    }
}
