/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ConnectorEvent - Unify event that is supported on the connector. Events are delivered via Webhooks.
 */

public class ConnectorEvent {

    /**
     * Unify event type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    private Optional<String> eventType;

    /**
     * Unify event source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_source")
    private Optional<? extends EventSource> eventSource;

    /**
     * Downstream event type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_event_type")
    private Optional<String> downstreamEventType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Optional<? extends List<String>> resources;

    /**
     * Unify entity type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_type")
    private Optional<String> entityType;

    @JsonCreator
    public ConnectorEvent(
            @JsonProperty("event_type") Optional<String> eventType,
            @JsonProperty("event_source") Optional<? extends EventSource> eventSource,
            @JsonProperty("downstream_event_type") Optional<String> downstreamEventType,
            @JsonProperty("resources") Optional<? extends List<String>> resources,
            @JsonProperty("entity_type") Optional<String> entityType) {
        Utils.checkNotNull(eventType, "eventType");
        Utils.checkNotNull(eventSource, "eventSource");
        Utils.checkNotNull(downstreamEventType, "downstreamEventType");
        Utils.checkNotNull(resources, "resources");
        Utils.checkNotNull(entityType, "entityType");
        this.eventType = eventType;
        this.eventSource = eventSource;
        this.downstreamEventType = downstreamEventType;
        this.resources = resources;
        this.entityType = entityType;
    }
    
    public ConnectorEvent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unify event type
     */
    @JsonIgnore
    public Optional<String> eventType() {
        return eventType;
    }

    /**
     * Unify event source
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EventSource> eventSource() {
        return (Optional<EventSource>) eventSource;
    }

    /**
     * Downstream event type
     */
    @JsonIgnore
    public Optional<String> downstreamEventType() {
        return downstreamEventType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> resources() {
        return (Optional<List<String>>) resources;
    }

    /**
     * Unify entity type
     */
    @JsonIgnore
    public Optional<String> entityType() {
        return entityType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unify event type
     */
    public ConnectorEvent withEventType(String eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * Unify event type
     */
    public ConnectorEvent withEventType(Optional<String> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    /**
     * Unify event source
     */
    public ConnectorEvent withEventSource(EventSource eventSource) {
        Utils.checkNotNull(eventSource, "eventSource");
        this.eventSource = Optional.ofNullable(eventSource);
        return this;
    }

    /**
     * Unify event source
     */
    public ConnectorEvent withEventSource(Optional<? extends EventSource> eventSource) {
        Utils.checkNotNull(eventSource, "eventSource");
        this.eventSource = eventSource;
        return this;
    }

    /**
     * Downstream event type
     */
    public ConnectorEvent withDownstreamEventType(String downstreamEventType) {
        Utils.checkNotNull(downstreamEventType, "downstreamEventType");
        this.downstreamEventType = Optional.ofNullable(downstreamEventType);
        return this;
    }

    /**
     * Downstream event type
     */
    public ConnectorEvent withDownstreamEventType(Optional<String> downstreamEventType) {
        Utils.checkNotNull(downstreamEventType, "downstreamEventType");
        this.downstreamEventType = downstreamEventType;
        return this;
    }

    public ConnectorEvent withResources(List<String> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = Optional.ofNullable(resources);
        return this;
    }

    public ConnectorEvent withResources(Optional<? extends List<String>> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }

    /**
     * Unify entity type
     */
    public ConnectorEvent withEntityType(String entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = Optional.ofNullable(entityType);
        return this;
    }

    /**
     * Unify entity type
     */
    public ConnectorEvent withEntityType(Optional<String> entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = entityType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorEvent other = (ConnectorEvent) o;
        return 
            Objects.deepEquals(this.eventType, other.eventType) &&
            Objects.deepEquals(this.eventSource, other.eventSource) &&
            Objects.deepEquals(this.downstreamEventType, other.downstreamEventType) &&
            Objects.deepEquals(this.resources, other.resources) &&
            Objects.deepEquals(this.entityType, other.entityType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            eventType,
            eventSource,
            downstreamEventType,
            resources,
            entityType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorEvent.class,
                "eventType", eventType,
                "eventSource", eventSource,
                "downstreamEventType", downstreamEventType,
                "resources", resources,
                "entityType", entityType);
    }
    
    public final static class Builder {
 
        private Optional<String> eventType = Optional.empty();
 
        private Optional<? extends EventSource> eventSource = Optional.empty();
 
        private Optional<String> downstreamEventType = Optional.empty();
 
        private Optional<? extends List<String>> resources = Optional.empty();
 
        private Optional<String> entityType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unify event type
         */
        public Builder eventType(String eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * Unify event type
         */
        public Builder eventType(Optional<String> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }

        /**
         * Unify event source
         */
        public Builder eventSource(EventSource eventSource) {
            Utils.checkNotNull(eventSource, "eventSource");
            this.eventSource = Optional.ofNullable(eventSource);
            return this;
        }

        /**
         * Unify event source
         */
        public Builder eventSource(Optional<? extends EventSource> eventSource) {
            Utils.checkNotNull(eventSource, "eventSource");
            this.eventSource = eventSource;
            return this;
        }

        /**
         * Downstream event type
         */
        public Builder downstreamEventType(String downstreamEventType) {
            Utils.checkNotNull(downstreamEventType, "downstreamEventType");
            this.downstreamEventType = Optional.ofNullable(downstreamEventType);
            return this;
        }

        /**
         * Downstream event type
         */
        public Builder downstreamEventType(Optional<String> downstreamEventType) {
            Utils.checkNotNull(downstreamEventType, "downstreamEventType");
            this.downstreamEventType = downstreamEventType;
            return this;
        }

        public Builder resources(List<String> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = Optional.ofNullable(resources);
            return this;
        }

        public Builder resources(Optional<? extends List<String>> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }

        /**
         * Unify entity type
         */
        public Builder entityType(String entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        /**
         * Unify entity type
         */
        public Builder entityType(Optional<String> entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = entityType;
            return this;
        }
        
        public ConnectorEvent build() {
            return new ConnectorEvent(
                eventType,
                eventSource,
                downstreamEventType,
                resources,
                entityType);
        }
    }
}

