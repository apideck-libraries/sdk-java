/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

/**
 * ConnectorEvent
 * 
 * <p>Unify event that is supported on the connector. Events are delivered via Webhooks.
 */
public class ConnectorEvent {
    /**
     * Unify event type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    private String eventType;

    /**
     * Unify event source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_source")
    private EventSource eventSource;

    /**
     * Downstream event type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_event_type")
    private String downstreamEventType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * Unify entity type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_type")
    private String entityType;

    @JsonCreator
    public ConnectorEvent(
            @JsonProperty("event_type") @Nullable String eventType,
            @JsonProperty("event_source") @Nullable EventSource eventSource,
            @JsonProperty("downstream_event_type") @Nullable String downstreamEventType,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("entity_type") @Nullable String entityType) {
        this.eventType = eventType;
        this.eventSource = eventSource;
        this.downstreamEventType = downstreamEventType;
        this.resources = resources;
        this.entityType = entityType;
    }
    
    public ConnectorEvent() {
        this(null, null, null,
            null, null);
    }

    /**
     * Unify event type
     */
    public Optional<String> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    /**
     * Unify event source
     */
    public Optional<EventSource> eventSource() {
        return Optional.ofNullable(this.eventSource);
    }

    /**
     * Downstream event type
     */
    public Optional<String> downstreamEventType() {
        return Optional.ofNullable(this.downstreamEventType);
    }

    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * Unify entity type
     */
    public Optional<String> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unify event type
     */
    public ConnectorEvent withEventType(@Nullable String eventType) {
        this.eventType = eventType;
        return this;
    }


    /**
     * Unify event source
     */
    public ConnectorEvent withEventSource(@Nullable EventSource eventSource) {
        this.eventSource = eventSource;
        return this;
    }


    /**
     * Downstream event type
     */
    public ConnectorEvent withDownstreamEventType(@Nullable String downstreamEventType) {
        this.downstreamEventType = downstreamEventType;
        return this;
    }


    public ConnectorEvent withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * Unify entity type
     */
    public ConnectorEvent withEntityType(@Nullable String entityType) {
        this.entityType = entityType;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorEvent other = (ConnectorEvent) o;
        return 
            Utils.enhancedDeepEquals(this.eventType, other.eventType) &&
            Utils.enhancedDeepEquals(this.eventSource, other.eventSource) &&
            Utils.enhancedDeepEquals(this.downstreamEventType, other.downstreamEventType) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.entityType, other.entityType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            eventType, eventSource, downstreamEventType,
            resources, entityType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorEvent.class,
                "eventType", eventType,
                "eventSource", eventSource,
                "downstreamEventType", downstreamEventType,
                "resources", resources,
                "entityType", entityType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String eventType;

        private EventSource eventSource;

        private String downstreamEventType;

        private List<String> resources;

        private String entityType;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unify event type
         */
        public Builder eventType(@Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Unify event source
         */
        public Builder eventSource(@Nullable EventSource eventSource) {
            this.eventSource = eventSource;
            return this;
        }

        /**
         * Downstream event type
         */
        public Builder downstreamEventType(@Nullable String downstreamEventType) {
            this.downstreamEventType = downstreamEventType;
            return this;
        }

        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * Unify entity type
         */
        public Builder entityType(@Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }

        public ConnectorEvent build() {
            return new ConnectorEvent(
                eventType, eventSource, downstreamEventType,
                resources, entityType);
        }

    }
}
