/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ConnectorSetting {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private String label;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private ConnectorSettingType type;

    @JsonCreator
    public ConnectorSetting(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("label") @Nullable String label,
            @JsonProperty("type") @Nullable ConnectorSettingType type) {
        this.id = id;
        this.label = label;
        this.type = type;
    }
    
    public ConnectorSetting() {
        this(null, null, null);
    }

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    public Optional<ConnectorSettingType> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ConnectorSetting withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public ConnectorSetting withLabel(@Nullable String label) {
        this.label = label;
        return this;
    }


    public ConnectorSetting withType(@Nullable ConnectorSettingType type) {
        this.type = type;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorSetting other = (ConnectorSetting) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, label, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorSetting.class,
                "id", id,
                "label", label,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String label;

        private ConnectorSettingType type;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }

        public Builder type(@Nullable ConnectorSettingType type) {
            this.type = type;
            return this;
        }

        public ConnectorSetting build() {
            return new ConnectorSetting(
                id, label, type);
        }

    }
}
