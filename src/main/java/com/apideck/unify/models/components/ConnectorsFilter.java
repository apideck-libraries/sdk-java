/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ConnectorsFilter {

    /**
     * Name of Apideck Unified API
     */
    @SpeakeasyMetadata("queryParam:name=unified_api")
    private Optional<? extends UnifiedApiId> unifiedApi;

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private Optional<? extends ConnectorStatus> status;

    @JsonCreator
    public ConnectorsFilter(
            Optional<? extends UnifiedApiId> unifiedApi,
            Optional<? extends ConnectorStatus> status) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        Utils.checkNotNull(status, "status");
        this.unifiedApi = unifiedApi;
        this.status = status;
    }
    
    public ConnectorsFilter() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Name of Apideck Unified API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnifiedApiId> unifiedApi() {
        return (Optional<UnifiedApiId>) unifiedApi;
    }

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConnectorStatus> status() {
        return (Optional<ConnectorStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of Apideck Unified API
     */
    public ConnectorsFilter withUnifiedApi(UnifiedApiId unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = Optional.ofNullable(unifiedApi);
        return this;
    }

    /**
     * Name of Apideck Unified API
     */
    public ConnectorsFilter withUnifiedApi(Optional<? extends UnifiedApiId> unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    public ConnectorsFilter withStatus(ConnectorStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    public ConnectorsFilter withStatus(Optional<? extends ConnectorStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorsFilter other = (ConnectorsFilter) o;
        return 
            Objects.deepEquals(this.unifiedApi, other.unifiedApi) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            unifiedApi,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorsFilter.class,
                "unifiedApi", unifiedApi,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends UnifiedApiId> unifiedApi = Optional.empty();
 
        private Optional<? extends ConnectorStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(UnifiedApiId unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = Optional.ofNullable(unifiedApi);
            return this;
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(Optional<? extends UnifiedApiId> unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = unifiedApi;
            return this;
        }

        /**
         * Status of the connector. Connectors with status live or beta are callable.
         */
        public Builder status(ConnectorStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the connector. Connectors with status live or beta are callable.
         */
        public Builder status(Optional<? extends ConnectorStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public ConnectorsFilter build() {
            return new ConnectorsFilter(
                unifiedApi,
                status);
        }
    }
}

