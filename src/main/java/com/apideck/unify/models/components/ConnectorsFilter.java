/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ConnectorsFilter {
    /**
     * Name of Apideck Unified API
     */
    @SpeakeasyMetadata("queryParam:name=unified_api")
    private UnifiedApiId unifiedApi;

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private ConnectorStatus status;

    @JsonCreator
    public ConnectorsFilter(
            @Nullable UnifiedApiId unifiedApi,
            @Nullable ConnectorStatus status) {
        this.unifiedApi = unifiedApi;
        this.status = status;
    }
    
    public ConnectorsFilter() {
        this(null, null);
    }

    /**
     * Name of Apideck Unified API
     */
    public Optional<UnifiedApiId> unifiedApi() {
        return Optional.ofNullable(this.unifiedApi);
    }

    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    public Optional<ConnectorStatus> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of Apideck Unified API
     */
    public ConnectorsFilter withUnifiedApi(@Nullable UnifiedApiId unifiedApi) {
        this.unifiedApi = unifiedApi;
        return this;
    }


    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    public ConnectorsFilter withStatus(@Nullable ConnectorStatus status) {
        this.status = status;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorsFilter other = (ConnectorsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unifiedApi, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorsFilter.class,
                "unifiedApi", unifiedApi,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private UnifiedApiId unifiedApi;

        private ConnectorStatus status;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(@Nullable UnifiedApiId unifiedApi) {
            this.unifiedApi = unifiedApi;
            return this;
        }

        /**
         * Status of the connector. Connectors with status live or beta are callable.
         */
        public Builder status(@Nullable ConnectorStatus status) {
            this.status = status;
            return this;
        }

        public ConnectorsFilter build() {
            return new ConnectorsFilter(
                unifiedApi, status);
        }

    }
}
