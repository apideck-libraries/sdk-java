/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Consumer {

    /**
     * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
     */
    @JsonProperty("consumer_id")
    private String consumerId;

    /**
     * ID of your Apideck Application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_id")
    private Optional<String> applicationId;

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ConsumerMetadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connections")
    private Optional<? extends List<ConsumerConnection>> connections;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("services")
    private Optional<? extends List<String>> services;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregated_request_count")
    private Optional<Double> aggregatedRequestCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_counts")
    private Optional<? extends RequestCountAllocation> requestCounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<String> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modified")
    private Optional<String> modified;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_count_updated")
    private Optional<String> requestCountUpdated;

    @JsonCreator
    public Consumer(
            @JsonProperty("consumer_id") String consumerId,
            @JsonProperty("application_id") Optional<String> applicationId,
            @JsonProperty("metadata") Optional<? extends ConsumerMetadata> metadata,
            @JsonProperty("connections") Optional<? extends List<ConsumerConnection>> connections,
            @JsonProperty("services") Optional<? extends List<String>> services,
            @JsonProperty("aggregated_request_count") Optional<Double> aggregatedRequestCount,
            @JsonProperty("request_counts") Optional<? extends RequestCountAllocation> requestCounts,
            @JsonProperty("created") Optional<String> created,
            @JsonProperty("modified") Optional<String> modified,
            @JsonProperty("request_count_updated") Optional<String> requestCountUpdated) {
        Utils.checkNotNull(consumerId, "consumerId");
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(connections, "connections");
        Utils.checkNotNull(services, "services");
        Utils.checkNotNull(aggregatedRequestCount, "aggregatedRequestCount");
        Utils.checkNotNull(requestCounts, "requestCounts");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(modified, "modified");
        Utils.checkNotNull(requestCountUpdated, "requestCountUpdated");
        this.consumerId = consumerId;
        this.applicationId = applicationId;
        this.metadata = metadata;
        this.connections = connections;
        this.services = services;
        this.aggregatedRequestCount = aggregatedRequestCount;
        this.requestCounts = requestCounts;
        this.created = created;
        this.modified = modified;
        this.requestCountUpdated = requestCountUpdated;
    }
    
    public Consumer(
            String consumerId) {
        this(consumerId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
     */
    @JsonIgnore
    public String consumerId() {
        return consumerId;
    }

    /**
     * ID of your Apideck Application
     */
    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConsumerMetadata> metadata() {
        return (Optional<ConsumerMetadata>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ConsumerConnection>> connections() {
        return (Optional<List<ConsumerConnection>>) connections;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> services() {
        return (Optional<List<String>>) services;
    }

    @JsonIgnore
    public Optional<Double> aggregatedRequestCount() {
        return aggregatedRequestCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RequestCountAllocation> requestCounts() {
        return (Optional<RequestCountAllocation>) requestCounts;
    }

    @JsonIgnore
    public Optional<String> created() {
        return created;
    }

    @JsonIgnore
    public Optional<String> modified() {
        return modified;
    }

    @JsonIgnore
    public Optional<String> requestCountUpdated() {
        return requestCountUpdated;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
     */
    public Consumer withConsumerId(String consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = consumerId;
        return this;
    }

    /**
     * ID of your Apideck Application
     */
    public Consumer withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    /**
     * ID of your Apideck Application
     */
    public Consumer withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Consumer withMetadata(ConsumerMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Consumer withMetadata(Optional<? extends ConsumerMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public Consumer withConnections(List<ConsumerConnection> connections) {
        Utils.checkNotNull(connections, "connections");
        this.connections = Optional.ofNullable(connections);
        return this;
    }

    public Consumer withConnections(Optional<? extends List<ConsumerConnection>> connections) {
        Utils.checkNotNull(connections, "connections");
        this.connections = connections;
        return this;
    }

    public Consumer withServices(List<String> services) {
        Utils.checkNotNull(services, "services");
        this.services = Optional.ofNullable(services);
        return this;
    }

    public Consumer withServices(Optional<? extends List<String>> services) {
        Utils.checkNotNull(services, "services");
        this.services = services;
        return this;
    }

    public Consumer withAggregatedRequestCount(double aggregatedRequestCount) {
        Utils.checkNotNull(aggregatedRequestCount, "aggregatedRequestCount");
        this.aggregatedRequestCount = Optional.ofNullable(aggregatedRequestCount);
        return this;
    }

    public Consumer withAggregatedRequestCount(Optional<Double> aggregatedRequestCount) {
        Utils.checkNotNull(aggregatedRequestCount, "aggregatedRequestCount");
        this.aggregatedRequestCount = aggregatedRequestCount;
        return this;
    }

    public Consumer withRequestCounts(RequestCountAllocation requestCounts) {
        Utils.checkNotNull(requestCounts, "requestCounts");
        this.requestCounts = Optional.ofNullable(requestCounts);
        return this;
    }

    public Consumer withRequestCounts(Optional<? extends RequestCountAllocation> requestCounts) {
        Utils.checkNotNull(requestCounts, "requestCounts");
        this.requestCounts = requestCounts;
        return this;
    }

    public Consumer withCreated(String created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public Consumer withCreated(Optional<String> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public Consumer withModified(String modified) {
        Utils.checkNotNull(modified, "modified");
        this.modified = Optional.ofNullable(modified);
        return this;
    }

    public Consumer withModified(Optional<String> modified) {
        Utils.checkNotNull(modified, "modified");
        this.modified = modified;
        return this;
    }

    public Consumer withRequestCountUpdated(String requestCountUpdated) {
        Utils.checkNotNull(requestCountUpdated, "requestCountUpdated");
        this.requestCountUpdated = Optional.ofNullable(requestCountUpdated);
        return this;
    }

    public Consumer withRequestCountUpdated(Optional<String> requestCountUpdated) {
        Utils.checkNotNull(requestCountUpdated, "requestCountUpdated");
        this.requestCountUpdated = requestCountUpdated;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Consumer other = (Consumer) o;
        return 
            Objects.deepEquals(this.consumerId, other.consumerId) &&
            Objects.deepEquals(this.applicationId, other.applicationId) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.connections, other.connections) &&
            Objects.deepEquals(this.services, other.services) &&
            Objects.deepEquals(this.aggregatedRequestCount, other.aggregatedRequestCount) &&
            Objects.deepEquals(this.requestCounts, other.requestCounts) &&
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.modified, other.modified) &&
            Objects.deepEquals(this.requestCountUpdated, other.requestCountUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            consumerId,
            applicationId,
            metadata,
            connections,
            services,
            aggregatedRequestCount,
            requestCounts,
            created,
            modified,
            requestCountUpdated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Consumer.class,
                "consumerId", consumerId,
                "applicationId", applicationId,
                "metadata", metadata,
                "connections", connections,
                "services", services,
                "aggregatedRequestCount", aggregatedRequestCount,
                "requestCounts", requestCounts,
                "created", created,
                "modified", modified,
                "requestCountUpdated", requestCountUpdated);
    }
    
    public final static class Builder {
 
        private String consumerId;
 
        private Optional<String> applicationId = Optional.empty();
 
        private Optional<? extends ConsumerMetadata> metadata = Optional.empty();
 
        private Optional<? extends List<ConsumerConnection>> connections = Optional.empty();
 
        private Optional<? extends List<String>> services = Optional.empty();
 
        private Optional<Double> aggregatedRequestCount = Optional.empty();
 
        private Optional<? extends RequestCountAllocation> requestCounts = Optional.empty();
 
        private Optional<String> created = Optional.empty();
 
        private Optional<String> modified = Optional.empty();
 
        private Optional<String> requestCountUpdated = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
         */
        public Builder consumerId(String consumerId) {
            Utils.checkNotNull(consumerId, "consumerId");
            this.consumerId = consumerId;
            return this;
        }

        /**
         * ID of your Apideck Application
         */
        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        /**
         * ID of your Apideck Application
         */
        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        /**
         * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
         */
        public Builder metadata(ConsumerMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
         */
        public Builder metadata(Optional<? extends ConsumerMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder connections(List<ConsumerConnection> connections) {
            Utils.checkNotNull(connections, "connections");
            this.connections = Optional.ofNullable(connections);
            return this;
        }

        public Builder connections(Optional<? extends List<ConsumerConnection>> connections) {
            Utils.checkNotNull(connections, "connections");
            this.connections = connections;
            return this;
        }

        public Builder services(List<String> services) {
            Utils.checkNotNull(services, "services");
            this.services = Optional.ofNullable(services);
            return this;
        }

        public Builder services(Optional<? extends List<String>> services) {
            Utils.checkNotNull(services, "services");
            this.services = services;
            return this;
        }

        public Builder aggregatedRequestCount(double aggregatedRequestCount) {
            Utils.checkNotNull(aggregatedRequestCount, "aggregatedRequestCount");
            this.aggregatedRequestCount = Optional.ofNullable(aggregatedRequestCount);
            return this;
        }

        public Builder aggregatedRequestCount(Optional<Double> aggregatedRequestCount) {
            Utils.checkNotNull(aggregatedRequestCount, "aggregatedRequestCount");
            this.aggregatedRequestCount = aggregatedRequestCount;
            return this;
        }

        public Builder requestCounts(RequestCountAllocation requestCounts) {
            Utils.checkNotNull(requestCounts, "requestCounts");
            this.requestCounts = Optional.ofNullable(requestCounts);
            return this;
        }

        public Builder requestCounts(Optional<? extends RequestCountAllocation> requestCounts) {
            Utils.checkNotNull(requestCounts, "requestCounts");
            this.requestCounts = requestCounts;
            return this;
        }

        public Builder created(String created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<String> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder modified(String modified) {
            Utils.checkNotNull(modified, "modified");
            this.modified = Optional.ofNullable(modified);
            return this;
        }

        public Builder modified(Optional<String> modified) {
            Utils.checkNotNull(modified, "modified");
            this.modified = modified;
            return this;
        }

        public Builder requestCountUpdated(String requestCountUpdated) {
            Utils.checkNotNull(requestCountUpdated, "requestCountUpdated");
            this.requestCountUpdated = Optional.ofNullable(requestCountUpdated);
            return this;
        }

        public Builder requestCountUpdated(Optional<String> requestCountUpdated) {
            Utils.checkNotNull(requestCountUpdated, "requestCountUpdated");
            this.requestCountUpdated = requestCountUpdated;
            return this;
        }
        
        public Consumer build() {
            return new Consumer(
                consumerId,
                applicationId,
                metadata,
                connections,
                services,
                aggregatedRequestCount,
                requestCounts,
                created,
                modified,
                requestCountUpdated);
        }
    }
}
