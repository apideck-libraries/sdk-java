/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ConsumerConnection {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private String icon;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private String logo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private String website;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag_line")
    private String tagLine;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_id")
    private String serviceId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_api")
    private String unifiedApi;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_id")
    private String consumerId;

    /**
     * Type of authorization used by the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private AuthType authType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Boolean enabled;

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private JsonNullable<Map<String, Object>> settings;

    /**
     * Attach your own consumer specific metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<Map<String, Object>> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private String createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<String> updatedAt;

    /**
     * [Connection state flow](#section/Connection-state)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private ConnectionState state;

    @JsonCreator
    public ConsumerConnection(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("icon") @Nullable String icon,
            @JsonProperty("logo") @Nullable String logo,
            @JsonProperty("website") @Nullable String website,
            @JsonProperty("tag_line") @Nullable String tagLine,
            @JsonProperty("service_id") @Nullable String serviceId,
            @JsonProperty("unified_api") @Nullable String unifiedApi,
            @JsonProperty("consumer_id") @Nullable String consumerId,
            @JsonProperty("auth_type") @Nullable AuthType authType,
            @JsonProperty("enabled") @Nullable Boolean enabled,
            @JsonProperty("settings") @Nullable JsonNullable<Map<String, Object>> settings,
            @JsonProperty("metadata") @Nullable JsonNullable<Map<String, Object>> metadata,
            @JsonProperty("created_at") @Nullable String createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<String> updatedAt,
            @JsonProperty("state") @Nullable ConnectionState state) {
        this.id = id;
        this.name = name;
        this.icon = icon;
        this.logo = logo;
        this.website = website;
        this.tagLine = tagLine;
        this.serviceId = serviceId;
        this.unifiedApi = unifiedApi;
        this.consumerId = consumerId;
        this.authType = authType;
        this.enabled = enabled;
        this.settings = Optional.ofNullable(settings)
            .orElse(JsonNullable.undefined());
        this.metadata = Optional.ofNullable(metadata)
            .orElse(JsonNullable.undefined());
        this.createdAt = createdAt;
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.state = state;
    }
    
    public ConsumerConnection() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public Optional<String> icon() {
        return Optional.ofNullable(this.icon);
    }

    public Optional<String> logo() {
        return Optional.ofNullable(this.logo);
    }

    public Optional<String> website() {
        return Optional.ofNullable(this.website);
    }

    public Optional<String> tagLine() {
        return Optional.ofNullable(this.tagLine);
    }

    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    public Optional<String> unifiedApi() {
        return Optional.ofNullable(this.unifiedApi);
    }

    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * Type of authorization used by the connector
     */
    public Optional<AuthType> authType() {
        return Optional.ofNullable(this.authType);
    }

    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public JsonNullable<Map<String, Object>> settings() {
        return this.settings;
    }

    /**
     * Attach your own consumer specific metadata
     */
    public JsonNullable<Map<String, Object>> metadata() {
        return this.metadata;
    }

    public Optional<String> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    public JsonNullable<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     * [Connection state flow](#section/Connection-state)
     */
    public Optional<ConnectionState> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ConsumerConnection withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public ConsumerConnection withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    public ConsumerConnection withIcon(@Nullable String icon) {
        this.icon = icon;
        return this;
    }


    public ConsumerConnection withLogo(@Nullable String logo) {
        this.logo = logo;
        return this;
    }


    public ConsumerConnection withWebsite(@Nullable String website) {
        this.website = website;
        return this;
    }


    public ConsumerConnection withTagLine(@Nullable String tagLine) {
        this.tagLine = tagLine;
        return this;
    }


    public ConsumerConnection withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    public ConsumerConnection withUnifiedApi(@Nullable String unifiedApi) {
        this.unifiedApi = unifiedApi;
        return this;
    }


    public ConsumerConnection withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * Type of authorization used by the connector
     */
    public ConsumerConnection withAuthType(@Nullable AuthType authType) {
        this.authType = authType;
        return this;
    }


    public ConsumerConnection withEnabled(@Nullable Boolean enabled) {
        this.enabled = enabled;
        return this;
    }


    /**
     * Connection settings. Values will persist to `form_fields` with corresponding id
     */
    public ConsumerConnection withSettings(@Nullable Map<String, Object> settings) {
        this.settings = JsonNullable.of(settings);
        return this;
    }


    /**
     * Attach your own consumer specific metadata
     */
    public ConsumerConnection withMetadata(@Nullable Map<String, Object> metadata) {
        this.metadata = JsonNullable.of(metadata);
        return this;
    }


    public ConsumerConnection withCreatedAt(@Nullable String createdAt) {
        this.createdAt = createdAt;
        return this;
    }


    public ConsumerConnection withUpdatedAt(@Nullable String updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * [Connection state flow](#section/Connection-state)
     */
    public ConsumerConnection withState(@Nullable ConnectionState state) {
        this.state = state;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConsumerConnection other = (ConsumerConnection) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.icon, other.icon) &&
            Utils.enhancedDeepEquals(this.logo, other.logo) &&
            Utils.enhancedDeepEquals(this.website, other.website) &&
            Utils.enhancedDeepEquals(this.tagLine, other.tagLine) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.authType, other.authType) &&
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.state, other.state);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, icon,
            logo, website, tagLine,
            serviceId, unifiedApi, consumerId,
            authType, enabled, settings,
            metadata, createdAt, updatedAt,
            state);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConsumerConnection.class,
                "id", id,
                "name", name,
                "icon", icon,
                "logo", logo,
                "website", website,
                "tagLine", tagLine,
                "serviceId", serviceId,
                "unifiedApi", unifiedApi,
                "consumerId", consumerId,
                "authType", authType,
                "enabled", enabled,
                "settings", settings,
                "metadata", metadata,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "state", state);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private String icon;

        private String logo;

        private String website;

        private String tagLine;

        private String serviceId;

        private String unifiedApi;

        private String consumerId;

        private AuthType authType;

        private Boolean enabled;

        private JsonNullable<Map<String, Object>> settings;

        private JsonNullable<Map<String, Object>> metadata;

        private String createdAt;

        private JsonNullable<String> updatedAt;

        private ConnectionState state;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder icon(@Nullable String icon) {
            this.icon = icon;
            return this;
        }

        public Builder logo(@Nullable String logo) {
            this.logo = logo;
            return this;
        }

        public Builder website(@Nullable String website) {
            this.website = website;
            return this;
        }

        public Builder tagLine(@Nullable String tagLine) {
            this.tagLine = tagLine;
            return this;
        }

        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        public Builder unifiedApi(@Nullable String unifiedApi) {
            this.unifiedApi = unifiedApi;
            return this;
        }

        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * Type of authorization used by the connector
         */
        public Builder authType(@Nullable AuthType authType) {
            this.authType = authType;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        /**
         * Connection settings. Values will persist to `form_fields` with corresponding id
         */
        public Builder settings(@Nullable Map<String, Object> settings) {
            this.settings = JsonNullable.of(settings);
            return this;
        }

        /**
         * Attach your own consumer specific metadata
         */
        public Builder metadata(@Nullable Map<String, Object> metadata) {
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder updatedAt(@Nullable String updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * [Connection state flow](#section/Connection-state)
         */
        public Builder state(@Nullable ConnectionState state) {
            this.state = state;
            return this;
        }

        public ConsumerConnection build() {
            return new ConsumerConnection(
                id, name, icon,
                logo, website, tagLine,
                serviceId, unifiedApi, consumerId,
                authType, enabled, settings,
                metadata, createdAt, updatedAt,
                state);
        }

    }
}
