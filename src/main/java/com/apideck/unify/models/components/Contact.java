/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Contact {

    /**
     * Unique identifier for the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Full name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The owner of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The type of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends ContactType> type;

    /**
     * The company the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The lead the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The first name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The middle name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The last name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The prefix of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * The suffix of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * The job title of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The department of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<String> department;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * The gender of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends ContactGender> gender;

    /**
     * The birthday of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<String> birthday;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    @Deprecated
    private JsonNullable<String> image;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * The lead source of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The fax number of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;

    /**
     * The description of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current balance of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    private JsonNullable<Double> currentBalance;

    /**
     * The status of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The active status of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Website>> websites;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLink>> socialLinks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_domain")
    private JsonNullable<String> emailDomain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomField>> customFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * The first call date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_call_at")
    private JsonNullable<OffsetDateTime> firstCallAt;

    /**
     * The first email date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_email_at")
    private JsonNullable<OffsetDateTime> firstEmailAt;

    /**
     * The last activity date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_activity_at")
    private JsonNullable<OffsetDateTime> lastActivityAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * The last update date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The creation date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The opportunity ids of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunity_ids")
    private Optional<? extends List<String>> opportunityIds;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Contact(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("type") JsonNullable<? extends ContactType> type,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("lead_id") JsonNullable<String> leadId,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("prefix") JsonNullable<String> prefix,
            @JsonProperty("suffix") JsonNullable<String> suffix,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("gender") JsonNullable<? extends ContactGender> gender,
            @JsonProperty("birthday") JsonNullable<String> birthday,
            @JsonProperty("image") JsonNullable<String> image,
            @JsonProperty("photo_url") JsonNullable<String> photoUrl,
            @JsonProperty("lead_source") JsonNullable<String> leadSource,
            @JsonProperty("fax") JsonNullable<String> fax,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("current_balance") JsonNullable<Double> currentBalance,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("websites") Optional<? extends List<Website>> websites,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("social_links") Optional<? extends List<SocialLink>> socialLinks,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("email_domain") JsonNullable<String> emailDomain,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomField>> customFields,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("first_call_at") JsonNullable<OffsetDateTime> firstCallAt,
            @JsonProperty("first_email_at") JsonNullable<OffsetDateTime> firstEmailAt,
            @JsonProperty("last_activity_at") JsonNullable<OffsetDateTime> lastActivityAt,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("opportunity_ids") Optional<? extends List<String>> opportunityIds,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(leadId, "leadId");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(suffix, "suffix");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(leadSource, "leadSource");
        Utils.checkNotNull(fax, "fax");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(currentBalance, "currentBalance");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(emailDomain, "emailDomain");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(firstCallAt, "firstCallAt");
        Utils.checkNotNull(firstEmailAt, "firstEmailAt");
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(opportunityIds, "opportunityIds");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.name = name;
        this.ownerId = ownerId;
        this.type = type;
        this.companyId = companyId;
        this.companyName = companyName;
        this.leadId = leadId;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.prefix = prefix;
        this.suffix = suffix;
        this.title = title;
        this.department = department;
        this.language = language;
        this.gender = gender;
        this.birthday = birthday;
        this.image = image;
        this.photoUrl = photoUrl;
        this.leadSource = leadSource;
        this.fax = fax;
        this.description = description;
        this.currentBalance = currentBalance;
        this.status = status;
        this.active = active;
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.emailDomain = emailDomain;
        this.customFields = customFields;
        this.tags = tags;
        this.firstCallAt = firstCallAt;
        this.firstEmailAt = firstEmailAt;
        this.lastActivityAt = lastActivityAt;
        this.customMappings = customMappings;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.opportunityIds = opportunityIds;
        this.passThrough = passThrough;
    }
    
    public Contact() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the contact.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Full name of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The owner of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The type of the contact.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContactType> type() {
        return (JsonNullable<ContactType>) type;
    }

    /**
     * The company the contact is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The name of the company the contact is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The lead the contact is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> leadId() {
        return leadId;
    }

    /**
     * The first name of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The middle name of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * The last name of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The prefix of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> prefix() {
        return prefix;
    }

    /**
     * The suffix of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> suffix() {
        return suffix;
    }

    /**
     * The job title of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The department of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    /**
     * The gender of the contact.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContactGender> gender() {
        return (JsonNullable<ContactGender>) gender;
    }

    /**
     * The birthday of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> birthday() {
        return birthday;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> image() {
        return image;
    }

    /**
     * The URL of the photo of a person.
     */
    @JsonIgnore
    public JsonNullable<String> photoUrl() {
        return photoUrl;
    }

    /**
     * The lead source of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> leadSource() {
        return leadSource;
    }

    /**
     * The fax number of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> fax() {
        return fax;
    }

    /**
     * The description of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The current balance of the contact.
     */
    @JsonIgnore
    public JsonNullable<Double> currentBalance() {
        return currentBalance;
    }

    /**
     * The status of the contact.
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * The active status of the contact.
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Website>> websites() {
        return (Optional<List<Website>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLink>> socialLinks() {
        return (Optional<List<SocialLink>>) socialLinks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @JsonIgnore
    public JsonNullable<String> emailDomain() {
        return emailDomain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomField>> customFields() {
        return (JsonNullable<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * The first call date of the contact.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> firstCallAt() {
        return firstCallAt;
    }

    /**
     * The first email date of the contact.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> firstEmailAt() {
        return firstEmailAt;
    }

    /**
     * The last activity date of the contact.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastActivityAt() {
        return lastActivityAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * The last update date of the contact.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The creation date of the contact.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The opportunity ids of the contact.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> opportunityIds() {
        return (Optional<List<String>>) opportunityIds;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for the contact.
     */
    public Contact withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier for the contact.
     */
    public Contact withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Full name of the contact.
     */
    public Contact withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Full name of the contact.
     */
    public Contact withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The owner of the contact.
     */
    public Contact withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * The owner of the contact.
     */
    public Contact withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The type of the contact.
     */
    public Contact withType(ContactType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of the contact.
     */
    public Contact withType(JsonNullable<? extends ContactType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The company the contact is associated with.
     */
    public Contact withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company the contact is associated with.
     */
    public Contact withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The name of the company the contact is associated with.
     */
    public Contact withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company the contact is associated with.
     */
    public Contact withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The lead the contact is associated with.
     */
    public Contact withLeadId(String leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = JsonNullable.of(leadId);
        return this;
    }

    /**
     * The lead the contact is associated with.
     */
    public Contact withLeadId(JsonNullable<String> leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = leadId;
        return this;
    }

    /**
     * The first name of the contact.
     */
    public Contact withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the contact.
     */
    public Contact withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The middle name of the contact.
     */
    public Contact withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * The middle name of the contact.
     */
    public Contact withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The last name of the contact.
     */
    public Contact withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the contact.
     */
    public Contact withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The prefix of the contact.
     */
    public Contact withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = JsonNullable.of(prefix);
        return this;
    }

    /**
     * The prefix of the contact.
     */
    public Contact withPrefix(JsonNullable<String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * The suffix of the contact.
     */
    public Contact withSuffix(String suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = JsonNullable.of(suffix);
        return this;
    }

    /**
     * The suffix of the contact.
     */
    public Contact withSuffix(JsonNullable<String> suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = suffix;
        return this;
    }

    /**
     * The job title of the contact.
     */
    public Contact withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the contact.
     */
    public Contact withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The department of the contact.
     */
    public Contact withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The department of the contact.
     */
    public Contact withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Contact withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Contact withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * The gender of the contact.
     */
    public Contact withGender(ContactGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The gender of the contact.
     */
    public Contact withGender(JsonNullable<? extends ContactGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * The birthday of the contact.
     */
    public Contact withBirthday(String birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The birthday of the contact.
     */
    public Contact withBirthday(JsonNullable<String> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Contact withImage(String image) {
        Utils.checkNotNull(image, "image");
        this.image = JsonNullable.of(image);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Contact withImage(JsonNullable<String> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Contact withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Contact withPhotoUrl(JsonNullable<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * The lead source of the contact.
     */
    public Contact withLeadSource(String leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }

    /**
     * The lead source of the contact.
     */
    public Contact withLeadSource(JsonNullable<String> leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = leadSource;
        return this;
    }

    /**
     * The fax number of the contact.
     */
    public Contact withFax(String fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = JsonNullable.of(fax);
        return this;
    }

    /**
     * The fax number of the contact.
     */
    public Contact withFax(JsonNullable<String> fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = fax;
        return this;
    }

    /**
     * The description of the contact.
     */
    public Contact withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the contact.
     */
    public Contact withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The current balance of the contact.
     */
    public Contact withCurrentBalance(double currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = JsonNullable.of(currentBalance);
        return this;
    }

    /**
     * The current balance of the contact.
     */
    public Contact withCurrentBalance(JsonNullable<Double> currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = currentBalance;
        return this;
    }

    /**
     * The status of the contact.
     */
    public Contact withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the contact.
     */
    public Contact withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The active status of the contact.
     */
    public Contact withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * The active status of the contact.
     */
    public Contact withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public Contact withWebsites(List<Website> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public Contact withWebsites(Optional<? extends List<Website>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public Contact withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public Contact withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Contact withSocialLinks(List<SocialLink> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }

    public Contact withSocialLinks(Optional<? extends List<SocialLink>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public Contact withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public Contact withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public Contact withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public Contact withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public Contact withEmailDomain(String emailDomain) {
        Utils.checkNotNull(emailDomain, "emailDomain");
        this.emailDomain = JsonNullable.of(emailDomain);
        return this;
    }

    public Contact withEmailDomain(JsonNullable<String> emailDomain) {
        Utils.checkNotNull(emailDomain, "emailDomain");
        this.emailDomain = emailDomain;
        return this;
    }

    public Contact withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    public Contact withCustomFields(JsonNullable<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public Contact withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Contact withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The first call date of the contact.
     */
    public Contact withFirstCallAt(OffsetDateTime firstCallAt) {
        Utils.checkNotNull(firstCallAt, "firstCallAt");
        this.firstCallAt = JsonNullable.of(firstCallAt);
        return this;
    }

    /**
     * The first call date of the contact.
     */
    public Contact withFirstCallAt(JsonNullable<OffsetDateTime> firstCallAt) {
        Utils.checkNotNull(firstCallAt, "firstCallAt");
        this.firstCallAt = firstCallAt;
        return this;
    }

    /**
     * The first email date of the contact.
     */
    public Contact withFirstEmailAt(OffsetDateTime firstEmailAt) {
        Utils.checkNotNull(firstEmailAt, "firstEmailAt");
        this.firstEmailAt = JsonNullable.of(firstEmailAt);
        return this;
    }

    /**
     * The first email date of the contact.
     */
    public Contact withFirstEmailAt(JsonNullable<OffsetDateTime> firstEmailAt) {
        Utils.checkNotNull(firstEmailAt, "firstEmailAt");
        this.firstEmailAt = firstEmailAt;
        return this;
    }

    /**
     * The last activity date of the contact.
     */
    public Contact withLastActivityAt(OffsetDateTime lastActivityAt) {
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        this.lastActivityAt = JsonNullable.of(lastActivityAt);
        return this;
    }

    /**
     * The last activity date of the contact.
     */
    public Contact withLastActivityAt(JsonNullable<OffsetDateTime> lastActivityAt) {
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        this.lastActivityAt = lastActivityAt;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Contact withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Contact withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The last update date of the contact.
     */
    public Contact withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The last update date of the contact.
     */
    public Contact withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The creation date of the contact.
     */
    public Contact withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The creation date of the contact.
     */
    public Contact withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The opportunity ids of the contact.
     */
    public Contact withOpportunityIds(List<String> opportunityIds) {
        Utils.checkNotNull(opportunityIds, "opportunityIds");
        this.opportunityIds = Optional.ofNullable(opportunityIds);
        return this;
    }

    /**
     * The opportunity ids of the contact.
     */
    public Contact withOpportunityIds(Optional<? extends List<String>> opportunityIds) {
        Utils.checkNotNull(opportunityIds, "opportunityIds");
        this.opportunityIds = opportunityIds;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Contact withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Contact withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Contact other = (Contact) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.leadId, other.leadId) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.prefix, other.prefix) &&
            Objects.deepEquals(this.suffix, other.suffix) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            Objects.deepEquals(this.leadSource, other.leadSource) &&
            Objects.deepEquals(this.fax, other.fax) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.currentBalance, other.currentBalance) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.websites, other.websites) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.emailDomain, other.emailDomain) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.firstCallAt, other.firstCallAt) &&
            Objects.deepEquals(this.firstEmailAt, other.firstEmailAt) &&
            Objects.deepEquals(this.lastActivityAt, other.lastActivityAt) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.opportunityIds, other.opportunityIds) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            ownerId,
            type,
            companyId,
            companyName,
            leadId,
            firstName,
            middleName,
            lastName,
            prefix,
            suffix,
            title,
            department,
            language,
            gender,
            birthday,
            image,
            photoUrl,
            leadSource,
            fax,
            description,
            currentBalance,
            status,
            active,
            websites,
            addresses,
            socialLinks,
            phoneNumbers,
            emails,
            emailDomain,
            customFields,
            tags,
            firstCallAt,
            firstEmailAt,
            lastActivityAt,
            customMappings,
            updatedAt,
            createdAt,
            opportunityIds,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Contact.class,
                "id", id,
                "name", name,
                "ownerId", ownerId,
                "type", type,
                "companyId", companyId,
                "companyName", companyName,
                "leadId", leadId,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "prefix", prefix,
                "suffix", suffix,
                "title", title,
                "department", department,
                "language", language,
                "gender", gender,
                "birthday", birthday,
                "image", image,
                "photoUrl", photoUrl,
                "leadSource", leadSource,
                "fax", fax,
                "description", description,
                "currentBalance", currentBalance,
                "status", status,
                "active", active,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "emailDomain", emailDomain,
                "customFields", customFields,
                "tags", tags,
                "firstCallAt", firstCallAt,
                "firstEmailAt", firstEmailAt,
                "lastActivityAt", lastActivityAt,
                "customMappings", customMappings,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "opportunityIds", opportunityIds,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> ownerId = JsonNullable.undefined();
 
        private JsonNullable<? extends ContactType> type = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> leadId = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> middleName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> prefix = JsonNullable.undefined();
 
        private JsonNullable<String> suffix = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> department = JsonNullable.undefined();
 
        private JsonNullable<String> language = JsonNullable.undefined();
 
        private JsonNullable<? extends ContactGender> gender = JsonNullable.undefined();
 
        private JsonNullable<String> birthday = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> image = JsonNullable.undefined();
 
        private JsonNullable<String> photoUrl = JsonNullable.undefined();
 
        private JsonNullable<String> leadSource = JsonNullable.undefined();
 
        private JsonNullable<String> fax = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<Double> currentBalance = JsonNullable.undefined();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private Optional<? extends List<Website>> websites = Optional.empty();
 
        private Optional<? extends List<Address>> addresses = Optional.empty();
 
        private Optional<? extends List<SocialLink>> socialLinks = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Email>> emails = Optional.empty();
 
        private JsonNullable<String> emailDomain = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CustomField>> customFields = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> firstCallAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> firstEmailAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> lastActivityAt = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<String>> opportunityIds = Optional.empty();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the contact.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the contact.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Full name of the contact.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Full name of the contact.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The owner of the contact.
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The owner of the contact.
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        /**
         * The type of the contact.
         */
        public Builder type(ContactType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of the contact.
         */
        public Builder type(JsonNullable<? extends ContactType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The company the contact is associated with.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company the contact is associated with.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The name of the company the contact is associated with.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company the contact is associated with.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The lead the contact is associated with.
         */
        public Builder leadId(String leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The lead the contact is associated with.
         */
        public Builder leadId(JsonNullable<String> leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = leadId;
            return this;
        }

        /**
         * The first name of the contact.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the contact.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The middle name of the contact.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The middle name of the contact.
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The last name of the contact.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the contact.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The prefix of the contact.
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * The prefix of the contact.
         */
        public Builder prefix(JsonNullable<String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }

        /**
         * The suffix of the contact.
         */
        public Builder suffix(String suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        /**
         * The suffix of the contact.
         */
        public Builder suffix(JsonNullable<String> suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = suffix;
            return this;
        }

        /**
         * The job title of the contact.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the contact.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The department of the contact.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The department of the contact.
         */
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * The gender of the contact.
         */
        public Builder gender(ContactGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The gender of the contact.
         */
        public Builder gender(JsonNullable<? extends ContactGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        /**
         * The birthday of the contact.
         */
        public Builder birthday(String birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The birthday of the contact.
         */
        public Builder birthday(JsonNullable<String> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder image(String image) {
            Utils.checkNotNull(image, "image");
            this.image = JsonNullable.of(image);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder image(JsonNullable<String> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * The lead source of the contact.
         */
        public Builder leadSource(String leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The lead source of the contact.
         */
        public Builder leadSource(JsonNullable<String> leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = leadSource;
            return this;
        }

        /**
         * The fax number of the contact.
         */
        public Builder fax(String fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * The fax number of the contact.
         */
        public Builder fax(JsonNullable<String> fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = fax;
            return this;
        }

        /**
         * The description of the contact.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the contact.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The current balance of the contact.
         */
        public Builder currentBalance(double currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = JsonNullable.of(currentBalance);
            return this;
        }

        /**
         * The current balance of the contact.
         */
        public Builder currentBalance(JsonNullable<Double> currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = currentBalance;
            return this;
        }

        /**
         * The status of the contact.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the contact.
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The active status of the contact.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * The active status of the contact.
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder websites(List<Website> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Website>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder socialLinks(List<SocialLink> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLink>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder emailDomain(String emailDomain) {
            Utils.checkNotNull(emailDomain, "emailDomain");
            this.emailDomain = JsonNullable.of(emailDomain);
            return this;
        }

        public Builder emailDomain(JsonNullable<String> emailDomain) {
            Utils.checkNotNull(emailDomain, "emailDomain");
            this.emailDomain = emailDomain;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        public Builder customFields(JsonNullable<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The first call date of the contact.
         */
        public Builder firstCallAt(OffsetDateTime firstCallAt) {
            Utils.checkNotNull(firstCallAt, "firstCallAt");
            this.firstCallAt = JsonNullable.of(firstCallAt);
            return this;
        }

        /**
         * The first call date of the contact.
         */
        public Builder firstCallAt(JsonNullable<OffsetDateTime> firstCallAt) {
            Utils.checkNotNull(firstCallAt, "firstCallAt");
            this.firstCallAt = firstCallAt;
            return this;
        }

        /**
         * The first email date of the contact.
         */
        public Builder firstEmailAt(OffsetDateTime firstEmailAt) {
            Utils.checkNotNull(firstEmailAt, "firstEmailAt");
            this.firstEmailAt = JsonNullable.of(firstEmailAt);
            return this;
        }

        /**
         * The first email date of the contact.
         */
        public Builder firstEmailAt(JsonNullable<OffsetDateTime> firstEmailAt) {
            Utils.checkNotNull(firstEmailAt, "firstEmailAt");
            this.firstEmailAt = firstEmailAt;
            return this;
        }

        /**
         * The last activity date of the contact.
         */
        public Builder lastActivityAt(OffsetDateTime lastActivityAt) {
            Utils.checkNotNull(lastActivityAt, "lastActivityAt");
            this.lastActivityAt = JsonNullable.of(lastActivityAt);
            return this;
        }

        /**
         * The last activity date of the contact.
         */
        public Builder lastActivityAt(JsonNullable<OffsetDateTime> lastActivityAt) {
            Utils.checkNotNull(lastActivityAt, "lastActivityAt");
            this.lastActivityAt = lastActivityAt;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The last update date of the contact.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The last update date of the contact.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The creation date of the contact.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The creation date of the contact.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The opportunity ids of the contact.
         */
        public Builder opportunityIds(List<String> opportunityIds) {
            Utils.checkNotNull(opportunityIds, "opportunityIds");
            this.opportunityIds = Optional.ofNullable(opportunityIds);
            return this;
        }

        /**
         * The opportunity ids of the contact.
         */
        public Builder opportunityIds(Optional<? extends List<String>> opportunityIds) {
            Utils.checkNotNull(opportunityIds, "opportunityIds");
            this.opportunityIds = opportunityIds;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public Contact build() {
            return new Contact(
                id,
                name,
                ownerId,
                type,
                companyId,
                companyName,
                leadId,
                firstName,
                middleName,
                lastName,
                prefix,
                suffix,
                title,
                department,
                language,
                gender,
                birthday,
                image,
                photoUrl,
                leadSource,
                fax,
                description,
                currentBalance,
                status,
                active,
                websites,
                addresses,
                socialLinks,
                phoneNumbers,
                emails,
                emailDomain,
                customFields,
                tags,
                firstCallAt,
                firstEmailAt,
                lastActivityAt,
                customMappings,
                updatedAt,
                createdAt,
                opportunityIds,
                passThrough);
        }
    }
}
