/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Contact {
    /**
     * Unique identifier for the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Full name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The owner of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The type of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<ContactType> type;

    /**
     * The company the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The lead the contact is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The first name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The middle name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The last name of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The prefix of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * The suffix of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * The job title of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The department of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<String> department;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * The gender of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<ContactGender> gender;

    /**
     * The birthday of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<String> birthday;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    @Deprecated
    private JsonNullable<String> image;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * The lead source of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The fax number of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;

    /**
     * The description of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current balance of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    private JsonNullable<Double> currentBalance;

    /**
     * The status of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The active status of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLink> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_domain")
    private JsonNullable<String> emailDomain;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<List<CustomField>> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;

    /**
     * The first call date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_call_at")
    private JsonNullable<OffsetDateTime> firstCallAt;

    /**
     * The first email date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_email_at")
    private JsonNullable<OffsetDateTime> firstEmailAt;

    /**
     * The last activity date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_activity_at")
    private JsonNullable<OffsetDateTime> lastActivityAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The last update date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The creation date of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The opportunity ids of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunity_ids")
    private List<String> opportunityIds;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Contact(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("type") @Nullable JsonNullable<ContactType> type,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("lead_id") @Nullable JsonNullable<String> leadId,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("prefix") @Nullable JsonNullable<String> prefix,
            @JsonProperty("suffix") @Nullable JsonNullable<String> suffix,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("department") @Nullable JsonNullable<String> department,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("gender") @Nullable JsonNullable<ContactGender> gender,
            @JsonProperty("birthday") @Nullable JsonNullable<String> birthday,
            @JsonProperty("image") @Nullable JsonNullable<String> image,
            @JsonProperty("photo_url") @Nullable JsonNullable<String> photoUrl,
            @JsonProperty("lead_source") @Nullable JsonNullable<String> leadSource,
            @JsonProperty("fax") @Nullable JsonNullable<String> fax,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("current_balance") @Nullable JsonNullable<Double> currentBalance,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("active") @Nullable JsonNullable<Boolean> active,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("social_links") @Nullable List<SocialLink> socialLinks,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("email_domain") @Nullable JsonNullable<String> emailDomain,
            @JsonProperty("custom_fields") @Nullable JsonNullable<List<CustomField>> customFields,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("first_call_at") @Nullable JsonNullable<OffsetDateTime> firstCallAt,
            @JsonProperty("first_email_at") @Nullable JsonNullable<OffsetDateTime> firstEmailAt,
            @JsonProperty("last_activity_at") @Nullable JsonNullable<OffsetDateTime> lastActivityAt,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("opportunity_ids") @Nullable List<String> opportunityIds,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.leadId = Optional.ofNullable(leadId)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.prefix = Optional.ofNullable(prefix)
            .orElse(JsonNullable.undefined());
        this.suffix = Optional.ofNullable(suffix)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.department = Optional.ofNullable(department)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.gender = Optional.ofNullable(gender)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.image = Optional.ofNullable(image)
            .orElse(JsonNullable.undefined());
        this.photoUrl = Optional.ofNullable(photoUrl)
            .orElse(JsonNullable.undefined());
        this.leadSource = Optional.ofNullable(leadSource)
            .orElse(JsonNullable.undefined());
        this.fax = Optional.ofNullable(fax)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.currentBalance = Optional.ofNullable(currentBalance)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.active = Optional.ofNullable(active)
            .orElse(JsonNullable.undefined());
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.emailDomain = Optional.ofNullable(emailDomain)
            .orElse(JsonNullable.undefined());
        this.customFields = Optional.ofNullable(customFields)
            .orElse(JsonNullable.undefined());
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.firstCallAt = Optional.ofNullable(firstCallAt)
            .orElse(JsonNullable.undefined());
        this.firstEmailAt = Optional.ofNullable(firstEmailAt)
            .orElse(JsonNullable.undefined());
        this.lastActivityAt = Optional.ofNullable(lastActivityAt)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.opportunityIds = opportunityIds;
        this.passThrough = passThrough;
    }
    
    public Contact() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Unique identifier for the contact.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Full name of the contact.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The owner of the contact.
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The type of the contact.
     */
    public JsonNullable<ContactType> type() {
        return this.type;
    }

    /**
     * The company the contact is associated with.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The name of the company the contact is associated with.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The lead the contact is associated with.
     */
    public JsonNullable<String> leadId() {
        return this.leadId;
    }

    /**
     * The first name of the contact.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The middle name of the contact.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The last name of the contact.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * The prefix of the contact.
     */
    public JsonNullable<String> prefix() {
        return this.prefix;
    }

    /**
     * The suffix of the contact.
     */
    public JsonNullable<String> suffix() {
        return this.suffix;
    }

    /**
     * The job title of the contact.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The department of the contact.
     */
    public JsonNullable<String> department() {
        return this.department;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    /**
     * The gender of the contact.
     */
    public JsonNullable<ContactGender> gender() {
        return this.gender;
    }

    /**
     * The birthday of the contact.
     */
    public JsonNullable<String> birthday() {
        return this.birthday;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> image() {
        return this.image;
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<String> photoUrl() {
        return this.photoUrl;
    }

    /**
     * The lead source of the contact.
     */
    public JsonNullable<String> leadSource() {
        return this.leadSource;
    }

    /**
     * The fax number of the contact.
     */
    public JsonNullable<String> fax() {
        return this.fax;
    }

    /**
     * The description of the contact.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The current balance of the contact.
     */
    public JsonNullable<Double> currentBalance() {
        return this.currentBalance;
    }

    /**
     * The status of the contact.
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * The active status of the contact.
     */
    public JsonNullable<Boolean> active() {
        return this.active;
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<SocialLink>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public JsonNullable<String> emailDomain() {
        return this.emailDomain;
    }

    public JsonNullable<List<CustomField>> customFields() {
        return this.customFields;
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    /**
     * The first call date of the contact.
     */
    public JsonNullable<OffsetDateTime> firstCallAt() {
        return this.firstCallAt;
    }

    /**
     * The first email date of the contact.
     */
    public JsonNullable<OffsetDateTime> firstEmailAt() {
        return this.firstEmailAt;
    }

    /**
     * The last activity date of the contact.
     */
    public JsonNullable<OffsetDateTime> lastActivityAt() {
        return this.lastActivityAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The last update date of the contact.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The creation date of the contact.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The opportunity ids of the contact.
     */
    public Optional<List<String>> opportunityIds() {
        return Optional.ofNullable(this.opportunityIds);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the contact.
     */
    public Contact withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Full name of the contact.
     */
    public Contact withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The owner of the contact.
     */
    public Contact withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The type of the contact.
     */
    public Contact withType(@Nullable ContactType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The company the contact is associated with.
     */
    public Contact withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The name of the company the contact is associated with.
     */
    public Contact withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The lead the contact is associated with.
     */
    public Contact withLeadId(@Nullable String leadId) {
        this.leadId = JsonNullable.of(leadId);
        return this;
    }


    /**
     * The first name of the contact.
     */
    public Contact withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The middle name of the contact.
     */
    public Contact withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The last name of the contact.
     */
    public Contact withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * The prefix of the contact.
     */
    public Contact withPrefix(@Nullable String prefix) {
        this.prefix = JsonNullable.of(prefix);
        return this;
    }


    /**
     * The suffix of the contact.
     */
    public Contact withSuffix(@Nullable String suffix) {
        this.suffix = JsonNullable.of(suffix);
        return this;
    }


    /**
     * The job title of the contact.
     */
    public Contact withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The department of the contact.
     */
    public Contact withDepartment(@Nullable String department) {
        this.department = JsonNullable.of(department);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Contact withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    /**
     * The gender of the contact.
     */
    public Contact withGender(@Nullable ContactGender gender) {
        this.gender = JsonNullable.of(gender);
        return this;
    }


    /**
     * The birthday of the contact.
     */
    public Contact withBirthday(@Nullable String birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Contact withImage(@Nullable String image) {
        this.image = JsonNullable.of(image);
        return this;
    }


    /**
     * The URL of the photo of a person.
     */
    public Contact withPhotoUrl(@Nullable String photoUrl) {
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }


    /**
     * The lead source of the contact.
     */
    public Contact withLeadSource(@Nullable String leadSource) {
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }


    /**
     * The fax number of the contact.
     */
    public Contact withFax(@Nullable String fax) {
        this.fax = JsonNullable.of(fax);
        return this;
    }


    /**
     * The description of the contact.
     */
    public Contact withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The current balance of the contact.
     */
    public Contact withCurrentBalance(@Nullable Double currentBalance) {
        this.currentBalance = JsonNullable.of(currentBalance);
        return this;
    }


    /**
     * The status of the contact.
     */
    public Contact withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * The active status of the contact.
     */
    public Contact withActive(@Nullable Boolean active) {
        this.active = JsonNullable.of(active);
        return this;
    }


    public Contact withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public Contact withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Contact withSocialLinks(@Nullable List<SocialLink> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public Contact withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public Contact withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public Contact withEmailDomain(@Nullable String emailDomain) {
        this.emailDomain = JsonNullable.of(emailDomain);
        return this;
    }


    public Contact withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = JsonNullable.of(customFields);
        return this;
    }


    public Contact withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    /**
     * The first call date of the contact.
     */
    public Contact withFirstCallAt(@Nullable OffsetDateTime firstCallAt) {
        this.firstCallAt = JsonNullable.of(firstCallAt);
        return this;
    }


    /**
     * The first email date of the contact.
     */
    public Contact withFirstEmailAt(@Nullable OffsetDateTime firstEmailAt) {
        this.firstEmailAt = JsonNullable.of(firstEmailAt);
        return this;
    }


    /**
     * The last activity date of the contact.
     */
    public Contact withLastActivityAt(@Nullable OffsetDateTime lastActivityAt) {
        this.lastActivityAt = JsonNullable.of(lastActivityAt);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Contact withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The last update date of the contact.
     */
    public Contact withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The creation date of the contact.
     */
    public Contact withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The opportunity ids of the contact.
     */
    public Contact withOpportunityIds(@Nullable List<String> opportunityIds) {
        this.opportunityIds = opportunityIds;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Contact withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Contact other = (Contact) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.prefix, other.prefix) &&
            Utils.enhancedDeepEquals(this.suffix, other.suffix) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.leadSource, other.leadSource) &&
            Utils.enhancedDeepEquals(this.fax, other.fax) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.currentBalance, other.currentBalance) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.emailDomain, other.emailDomain) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.firstCallAt, other.firstCallAt) &&
            Utils.enhancedDeepEquals(this.firstEmailAt, other.firstEmailAt) &&
            Utils.enhancedDeepEquals(this.lastActivityAt, other.lastActivityAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.opportunityIds, other.opportunityIds) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, ownerId,
            type, companyId, companyName,
            leadId, firstName, middleName,
            lastName, prefix, suffix,
            title, department, language,
            gender, birthday, image,
            photoUrl, leadSource, fax,
            description, currentBalance, status,
            active, websites, addresses,
            socialLinks, phoneNumbers, emails,
            emailDomain, customFields, tags,
            firstCallAt, firstEmailAt, lastActivityAt,
            customMappings, updatedAt, createdAt,
            opportunityIds, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Contact.class,
                "id", id,
                "name", name,
                "ownerId", ownerId,
                "type", type,
                "companyId", companyId,
                "companyName", companyName,
                "leadId", leadId,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "prefix", prefix,
                "suffix", suffix,
                "title", title,
                "department", department,
                "language", language,
                "gender", gender,
                "birthday", birthday,
                "image", image,
                "photoUrl", photoUrl,
                "leadSource", leadSource,
                "fax", fax,
                "description", description,
                "currentBalance", currentBalance,
                "status", status,
                "active", active,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "emailDomain", emailDomain,
                "customFields", customFields,
                "tags", tags,
                "firstCallAt", firstCallAt,
                "firstEmailAt", firstEmailAt,
                "lastActivityAt", lastActivityAt,
                "customMappings", customMappings,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "opportunityIds", opportunityIds,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> ownerId;

        private JsonNullable<ContactType> type;

        private JsonNullable<String> companyId;

        private JsonNullable<String> companyName;

        private JsonNullable<String> leadId;

        private JsonNullable<String> firstName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> prefix;

        private JsonNullable<String> suffix;

        private JsonNullable<String> title;

        private JsonNullable<String> department;

        private JsonNullable<String> language;

        private JsonNullable<ContactGender> gender;

        private JsonNullable<String> birthday;

        @Deprecated
        private JsonNullable<String> image;

        private JsonNullable<String> photoUrl;

        private JsonNullable<String> leadSource;

        private JsonNullable<String> fax;

        private JsonNullable<String> description;

        private JsonNullable<Double> currentBalance;

        private JsonNullable<String> status;

        private JsonNullable<Boolean> active;

        private List<Website> websites;

        private List<Address> addresses;

        private List<SocialLink> socialLinks;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private JsonNullable<String> emailDomain;

        private JsonNullable<List<CustomField>> customFields;

        private JsonNullable<List<String>> tags;

        private JsonNullable<OffsetDateTime> firstCallAt;

        private JsonNullable<OffsetDateTime> firstEmailAt;

        private JsonNullable<OffsetDateTime> lastActivityAt;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<String> opportunityIds;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the contact.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Full name of the contact.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The owner of the contact.
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The type of the contact.
         */
        public Builder type(@Nullable ContactType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The company the contact is associated with.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The name of the company the contact is associated with.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The lead the contact is associated with.
         */
        public Builder leadId(@Nullable String leadId) {
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The first name of the contact.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The middle name of the contact.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The last name of the contact.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The prefix of the contact.
         */
        public Builder prefix(@Nullable String prefix) {
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * The suffix of the contact.
         */
        public Builder suffix(@Nullable String suffix) {
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        /**
         * The job title of the contact.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The department of the contact.
         */
        public Builder department(@Nullable String department) {
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * The gender of the contact.
         */
        public Builder gender(@Nullable ContactGender gender) {
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The birthday of the contact.
         */
        public Builder birthday(@Nullable String birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder image(@Nullable String image) {
            this.image = JsonNullable.of(image);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(@Nullable String photoUrl) {
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The lead source of the contact.
         */
        public Builder leadSource(@Nullable String leadSource) {
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The fax number of the contact.
         */
        public Builder fax(@Nullable String fax) {
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * The description of the contact.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The current balance of the contact.
         */
        public Builder currentBalance(@Nullable Double currentBalance) {
            this.currentBalance = JsonNullable.of(currentBalance);
            return this;
        }

        /**
         * The status of the contact.
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The active status of the contact.
         */
        public Builder active(@Nullable Boolean active) {
            this.active = JsonNullable.of(active);
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLink> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder emailDomain(@Nullable String emailDomain) {
            this.emailDomain = JsonNullable.of(emailDomain);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * The first call date of the contact.
         */
        public Builder firstCallAt(@Nullable OffsetDateTime firstCallAt) {
            this.firstCallAt = JsonNullable.of(firstCallAt);
            return this;
        }

        /**
         * The first email date of the contact.
         */
        public Builder firstEmailAt(@Nullable OffsetDateTime firstEmailAt) {
            this.firstEmailAt = JsonNullable.of(firstEmailAt);
            return this;
        }

        /**
         * The last activity date of the contact.
         */
        public Builder lastActivityAt(@Nullable OffsetDateTime lastActivityAt) {
            this.lastActivityAt = JsonNullable.of(lastActivityAt);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The last update date of the contact.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The creation date of the contact.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The opportunity ids of the contact.
         */
        public Builder opportunityIds(@Nullable List<String> opportunityIds) {
            this.opportunityIds = opportunityIds;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Contact build() {
            return new Contact(
                id, name, ownerId,
                type, companyId, companyName,
                leadId, firstName, middleName,
                lastName, prefix, suffix,
                title, department, language,
                gender, birthday, image,
                photoUrl, leadSource, fax,
                description, currentBalance, status,
                active, websites, addresses,
                socialLinks, phoneNumbers, emails,
                emailDomain, customFields, tags,
                firstCallAt, firstEmailAt, lastActivityAt,
                customMappings, updatedAt, createdAt,
                opportunityIds, passThrough);
        }

    }
}
