/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Coverage {
    /**
     * ID of the resource in the Connector's API (downstream)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private String downstreamId;

    /**
     * Name of the resource in the Connector's API (downstream)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_name")
    private String downstreamName;

    /**
     * Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pagination_supported")
    private Boolean paginationSupported;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pagination")
    private PaginationCoverage pagination;

    /**
     * List of supported operations on the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_operations")
    private List<String> supportedOperations;

    /**
     * Supported filters on the list endpoint of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_filters")
    private List<String> supportedFilters;

    /**
     * Supported sorting properties on the list endpoint of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_sort_by")
    private List<String> supportedSortBy;

    /**
     * Supported fields on the detail endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_fields")
    private List<SupportedProperty> supportedFields;

    /**
     * Supported fields on the list endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_list_fields")
    private List<SupportedProperty> supportedListFields;

    @JsonCreator
    public Coverage(
            @JsonProperty("downstream_id") @Nullable String downstreamId,
            @JsonProperty("downstream_name") @Nullable String downstreamName,
            @JsonProperty("pagination_supported") @Nullable Boolean paginationSupported,
            @JsonProperty("pagination") @Nullable PaginationCoverage pagination,
            @JsonProperty("supported_operations") @Nullable List<String> supportedOperations,
            @JsonProperty("supported_filters") @Nullable List<String> supportedFilters,
            @JsonProperty("supported_sort_by") @Nullable List<String> supportedSortBy,
            @JsonProperty("supported_fields") @Nullable List<SupportedProperty> supportedFields,
            @JsonProperty("supported_list_fields") @Nullable List<SupportedProperty> supportedListFields) {
        this.downstreamId = downstreamId;
        this.downstreamName = downstreamName;
        this.paginationSupported = paginationSupported;
        this.pagination = pagination;
        this.supportedOperations = supportedOperations;
        this.supportedFilters = supportedFilters;
        this.supportedSortBy = supportedSortBy;
        this.supportedFields = supportedFields;
        this.supportedListFields = supportedListFields;
    }
    
    public Coverage() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * ID of the resource in the Connector's API (downstream)
     */
    public Optional<String> downstreamId() {
        return Optional.ofNullable(this.downstreamId);
    }

    /**
     * Name of the resource in the Connector's API (downstream)
     */
    public Optional<String> downstreamName() {
        return Optional.ofNullable(this.downstreamName);
    }

    /**
     * Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
     */
    public Optional<Boolean> paginationSupported() {
        return Optional.ofNullable(this.paginationSupported);
    }

    public Optional<PaginationCoverage> pagination() {
        return Optional.ofNullable(this.pagination);
    }

    /**
     * List of supported operations on the resource.
     */
    public Optional<List<String>> supportedOperations() {
        return Optional.ofNullable(this.supportedOperations);
    }

    /**
     * Supported filters on the list endpoint of the resource.
     */
    public Optional<List<String>> supportedFilters() {
        return Optional.ofNullable(this.supportedFilters);
    }

    /**
     * Supported sorting properties on the list endpoint of the resource.
     */
    public Optional<List<String>> supportedSortBy() {
        return Optional.ofNullable(this.supportedSortBy);
    }

    /**
     * Supported fields on the detail endpoint.
     */
    public Optional<List<SupportedProperty>> supportedFields() {
        return Optional.ofNullable(this.supportedFields);
    }

    /**
     * Supported fields on the list endpoint.
     */
    public Optional<List<SupportedProperty>> supportedListFields() {
        return Optional.ofNullable(this.supportedListFields);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the resource in the Connector's API (downstream)
     */
    public Coverage withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = downstreamId;
        return this;
    }


    /**
     * Name of the resource in the Connector's API (downstream)
     */
    public Coverage withDownstreamName(@Nullable String downstreamName) {
        this.downstreamName = downstreamName;
        return this;
    }


    /**
     * Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
     */
    public Coverage withPaginationSupported(@Nullable Boolean paginationSupported) {
        this.paginationSupported = paginationSupported;
        return this;
    }


    public Coverage withPagination(@Nullable PaginationCoverage pagination) {
        this.pagination = pagination;
        return this;
    }


    /**
     * List of supported operations on the resource.
     */
    public Coverage withSupportedOperations(@Nullable List<String> supportedOperations) {
        this.supportedOperations = supportedOperations;
        return this;
    }


    /**
     * Supported filters on the list endpoint of the resource.
     */
    public Coverage withSupportedFilters(@Nullable List<String> supportedFilters) {
        this.supportedFilters = supportedFilters;
        return this;
    }


    /**
     * Supported sorting properties on the list endpoint of the resource.
     */
    public Coverage withSupportedSortBy(@Nullable List<String> supportedSortBy) {
        this.supportedSortBy = supportedSortBy;
        return this;
    }


    /**
     * Supported fields on the detail endpoint.
     */
    public Coverage withSupportedFields(@Nullable List<SupportedProperty> supportedFields) {
        this.supportedFields = supportedFields;
        return this;
    }


    /**
     * Supported fields on the list endpoint.
     */
    public Coverage withSupportedListFields(@Nullable List<SupportedProperty> supportedListFields) {
        this.supportedListFields = supportedListFields;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Coverage other = (Coverage) o;
        return 
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.downstreamName, other.downstreamName) &&
            Utils.enhancedDeepEquals(this.paginationSupported, other.paginationSupported) &&
            Utils.enhancedDeepEquals(this.pagination, other.pagination) &&
            Utils.enhancedDeepEquals(this.supportedOperations, other.supportedOperations) &&
            Utils.enhancedDeepEquals(this.supportedFilters, other.supportedFilters) &&
            Utils.enhancedDeepEquals(this.supportedSortBy, other.supportedSortBy) &&
            Utils.enhancedDeepEquals(this.supportedFields, other.supportedFields) &&
            Utils.enhancedDeepEquals(this.supportedListFields, other.supportedListFields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            downstreamId, downstreamName, paginationSupported,
            pagination, supportedOperations, supportedFilters,
            supportedSortBy, supportedFields, supportedListFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Coverage.class,
                "downstreamId", downstreamId,
                "downstreamName", downstreamName,
                "paginationSupported", paginationSupported,
                "pagination", pagination,
                "supportedOperations", supportedOperations,
                "supportedFilters", supportedFilters,
                "supportedSortBy", supportedSortBy,
                "supportedFields", supportedFields,
                "supportedListFields", supportedListFields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String downstreamId;

        private String downstreamName;

        private Boolean paginationSupported;

        private PaginationCoverage pagination;

        private List<String> supportedOperations;

        private List<String> supportedFilters;

        private List<String> supportedSortBy;

        private List<SupportedProperty> supportedFields;

        private List<SupportedProperty> supportedListFields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the resource in the Connector's API (downstream)
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = downstreamId;
            return this;
        }

        /**
         * Name of the resource in the Connector's API (downstream)
         */
        public Builder downstreamName(@Nullable String downstreamName) {
            this.downstreamName = downstreamName;
            return this;
        }

        /**
         * Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
         */
        public Builder paginationSupported(@Nullable Boolean paginationSupported) {
            this.paginationSupported = paginationSupported;
            return this;
        }

        public Builder pagination(@Nullable PaginationCoverage pagination) {
            this.pagination = pagination;
            return this;
        }

        /**
         * List of supported operations on the resource.
         */
        public Builder supportedOperations(@Nullable List<String> supportedOperations) {
            this.supportedOperations = supportedOperations;
            return this;
        }

        /**
         * Supported filters on the list endpoint of the resource.
         */
        public Builder supportedFilters(@Nullable List<String> supportedFilters) {
            this.supportedFilters = supportedFilters;
            return this;
        }

        /**
         * Supported sorting properties on the list endpoint of the resource.
         */
        public Builder supportedSortBy(@Nullable List<String> supportedSortBy) {
            this.supportedSortBy = supportedSortBy;
            return this;
        }

        /**
         * Supported fields on the detail endpoint.
         */
        public Builder supportedFields(@Nullable List<SupportedProperty> supportedFields) {
            this.supportedFields = supportedFields;
            return this;
        }

        /**
         * Supported fields on the list endpoint.
         */
        public Builder supportedListFields(@Nullable List<SupportedProperty> supportedListFields) {
            this.supportedListFields = supportedListFields;
            return this;
        }

        public Coverage build() {
            return new Coverage(
                downstreamId, downstreamName, paginationSupported,
                pagination, supportedOperations, supportedFilters,
                supportedSortBy, supportedFields, supportedListFields);
        }

    }
}
