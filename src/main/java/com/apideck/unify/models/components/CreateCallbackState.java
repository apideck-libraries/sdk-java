/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class CreateCallbackState {
    /**
     * The redirect URI to be used after the connection is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uri")
    private String redirectUri;

    @JsonCreator
    public CreateCallbackState(
            @JsonProperty("redirect_uri") @Nullable String redirectUri) {
        this.redirectUri = redirectUri;
    }
    
    public CreateCallbackState() {
        this(null);
    }

    /**
     * The redirect URI to be used after the connection is created.
     */
    public Optional<String> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The redirect URI to be used after the connection is created.
     */
    public CreateCallbackState withRedirectUri(@Nullable String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCallbackState other = (CreateCallbackState) o;
        return 
            Utils.enhancedDeepEquals(this.redirectUri, other.redirectUri);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            redirectUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCallbackState.class,
                "redirectUri", redirectUri);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String redirectUri;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The redirect URI to be used after the connection is created.
         */
        public Builder redirectUri(@Nullable String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }

        public CreateCallbackState build() {
            return new CreateCallbackState(
                redirectUri);
        }

    }
}
