/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CreateCallbackState {

    /**
     * The redirect URI to be used after the connection is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uri")
    private Optional<String> redirectUri;

    @JsonCreator
    public CreateCallbackState(
            @JsonProperty("redirect_uri") Optional<String> redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = redirectUri;
    }
    
    public CreateCallbackState() {
        this(Optional.empty());
    }

    /**
     * The redirect URI to be used after the connection is created.
     */
    @JsonIgnore
    public Optional<String> redirectUri() {
        return redirectUri;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The redirect URI to be used after the connection is created.
     */
    public CreateCallbackState withRedirectUri(String redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = Optional.ofNullable(redirectUri);
        return this;
    }

    /**
     * The redirect URI to be used after the connection is created.
     */
    public CreateCallbackState withRedirectUri(Optional<String> redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = redirectUri;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCallbackState other = (CreateCallbackState) o;
        return 
            Objects.deepEquals(this.redirectUri, other.redirectUri);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            redirectUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCallbackState.class,
                "redirectUri", redirectUri);
    }
    
    public final static class Builder {
 
        private Optional<String> redirectUri = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The redirect URI to be used after the connection is created.
         */
        public Builder redirectUri(String redirectUri) {
            Utils.checkNotNull(redirectUri, "redirectUri");
            this.redirectUri = Optional.ofNullable(redirectUri);
            return this;
        }

        /**
         * The redirect URI to be used after the connection is created.
         */
        public Builder redirectUri(Optional<String> redirectUri) {
            Utils.checkNotNull(redirectUri, "redirectUri");
            this.redirectUri = redirectUri;
            return this;
        }
        
        public CreateCallbackState build() {
            return new CreateCallbackState(
                redirectUri);
        }
    }
}

