/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class CreateFolderRequest {
    /**
     * The name of the folder.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Optional description of the folder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private String description;

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    @JsonProperty("parent_folder_id")
    private String parentFolderId;

    /**
     * ID of the drive to create the folder in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drive_id")
    private String driveId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public CreateFolderRequest(
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("description") @Nullable String description,
            @JsonProperty("parent_folder_id") @Nonnull String parentFolderId,
            @JsonProperty("drive_id") @Nullable String driveId,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.description = description;
        this.parentFolderId = Optional.ofNullable(parentFolderId)
            .orElseThrow(() -> new IllegalArgumentException("parentFolderId cannot be null"));
        this.driveId = driveId;
        this.passThrough = passThrough;
    }
    
    public CreateFolderRequest(
            @Nonnull String name,
            @Nonnull String parentFolderId) {
        this(name, null, parentFolderId,
            null, null);
    }

    /**
     * The name of the folder.
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional description of the folder.
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    public String parentFolderId() {
        return this.parentFolderId;
    }

    /**
     * ID of the drive to create the folder in.
     */
    public Optional<String> driveId() {
        return Optional.ofNullable(this.driveId);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the folder.
     */
    public CreateFolderRequest withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    /**
     * Optional description of the folder.
     */
    public CreateFolderRequest withDescription(@Nullable String description) {
        this.description = description;
        return this;
    }


    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    public CreateFolderRequest withParentFolderId(@Nonnull String parentFolderId) {
        this.parentFolderId = Utils.checkNotNull(parentFolderId, "parentFolderId");
        return this;
    }


    /**
     * ID of the drive to create the folder in.
     */
    public CreateFolderRequest withDriveId(@Nullable String driveId) {
        this.driveId = driveId;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CreateFolderRequest withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFolderRequest other = (CreateFolderRequest) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.parentFolderId, other.parentFolderId) &&
            Utils.enhancedDeepEquals(this.driveId, other.driveId) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, parentFolderId,
            driveId, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateFolderRequest.class,
                "name", name,
                "description", description,
                "parentFolderId", parentFolderId,
                "driveId", driveId,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String description;

        private String parentFolderId;

        private String driveId;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the folder.
         */
        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        /**
         * Optional description of the folder.
         */
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
         */
        public Builder parentFolderId(@Nonnull String parentFolderId) {
            this.parentFolderId = Utils.checkNotNull(parentFolderId, "parentFolderId");
            return this;
        }

        /**
         * ID of the drive to create the folder in.
         */
        public Builder driveId(@Nullable String driveId) {
            this.driveId = driveId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public CreateFolderRequest build() {
            return new CreateFolderRequest(
                name, description, parentFolderId,
                driveId, passThrough);
        }

    }
}
