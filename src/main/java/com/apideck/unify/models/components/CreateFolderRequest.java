/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CreateFolderRequest {

    /**
     * The name of the folder.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Optional description of the folder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    @JsonProperty("parent_folder_id")
    private String parentFolderId;

    /**
     * ID of the drive to create the folder in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drive_id")
    private Optional<String> driveId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CreateFolderRequest(
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("parent_folder_id") String parentFolderId,
            @JsonProperty("drive_id") Optional<String> driveId,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(parentFolderId, "parentFolderId");
        Utils.checkNotNull(driveId, "driveId");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.description = description;
        this.parentFolderId = parentFolderId;
        this.driveId = driveId;
        this.passThrough = passThrough;
    }
    
    public CreateFolderRequest(
            String name,
            String parentFolderId) {
        this(name, Optional.empty(), parentFolderId, Optional.empty(), Optional.empty());
    }

    /**
     * The name of the folder.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Optional description of the folder.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    @JsonIgnore
    public String parentFolderId() {
        return parentFolderId;
    }

    /**
     * ID of the drive to create the folder in.
     */
    @JsonIgnore
    public Optional<String> driveId() {
        return driveId;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the folder.
     */
    public CreateFolderRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Optional description of the folder.
     */
    public CreateFolderRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Optional description of the folder.
     */
    public CreateFolderRequest withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    public CreateFolderRequest withParentFolderId(String parentFolderId) {
        Utils.checkNotNull(parentFolderId, "parentFolderId");
        this.parentFolderId = parentFolderId;
        return this;
    }

    /**
     * ID of the drive to create the folder in.
     */
    public CreateFolderRequest withDriveId(String driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = Optional.ofNullable(driveId);
        return this;
    }

    /**
     * ID of the drive to create the folder in.
     */
    public CreateFolderRequest withDriveId(Optional<String> driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = driveId;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CreateFolderRequest withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CreateFolderRequest withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFolderRequest other = (CreateFolderRequest) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.parentFolderId, other.parentFolderId) &&
            Objects.deepEquals(this.driveId, other.driveId) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            description,
            parentFolderId,
            driveId,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateFolderRequest.class,
                "name", name,
                "description", description,
                "parentFolderId", parentFolderId,
                "driveId", driveId,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private String parentFolderId;
 
        private Optional<String> driveId = Optional.empty();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the folder.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Optional description of the folder.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Optional description of the folder.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
         */
        public Builder parentFolderId(String parentFolderId) {
            Utils.checkNotNull(parentFolderId, "parentFolderId");
            this.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * ID of the drive to create the folder in.
         */
        public Builder driveId(String driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = Optional.ofNullable(driveId);
            return this;
        }

        /**
         * ID of the drive to create the folder in.
         */
        public Builder driveId(Optional<String> driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = driveId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public CreateFolderRequest build() {
            return new CreateFolderRequest(
                name,
                description,
                parentFolderId,
                driveId,
                passThrough);
        }
    }
}

