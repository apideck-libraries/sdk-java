/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CreateUploadSessionRequest {
    /**
     * The name of the file.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the
     * downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    @JsonProperty("parent_folder_id")
    private String parentFolderId;

    /**
     * ID of the drive to upload to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drive_id")
    private Optional<String> driveId;

    /**
     * The size of the file in bytes
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("size")
    private Optional<Long> size;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CreateUploadSessionRequest(
            @JsonProperty("name") String name,
            @JsonProperty("parent_folder_id") String parentFolderId,
            @JsonProperty("drive_id") Optional<String> driveId,
            @JsonProperty("size") Optional<Long> size,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentFolderId, "parentFolderId");
        Utils.checkNotNull(driveId, "driveId");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.parentFolderId = parentFolderId;
        this.driveId = driveId;
        this.size = size;
        this.passThrough = passThrough;
    }
    
    public CreateUploadSessionRequest(
            String name,
            String parentFolderId) {
        this(name, parentFolderId, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The name of the file.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the
     * downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    @JsonIgnore
    public String parentFolderId() {
        return parentFolderId;
    }

    /**
     * ID of the drive to upload to.
     */
    @JsonIgnore
    public Optional<String> driveId() {
        return driveId;
    }

    /**
     * The size of the file in bytes
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the file.
     */
    public CreateUploadSessionRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The parent folder to create the new file within. This can be an ID or a path depending on the
     * downstream folder. Please see the connector section below to see downstream specific gotchas.
     */
    public CreateUploadSessionRequest withParentFolderId(String parentFolderId) {
        Utils.checkNotNull(parentFolderId, "parentFolderId");
        this.parentFolderId = parentFolderId;
        return this;
    }

    /**
     * ID of the drive to upload to.
     */
    public CreateUploadSessionRequest withDriveId(String driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = Optional.ofNullable(driveId);
        return this;
    }


    /**
     * ID of the drive to upload to.
     */
    public CreateUploadSessionRequest withDriveId(Optional<String> driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = driveId;
        return this;
    }

    /**
     * The size of the file in bytes
     */
    public CreateUploadSessionRequest withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }


    /**
     * The size of the file in bytes
     */
    public CreateUploadSessionRequest withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public CreateUploadSessionRequest withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public CreateUploadSessionRequest withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateUploadSessionRequest other = (CreateUploadSessionRequest) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.parentFolderId, other.parentFolderId) &&
            Utils.enhancedDeepEquals(this.driveId, other.driveId) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, parentFolderId, driveId,
            size, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateUploadSessionRequest.class,
                "name", name,
                "parentFolderId", parentFolderId,
                "driveId", driveId,
                "size", size,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String parentFolderId;

        private Optional<String> driveId = Optional.empty();

        private Optional<Long> size = Optional.empty();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the file.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The parent folder to create the new file within. This can be an ID or a path depending on the
         * downstream folder. Please see the connector section below to see downstream specific gotchas.
         */
        public Builder parentFolderId(String parentFolderId) {
            Utils.checkNotNull(parentFolderId, "parentFolderId");
            this.parentFolderId = parentFolderId;
            return this;
        }


        /**
         * ID of the drive to upload to.
         */
        public Builder driveId(String driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = Optional.ofNullable(driveId);
            return this;
        }

        /**
         * ID of the drive to upload to.
         */
        public Builder driveId(Optional<String> driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = driveId;
            return this;
        }


        /**
         * The size of the file in bytes
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * The size of the file in bytes
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public CreateUploadSessionRequest build() {

            return new CreateUploadSessionRequest(
                name, parentFolderId, driveId,
                size, passThrough);
        }

    }
}
