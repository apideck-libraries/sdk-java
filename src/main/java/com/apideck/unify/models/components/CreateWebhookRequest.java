/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateWebhookRequest {

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Name of Apideck Unified API
     */
    @JsonProperty("unified_api")
    private UnifiedApiId unifiedApi;

    /**
     * The status of the webhook.
     */
    @JsonProperty("status")
    private Status status;

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonProperty("delivery_url")
    private String deliveryUrl;

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonProperty("events")
    private List<WebhookEventType> events;

    @JsonCreator
    public CreateWebhookRequest(
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("unified_api") UnifiedApiId unifiedApi,
            @JsonProperty("status") Status status,
            @JsonProperty("delivery_url") String deliveryUrl,
            @JsonProperty("events") List<WebhookEventType> events) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        Utils.checkNotNull(events, "events");
        this.description = description;
        this.unifiedApi = unifiedApi;
        this.status = status;
        this.deliveryUrl = deliveryUrl;
        this.events = events;
    }
    
    public CreateWebhookRequest(
            UnifiedApiId unifiedApi,
            Status status,
            String deliveryUrl,
            List<WebhookEventType> events) {
        this(JsonNullable.undefined(), unifiedApi, status, deliveryUrl, events);
    }

    /**
     * A description of the object.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Name of Apideck Unified API
     */
    @JsonIgnore
    public UnifiedApiId unifiedApi() {
        return unifiedApi;
    }

    /**
     * The status of the webhook.
     */
    @JsonIgnore
    public Status status() {
        return status;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonIgnore
    public String deliveryUrl() {
        return deliveryUrl;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonIgnore
    public List<WebhookEventType> events() {
        return events;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A description of the object.
     */
    public CreateWebhookRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public CreateWebhookRequest withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Name of Apideck Unified API
     */
    public CreateWebhookRequest withUnifiedApi(UnifiedApiId unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }

    /**
     * The status of the webhook.
     */
    public CreateWebhookRequest withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    public CreateWebhookRequest withDeliveryUrl(String deliveryUrl) {
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        this.deliveryUrl = deliveryUrl;
        return this;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public CreateWebhookRequest withEvents(List<WebhookEventType> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWebhookRequest other = (CreateWebhookRequest) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.unifiedApi, other.unifiedApi) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.deliveryUrl, other.deliveryUrl) &&
            Objects.deepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            unifiedApi,
            status,
            deliveryUrl,
            events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWebhookRequest.class,
                "description", description,
                "unifiedApi", unifiedApi,
                "status", status,
                "deliveryUrl", deliveryUrl,
                "events", events);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private UnifiedApiId unifiedApi;
 
        private Status status;
 
        private String deliveryUrl;
 
        private List<WebhookEventType> events;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(UnifiedApiId unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = unifiedApi;
            return this;
        }

        /**
         * The status of the webhook.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The delivery url of the webhook endpoint.
         */
        public Builder deliveryUrl(String deliveryUrl) {
            Utils.checkNotNull(deliveryUrl, "deliveryUrl");
            this.deliveryUrl = deliveryUrl;
            return this;
        }

        /**
         * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
         */
        public Builder events(List<WebhookEventType> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }
        
        public CreateWebhookRequest build() {
            return new CreateWebhookRequest(
                description,
                unifiedApi,
                status,
                deliveryUrl,
                events);
        }
    }
}

