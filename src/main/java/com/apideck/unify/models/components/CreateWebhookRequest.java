/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateWebhookRequest {
    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Name of Apideck Unified API
     */
    @JsonProperty("unified_api")
    private UnifiedApiId unifiedApi;

    /**
     * The status of the webhook.
     */
    @JsonProperty("status")
    private Status status;

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonProperty("delivery_url")
    private String deliveryUrl;

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonProperty("events")
    private List<WebhookEventType> events;

    @JsonCreator
    public CreateWebhookRequest(
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("unified_api") @Nonnull UnifiedApiId unifiedApi,
            @JsonProperty("status") @Nonnull Status status,
            @JsonProperty("delivery_url") @Nonnull String deliveryUrl,
            @JsonProperty("events") @Nonnull List<WebhookEventType> events) {
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.unifiedApi = Optional.ofNullable(unifiedApi)
            .orElseThrow(() -> new IllegalArgumentException("unifiedApi cannot be null"));
        this.status = Optional.ofNullable(status)
            .orElseThrow(() -> new IllegalArgumentException("status cannot be null"));
        this.deliveryUrl = Optional.ofNullable(deliveryUrl)
            .orElseThrow(() -> new IllegalArgumentException("deliveryUrl cannot be null"));
        this.events = Optional.ofNullable(events)
            .orElseThrow(() -> new IllegalArgumentException("events cannot be null"));
    }
    
    public CreateWebhookRequest(
            @Nonnull UnifiedApiId unifiedApi,
            @Nonnull Status status,
            @Nonnull String deliveryUrl,
            @Nonnull List<WebhookEventType> events) {
        this(null, unifiedApi, status,
            deliveryUrl, events);
    }

    /**
     * A description of the object.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Name of Apideck Unified API
     */
    public UnifiedApiId unifiedApi() {
        return this.unifiedApi;
    }

    /**
     * The status of the webhook.
     */
    public Status status() {
        return this.status;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    public String deliveryUrl() {
        return this.deliveryUrl;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public List<WebhookEventType> events() {
        return this.events;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of the object.
     */
    public CreateWebhookRequest withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Name of Apideck Unified API
     */
    public CreateWebhookRequest withUnifiedApi(@Nonnull UnifiedApiId unifiedApi) {
        this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
        return this;
    }


    /**
     * The status of the webhook.
     */
    public CreateWebhookRequest withStatus(@Nonnull Status status) {
        this.status = Utils.checkNotNull(status, "status");
        return this;
    }


    /**
     * The delivery url of the webhook endpoint.
     */
    public CreateWebhookRequest withDeliveryUrl(@Nonnull String deliveryUrl) {
        this.deliveryUrl = Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        return this;
    }


    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public CreateWebhookRequest withEvents(@Nonnull List<WebhookEventType> events) {
        this.events = Utils.checkNotNull(events, "events");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWebhookRequest other = (CreateWebhookRequest) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.deliveryUrl, other.deliveryUrl) &&
            Utils.enhancedDeepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, unifiedApi, status,
            deliveryUrl, events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWebhookRequest.class,
                "description", description,
                "unifiedApi", unifiedApi,
                "status", status,
                "deliveryUrl", deliveryUrl,
                "events", events);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> description;

        private UnifiedApiId unifiedApi;

        private Status status;

        private String deliveryUrl;

        private List<WebhookEventType> events;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A description of the object.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(@Nonnull UnifiedApiId unifiedApi) {
            this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
            return this;
        }

        /**
         * The status of the webhook.
         */
        public Builder status(@Nonnull Status status) {
            this.status = Utils.checkNotNull(status, "status");
            return this;
        }

        /**
         * The delivery url of the webhook endpoint.
         */
        public Builder deliveryUrl(@Nonnull String deliveryUrl) {
            this.deliveryUrl = Utils.checkNotNull(deliveryUrl, "deliveryUrl");
            return this;
        }

        /**
         * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
         */
        public Builder events(@Nonnull List<WebhookEventType> events) {
            this.events = Utils.checkNotNull(events, "events");
            return this;
        }

        public CreateWebhookRequest build() {
            return new CreateWebhookRequest(
                description, unifiedApi, status,
                deliveryUrl, events);
        }

    }
}
