/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Credentials {

    /**
     * The refresh token can be used to obtain a new access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private JsonNullable<String> refreshToken;

    /**
     * Access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<String> accessToken;

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_at")
    private JsonNullable<OffsetDateTime> issuedAt;

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private JsonNullable<Long> expiresIn;

    @JsonCreator
    public Credentials(
            @JsonProperty("refresh_token") JsonNullable<String> refreshToken,
            @JsonProperty("access_token") Optional<String> accessToken,
            @JsonProperty("issued_at") JsonNullable<OffsetDateTime> issuedAt,
            @JsonProperty("expires_in") JsonNullable<Long> expiresIn) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.refreshToken = refreshToken;
        this.accessToken = accessToken;
        this.issuedAt = issuedAt;
        this.expiresIn = expiresIn;
    }
    
    public Credentials() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The refresh token can be used to obtain a new access token.
     */
    @JsonIgnore
    public JsonNullable<String> refreshToken() {
        return refreshToken;
    }

    /**
     * Access token
     */
    @JsonIgnore
    public Optional<String> accessToken() {
        return accessToken;
    }

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> issuedAt() {
        return issuedAt;
    }

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    @JsonIgnore
    public JsonNullable<Long> expiresIn() {
        return expiresIn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The refresh token can be used to obtain a new access token.
     */
    public Credentials withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = JsonNullable.of(refreshToken);
        return this;
    }

    /**
     * The refresh token can be used to obtain a new access token.
     */
    public Credentials withRefreshToken(JsonNullable<String> refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Access token
     */
    public Credentials withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }

    /**
     * Access token
     */
    public Credentials withAccessToken(Optional<String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    public Credentials withIssuedAt(OffsetDateTime issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = JsonNullable.of(issuedAt);
        return this;
    }

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    public Credentials withIssuedAt(JsonNullable<OffsetDateTime> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    public Credentials withExpiresIn(long expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = JsonNullable.of(expiresIn);
        return this;
    }

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    public Credentials withExpiresIn(JsonNullable<Long> expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Credentials other = (Credentials) o;
        return 
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.issuedAt, other.issuedAt) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            refreshToken,
            accessToken,
            issuedAt,
            expiresIn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Credentials.class,
                "refreshToken", refreshToken,
                "accessToken", accessToken,
                "issuedAt", issuedAt,
                "expiresIn", expiresIn);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> refreshToken = JsonNullable.undefined();
 
        private Optional<String> accessToken = Optional.empty();
 
        private JsonNullable<OffsetDateTime> issuedAt = JsonNullable.undefined();
 
        private JsonNullable<Long> expiresIn = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The refresh token can be used to obtain a new access token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = JsonNullable.of(refreshToken);
            return this;
        }

        /**
         * The refresh token can be used to obtain a new access token.
         */
        public Builder refreshToken(JsonNullable<String> refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Access token
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * Access token
         */
        public Builder accessToken(Optional<String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The datetime at which the token was issued. If omitted the token will be queued for refresh.
         */
        public Builder issuedAt(OffsetDateTime issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = JsonNullable.of(issuedAt);
            return this;
        }

        /**
         * The datetime at which the token was issued. If omitted the token will be queued for refresh.
         */
        public Builder issuedAt(JsonNullable<OffsetDateTime> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }

        /**
         * The number of seconds until the token expires. If omitted the token will be queued for refresh.
         */
        public Builder expiresIn(long expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = JsonNullable.of(expiresIn);
            return this;
        }

        /**
         * The number of seconds until the token expires. If omitted the token will be queued for refresh.
         */
        public Builder expiresIn(JsonNullable<Long> expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }
        
        public Credentials build() {
            return new Credentials(
                refreshToken,
                accessToken,
                issuedAt,
                expiresIn);
        }
    }
}

