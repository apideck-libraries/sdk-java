/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Credentials {
    /**
     * The refresh token can be used to obtain a new access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private JsonNullable<String> refreshToken;

    /**
     * Access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_at")
    private JsonNullable<OffsetDateTime> issuedAt;

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private JsonNullable<Long> expiresIn;

    @JsonCreator
    public Credentials(
            @JsonProperty("refresh_token") @Nullable JsonNullable<String> refreshToken,
            @JsonProperty("access_token") @Nullable String accessToken,
            @JsonProperty("issued_at") @Nullable JsonNullable<OffsetDateTime> issuedAt,
            @JsonProperty("expires_in") @Nullable JsonNullable<Long> expiresIn) {
        this.refreshToken = Optional.ofNullable(refreshToken)
            .orElse(JsonNullable.undefined());
        this.accessToken = accessToken;
        this.issuedAt = Optional.ofNullable(issuedAt)
            .orElse(JsonNullable.undefined());
        this.expiresIn = Optional.ofNullable(expiresIn)
            .orElse(JsonNullable.undefined());
    }
    
    public Credentials() {
        this(null, null, null,
            null);
    }

    /**
     * The refresh token can be used to obtain a new access token.
     */
    public JsonNullable<String> refreshToken() {
        return this.refreshToken;
    }

    /**
     * Access token
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    public JsonNullable<OffsetDateTime> issuedAt() {
        return this.issuedAt;
    }

    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    public JsonNullable<Long> expiresIn() {
        return this.expiresIn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The refresh token can be used to obtain a new access token.
     */
    public Credentials withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = JsonNullable.of(refreshToken);
        return this;
    }


    /**
     * Access token
     */
    public Credentials withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The datetime at which the token was issued. If omitted the token will be queued for refresh.
     */
    public Credentials withIssuedAt(@Nullable OffsetDateTime issuedAt) {
        this.issuedAt = JsonNullable.of(issuedAt);
        return this;
    }


    /**
     * The number of seconds until the token expires. If omitted the token will be queued for refresh.
     */
    public Credentials withExpiresIn(@Nullable Long expiresIn) {
        this.expiresIn = JsonNullable.of(expiresIn);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Credentials other = (Credentials) o;
        return 
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.expiresIn, other.expiresIn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            refreshToken, accessToken, issuedAt,
            expiresIn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Credentials.class,
                "refreshToken", refreshToken,
                "accessToken", accessToken,
                "issuedAt", issuedAt,
                "expiresIn", expiresIn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> refreshToken;

        private String accessToken;

        private JsonNullable<OffsetDateTime> issuedAt;

        private JsonNullable<Long> expiresIn;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The refresh token can be used to obtain a new access token.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = JsonNullable.of(refreshToken);
            return this;
        }

        /**
         * Access token
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The datetime at which the token was issued. If omitted the token will be queued for refresh.
         */
        public Builder issuedAt(@Nullable OffsetDateTime issuedAt) {
            this.issuedAt = JsonNullable.of(issuedAt);
            return this;
        }

        /**
         * The number of seconds until the token expires. If omitted the token will be queued for refresh.
         */
        public Builder expiresIn(@Nullable Long expiresIn) {
            this.expiresIn = JsonNullable.of(expiresIn);
            return this;
        }

        public Credentials build() {
            return new Credentials(
                refreshToken, accessToken, issuedAt,
                expiresIn);
        }

    }
}
