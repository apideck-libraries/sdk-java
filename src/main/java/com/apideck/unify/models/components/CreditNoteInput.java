/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreditNoteInput {

    /**
     * Credit note number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Amount of transaction
     */
    @JsonProperty("total_amount")
    private double totalAmount;

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * The balance reflecting any payments made against the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * Indicates the total credit amount still available to apply towards the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remaining_credit")
    private JsonNullable<Double> remainingCredit;

    /**
     * Status of credit notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreditNoteStatus> status;

    /**
     * Optional reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_issued")
    private Optional<OffsetDateTime> dateIssued;

    /**
     * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_paid")
    private JsonNullable<OffsetDateTime> datePaid;

    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends CreditNoteType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<? extends LinkedLedgerAccountInput> account;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<InvoiceLineItemInput>> lineItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    private Optional<? extends List<AllocationInput>> allocations;

    /**
     * Optional note to be associated with the credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * Optional terms to be associated with the credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends Address> billingAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends Address> shippingAddress;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CreditNoteInput(
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") JsonNullable<Boolean> taxInclusive,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_amount") double totalAmount,
            @JsonProperty("total_tax") JsonNullable<Double> totalTax,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("balance") JsonNullable<Double> balance,
            @JsonProperty("remaining_credit") JsonNullable<Double> remainingCredit,
            @JsonProperty("status") Optional<? extends CreditNoteStatus> status,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("date_issued") Optional<OffsetDateTime> dateIssued,
            @JsonProperty("date_paid") JsonNullable<OffsetDateTime> datePaid,
            @JsonProperty("type") Optional<? extends CreditNoteType> type,
            @JsonProperty("account") JsonNullable<? extends LinkedLedgerAccountInput> account,
            @JsonProperty("line_items") Optional<? extends List<InvoiceLineItemInput>> lineItems,
            @JsonProperty("allocations") Optional<? extends List<AllocationInput>> allocations,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("terms") JsonNullable<String> terms,
            @JsonProperty("billing_address") Optional<? extends Address> billingAddress,
            @JsonProperty("shipping_address") Optional<? extends Address> shippingAddress,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(dateIssued, "dateIssued");
        Utils.checkNotNull(datePaid, "datePaid");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(allocations, "allocations");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(terms, "terms");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.number = number;
        this.customer = customer;
        this.companyId = companyId;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.taxInclusive = taxInclusive;
        this.subTotal = subTotal;
        this.totalAmount = totalAmount;
        this.totalTax = totalTax;
        this.taxCode = taxCode;
        this.balance = balance;
        this.remainingCredit = remainingCredit;
        this.status = status;
        this.reference = reference;
        this.dateIssued = dateIssued;
        this.datePaid = datePaid;
        this.type = type;
        this.account = account;
        this.lineItems = lineItems;
        this.allocations = allocations;
        this.note = note;
        this.terms = terms;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.trackingCategories = trackingCategories;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public CreditNoteInput(
            double totalAmount) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), totalAmount, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Credit note number.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Amounts are including tax
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxInclusive() {
        return taxInclusive;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Amount of transaction
     */
    @JsonIgnore
    public double totalAmount() {
        return totalAmount;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> totalTax() {
        return totalTax;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    /**
     * The balance reflecting any payments made against the transaction.
     */
    @JsonIgnore
    public JsonNullable<Double> balance() {
        return balance;
    }

    /**
     * Indicates the total credit amount still available to apply towards the payment.
     */
    @JsonIgnore
    public JsonNullable<Double> remainingCredit() {
        return remainingCredit;
    }

    /**
     * Status of credit notes
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditNoteStatus> status() {
        return (Optional<CreditNoteStatus>) status;
    }

    /**
     * Optional reference message ie: Debit remittance detail.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonIgnore
    public Optional<OffsetDateTime> dateIssued() {
        return dateIssued;
    }

    /**
     * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> datePaid() {
        return datePaid;
    }

    /**
     * Type of payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreditNoteType> type() {
        return (Optional<CreditNoteType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> account() {
        return (JsonNullable<LinkedLedgerAccountInput>) account;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<InvoiceLineItemInput>> lineItems() {
        return (Optional<List<InvoiceLineItemInput>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AllocationInput>> allocations() {
        return (Optional<List<AllocationInput>>) allocations;
    }

    /**
     * Optional note to be associated with the credit note.
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * Optional terms to be associated with the credit note.
     */
    @JsonIgnore
    public JsonNullable<String> terms() {
        return terms;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> billingAddress() {
        return (Optional<Address>) billingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> shippingAddress() {
        return (Optional<Address>) shippingAddress;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Credit note number.
     */
    public CreditNoteInput withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Credit note number.
     */
    public CreditNoteInput withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public CreditNoteInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public CreditNoteInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public CreditNoteInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public CreditNoteInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CreditNoteInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public CreditNoteInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public CreditNoteInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public CreditNoteInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Amounts are including tax
     */
    public CreditNoteInput withTaxInclusive(boolean taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }

    /**
     * Amounts are including tax
     */
    public CreditNoteInput withTaxInclusive(JsonNullable<Boolean> taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = taxInclusive;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public CreditNoteInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public CreditNoteInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Amount of transaction
     */
    public CreditNoteInput withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public CreditNoteInput withTotalTax(double totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public CreditNoteInput withTotalTax(JsonNullable<Double> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public CreditNoteInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public CreditNoteInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    /**
     * The balance reflecting any payments made against the transaction.
     */
    public CreditNoteInput withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * The balance reflecting any payments made against the transaction.
     */
    public CreditNoteInput withBalance(JsonNullable<Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Indicates the total credit amount still available to apply towards the payment.
     */
    public CreditNoteInput withRemainingCredit(double remainingCredit) {
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        this.remainingCredit = JsonNullable.of(remainingCredit);
        return this;
    }

    /**
     * Indicates the total credit amount still available to apply towards the payment.
     */
    public CreditNoteInput withRemainingCredit(JsonNullable<Double> remainingCredit) {
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        this.remainingCredit = remainingCredit;
        return this;
    }

    /**
     * Status of credit notes
     */
    public CreditNoteInput withStatus(CreditNoteStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of credit notes
     */
    public CreditNoteInput withStatus(Optional<? extends CreditNoteStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Optional reference message ie: Debit remittance detail.
     */
    public CreditNoteInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional reference message ie: Debit remittance detail.
     */
    public CreditNoteInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public CreditNoteInput withDateIssued(OffsetDateTime dateIssued) {
        Utils.checkNotNull(dateIssued, "dateIssued");
        this.dateIssued = Optional.ofNullable(dateIssued);
        return this;
    }

    /**
     * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public CreditNoteInput withDateIssued(Optional<OffsetDateTime> dateIssued) {
        Utils.checkNotNull(dateIssued, "dateIssued");
        this.dateIssued = dateIssued;
        return this;
    }

    /**
     * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public CreditNoteInput withDatePaid(OffsetDateTime datePaid) {
        Utils.checkNotNull(datePaid, "datePaid");
        this.datePaid = JsonNullable.of(datePaid);
        return this;
    }

    /**
     * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public CreditNoteInput withDatePaid(JsonNullable<OffsetDateTime> datePaid) {
        Utils.checkNotNull(datePaid, "datePaid");
        this.datePaid = datePaid;
        return this;
    }

    /**
     * Type of payment
     */
    public CreditNoteInput withType(CreditNoteType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of payment
     */
    public CreditNoteInput withType(Optional<? extends CreditNoteType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CreditNoteInput withAccount(LinkedLedgerAccountInput account) {
        Utils.checkNotNull(account, "account");
        this.account = JsonNullable.of(account);
        return this;
    }

    public CreditNoteInput withAccount(JsonNullable<? extends LinkedLedgerAccountInput> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    public CreditNoteInput withLineItems(List<InvoiceLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    public CreditNoteInput withLineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public CreditNoteInput withAllocations(List<AllocationInput> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = Optional.ofNullable(allocations);
        return this;
    }

    public CreditNoteInput withAllocations(Optional<? extends List<AllocationInput>> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = allocations;
        return this;
    }

    /**
     * Optional note to be associated with the credit note.
     */
    public CreditNoteInput withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Optional note to be associated with the credit note.
     */
    public CreditNoteInput withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * Optional terms to be associated with the credit note.
     */
    public CreditNoteInput withTerms(String terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = JsonNullable.of(terms);
        return this;
    }

    /**
     * Optional terms to be associated with the credit note.
     */
    public CreditNoteInput withTerms(JsonNullable<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    public CreditNoteInput withBillingAddress(Address billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }

    public CreditNoteInput withBillingAddress(Optional<? extends Address> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public CreditNoteInput withShippingAddress(Address shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }

    public CreditNoteInput withShippingAddress(Optional<? extends Address> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public CreditNoteInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public CreditNoteInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public CreditNoteInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public CreditNoteInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public CreditNoteInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public CreditNoteInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CreditNoteInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CreditNoteInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreditNoteInput other = (CreditNoteInput) o;
        return 
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.taxInclusive, other.taxInclusive) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.taxCode, other.taxCode) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.remainingCredit, other.remainingCredit) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.dateIssued, other.dateIssued) &&
            Objects.deepEquals(this.datePaid, other.datePaid) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.allocations, other.allocations) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.terms, other.terms) &&
            Objects.deepEquals(this.billingAddress, other.billingAddress) &&
            Objects.deepEquals(this.shippingAddress, other.shippingAddress) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            number,
            customer,
            companyId,
            currency,
            currencyRate,
            taxInclusive,
            subTotal,
            totalAmount,
            totalTax,
            taxCode,
            balance,
            remainingCredit,
            status,
            reference,
            dateIssued,
            datePaid,
            type,
            account,
            lineItems,
            allocations,
            note,
            terms,
            billingAddress,
            shippingAddress,
            trackingCategories,
            customFields,
            rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreditNoteInput.class,
                "number", number,
                "customer", customer,
                "companyId", companyId,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "subTotal", subTotal,
                "totalAmount", totalAmount,
                "totalTax", totalTax,
                "taxCode", taxCode,
                "balance", balance,
                "remainingCredit", remainingCredit,
                "status", status,
                "reference", reference,
                "dateIssued", dateIssued,
                "datePaid", datePaid,
                "type", type,
                "account", account,
                "lineItems", lineItems,
                "allocations", allocations,
                "note", note,
                "terms", terms,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Double> currencyRate = JsonNullable.undefined();
 
        private JsonNullable<Boolean> taxInclusive = JsonNullable.undefined();
 
        private JsonNullable<Double> subTotal = JsonNullable.undefined();
 
        private Double totalAmount;
 
        private JsonNullable<Double> totalTax = JsonNullable.undefined();
 
        private JsonNullable<String> taxCode = JsonNullable.undefined();
 
        private JsonNullable<Double> balance = JsonNullable.undefined();
 
        private JsonNullable<Double> remainingCredit = JsonNullable.undefined();
 
        private Optional<? extends CreditNoteStatus> status = Optional.empty();
 
        private JsonNullable<String> reference = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> dateIssued = Optional.empty();
 
        private JsonNullable<OffsetDateTime> datePaid = JsonNullable.undefined();
 
        private Optional<? extends CreditNoteType> type = Optional.empty();
 
        private JsonNullable<? extends LinkedLedgerAccountInput> account = JsonNullable.undefined();
 
        private Optional<? extends List<InvoiceLineItemInput>> lineItems = Optional.empty();
 
        private Optional<? extends List<AllocationInput>> allocations = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<String> terms = JsonNullable.undefined();
 
        private Optional<? extends Address> billingAddress = Optional.empty();
 
        private Optional<? extends Address> shippingAddress = Optional.empty();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credit note number.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Credit note number.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(boolean taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(JsonNullable<Boolean> taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = taxInclusive;
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Amount of transaction
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(double totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(JsonNullable<Double> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }

        /**
         * The balance reflecting any payments made against the transaction.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * The balance reflecting any payments made against the transaction.
         */
        public Builder balance(JsonNullable<Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Indicates the total credit amount still available to apply towards the payment.
         */
        public Builder remainingCredit(double remainingCredit) {
            Utils.checkNotNull(remainingCredit, "remainingCredit");
            this.remainingCredit = JsonNullable.of(remainingCredit);
            return this;
        }

        /**
         * Indicates the total credit amount still available to apply towards the payment.
         */
        public Builder remainingCredit(JsonNullable<Double> remainingCredit) {
            Utils.checkNotNull(remainingCredit, "remainingCredit");
            this.remainingCredit = remainingCredit;
            return this;
        }

        /**
         * Status of credit notes
         */
        public Builder status(CreditNoteStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of credit notes
         */
        public Builder status(Optional<? extends CreditNoteStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Optional reference message ie: Debit remittance detail.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional reference message ie: Debit remittance detail.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder dateIssued(OffsetDateTime dateIssued) {
            Utils.checkNotNull(dateIssued, "dateIssued");
            this.dateIssued = Optional.ofNullable(dateIssued);
            return this;
        }

        /**
         * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder dateIssued(Optional<OffsetDateTime> dateIssued) {
            Utils.checkNotNull(dateIssued, "dateIssued");
            this.dateIssued = dateIssued;
            return this;
        }

        /**
         * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder datePaid(OffsetDateTime datePaid) {
            Utils.checkNotNull(datePaid, "datePaid");
            this.datePaid = JsonNullable.of(datePaid);
            return this;
        }

        /**
         * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder datePaid(JsonNullable<OffsetDateTime> datePaid) {
            Utils.checkNotNull(datePaid, "datePaid");
            this.datePaid = datePaid;
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(CreditNoteType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(Optional<? extends CreditNoteType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder account(LinkedLedgerAccountInput account) {
            Utils.checkNotNull(account, "account");
            this.account = JsonNullable.of(account);
            return this;
        }

        public Builder account(JsonNullable<? extends LinkedLedgerAccountInput> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        public Builder lineItems(List<InvoiceLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        public Builder allocations(List<AllocationInput> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = Optional.ofNullable(allocations);
            return this;
        }

        public Builder allocations(Optional<? extends List<AllocationInput>> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = allocations;
            return this;
        }

        /**
         * Optional note to be associated with the credit note.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Optional note to be associated with the credit note.
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * Optional terms to be associated with the credit note.
         */
        public Builder terms(String terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Optional terms to be associated with the credit note.
         */
        public Builder terms(JsonNullable<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }

        public Builder billingAddress(Address billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends Address> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder shippingAddress(Address shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends Address> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public CreditNoteInput build() {
            return new CreditNoteInput(
                number,
                customer,
                companyId,
                currency,
                currencyRate,
                taxInclusive,
                subTotal,
                totalAmount,
                totalTax,
                taxCode,
                balance,
                remainingCredit,
                status,
                reference,
                dateIssued,
                datePaid,
                type,
                account,
                lineItems,
                allocations,
                note,
                terms,
                billingAddress,
                shippingAddress,
                trackingCategories,
                customFields,
                rowVersion,
                passThrough);
        }
    }
}

