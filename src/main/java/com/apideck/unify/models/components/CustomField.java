/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CustomField {
    /**
     * Unique identifier for the custom field.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Name of the custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * More information about the custom field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<Value> value;

    @JsonCreator
    public CustomField(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("value") @Nullable JsonNullable<Value> value) {
        this.id = JsonNullable.of(id);
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.value = Optional.ofNullable(value)
            .orElse(JsonNullable.undefined());
    }
    
    public CustomField() {
        this(null, null, null,
            null);
    }

    /**
     * Unique identifier for the custom field.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Name of the custom field.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * More information about the custom field
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    public JsonNullable<Value> value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the custom field.
     */
    public CustomField withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Name of the custom field.
     */
    public CustomField withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * More information about the custom field
     */
    public CustomField withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    public CustomField withValue(@Nullable Value value) {
        this.value = JsonNullable.of(value);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomField other = (CustomField) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomField.class,
                "id", id,
                "name", name,
                "description", description,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> description;

        private JsonNullable<Value> value;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the custom field.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Name of the custom field.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * More information about the custom field
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder value(@Nullable Value value) {
            this.value = JsonNullable.of(value);
            return this;
        }

        public CustomField build() {
            return new CustomField(
                id, name, description,
                value);
        }

    }
}
