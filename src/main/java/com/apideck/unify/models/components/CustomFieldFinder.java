/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CustomFieldFinder {
    /**
     * Custom Field ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Custom Field name to use as a label if provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * More information about the custom field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Custom Field value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Object value;

    /**
     * JSONPath finder for retrieving this value when mapping a response payload from downstream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finder")
    private String finder;

    @JsonCreator
    public CustomFieldFinder(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("value") @Nullable Object value,
            @JsonProperty("finder") @Nullable String finder) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.value = value;
        this.finder = finder;
    }
    
    public CustomFieldFinder() {
        this(null, null, null,
            null, null);
    }

    /**
     * Custom Field ID
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Custom Field name to use as a label if provided
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * More information about the custom field
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Custom Field value
     */
    public Optional<Object> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * JSONPath finder for retrieving this value when mapping a response payload from downstream
     */
    public Optional<String> finder() {
        return Optional.ofNullable(this.finder);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Custom Field ID
     */
    public CustomFieldFinder withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Custom Field name to use as a label if provided
     */
    public CustomFieldFinder withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * More information about the custom field
     */
    public CustomFieldFinder withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Custom Field value
     */
    public CustomFieldFinder withValue(@Nullable Object value) {
        this.value = value;
        return this;
    }


    /**
     * JSONPath finder for retrieving this value when mapping a response payload from downstream
     */
    public CustomFieldFinder withFinder(@Nullable String finder) {
        this.finder = finder;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldFinder other = (CustomFieldFinder) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.value, other.value) &&
            Utils.enhancedDeepEquals(this.finder, other.finder);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            value, finder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldFinder.class,
                "id", id,
                "name", name,
                "description", description,
                "value", value,
                "finder", finder);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> description;

        private Object value;

        private String finder;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Custom Field ID
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Custom Field name to use as a label if provided
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * More information about the custom field
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Custom Field value
         */
        public Builder value(@Nullable Object value) {
            this.value = value;
            return this;
        }

        /**
         * JSONPath finder for retrieving this value when mapping a response payload from downstream
         */
        public Builder finder(@Nullable String finder) {
            this.finder = finder;
            return this;
        }

        public CustomFieldFinder build() {
            return new CustomFieldFinder(
                id, name, description,
                value, finder);
        }

    }
}
