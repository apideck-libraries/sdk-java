/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CustomMapping {

    /**
     * Target Field ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Target Field name to use as a label
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<String> label;

    /**
     * Target Field description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Target Field Mapping value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    /**
     * Target Field Key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<String> key;

    /**
     * Target Field Mapping is required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Optional<Boolean> required;

    /**
     * This mapping represents a finder for a custom field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_field")
    private Optional<Boolean> customField;

    /**
     * Consumer ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_id")
    private JsonNullable<String> consumerId;

    /**
     * Target Field Mapping example value from downstream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("example")
    private JsonNullable<String> example;

    @JsonCreator
    public CustomMapping(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("label") Optional<String> label,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("value") Optional<String> value,
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("required") Optional<Boolean> required,
            @JsonProperty("custom_field") Optional<Boolean> customField,
            @JsonProperty("consumer_id") JsonNullable<String> consumerId,
            @JsonProperty("example") JsonNullable<String> example) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(required, "required");
        Utils.checkNotNull(customField, "customField");
        Utils.checkNotNull(consumerId, "consumerId");
        Utils.checkNotNull(example, "example");
        this.id = id;
        this.label = label;
        this.description = description;
        this.value = value;
        this.key = key;
        this.required = required;
        this.customField = customField;
        this.consumerId = consumerId;
        this.example = example;
    }
    
    public CustomMapping() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Target Field ID
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Target Field name to use as a label
     */
    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    /**
     * Target Field description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Target Field Mapping value
     */
    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    /**
     * Target Field Key
     */
    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    /**
     * Target Field Mapping is required
     */
    @JsonIgnore
    public Optional<Boolean> required() {
        return required;
    }

    /**
     * This mapping represents a finder for a custom field
     */
    @JsonIgnore
    public Optional<Boolean> customField() {
        return customField;
    }

    /**
     * Consumer ID
     */
    @JsonIgnore
    public JsonNullable<String> consumerId() {
        return consumerId;
    }

    /**
     * Target Field Mapping example value from downstream
     */
    @JsonIgnore
    public JsonNullable<String> example() {
        return example;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Target Field ID
     */
    public CustomMapping withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Target Field ID
     */
    public CustomMapping withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Target Field name to use as a label
     */
    public CustomMapping withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    /**
     * Target Field name to use as a label
     */
    public CustomMapping withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * Target Field description
     */
    public CustomMapping withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Target Field description
     */
    public CustomMapping withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Target Field Mapping value
     */
    public CustomMapping withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * Target Field Mapping value
     */
    public CustomMapping withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * Target Field Key
     */
    public CustomMapping withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * Target Field Key
     */
    public CustomMapping withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * Target Field Mapping is required
     */
    public CustomMapping withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = Optional.ofNullable(required);
        return this;
    }

    /**
     * Target Field Mapping is required
     */
    public CustomMapping withRequired(Optional<Boolean> required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }

    /**
     * This mapping represents a finder for a custom field
     */
    public CustomMapping withCustomField(boolean customField) {
        Utils.checkNotNull(customField, "customField");
        this.customField = Optional.ofNullable(customField);
        return this;
    }

    /**
     * This mapping represents a finder for a custom field
     */
    public CustomMapping withCustomField(Optional<Boolean> customField) {
        Utils.checkNotNull(customField, "customField");
        this.customField = customField;
        return this;
    }

    /**
     * Consumer ID
     */
    public CustomMapping withConsumerId(String consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = JsonNullable.of(consumerId);
        return this;
    }

    /**
     * Consumer ID
     */
    public CustomMapping withConsumerId(JsonNullable<String> consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = consumerId;
        return this;
    }

    /**
     * Target Field Mapping example value from downstream
     */
    public CustomMapping withExample(String example) {
        Utils.checkNotNull(example, "example");
        this.example = JsonNullable.of(example);
        return this;
    }

    /**
     * Target Field Mapping example value from downstream
     */
    public CustomMapping withExample(JsonNullable<String> example) {
        Utils.checkNotNull(example, "example");
        this.example = example;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomMapping other = (CustomMapping) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.required, other.required) &&
            Objects.deepEquals(this.customField, other.customField) &&
            Objects.deepEquals(this.consumerId, other.consumerId) &&
            Objects.deepEquals(this.example, other.example);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            label,
            description,
            value,
            key,
            required,
            customField,
            consumerId,
            example);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomMapping.class,
                "id", id,
                "label", label,
                "description", description,
                "value", value,
                "key", key,
                "required", required,
                "customField", customField,
                "consumerId", consumerId,
                "example", example);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> label = Optional.empty();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<String> value = Optional.empty();
 
        private Optional<String> key = Optional.empty();
 
        private Optional<Boolean> required = Optional.empty();
 
        private Optional<Boolean> customField = Optional.empty();
 
        private JsonNullable<String> consumerId = JsonNullable.undefined();
 
        private JsonNullable<String> example = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Target Field ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Target Field ID
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Target Field name to use as a label
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * Target Field name to use as a label
         */
        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * Target Field description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Target Field description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Target Field Mapping value
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * Target Field Mapping value
         */
        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * Target Field Key
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * Target Field Key
         */
        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * Target Field Mapping is required
         */
        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * Target Field Mapping is required
         */
        public Builder required(Optional<Boolean> required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }

        /**
         * This mapping represents a finder for a custom field
         */
        public Builder customField(boolean customField) {
            Utils.checkNotNull(customField, "customField");
            this.customField = Optional.ofNullable(customField);
            return this;
        }

        /**
         * This mapping represents a finder for a custom field
         */
        public Builder customField(Optional<Boolean> customField) {
            Utils.checkNotNull(customField, "customField");
            this.customField = customField;
            return this;
        }

        /**
         * Consumer ID
         */
        public Builder consumerId(String consumerId) {
            Utils.checkNotNull(consumerId, "consumerId");
            this.consumerId = JsonNullable.of(consumerId);
            return this;
        }

        /**
         * Consumer ID
         */
        public Builder consumerId(JsonNullable<String> consumerId) {
            Utils.checkNotNull(consumerId, "consumerId");
            this.consumerId = consumerId;
            return this;
        }

        /**
         * Target Field Mapping example value from downstream
         */
        public Builder example(String example) {
            Utils.checkNotNull(example, "example");
            this.example = JsonNullable.of(example);
            return this;
        }

        /**
         * Target Field Mapping example value from downstream
         */
        public Builder example(JsonNullable<String> example) {
            Utils.checkNotNull(example, "example");
            this.example = example;
            return this;
        }
        
        public CustomMapping build() {
            return new CustomMapping(
                id,
                label,
                description,
                value,
                key,
                required,
                customField,
                consumerId,
                example);
        }
    }
}

