/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CustomObject {
    /**
     * The unique identifier of the custom object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The unique identifier of the owner of the custom object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private Optional<String> ownerId;

    /**
     * The name of the custom object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends List<CustomObjectFields>> fields;

    /**
     * The unique identifier of the user who last updated the custom object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private Optional<String> updatedBy;

    /**
     * The unique identifier of the user who created the custom object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private Optional<String> createdBy;

    /**
     * The timestamp when the custom object was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<String> updatedAt;

    /**
     * The timestamp when the custom object was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<String> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CustomObject(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("owner_id") Optional<String> ownerId,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("fields") Optional<? extends List<CustomObjectFields>> fields,
            @JsonProperty("updated_by") Optional<String> updatedBy,
            @JsonProperty("created_by") Optional<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<String> updatedAt,
            @JsonProperty("created_at") JsonNullable<String> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.ownerId = ownerId;
        this.name = name;
        this.fields = fields;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public CustomObject() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The unique identifier of the custom object
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The unique identifier of the owner of the custom object
     */
    @JsonIgnore
    public Optional<String> ownerId() {
        return ownerId;
    }

    /**
     * The name of the custom object
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomObjectFields>> fields() {
        return (Optional<List<CustomObjectFields>>) fields;
    }

    /**
     * The unique identifier of the user who last updated the custom object
     */
    @JsonIgnore
    public Optional<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The unique identifier of the user who created the custom object
     */
    @JsonIgnore
    public Optional<String> createdBy() {
        return createdBy;
    }

    /**
     * The timestamp when the custom object was last updated
     */
    @JsonIgnore
    public JsonNullable<String> updatedAt() {
        return updatedAt;
    }

    /**
     * The timestamp when the custom object was created
     */
    @JsonIgnore
    public JsonNullable<String> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the custom object
     */
    public CustomObject withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The unique identifier of the custom object
     */
    public CustomObject withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The unique identifier of the owner of the custom object
     */
    public CustomObject withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = Optional.ofNullable(ownerId);
        return this;
    }


    /**
     * The unique identifier of the owner of the custom object
     */
    public CustomObject withOwnerId(Optional<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The name of the custom object
     */
    public CustomObject withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the custom object
     */
    public CustomObject withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CustomObject withFields(List<CustomObjectFields> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }


    public CustomObject withFields(Optional<? extends List<CustomObjectFields>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * The unique identifier of the user who last updated the custom object
     */
    public CustomObject withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }


    /**
     * The unique identifier of the user who last updated the custom object
     */
    public CustomObject withUpdatedBy(Optional<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The unique identifier of the user who created the custom object
     */
    public CustomObject withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }


    /**
     * The unique identifier of the user who created the custom object
     */
    public CustomObject withCreatedBy(Optional<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The timestamp when the custom object was last updated
     */
    public CustomObject withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The timestamp when the custom object was last updated
     */
    public CustomObject withUpdatedAt(JsonNullable<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The timestamp when the custom object was created
     */
    public CustomObject withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The timestamp when the custom object was created
     */
    public CustomObject withCreatedAt(JsonNullable<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public CustomObject withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public CustomObject withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomObject other = (CustomObject) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, ownerId, name,
            fields, updatedBy, createdBy,
            updatedAt, createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomObject.class,
                "id", id,
                "ownerId", ownerId,
                "name", name,
                "fields", fields,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<String> ownerId = Optional.empty();

        private JsonNullable<String> name = JsonNullable.undefined();

        private Optional<? extends List<CustomObjectFields>> fields = Optional.empty();

        private Optional<String> updatedBy = Optional.empty();

        private Optional<String> createdBy = Optional.empty();

        private JsonNullable<String> updatedAt = JsonNullable.undefined();

        private JsonNullable<String> createdAt = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier of the custom object
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier of the custom object
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The unique identifier of the owner of the custom object
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        /**
         * The unique identifier of the owner of the custom object
         */
        public Builder ownerId(Optional<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        /**
         * The name of the custom object
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the custom object
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder fields(List<CustomObjectFields> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends List<CustomObjectFields>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        /**
         * The unique identifier of the user who last updated the custom object
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * The unique identifier of the user who last updated the custom object
         */
        public Builder updatedBy(Optional<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }


        /**
         * The unique identifier of the user who created the custom object
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        /**
         * The unique identifier of the user who created the custom object
         */
        public Builder createdBy(Optional<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * The timestamp when the custom object was last updated
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The timestamp when the custom object was last updated
         */
        public Builder updatedAt(JsonNullable<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The timestamp when the custom object was created
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The timestamp when the custom object was created
         */
        public Builder createdAt(JsonNullable<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public CustomObject build() {

            return new CustomObject(
                id, ownerId, name,
                fields, updatedBy, createdBy,
                updatedAt, createdAt, passThrough);
        }

    }
}
