/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CustomObjectSchemaInput {

    /**
     * The name of the custom object schema
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The description of the custom object schema
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The fields defined in the schema
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends List<Fields>> fields;

    /**
     * Whether the custom object schema is visible in the UI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible")
    private JsonNullable<Boolean> visible;

    /**
     * Whether the custom object schema is active
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public CustomObjectSchemaInput(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("fields") Optional<? extends List<Fields>> fields,
            @JsonProperty("visible") JsonNullable<Boolean> visible,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(visible, "visible");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.description = description;
        this.fields = fields;
        this.visible = visible;
        this.active = active;
        this.passThrough = passThrough;
    }
    
    public CustomObjectSchemaInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of the custom object schema
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The description of the custom object schema
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The fields defined in the schema
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Fields>> fields() {
        return (Optional<List<Fields>>) fields;
    }

    /**
     * Whether the custom object schema is visible in the UI
     */
    @JsonIgnore
    public JsonNullable<Boolean> visible() {
        return visible;
    }

    /**
     * Whether the custom object schema is active
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the custom object schema
     */
    public CustomObjectSchemaInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the custom object schema
     */
    public CustomObjectSchemaInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the custom object schema
     */
    public CustomObjectSchemaInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the custom object schema
     */
    public CustomObjectSchemaInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The fields defined in the schema
     */
    public CustomObjectSchemaInput withFields(List<Fields> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * The fields defined in the schema
     */
    public CustomObjectSchemaInput withFields(Optional<? extends List<Fields>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Whether the custom object schema is visible in the UI
     */
    public CustomObjectSchemaInput withVisible(boolean visible) {
        Utils.checkNotNull(visible, "visible");
        this.visible = JsonNullable.of(visible);
        return this;
    }

    /**
     * Whether the custom object schema is visible in the UI
     */
    public CustomObjectSchemaInput withVisible(JsonNullable<Boolean> visible) {
        Utils.checkNotNull(visible, "visible");
        this.visible = visible;
        return this;
    }

    /**
     * Whether the custom object schema is active
     */
    public CustomObjectSchemaInput withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * Whether the custom object schema is active
     */
    public CustomObjectSchemaInput withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CustomObjectSchemaInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public CustomObjectSchemaInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomObjectSchemaInput other = (CustomObjectSchemaInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.visible, other.visible) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            description,
            fields,
            visible,
            active,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomObjectSchemaInput.class,
                "name", name,
                "description", description,
                "fields", fields,
                "visible", visible,
                "active", active,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<? extends List<Fields>> fields = Optional.empty();
 
        private JsonNullable<Boolean> visible = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the custom object schema
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the custom object schema
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of the custom object schema
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the custom object schema
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The fields defined in the schema
         */
        public Builder fields(List<Fields> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * The fields defined in the schema
         */
        public Builder fields(Optional<? extends List<Fields>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Whether the custom object schema is visible in the UI
         */
        public Builder visible(boolean visible) {
            Utils.checkNotNull(visible, "visible");
            this.visible = JsonNullable.of(visible);
            return this;
        }

        /**
         * Whether the custom object schema is visible in the UI
         */
        public Builder visible(JsonNullable<Boolean> visible) {
            Utils.checkNotNull(visible, "visible");
            this.visible = visible;
            return this;
        }

        /**
         * Whether the custom object schema is active
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * Whether the custom object schema is active
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public CustomObjectSchemaInput build() {
            return new CustomObjectSchemaInput(
                name,
                description,
                fields,
                visible,
                active,
                passThrough);
        }
    }
}
