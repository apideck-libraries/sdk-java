/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Customer {

    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * Display ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * Display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * Is this an individual or business customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual")
    private JsonNullable<Boolean> individual;

    /**
     * If true, indicates this is a Project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private JsonNullable<Boolean> project;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Website>> websites;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private Optional<? extends List<BankAccount>> bankAccounts;

    /**
     * Some notes about this customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRate> taxRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_number")
    private JsonNullable<String> taxNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<? extends LinkedLedgerAccount> account;

    /**
     * The parent customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    private JsonNullable<? extends LinkedParentCustomer> parent;

    /**
     * Customer status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends CustomerStatusStatus> status;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Customer(
            @JsonProperty("id") String id,
            @JsonProperty("downstream_id") JsonNullable<String> downstreamId,
            @JsonProperty("display_id") JsonNullable<String> displayId,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("suffix") JsonNullable<String> suffix,
            @JsonProperty("individual") JsonNullable<Boolean> individual,
            @JsonProperty("project") JsonNullable<Boolean> project,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("websites") Optional<? extends List<Website>> websites,
            @JsonProperty("bank_accounts") Optional<? extends List<BankAccount>> bankAccounts,
            @JsonProperty("notes") JsonNullable<String> notes,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRate> taxRate,
            @JsonProperty("tax_number") JsonNullable<String> taxNumber,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("account") JsonNullable<? extends LinkedLedgerAccount> account,
            @JsonProperty("parent") JsonNullable<? extends LinkedParentCustomer> parent,
            @JsonProperty("status") JsonNullable<? extends CustomerStatusStatus> status,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("channel") JsonNullable<String> channel,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(downstreamId, "downstreamId");
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(suffix, "suffix");
        Utils.checkNotNull(individual, "individual");
        Utils.checkNotNull(project, "project");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(taxNumber, "taxNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(parent, "parent");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.downstreamId = downstreamId;
        this.displayId = displayId;
        this.displayName = displayName;
        this.companyName = companyName;
        this.companyId = companyId;
        this.title = title;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.suffix = suffix;
        this.individual = individual;
        this.project = project;
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.websites = websites;
        this.bankAccounts = bankAccounts;
        this.notes = notes;
        this.taxRate = taxRate;
        this.taxNumber = taxNumber;
        this.currency = currency;
        this.account = account;
        this.parent = parent;
        this.status = status;
        this.paymentMethod = paymentMethod;
        this.channel = channel;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public Customer(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The third-party API ID of original entity
     */
    @JsonIgnore
    public JsonNullable<String> downstreamId() {
        return downstreamId;
    }

    /**
     * Display ID
     */
    @JsonIgnore
    public JsonNullable<String> displayId() {
        return displayId;
    }

    /**
     * Display name
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The name of the company.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The job title of the person.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The first name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * Middle name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * The last name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    @JsonIgnore
    public JsonNullable<String> suffix() {
        return suffix;
    }

    /**
     * Is this an individual or business customer
     */
    @JsonIgnore
    public JsonNullable<Boolean> individual() {
        return individual;
    }

    /**
     * If true, indicates this is a Project.
     */
    @JsonIgnore
    public JsonNullable<Boolean> project() {
        return project;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Website>> websites() {
        return (Optional<List<Website>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BankAccount>> bankAccounts() {
        return (Optional<List<BankAccount>>) bankAccounts;
    }

    /**
     * Some notes about this customer
     */
    @JsonIgnore
    public JsonNullable<String> notes() {
        return notes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRate> taxRate() {
        return (Optional<LinkedTaxRate>) taxRate;
    }

    @JsonIgnore
    public JsonNullable<String> taxNumber() {
        return taxNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> account() {
        return (JsonNullable<LinkedLedgerAccount>) account;
    }

    /**
     * The parent customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedParentCustomer> parent() {
        return (JsonNullable<LinkedParentCustomer>) parent;
    }

    /**
     * Customer status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomerStatusStatus> status() {
        return (JsonNullable<CustomerStatusStatus>) status;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The channel through which the transaction is processed.
     */
    @JsonIgnore
    public JsonNullable<String> channel() {
        return channel;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public Customer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The third-party API ID of original entity
     */
    public Customer withDownstreamId(String downstreamId) {
        Utils.checkNotNull(downstreamId, "downstreamId");
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }

    /**
     * The third-party API ID of original entity
     */
    public Customer withDownstreamId(JsonNullable<String> downstreamId) {
        Utils.checkNotNull(downstreamId, "downstreamId");
        this.downstreamId = downstreamId;
        return this;
    }

    /**
     * Display ID
     */
    public Customer withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = JsonNullable.of(displayId);
        return this;
    }

    /**
     * Display ID
     */
    public Customer withDisplayId(JsonNullable<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * Display name
     */
    public Customer withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * Display name
     */
    public Customer withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The name of the company.
     */
    public Customer withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company.
     */
    public Customer withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public Customer withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public Customer withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The job title of the person.
     */
    public Customer withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public Customer withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The first name of the person.
     */
    public Customer withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public Customer withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Customer withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Customer withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The last name of the person.
     */
    public Customer withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public Customer withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public Customer withSuffix(String suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = JsonNullable.of(suffix);
        return this;
    }

    public Customer withSuffix(JsonNullable<String> suffix) {
        Utils.checkNotNull(suffix, "suffix");
        this.suffix = suffix;
        return this;
    }

    /**
     * Is this an individual or business customer
     */
    public Customer withIndividual(boolean individual) {
        Utils.checkNotNull(individual, "individual");
        this.individual = JsonNullable.of(individual);
        return this;
    }

    /**
     * Is this an individual or business customer
     */
    public Customer withIndividual(JsonNullable<Boolean> individual) {
        Utils.checkNotNull(individual, "individual");
        this.individual = individual;
        return this;
    }

    /**
     * If true, indicates this is a Project.
     */
    public Customer withProject(boolean project) {
        Utils.checkNotNull(project, "project");
        this.project = JsonNullable.of(project);
        return this;
    }

    /**
     * If true, indicates this is a Project.
     */
    public Customer withProject(JsonNullable<Boolean> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }

    public Customer withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public Customer withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Customer withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public Customer withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public Customer withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public Customer withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public Customer withWebsites(List<Website> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public Customer withWebsites(Optional<? extends List<Website>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public Customer withBankAccounts(List<BankAccount> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = Optional.ofNullable(bankAccounts);
        return this;
    }

    public Customer withBankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = bankAccounts;
        return this;
    }

    /**
     * Some notes about this customer
     */
    public Customer withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    /**
     * Some notes about this customer
     */
    public Customer withNotes(JsonNullable<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    public Customer withTaxRate(LinkedTaxRate taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }

    public Customer withTaxRate(Optional<? extends LinkedTaxRate> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    public Customer withTaxNumber(String taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = JsonNullable.of(taxNumber);
        return this;
    }

    public Customer withTaxNumber(JsonNullable<String> taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = taxNumber;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Customer withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Customer withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Customer withAccount(LinkedLedgerAccount account) {
        Utils.checkNotNull(account, "account");
        this.account = JsonNullable.of(account);
        return this;
    }

    public Customer withAccount(JsonNullable<? extends LinkedLedgerAccount> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * The parent customer this entity is linked to.
     */
    public Customer withParent(LinkedParentCustomer parent) {
        Utils.checkNotNull(parent, "parent");
        this.parent = JsonNullable.of(parent);
        return this;
    }

    /**
     * The parent customer this entity is linked to.
     */
    public Customer withParent(JsonNullable<? extends LinkedParentCustomer> parent) {
        Utils.checkNotNull(parent, "parent");
        this.parent = parent;
        return this;
    }

    /**
     * Customer status
     */
    public Customer withStatus(CustomerStatusStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Customer status
     */
    public Customer withStatus(JsonNullable<? extends CustomerStatusStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public Customer withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public Customer withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public Customer withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = JsonNullable.of(channel);
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public Customer withChannel(JsonNullable<String> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Customer withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Customer withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Customer withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Customer withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Customer withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Customer withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Customer withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Customer withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Customer withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Customer withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Customer withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Customer withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Customer withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Customer withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Customer other = (Customer) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.downstreamId, other.downstreamId) &&
            Objects.deepEquals(this.displayId, other.displayId) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.suffix, other.suffix) &&
            Objects.deepEquals(this.individual, other.individual) &&
            Objects.deepEquals(this.project, other.project) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.websites, other.websites) &&
            Objects.deepEquals(this.bankAccounts, other.bankAccounts) &&
            Objects.deepEquals(this.notes, other.notes) &&
            Objects.deepEquals(this.taxRate, other.taxRate) &&
            Objects.deepEquals(this.taxNumber, other.taxNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.parent, other.parent) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.channel, other.channel) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            downstreamId,
            displayId,
            displayName,
            companyName,
            companyId,
            title,
            firstName,
            middleName,
            lastName,
            suffix,
            individual,
            project,
            addresses,
            phoneNumbers,
            emails,
            websites,
            bankAccounts,
            notes,
            taxRate,
            taxNumber,
            currency,
            account,
            parent,
            status,
            paymentMethod,
            channel,
            customMappings,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Customer.class,
                "id", id,
                "downstreamId", downstreamId,
                "displayId", displayId,
                "displayName", displayName,
                "companyName", companyName,
                "companyId", companyId,
                "title", title,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "suffix", suffix,
                "individual", individual,
                "project", project,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "websites", websites,
                "bankAccounts", bankAccounts,
                "notes", notes,
                "taxRate", taxRate,
                "taxNumber", taxNumber,
                "currency", currency,
                "account", account,
                "parent", parent,
                "status", status,
                "paymentMethod", paymentMethod,
                "channel", channel,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> downstreamId = JsonNullable.undefined();
 
        private JsonNullable<String> displayId = JsonNullable.undefined();
 
        private JsonNullable<String> displayName = JsonNullable.undefined();
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> middleName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> suffix = JsonNullable.undefined();
 
        private JsonNullable<Boolean> individual = JsonNullable.undefined();
 
        private JsonNullable<Boolean> project = JsonNullable.undefined();
 
        private Optional<? extends List<Address>> addresses = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Email>> emails = Optional.empty();
 
        private Optional<? extends List<Website>> websites = Optional.empty();
 
        private Optional<? extends List<BankAccount>> bankAccounts = Optional.empty();
 
        private JsonNullable<String> notes = JsonNullable.undefined();
 
        private Optional<? extends LinkedTaxRate> taxRate = Optional.empty();
 
        private JsonNullable<String> taxNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccount> account = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedParentCustomer> parent = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomerStatusStatus> status = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethod = JsonNullable.undefined();
 
        private JsonNullable<String> channel = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(String downstreamId) {
            Utils.checkNotNull(downstreamId, "downstreamId");
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(JsonNullable<String> downstreamId) {
            Utils.checkNotNull(downstreamId, "downstreamId");
            this.downstreamId = downstreamId;
            return this;
        }

        /**
         * Display ID
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * Display ID
         */
        public Builder displayId(JsonNullable<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }

        /**
         * Display name
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * Display name
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder suffix(String suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        public Builder suffix(JsonNullable<String> suffix) {
            Utils.checkNotNull(suffix, "suffix");
            this.suffix = suffix;
            return this;
        }

        /**
         * Is this an individual or business customer
         */
        public Builder individual(boolean individual) {
            Utils.checkNotNull(individual, "individual");
            this.individual = JsonNullable.of(individual);
            return this;
        }

        /**
         * Is this an individual or business customer
         */
        public Builder individual(JsonNullable<Boolean> individual) {
            Utils.checkNotNull(individual, "individual");
            this.individual = individual;
            return this;
        }

        /**
         * If true, indicates this is a Project.
         */
        public Builder project(boolean project) {
            Utils.checkNotNull(project, "project");
            this.project = JsonNullable.of(project);
            return this;
        }

        /**
         * If true, indicates this is a Project.
         */
        public Builder project(JsonNullable<Boolean> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder websites(List<Website> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Website>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }

        public Builder bankAccounts(List<BankAccount> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = Optional.ofNullable(bankAccounts);
            return this;
        }

        public Builder bankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = bankAccounts;
            return this;
        }

        /**
         * Some notes about this customer
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * Some notes about this customer
         */
        public Builder notes(JsonNullable<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        public Builder taxRate(LinkedTaxRate taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRate> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }

        public Builder taxNumber(String taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = JsonNullable.of(taxNumber);
            return this;
        }

        public Builder taxNumber(JsonNullable<String> taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = taxNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder account(LinkedLedgerAccount account) {
            Utils.checkNotNull(account, "account");
            this.account = JsonNullable.of(account);
            return this;
        }

        public Builder account(JsonNullable<? extends LinkedLedgerAccount> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * The parent customer this entity is linked to.
         */
        public Builder parent(LinkedParentCustomer parent) {
            Utils.checkNotNull(parent, "parent");
            this.parent = JsonNullable.of(parent);
            return this;
        }

        /**
         * The parent customer this entity is linked to.
         */
        public Builder parent(JsonNullable<? extends LinkedParentCustomer> parent) {
            Utils.checkNotNull(parent, "parent");
            this.parent = parent;
            return this;
        }

        /**
         * Customer status
         */
        public Builder status(CustomerStatusStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Customer status
         */
        public Builder status(JsonNullable<? extends CustomerStatusStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(JsonNullable<String> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public Customer build() {
            return new Customer(
                id,
                downstreamId,
                displayId,
                displayName,
                companyName,
                companyId,
                title,
                firstName,
                middleName,
                lastName,
                suffix,
                individual,
                project,
                addresses,
                phoneNumbers,
                emails,
                websites,
                bankAccounts,
                notes,
                taxRate,
                taxNumber,
                currency,
                account,
                parent,
                status,
                paymentMethod,
                channel,
                customMappings,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                rowVersion,
                passThrough);
        }
    }
}

