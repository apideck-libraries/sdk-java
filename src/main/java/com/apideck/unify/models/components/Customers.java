/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Customers {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;

    @JsonCreator
    public Customers(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        this.id = id;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
    }
    
    public Customers() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Customers withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Customers withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Customers withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    public Customers withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public Customers withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    public Customers withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    public Customers withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    public Customers withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public Customers withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public Customers withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public Customers withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public Customers withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Customers other = (Customers) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.emails, other.emails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            firstName,
            middleName,
            lastName,
            phoneNumbers,
            emails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Customers.class,
                "id", id,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "phoneNumbers", phoneNumbers,
                "emails", emails);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> middleName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Email>> emails = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }
        
        public Customers build() {
            return new Customers(
                id,
                firstName,
                middleName,
                lastName,
                phoneNumbers,
                emails);
        }
    }
}

