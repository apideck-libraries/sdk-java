/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Data {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_id")
    private String consumerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_id")
    private String applicationId;

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private ConsumerMetadata metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregated_request_count")
    private Double aggregatedRequestCount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_counts")
    private RequestCountAllocation requestCounts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private String created;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modified")
    private String modified;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_count_updated")
    private String requestCountUpdated;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("services")
    private List<String> services;

    @JsonCreator
    public Data(
            @JsonProperty("consumer_id") @Nullable String consumerId,
            @JsonProperty("application_id") @Nullable String applicationId,
            @JsonProperty("metadata") @Nullable ConsumerMetadata metadata,
            @JsonProperty("aggregated_request_count") @Nullable Double aggregatedRequestCount,
            @JsonProperty("request_counts") @Nullable RequestCountAllocation requestCounts,
            @JsonProperty("created") @Nullable String created,
            @JsonProperty("modified") @Nullable String modified,
            @JsonProperty("request_count_updated") @Nullable String requestCountUpdated,
            @JsonProperty("services") @Nullable List<String> services) {
        this.consumerId = consumerId;
        this.applicationId = applicationId;
        this.metadata = metadata;
        this.aggregatedRequestCount = aggregatedRequestCount;
        this.requestCounts = requestCounts;
        this.created = created;
        this.modified = modified;
        this.requestCountUpdated = requestCountUpdated;
        this.services = services;
    }
    
    public Data() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Optional<ConsumerMetadata> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    public Optional<Double> aggregatedRequestCount() {
        return Optional.ofNullable(this.aggregatedRequestCount);
    }

    public Optional<RequestCountAllocation> requestCounts() {
        return Optional.ofNullable(this.requestCounts);
    }

    public Optional<String> created() {
        return Optional.ofNullable(this.created);
    }

    public Optional<String> modified() {
        return Optional.ofNullable(this.modified);
    }

    public Optional<String> requestCountUpdated() {
        return Optional.ofNullable(this.requestCountUpdated);
    }

    public Optional<List<String>> services() {
        return Optional.ofNullable(this.services);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Data withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    public Data withApplicationId(@Nullable String applicationId) {
        this.applicationId = applicationId;
        return this;
    }


    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Data withMetadata(@Nullable ConsumerMetadata metadata) {
        this.metadata = metadata;
        return this;
    }


    public Data withAggregatedRequestCount(@Nullable Double aggregatedRequestCount) {
        this.aggregatedRequestCount = aggregatedRequestCount;
        return this;
    }


    public Data withRequestCounts(@Nullable RequestCountAllocation requestCounts) {
        this.requestCounts = requestCounts;
        return this;
    }


    public Data withCreated(@Nullable String created) {
        this.created = created;
        return this;
    }


    public Data withModified(@Nullable String modified) {
        this.modified = modified;
        return this;
    }


    public Data withRequestCountUpdated(@Nullable String requestCountUpdated) {
        this.requestCountUpdated = requestCountUpdated;
        return this;
    }


    public Data withServices(@Nullable List<String> services) {
        this.services = services;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Data other = (Data) o;
        return 
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.applicationId, other.applicationId) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.aggregatedRequestCount, other.aggregatedRequestCount) &&
            Utils.enhancedDeepEquals(this.requestCounts, other.requestCounts) &&
            Utils.enhancedDeepEquals(this.created, other.created) &&
            Utils.enhancedDeepEquals(this.modified, other.modified) &&
            Utils.enhancedDeepEquals(this.requestCountUpdated, other.requestCountUpdated) &&
            Utils.enhancedDeepEquals(this.services, other.services);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            consumerId, applicationId, metadata,
            aggregatedRequestCount, requestCounts, created,
            modified, requestCountUpdated, services);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Data.class,
                "consumerId", consumerId,
                "applicationId", applicationId,
                "metadata", metadata,
                "aggregatedRequestCount", aggregatedRequestCount,
                "requestCounts", requestCounts,
                "created", created,
                "modified", modified,
                "requestCountUpdated", requestCountUpdated,
                "services", services);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String consumerId;

        private String applicationId;

        private ConsumerMetadata metadata;

        private Double aggregatedRequestCount;

        private RequestCountAllocation requestCounts;

        private String created;

        private String modified;

        private String requestCountUpdated;

        private List<String> services;

        private Builder() {
          // force use of static builder() method
        }

        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        /**
         * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
         */
        public Builder metadata(@Nullable ConsumerMetadata metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder aggregatedRequestCount(@Nullable Double aggregatedRequestCount) {
            this.aggregatedRequestCount = aggregatedRequestCount;
            return this;
        }

        public Builder requestCounts(@Nullable RequestCountAllocation requestCounts) {
            this.requestCounts = requestCounts;
            return this;
        }

        public Builder created(@Nullable String created) {
            this.created = created;
            return this;
        }

        public Builder modified(@Nullable String modified) {
            this.modified = modified;
            return this;
        }

        public Builder requestCountUpdated(@Nullable String requestCountUpdated) {
            this.requestCountUpdated = requestCountUpdated;
            return this;
        }

        public Builder services(@Nullable List<String> services) {
            this.services = services;
            return this;
        }

        public Data build() {
            return new Data(
                consumerId, applicationId, metadata,
                aggregatedRequestCount, requestCounts, created,
                modified, requestCountUpdated, services);
        }

    }
}
