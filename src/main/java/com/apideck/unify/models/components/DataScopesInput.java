/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class DataScopesInput {
    /**
     * Whether Data Scopes is enabled for this application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    /**
     * Data scopes resource configuration that can be either detailed field permissions or a wildcard
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Optional<? extends DataScopesResources> resources;

    @JsonCreator
    public DataScopesInput(
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("resources") Optional<? extends DataScopesResources> resources) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(resources, "resources");
        this.enabled = enabled;
        this.resources = resources;
    }
    
    public DataScopesInput() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether Data Scopes is enabled for this application
     */
    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    /**
     * Data scopes resource configuration that can be either detailed field permissions or a wildcard
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataScopesResources> resources() {
        return (Optional<DataScopesResources>) resources;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether Data Scopes is enabled for this application
     */
    public DataScopesInput withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }


    /**
     * Whether Data Scopes is enabled for this application
     */
    public DataScopesInput withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    /**
     * Data scopes resource configuration that can be either detailed field permissions or a wildcard
     */
    public DataScopesInput withResources(DataScopesResources resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = Optional.ofNullable(resources);
        return this;
    }


    /**
     * Data scopes resource configuration that can be either detailed field permissions or a wildcard
     */
    public DataScopesInput withResources(Optional<? extends DataScopesResources> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataScopesInput other = (DataScopesInput) o;
        return 
            Utils.enhancedDeepEquals(this.enabled, other.enabled) &&
            Utils.enhancedDeepEquals(this.resources, other.resources);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            enabled, resources);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataScopesInput.class,
                "enabled", enabled,
                "resources", resources);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<? extends DataScopesResources> resources = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether Data Scopes is enabled for this application
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * Whether Data Scopes is enabled for this application
         */
        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }


        /**
         * Data scopes resource configuration that can be either detailed field permissions or a wildcard
         */
        public Builder resources(DataScopesResources resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = Optional.ofNullable(resources);
            return this;
        }

        /**
         * Data scopes resource configuration that can be either detailed field permissions or a wildcard
         */
        public Builder resources(Optional<? extends DataScopesResources> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }

        public DataScopesInput build() {

            return new DataScopesInput(
                enabled, resources);
        }

    }
}
