/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Deduction {
    /**
     * The name of the deduction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The amount deducted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Double> amount;

    @JsonCreator
    public Deduction(
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("amount") @Nullable JsonNullable<Double> amount) {
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.amount = Optional.ofNullable(amount)
            .orElse(JsonNullable.undefined());
    }
    
    public Deduction() {
        this(null, null);
    }

    /**
     * The name of the deduction.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The amount deducted.
     */
    public JsonNullable<Double> amount() {
        return this.amount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the deduction.
     */
    public Deduction withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The amount deducted.
     */
    public Deduction withAmount(@Nullable Double amount) {
        this.amount = JsonNullable.of(amount);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Deduction other = (Deduction) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Deduction.class,
                "name", name,
                "amount", amount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name;

        private JsonNullable<Double> amount;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the deduction.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The amount deducted.
         */
        public Builder amount(@Nullable Double amount) {
            this.amount = JsonNullable.of(amount);
            return this;
        }

        public Deduction build() {
            return new Deduction(
                name, amount);
        }

    }
}
