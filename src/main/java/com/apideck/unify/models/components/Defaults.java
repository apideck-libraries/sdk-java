/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Defaults {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    private Target target;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private List<FormFieldOption> options;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private ConnectionValue value;

    @JsonCreator
    public Defaults(
            @JsonProperty("target") @Nullable Target target,
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("options") @Nullable List<FormFieldOption> options,
            @JsonProperty("value") @Nullable ConnectionValue value) {
        this.target = target;
        this.id = id;
        this.options = options;
        this.value = value;
    }
    
    public Defaults() {
        this(null, null, null,
            null);
    }

    public Optional<Target> target() {
        return Optional.ofNullable(this.target);
    }

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<List<FormFieldOption>> options() {
        return Optional.ofNullable(this.options);
    }

    public Optional<ConnectionValue> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Defaults withTarget(@Nullable Target target) {
        this.target = target;
        return this;
    }


    public Defaults withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public Defaults withOptions(@Nullable List<FormFieldOption> options) {
        this.options = options;
        return this;
    }


    public Defaults withValue(@Nullable ConnectionValue value) {
        this.value = value;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Defaults other = (Defaults) o;
        return 
            Utils.enhancedDeepEquals(this.target, other.target) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            target, id, options,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Defaults.class,
                "target", target,
                "id", id,
                "options", options,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Target target;

        private String id;

        private List<FormFieldOption> options;

        private ConnectionValue value;

        private Builder() {
          // force use of static builder() method
        }

        public Builder target(@Nullable Target target) {
            this.target = target;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder options(@Nullable List<FormFieldOption> options) {
            this.options = options;
            return this;
        }

        public Builder value(@Nullable ConnectionValue value) {
            this.value = value;
            return this;
        }

        public Defaults build() {
            return new Defaults(
                target, id, options,
                value);
        }

    }
}
