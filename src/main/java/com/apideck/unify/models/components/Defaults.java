/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Defaults {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    private Optional<? extends Target> target;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<FormFieldOption>> options;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends ConnectionValue> value;

    @JsonCreator
    public Defaults(
            @JsonProperty("target") Optional<? extends Target> target,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("options") Optional<? extends List<FormFieldOption>> options,
            @JsonProperty("value") Optional<? extends ConnectionValue> value) {
        Utils.checkNotNull(target, "target");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(value, "value");
        this.target = target;
        this.id = id;
        this.options = options;
        this.value = value;
    }
    
    public Defaults() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Target> target() {
        return (Optional<Target>) target;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FormFieldOption>> options() {
        return (Optional<List<FormFieldOption>>) options;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConnectionValue> value() {
        return (Optional<ConnectionValue>) value;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Defaults withTarget(Target target) {
        Utils.checkNotNull(target, "target");
        this.target = Optional.ofNullable(target);
        return this;
    }

    public Defaults withTarget(Optional<? extends Target> target) {
        Utils.checkNotNull(target, "target");
        this.target = target;
        return this;
    }

    public Defaults withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Defaults withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Defaults withOptions(List<FormFieldOption> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    public Defaults withOptions(Optional<? extends List<FormFieldOption>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public Defaults withValue(ConnectionValue value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public Defaults withValue(Optional<? extends ConnectionValue> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Defaults other = (Defaults) o;
        return 
            Objects.deepEquals(this.target, other.target) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            target,
            id,
            options,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Defaults.class,
                "target", target,
                "id", id,
                "options", options,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends Target> target = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<FormFieldOption>> options = Optional.empty();
 
        private Optional<? extends ConnectionValue> value = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder target(Target target) {
            Utils.checkNotNull(target, "target");
            this.target = Optional.ofNullable(target);
            return this;
        }

        public Builder target(Optional<? extends Target> target) {
            Utils.checkNotNull(target, "target");
            this.target = target;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder options(List<FormFieldOption> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends List<FormFieldOption>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder value(ConnectionValue value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends ConnectionValue> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public Defaults build() {
            return new Defaults(
                target,
                id,
                options,
                value);
        }
    }
}
