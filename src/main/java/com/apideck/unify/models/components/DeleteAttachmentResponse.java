/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DeleteAttachmentResponse
 * 
 * <p>Attachments
 */
public class DeleteAttachmentResponse {
    /**
     * HTTP Response Status Code
     */
    @JsonProperty("status_code")
    private long statusCode;

    /**
     * HTTP Response Status
     */
    @JsonProperty("status")
    private String status;

    /**
     * Apideck ID of service provider
     */
    @JsonProperty("service")
    private String service;

    /**
     * Unified API resource name
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * Operation performed
     */
    @JsonProperty("operation")
    private String operation;

    /**
     * A object containing a unique identifier for the resource that was created, updated, or deleted.
     */
    @JsonProperty("data")
    private UnifiedId data;

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_raw")
    private JsonNullable<Map<String, Object>> raw;

    @JsonCreator
    public DeleteAttachmentResponse(
            @JsonProperty("status_code") long statusCode,
            @JsonProperty("status") @Nonnull String status,
            @JsonProperty("service") @Nonnull String service,
            @JsonProperty("resource") @Nonnull String resource,
            @JsonProperty("operation") @Nonnull String operation,
            @JsonProperty("data") @Nonnull UnifiedId data,
            @JsonProperty("_raw") @Nullable JsonNullable<Map<String, Object>> raw) {
        this.statusCode = statusCode;
        this.status = Optional.ofNullable(status)
            .orElseThrow(() -> new IllegalArgumentException("status cannot be null"));
        this.service = Optional.ofNullable(service)
            .orElseThrow(() -> new IllegalArgumentException("service cannot be null"));
        this.resource = Optional.ofNullable(resource)
            .orElseThrow(() -> new IllegalArgumentException("resource cannot be null"));
        this.operation = Optional.ofNullable(operation)
            .orElseThrow(() -> new IllegalArgumentException("operation cannot be null"));
        this.data = Optional.ofNullable(data)
            .orElseThrow(() -> new IllegalArgumentException("data cannot be null"));
        this.raw = Optional.ofNullable(raw)
            .orElse(JsonNullable.undefined());
    }
    
    public DeleteAttachmentResponse(
            long statusCode,
            @Nonnull String status,
            @Nonnull String service,
            @Nonnull String resource,
            @Nonnull String operation,
            @Nonnull UnifiedId data) {
        this(statusCode, status, service,
            resource, operation, data,
            null);
    }

    /**
     * HTTP Response Status Code
     */
    public long statusCode() {
        return this.statusCode;
    }

    /**
     * HTTP Response Status
     */
    public String status() {
        return this.status;
    }

    /**
     * Apideck ID of service provider
     */
    public String service() {
        return this.service;
    }

    /**
     * Unified API resource name
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Operation performed
     */
    public String operation() {
        return this.operation;
    }

    /**
     * A object containing a unique identifier for the resource that was created, updated, or deleted.
     */
    public UnifiedId data() {
        return this.data;
    }

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public JsonNullable<Map<String, Object>> raw() {
        return this.raw;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP Response Status Code
     */
    public DeleteAttachmentResponse withStatusCode(long statusCode) {
        this.statusCode = statusCode;
        return this;
    }


    /**
     * HTTP Response Status
     */
    public DeleteAttachmentResponse withStatus(@Nonnull String status) {
        this.status = Utils.checkNotNull(status, "status");
        return this;
    }


    /**
     * Apideck ID of service provider
     */
    public DeleteAttachmentResponse withService(@Nonnull String service) {
        this.service = Utils.checkNotNull(service, "service");
        return this;
    }


    /**
     * Unified API resource name
     */
    public DeleteAttachmentResponse withResource(@Nonnull String resource) {
        this.resource = Utils.checkNotNull(resource, "resource");
        return this;
    }


    /**
     * Operation performed
     */
    public DeleteAttachmentResponse withOperation(@Nonnull String operation) {
        this.operation = Utils.checkNotNull(operation, "operation");
        return this;
    }


    /**
     * A object containing a unique identifier for the resource that was created, updated, or deleted.
     */
    public DeleteAttachmentResponse withData(@Nonnull UnifiedId data) {
        this.data = Utils.checkNotNull(data, "data");
        return this;
    }


    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public DeleteAttachmentResponse withRaw(@Nullable Map<String, Object> raw) {
        this.raw = JsonNullable.of(raw);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteAttachmentResponse other = (DeleteAttachmentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.operation, other.operation) &&
            Utils.enhancedDeepEquals(this.data, other.data) &&
            Utils.enhancedDeepEquals(this.raw, other.raw);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusCode, status, service,
            resource, operation, data,
            raw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteAttachmentResponse.class,
                "statusCode", statusCode,
                "status", status,
                "service", service,
                "resource", resource,
                "operation", operation,
                "data", data,
                "raw", raw);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long statusCode;

        private String status;

        private String service;

        private String resource;

        private String operation;

        private UnifiedId data;

        private JsonNullable<Map<String, Object>> raw;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP Response Status Code
         */
        public Builder statusCode(long statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * HTTP Response Status
         */
        public Builder status(@Nonnull String status) {
            this.status = Utils.checkNotNull(status, "status");
            return this;
        }

        /**
         * Apideck ID of service provider
         */
        public Builder service(@Nonnull String service) {
            this.service = Utils.checkNotNull(service, "service");
            return this;
        }

        /**
         * Unified API resource name
         */
        public Builder resource(@Nonnull String resource) {
            this.resource = Utils.checkNotNull(resource, "resource");
            return this;
        }

        /**
         * Operation performed
         */
        public Builder operation(@Nonnull String operation) {
            this.operation = Utils.checkNotNull(operation, "operation");
            return this;
        }

        /**
         * A object containing a unique identifier for the resource that was created, updated, or deleted.
         */
        public Builder data(@Nonnull UnifiedId data) {
            this.data = Utils.checkNotNull(data, "data");
            return this;
        }

        /**
         * Raw response from the integration when raw=true query param is provided
         */
        public Builder raw(@Nullable Map<String, Object> raw) {
            this.raw = JsonNullable.of(raw);
            return this;
        }

        public DeleteAttachmentResponse build() {
            return new DeleteAttachmentResponse(
                statusCode, status, service,
                resource, operation, data,
                raw);
        }

    }
}
