/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DeprecatedLinkedSupplier
 * 
 * <p>The supplier this entity is linked to.
 * 
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
@Deprecated
public class DeprecatedLinkedSupplier {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The display ID of the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * The display name of the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The company name of the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Address address;

    @JsonCreator
    public DeprecatedLinkedSupplier(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("display_id") @Nullable JsonNullable<String> displayId,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("address") @Nullable Address address) {
        this.id = id;
        this.displayId = Optional.ofNullable(displayId)
            .orElse(JsonNullable.undefined());
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.address = address;
    }
    
    public DeprecatedLinkedSupplier() {
        this(null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The display ID of the supplier.
     */
    public JsonNullable<String> displayId() {
        return this.displayId;
    }

    /**
     * The display name of the supplier.
     */
    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    /**
     * The company name of the supplier.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    public Optional<Address> address() {
        return Optional.ofNullable(this.address);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public DeprecatedLinkedSupplier withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The display ID of the supplier.
     */
    public DeprecatedLinkedSupplier withDisplayId(@Nullable String displayId) {
        this.displayId = JsonNullable.of(displayId);
        return this;
    }


    /**
     * The display name of the supplier.
     */
    public DeprecatedLinkedSupplier withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    /**
     * The company name of the supplier.
     */
    public DeprecatedLinkedSupplier withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    public DeprecatedLinkedSupplier withAddress(@Nullable Address address) {
        this.address = address;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeprecatedLinkedSupplier other = (DeprecatedLinkedSupplier) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.address, other.address);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, displayId, displayName,
            companyName, address);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeprecatedLinkedSupplier.class,
                "id", id,
                "displayId", displayId,
                "displayName", displayName,
                "companyName", companyName,
                "address", address);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> displayId;

        private JsonNullable<String> displayName;

        private JsonNullable<String> companyName;

        private Address address;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The display ID of the supplier.
         */
        public Builder displayId(@Nullable String displayId) {
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * The display name of the supplier.
         */
        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The company name of the supplier.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        public Builder address(@Nullable Address address) {
            this.address = address;
            return this;
        }

        public DeprecatedLinkedSupplier build() {
            return new DeprecatedLinkedSupplier(
                id, displayId, displayName,
                companyName, address);
        }

    }
}
