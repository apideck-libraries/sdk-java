/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceAddress
 * 
 * <p>An object representing a shipping or billing address.
 */
public class EcommerceAddress {
    /**
     * Address line 1 of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * Address line 2 of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * Company name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * City of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * State/province of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * Postal/ZIP code of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Country of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonCreator
    public EcommerceAddress(
            @JsonProperty("line1") @Nullable JsonNullable<String> line1,
            @JsonProperty("line2") @Nullable JsonNullable<String> line2,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("city") @Nullable JsonNullable<String> city,
            @JsonProperty("state") @Nullable JsonNullable<String> state,
            @JsonProperty("postal_code") @Nullable JsonNullable<String> postalCode,
            @JsonProperty("country") @Nullable JsonNullable<String> country) {
        this.line1 = Optional.ofNullable(line1)
            .orElse(JsonNullable.undefined());
        this.line2 = Optional.ofNullable(line2)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.city = Optional.ofNullable(city)
            .orElse(JsonNullable.undefined());
        this.state = Optional.ofNullable(state)
            .orElse(JsonNullable.undefined());
        this.postalCode = Optional.ofNullable(postalCode)
            .orElse(JsonNullable.undefined());
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceAddress() {
        this(null, null, null,
            null, null, null,
            null);
    }

    /**
     * Address line 1 of the billing address.
     */
    public JsonNullable<String> line1() {
        return this.line1;
    }

    /**
     * Address line 2 of the billing address.
     */
    public JsonNullable<String> line2() {
        return this.line2;
    }

    /**
     * Company name of the customer
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * City of the billing address.
     */
    public JsonNullable<String> city() {
        return this.city;
    }

    /**
     * State/province of the billing address.
     */
    public JsonNullable<String> state() {
        return this.state;
    }

    /**
     * Postal/ZIP code of the billing address.
     */
    public JsonNullable<String> postalCode() {
        return this.postalCode;
    }

    /**
     * Country of the billing address.
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Address line 1 of the billing address.
     */
    public EcommerceAddress withLine1(@Nullable String line1) {
        this.line1 = JsonNullable.of(line1);
        return this;
    }


    /**
     * Address line 2 of the billing address.
     */
    public EcommerceAddress withLine2(@Nullable String line2) {
        this.line2 = JsonNullable.of(line2);
        return this;
    }


    /**
     * Company name of the customer
     */
    public EcommerceAddress withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * City of the billing address.
     */
    public EcommerceAddress withCity(@Nullable String city) {
        this.city = JsonNullable.of(city);
        return this;
    }


    /**
     * State/province of the billing address.
     */
    public EcommerceAddress withState(@Nullable String state) {
        this.state = JsonNullable.of(state);
        return this;
    }


    /**
     * Postal/ZIP code of the billing address.
     */
    public EcommerceAddress withPostalCode(@Nullable String postalCode) {
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }


    /**
     * Country of the billing address.
     */
    public EcommerceAddress withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceAddress other = (EcommerceAddress) o;
        return 
            Utils.enhancedDeepEquals(this.line1, other.line1) &&
            Utils.enhancedDeepEquals(this.line2, other.line2) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.state, other.state) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            line1, line2, companyName,
            city, state, postalCode,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceAddress.class,
                "line1", line1,
                "line2", line2,
                "companyName", companyName,
                "city", city,
                "state", state,
                "postalCode", postalCode,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> line1;

        private JsonNullable<String> line2;

        private JsonNullable<String> companyName;

        private JsonNullable<String> city;

        private JsonNullable<String> state;

        private JsonNullable<String> postalCode;

        private JsonNullable<String> country;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Address line 1 of the billing address.
         */
        public Builder line1(@Nullable String line1) {
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Address line 2 of the billing address.
         */
        public Builder line2(@Nullable String line2) {
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * Company name of the customer
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * City of the billing address.
         */
        public Builder city(@Nullable String city) {
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * State/province of the billing address.
         */
        public Builder state(@Nullable String state) {
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * Postal/ZIP code of the billing address.
         */
        public Builder postalCode(@Nullable String postalCode) {
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Country of the billing address.
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        public EcommerceAddress build() {
            return new EcommerceAddress(
                line1, line2, companyName,
                city, state, postalCode,
                country);
        }

    }
}
