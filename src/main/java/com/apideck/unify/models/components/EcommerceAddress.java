/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceAddress
 * 
 * <p>An object representing a shipping or billing address.
 */
public class EcommerceAddress {

    /**
     * Address line 1 of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * Address line 2 of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * Company name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * City of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * State/province of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    /**
     * Postal/ZIP code of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<String> postalCode;

    /**
     * Country of the billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonCreator
    public EcommerceAddress(
            @JsonProperty("line1") JsonNullable<String> line1,
            @JsonProperty("line2") JsonNullable<String> line2,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("postal_code") JsonNullable<String> postalCode,
            @JsonProperty("country") JsonNullable<String> country) {
        Utils.checkNotNull(line1, "line1");
        Utils.checkNotNull(line2, "line2");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(country, "country");
        this.line1 = line1;
        this.line2 = line2;
        this.companyName = companyName;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.country = country;
    }
    
    public EcommerceAddress() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Address line 1 of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> line1() {
        return line1;
    }

    /**
     * Address line 2 of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> line2() {
        return line2;
    }

    /**
     * Company name of the customer
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * City of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * State/province of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    /**
     * Postal/ZIP code of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * Country of the billing address.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Address line 1 of the billing address.
     */
    public EcommerceAddress withLine1(String line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = JsonNullable.of(line1);
        return this;
    }

    /**
     * Address line 1 of the billing address.
     */
    public EcommerceAddress withLine1(JsonNullable<String> line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = line1;
        return this;
    }

    /**
     * Address line 2 of the billing address.
     */
    public EcommerceAddress withLine2(String line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = JsonNullable.of(line2);
        return this;
    }

    /**
     * Address line 2 of the billing address.
     */
    public EcommerceAddress withLine2(JsonNullable<String> line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = line2;
        return this;
    }

    /**
     * Company name of the customer
     */
    public EcommerceAddress withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * Company name of the customer
     */
    public EcommerceAddress withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * City of the billing address.
     */
    public EcommerceAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City of the billing address.
     */
    public EcommerceAddress withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * State/province of the billing address.
     */
    public EcommerceAddress withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * State/province of the billing address.
     */
    public EcommerceAddress withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Postal/ZIP code of the billing address.
     */
    public EcommerceAddress withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * Postal/ZIP code of the billing address.
     */
    public EcommerceAddress withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Country of the billing address.
     */
    public EcommerceAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country of the billing address.
     */
    public EcommerceAddress withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceAddress other = (EcommerceAddress) o;
        return 
            Objects.deepEquals(this.line1, other.line1) &&
            Objects.deepEquals(this.line2, other.line2) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            line1,
            line2,
            companyName,
            city,
            state,
            postalCode,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceAddress.class,
                "line1", line1,
                "line2", line2,
                "companyName", companyName,
                "city", city,
                "state", state,
                "postalCode", postalCode,
                "country", country);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> line1 = JsonNullable.undefined();
 
        private JsonNullable<String> line2 = JsonNullable.undefined();
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> city = JsonNullable.undefined();
 
        private JsonNullable<String> state = JsonNullable.undefined();
 
        private JsonNullable<String> postalCode = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Address line 1 of the billing address.
         */
        public Builder line1(String line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Address line 1 of the billing address.
         */
        public Builder line1(JsonNullable<String> line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = line1;
            return this;
        }

        /**
         * Address line 2 of the billing address.
         */
        public Builder line2(String line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * Address line 2 of the billing address.
         */
        public Builder line2(JsonNullable<String> line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = line2;
            return this;
        }

        /**
         * Company name of the customer
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * Company name of the customer
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * City of the billing address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City of the billing address.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * State/province of the billing address.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * State/province of the billing address.
         */
        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Postal/ZIP code of the billing address.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Postal/ZIP code of the billing address.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * Country of the billing address.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country of the billing address.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }
        
        public EcommerceAddress build() {
            return new EcommerceAddress(
                line1,
                line2,
                companyName,
                city,
                state,
                postalCode,
                country);
        }
    }
}
