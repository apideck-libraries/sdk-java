/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EcommerceCustomer {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Full name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * First name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Last name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Company name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The current status of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<CustomerStatus> status;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * An array of email addresses for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private JsonNullable<List<Email>> emails;

    /**
     * An array of phone numbers for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private JsonNullable<List<PhoneNumber>> phoneNumbers;

    /**
     * An array of addresses for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Addresses> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orders")
    private List<LinkedEcommerceOrder> orders;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public EcommerceCustomer(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("status") @Nullable JsonNullable<CustomerStatus> status,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("emails") @Nullable JsonNullable<List<Email>> emails,
            @JsonProperty("phone_numbers") @Nullable JsonNullable<List<PhoneNumber>> phoneNumbers,
            @JsonProperty("addresses") @Nullable List<Addresses> addresses,
            @JsonProperty("orders") @Nullable List<LinkedEcommerceOrder> orders,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.emails = Optional.ofNullable(emails)
            .orElse(JsonNullable.undefined());
        this.phoneNumbers = Optional.ofNullable(phoneNumbers)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.orders = orders;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceCustomer(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * Full name of the customer
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * First name of the customer
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * Last name of the customer
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Company name of the customer
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The current status of the customer
     */
    public JsonNullable<CustomerStatus> status() {
        return this.status;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * An array of email addresses for the customer.
     */
    public JsonNullable<List<Email>> emails() {
        return this.emails;
    }

    /**
     * An array of phone numbers for the customer.
     */
    public JsonNullable<List<PhoneNumber>> phoneNumbers() {
        return this.phoneNumbers;
    }

    /**
     * An array of addresses for the customer.
     */
    public Optional<List<Addresses>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<LinkedEcommerceOrder>> orders() {
        return Optional.ofNullable(this.orders);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceCustomer withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * Full name of the customer
     */
    public EcommerceCustomer withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * First name of the customer
     */
    public EcommerceCustomer withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * Last name of the customer
     */
    public EcommerceCustomer withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Company name of the customer
     */
    public EcommerceCustomer withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The current status of the customer
     */
    public EcommerceCustomer withStatus(@Nullable CustomerStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EcommerceCustomer withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * An array of email addresses for the customer.
     */
    public EcommerceCustomer withEmails(@Nullable List<Email> emails) {
        this.emails = JsonNullable.of(emails);
        return this;
    }


    /**
     * An array of phone numbers for the customer.
     */
    public EcommerceCustomer withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = JsonNullable.of(phoneNumbers);
        return this;
    }


    /**
     * An array of addresses for the customer.
     */
    public EcommerceCustomer withAddresses(@Nullable List<Addresses> addresses) {
        this.addresses = addresses;
        return this;
    }


    public EcommerceCustomer withOrders(@Nullable List<LinkedEcommerceOrder> orders) {
        this.orders = orders;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceCustomer withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public EcommerceCustomer withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public EcommerceCustomer withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceCustomer other = (EcommerceCustomer) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.orders, other.orders) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, firstName,
            lastName, companyName, status,
            currency, emails, phoneNumbers,
            addresses, orders, customMappings,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceCustomer.class,
                "id", id,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "companyName", companyName,
                "status", status,
                "currency", currency,
                "emails", emails,
                "phoneNumbers", phoneNumbers,
                "addresses", addresses,
                "orders", orders,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> companyName;

        private JsonNullable<CustomerStatus> status;

        private JsonNullable<Currency> currency;

        private JsonNullable<List<Email>> emails;

        private JsonNullable<List<PhoneNumber>> phoneNumbers;

        private List<Addresses> addresses;

        private List<LinkedEcommerceOrder> orders;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * Full name of the customer
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * First name of the customer
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * Last name of the customer
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Company name of the customer
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The current status of the customer
         */
        public Builder status(@Nullable CustomerStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * An array of email addresses for the customer.
         */
        public Builder emails(@Nullable List<Email> emails) {
            this.emails = JsonNullable.of(emails);
            return this;
        }

        /**
         * An array of phone numbers for the customer.
         */
        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = JsonNullable.of(phoneNumbers);
            return this;
        }

        /**
         * An array of addresses for the customer.
         */
        public Builder addresses(@Nullable List<Addresses> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder orders(@Nullable List<LinkedEcommerceOrder> orders) {
            this.orders = orders;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        public EcommerceCustomer build() {
            return new EcommerceCustomer(
                id, name, firstName,
                lastName, companyName, status,
                currency, emails, phoneNumbers,
                addresses, orders, customMappings,
                createdAt, updatedAt);
        }

    }
}
