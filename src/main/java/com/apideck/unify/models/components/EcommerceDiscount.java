/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceDiscount
 * 
 * <p>An object representing a discount applied to an ecommerce order or product.
 */
public class EcommerceDiscount {
    /**
     * The code used to apply the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * The fixed amount of the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<String> amount;

    /**
     * The percentage of the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    private JsonNullable<String> percentage;

    @JsonCreator
    public EcommerceDiscount(
            @JsonProperty("code") @Nullable JsonNullable<String> code,
            @JsonProperty("amount") @Nullable JsonNullable<String> amount,
            @JsonProperty("percentage") @Nullable JsonNullable<String> percentage) {
        this.code = Optional.ofNullable(code)
            .orElse(JsonNullable.undefined());
        this.amount = Optional.ofNullable(amount)
            .orElse(JsonNullable.undefined());
        this.percentage = Optional.ofNullable(percentage)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceDiscount() {
        this(null, null, null);
    }

    /**
     * The code used to apply the discount.
     */
    public JsonNullable<String> code() {
        return this.code;
    }

    /**
     * The fixed amount of the discount.
     */
    public JsonNullable<String> amount() {
        return this.amount;
    }

    /**
     * The percentage of the discount.
     */
    public JsonNullable<String> percentage() {
        return this.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code used to apply the discount.
     */
    public EcommerceDiscount withCode(@Nullable String code) {
        this.code = JsonNullable.of(code);
        return this;
    }


    /**
     * The fixed amount of the discount.
     */
    public EcommerceDiscount withAmount(@Nullable String amount) {
        this.amount = JsonNullable.of(amount);
        return this;
    }


    /**
     * The percentage of the discount.
     */
    public EcommerceDiscount withPercentage(@Nullable String percentage) {
        this.percentage = JsonNullable.of(percentage);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceDiscount other = (EcommerceDiscount) o;
        return 
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.percentage, other.percentage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            code, amount, percentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceDiscount.class,
                "code", code,
                "amount", amount,
                "percentage", percentage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> code;

        private JsonNullable<String> amount;

        private JsonNullable<String> percentage;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code used to apply the discount.
         */
        public Builder code(@Nullable String code) {
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * The fixed amount of the discount.
         */
        public Builder amount(@Nullable String amount) {
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The percentage of the discount.
         */
        public Builder percentage(@Nullable String percentage) {
            this.percentage = JsonNullable.of(percentage);
            return this;
        }

        public EcommerceDiscount build() {
            return new EcommerceDiscount(
                code, amount, percentage);
        }

    }
}
