/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceDiscount - An object representing a discount applied to an ecommerce order or product.
 */

public class EcommerceDiscount {

    /**
     * The code used to apply the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * The fixed amount of the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<String> amount;

    /**
     * The percentage of the discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    private JsonNullable<String> percentage;

    @JsonCreator
    public EcommerceDiscount(
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("amount") JsonNullable<String> amount,
            @JsonProperty("percentage") JsonNullable<String> percentage) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(percentage, "percentage");
        this.code = code;
        this.amount = amount;
        this.percentage = percentage;
    }
    
    public EcommerceDiscount() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The code used to apply the discount.
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * The fixed amount of the discount.
     */
    @JsonIgnore
    public JsonNullable<String> amount() {
        return amount;
    }

    /**
     * The percentage of the discount.
     */
    @JsonIgnore
    public JsonNullable<String> percentage() {
        return percentage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The code used to apply the discount.
     */
    public EcommerceDiscount withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * The code used to apply the discount.
     */
    public EcommerceDiscount withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The fixed amount of the discount.
     */
    public EcommerceDiscount withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The fixed amount of the discount.
     */
    public EcommerceDiscount withAmount(JsonNullable<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The percentage of the discount.
     */
    public EcommerceDiscount withPercentage(String percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = JsonNullable.of(percentage);
        return this;
    }

    /**
     * The percentage of the discount.
     */
    public EcommerceDiscount withPercentage(JsonNullable<String> percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = percentage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceDiscount other = (EcommerceDiscount) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.percentage, other.percentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            amount,
            percentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceDiscount.class,
                "code", code,
                "amount", amount,
                "percentage", percentage);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> code = JsonNullable.undefined();
 
        private JsonNullable<String> amount = JsonNullable.undefined();
 
        private JsonNullable<String> percentage = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code used to apply the discount.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * The code used to apply the discount.
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The fixed amount of the discount.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The fixed amount of the discount.
         */
        public Builder amount(JsonNullable<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The percentage of the discount.
         */
        public Builder percentage(String percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = JsonNullable.of(percentage);
            return this;
        }

        /**
         * The percentage of the discount.
         */
        public Builder percentage(JsonNullable<String> percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = percentage;
            return this;
        }
        
        public EcommerceDiscount build() {
            return new EcommerceDiscount(
                code,
                amount,
                percentage);
        }
    }
}

