/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class EcommerceOrder {

    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Order number, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_number")
    private JsonNullable<String> orderNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private Optional<? extends List<EcommerceDiscount>> discounts;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<String> subTotal;

    /**
     * Shipping cost, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_cost")
    private JsonNullable<String> shippingCost;

    /**
     * Coupon discount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_discount")
    private JsonNullable<String> couponDiscount;

    /**
     * Total discount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<String> totalDiscount;

    /**
     * Total tax, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<String> totalTax;

    /**
     * Total amount due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<String> totalAmount;

    /**
     * Refunded amount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_amount")
    private JsonNullable<String> refundedAmount;

    /**
     * Current status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends EcommerceOrderStatus> status;

    /**
     * Current payment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    private JsonNullable<? extends EcommerceOrderPaymentStatus> paymentStatus;

    /**
     * Current fulfillment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillment_status")
    private JsonNullable<? extends FulfillmentStatus> fulfillmentStatus;

    /**
     * Payment method used for this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<? extends LinkedEcommerceCustomer> customer;

    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends EcommerceAddress> billingAddress;

    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends EcommerceAddress> shippingAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    private Optional<? extends List<TrackingItem>> tracking;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<EcommerceOrderLineItem>> lineItems;

    /**
     * Note for the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public EcommerceOrder(
            @JsonProperty("id") String id,
            @JsonProperty("order_number") JsonNullable<String> orderNumber,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("discounts") Optional<? extends List<EcommerceDiscount>> discounts,
            @JsonProperty("sub_total") JsonNullable<String> subTotal,
            @JsonProperty("shipping_cost") JsonNullable<String> shippingCost,
            @JsonProperty("coupon_discount") JsonNullable<String> couponDiscount,
            @JsonProperty("total_discount") JsonNullable<String> totalDiscount,
            @JsonProperty("total_tax") JsonNullable<String> totalTax,
            @JsonProperty("total_amount") JsonNullable<String> totalAmount,
            @JsonProperty("refunded_amount") JsonNullable<String> refundedAmount,
            @JsonProperty("status") JsonNullable<? extends EcommerceOrderStatus> status,
            @JsonProperty("payment_status") JsonNullable<? extends EcommerceOrderPaymentStatus> paymentStatus,
            @JsonProperty("fulfillment_status") JsonNullable<? extends FulfillmentStatus> fulfillmentStatus,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("customer") Optional<? extends LinkedEcommerceCustomer> customer,
            @JsonProperty("billing_address") Optional<? extends EcommerceAddress> billingAddress,
            @JsonProperty("shipping_address") Optional<? extends EcommerceAddress> shippingAddress,
            @JsonProperty("tracking") Optional<? extends List<TrackingItem>> tracking,
            @JsonProperty("line_items") Optional<? extends List<EcommerceOrderLineItem>> lineItems,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(orderNumber, "orderNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(discounts, "discounts");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(shippingCost, "shippingCost");
        Utils.checkNotNull(couponDiscount, "couponDiscount");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        Utils.checkNotNull(fulfillmentStatus, "fulfillmentStatus");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(tracking, "tracking");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.orderNumber = orderNumber;
        this.currency = currency;
        this.discounts = discounts;
        this.subTotal = subTotal;
        this.shippingCost = shippingCost;
        this.couponDiscount = couponDiscount;
        this.totalDiscount = totalDiscount;
        this.totalTax = totalTax;
        this.totalAmount = totalAmount;
        this.refundedAmount = refundedAmount;
        this.status = status;
        this.paymentStatus = paymentStatus;
        this.fulfillmentStatus = fulfillmentStatus;
        this.paymentMethod = paymentMethod;
        this.customer = customer;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.tracking = tracking;
        this.lineItems = lineItems;
        this.note = note;
        this.customMappings = customMappings;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public EcommerceOrder(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Order number, if any.
     */
    @JsonIgnore
    public JsonNullable<String> orderNumber() {
        return orderNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceDiscount>> discounts() {
        return (Optional<List<EcommerceDiscount>>) discounts;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<String> subTotal() {
        return subTotal;
    }

    /**
     * Shipping cost, if any.
     */
    @JsonIgnore
    public JsonNullable<String> shippingCost() {
        return shippingCost;
    }

    /**
     * Coupon discount, if any.
     */
    @JsonIgnore
    public JsonNullable<String> couponDiscount() {
        return couponDiscount;
    }

    /**
     * Total discount, if any.
     */
    @JsonIgnore
    public JsonNullable<String> totalDiscount() {
        return totalDiscount;
    }

    /**
     * Total tax, if any.
     */
    @JsonIgnore
    public JsonNullable<String> totalTax() {
        return totalTax;
    }

    /**
     * Total amount due.
     */
    @JsonIgnore
    public JsonNullable<String> totalAmount() {
        return totalAmount;
    }

    /**
     * Refunded amount, if any.
     */
    @JsonIgnore
    public JsonNullable<String> refundedAmount() {
        return refundedAmount;
    }

    /**
     * Current status of the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EcommerceOrderStatus> status() {
        return (JsonNullable<EcommerceOrderStatus>) status;
    }

    /**
     * Current payment status of the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EcommerceOrderPaymentStatus> paymentStatus() {
        return (JsonNullable<EcommerceOrderPaymentStatus>) paymentStatus;
    }

    /**
     * Current fulfillment status of the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<FulfillmentStatus> fulfillmentStatus() {
        return (JsonNullable<FulfillmentStatus>) fulfillmentStatus;
    }

    /**
     * Payment method used for this order.
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedEcommerceCustomer> customer() {
        return (Optional<LinkedEcommerceCustomer>) customer;
    }

    /**
     * An object representing a shipping or billing address.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EcommerceAddress> billingAddress() {
        return (Optional<EcommerceAddress>) billingAddress;
    }

    /**
     * An object representing a shipping or billing address.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EcommerceAddress> shippingAddress() {
        return (Optional<EcommerceAddress>) shippingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TrackingItem>> tracking() {
        return (Optional<List<TrackingItem>>) tracking;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceOrderLineItem>> lineItems() {
        return (Optional<List<EcommerceOrderLineItem>>) lineItems;
    }

    /**
     * Note for the order.
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public EcommerceOrder withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Order number, if any.
     */
    public EcommerceOrder withOrderNumber(String orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = JsonNullable.of(orderNumber);
        return this;
    }

    /**
     * Order number, if any.
     */
    public EcommerceOrder withOrderNumber(JsonNullable<String> orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = orderNumber;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EcommerceOrder withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EcommerceOrder withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public EcommerceOrder withDiscounts(List<EcommerceDiscount> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = Optional.ofNullable(discounts);
        return this;
    }

    public EcommerceOrder withDiscounts(Optional<? extends List<EcommerceDiscount>> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = discounts;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public EcommerceOrder withSubTotal(String subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public EcommerceOrder withSubTotal(JsonNullable<String> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Shipping cost, if any.
     */
    public EcommerceOrder withShippingCost(String shippingCost) {
        Utils.checkNotNull(shippingCost, "shippingCost");
        this.shippingCost = JsonNullable.of(shippingCost);
        return this;
    }

    /**
     * Shipping cost, if any.
     */
    public EcommerceOrder withShippingCost(JsonNullable<String> shippingCost) {
        Utils.checkNotNull(shippingCost, "shippingCost");
        this.shippingCost = shippingCost;
        return this;
    }

    /**
     * Coupon discount, if any.
     */
    public EcommerceOrder withCouponDiscount(String couponDiscount) {
        Utils.checkNotNull(couponDiscount, "couponDiscount");
        this.couponDiscount = JsonNullable.of(couponDiscount);
        return this;
    }

    /**
     * Coupon discount, if any.
     */
    public EcommerceOrder withCouponDiscount(JsonNullable<String> couponDiscount) {
        Utils.checkNotNull(couponDiscount, "couponDiscount");
        this.couponDiscount = couponDiscount;
        return this;
    }

    /**
     * Total discount, if any.
     */
    public EcommerceOrder withTotalDiscount(String totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }

    /**
     * Total discount, if any.
     */
    public EcommerceOrder withTotalDiscount(JsonNullable<String> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    /**
     * Total tax, if any.
     */
    public EcommerceOrder withTotalTax(String totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax, if any.
     */
    public EcommerceOrder withTotalTax(JsonNullable<String> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Total amount due.
     */
    public EcommerceOrder withTotalAmount(String totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Total amount due.
     */
    public EcommerceOrder withTotalAmount(JsonNullable<String> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Refunded amount, if any.
     */
    public EcommerceOrder withRefundedAmount(String refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = JsonNullable.of(refundedAmount);
        return this;
    }

    /**
     * Refunded amount, if any.
     */
    public EcommerceOrder withRefundedAmount(JsonNullable<String> refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = refundedAmount;
        return this;
    }

    /**
     * Current status of the order.
     */
    public EcommerceOrder withStatus(EcommerceOrderStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Current status of the order.
     */
    public EcommerceOrder withStatus(JsonNullable<? extends EcommerceOrderStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Current payment status of the order.
     */
    public EcommerceOrder withPaymentStatus(EcommerceOrderPaymentStatus paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = JsonNullable.of(paymentStatus);
        return this;
    }

    /**
     * Current payment status of the order.
     */
    public EcommerceOrder withPaymentStatus(JsonNullable<? extends EcommerceOrderPaymentStatus> paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = paymentStatus;
        return this;
    }

    /**
     * Current fulfillment status of the order.
     */
    public EcommerceOrder withFulfillmentStatus(FulfillmentStatus fulfillmentStatus) {
        Utils.checkNotNull(fulfillmentStatus, "fulfillmentStatus");
        this.fulfillmentStatus = JsonNullable.of(fulfillmentStatus);
        return this;
    }

    /**
     * Current fulfillment status of the order.
     */
    public EcommerceOrder withFulfillmentStatus(JsonNullable<? extends FulfillmentStatus> fulfillmentStatus) {
        Utils.checkNotNull(fulfillmentStatus, "fulfillmentStatus");
        this.fulfillmentStatus = fulfillmentStatus;
        return this;
    }

    /**
     * Payment method used for this order.
     */
    public EcommerceOrder withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for this order.
     */
    public EcommerceOrder withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public EcommerceOrder withCustomer(LinkedEcommerceCustomer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public EcommerceOrder withCustomer(Optional<? extends LinkedEcommerceCustomer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withBillingAddress(EcommerceAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }

    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withBillingAddress(Optional<? extends EcommerceAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withShippingAddress(EcommerceAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }

    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withShippingAddress(Optional<? extends EcommerceAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    public EcommerceOrder withTracking(List<TrackingItem> tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = Optional.ofNullable(tracking);
        return this;
    }

    public EcommerceOrder withTracking(Optional<? extends List<TrackingItem>> tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = tracking;
        return this;
    }

    public EcommerceOrder withLineItems(List<EcommerceOrderLineItem> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    public EcommerceOrder withLineItems(Optional<? extends List<EcommerceOrderLineItem>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    /**
     * Note for the order.
     */
    public EcommerceOrder withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Note for the order.
     */
    public EcommerceOrder withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceOrder withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceOrder withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public EcommerceOrder withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public EcommerceOrder withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public EcommerceOrder withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public EcommerceOrder withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceOrder other = (EcommerceOrder) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.orderNumber, other.orderNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.discounts, other.discounts) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.shippingCost, other.shippingCost) &&
            Objects.deepEquals(this.couponDiscount, other.couponDiscount) &&
            Objects.deepEquals(this.totalDiscount, other.totalDiscount) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.refundedAmount, other.refundedAmount) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.paymentStatus, other.paymentStatus) &&
            Objects.deepEquals(this.fulfillmentStatus, other.fulfillmentStatus) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.billingAddress, other.billingAddress) &&
            Objects.deepEquals(this.shippingAddress, other.shippingAddress) &&
            Objects.deepEquals(this.tracking, other.tracking) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            orderNumber,
            currency,
            discounts,
            subTotal,
            shippingCost,
            couponDiscount,
            totalDiscount,
            totalTax,
            totalAmount,
            refundedAmount,
            status,
            paymentStatus,
            fulfillmentStatus,
            paymentMethod,
            customer,
            billingAddress,
            shippingAddress,
            tracking,
            lineItems,
            note,
            customMappings,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceOrder.class,
                "id", id,
                "orderNumber", orderNumber,
                "currency", currency,
                "discounts", discounts,
                "subTotal", subTotal,
                "shippingCost", shippingCost,
                "couponDiscount", couponDiscount,
                "totalDiscount", totalDiscount,
                "totalTax", totalTax,
                "totalAmount", totalAmount,
                "refundedAmount", refundedAmount,
                "status", status,
                "paymentStatus", paymentStatus,
                "fulfillmentStatus", fulfillmentStatus,
                "paymentMethod", paymentMethod,
                "customer", customer,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "tracking", tracking,
                "lineItems", lineItems,
                "note", note,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> orderNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends List<EcommerceDiscount>> discounts = Optional.empty();
 
        private JsonNullable<String> subTotal = JsonNullable.undefined();
 
        private JsonNullable<String> shippingCost = JsonNullable.undefined();
 
        private JsonNullable<String> couponDiscount = JsonNullable.undefined();
 
        private JsonNullable<String> totalDiscount = JsonNullable.undefined();
 
        private JsonNullable<String> totalTax = JsonNullable.undefined();
 
        private JsonNullable<String> totalAmount = JsonNullable.undefined();
 
        private JsonNullable<String> refundedAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends EcommerceOrderStatus> status = JsonNullable.undefined();
 
        private JsonNullable<? extends EcommerceOrderPaymentStatus> paymentStatus = JsonNullable.undefined();
 
        private JsonNullable<? extends FulfillmentStatus> fulfillmentStatus = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethod = JsonNullable.undefined();
 
        private Optional<? extends LinkedEcommerceCustomer> customer = Optional.empty();
 
        private Optional<? extends EcommerceAddress> billingAddress = Optional.empty();
 
        private Optional<? extends EcommerceAddress> shippingAddress = Optional.empty();
 
        private Optional<? extends List<TrackingItem>> tracking = Optional.empty();
 
        private Optional<? extends List<EcommerceOrderLineItem>> lineItems = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Order number, if any.
         */
        public Builder orderNumber(String orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = JsonNullable.of(orderNumber);
            return this;
        }

        /**
         * Order number, if any.
         */
        public Builder orderNumber(JsonNullable<String> orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = orderNumber;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder discounts(List<EcommerceDiscount> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = Optional.ofNullable(discounts);
            return this;
        }

        public Builder discounts(Optional<? extends List<EcommerceDiscount>> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = discounts;
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(String subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<String> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Shipping cost, if any.
         */
        public Builder shippingCost(String shippingCost) {
            Utils.checkNotNull(shippingCost, "shippingCost");
            this.shippingCost = JsonNullable.of(shippingCost);
            return this;
        }

        /**
         * Shipping cost, if any.
         */
        public Builder shippingCost(JsonNullable<String> shippingCost) {
            Utils.checkNotNull(shippingCost, "shippingCost");
            this.shippingCost = shippingCost;
            return this;
        }

        /**
         * Coupon discount, if any.
         */
        public Builder couponDiscount(String couponDiscount) {
            Utils.checkNotNull(couponDiscount, "couponDiscount");
            this.couponDiscount = JsonNullable.of(couponDiscount);
            return this;
        }

        /**
         * Coupon discount, if any.
         */
        public Builder couponDiscount(JsonNullable<String> couponDiscount) {
            Utils.checkNotNull(couponDiscount, "couponDiscount");
            this.couponDiscount = couponDiscount;
            return this;
        }

        /**
         * Total discount, if any.
         */
        public Builder totalDiscount(String totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        /**
         * Total discount, if any.
         */
        public Builder totalDiscount(JsonNullable<String> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        /**
         * Total tax, if any.
         */
        public Builder totalTax(String totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax, if any.
         */
        public Builder totalTax(JsonNullable<String> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        /**
         * Total amount due.
         */
        public Builder totalAmount(String totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount due.
         */
        public Builder totalAmount(JsonNullable<String> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Refunded amount, if any.
         */
        public Builder refundedAmount(String refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = JsonNullable.of(refundedAmount);
            return this;
        }

        /**
         * Refunded amount, if any.
         */
        public Builder refundedAmount(JsonNullable<String> refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }

        /**
         * Current status of the order.
         */
        public Builder status(EcommerceOrderStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Current status of the order.
         */
        public Builder status(JsonNullable<? extends EcommerceOrderStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Current payment status of the order.
         */
        public Builder paymentStatus(EcommerceOrderPaymentStatus paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = JsonNullable.of(paymentStatus);
            return this;
        }

        /**
         * Current payment status of the order.
         */
        public Builder paymentStatus(JsonNullable<? extends EcommerceOrderPaymentStatus> paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = paymentStatus;
            return this;
        }

        /**
         * Current fulfillment status of the order.
         */
        public Builder fulfillmentStatus(FulfillmentStatus fulfillmentStatus) {
            Utils.checkNotNull(fulfillmentStatus, "fulfillmentStatus");
            this.fulfillmentStatus = JsonNullable.of(fulfillmentStatus);
            return this;
        }

        /**
         * Current fulfillment status of the order.
         */
        public Builder fulfillmentStatus(JsonNullable<? extends FulfillmentStatus> fulfillmentStatus) {
            Utils.checkNotNull(fulfillmentStatus, "fulfillmentStatus");
            this.fulfillmentStatus = fulfillmentStatus;
            return this;
        }

        /**
         * Payment method used for this order.
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for this order.
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedEcommerceCustomer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(Optional<? extends LinkedEcommerceCustomer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder billingAddress(EcommerceAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder billingAddress(Optional<? extends EcommerceAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder shippingAddress(EcommerceAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder shippingAddress(Optional<? extends EcommerceAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder tracking(List<TrackingItem> tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = Optional.ofNullable(tracking);
            return this;
        }

        public Builder tracking(Optional<? extends List<TrackingItem>> tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = tracking;
            return this;
        }

        public Builder lineItems(List<EcommerceOrderLineItem> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<EcommerceOrderLineItem>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Note for the order.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Note for the order.
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public EcommerceOrder build() {
            return new EcommerceOrder(
                id,
                orderNumber,
                currency,
                discounts,
                subTotal,
                shippingCost,
                couponDiscount,
                totalDiscount,
                totalTax,
                totalAmount,
                refundedAmount,
                status,
                paymentStatus,
                fulfillmentStatus,
                paymentMethod,
                customer,
                billingAddress,
                shippingAddress,
                tracking,
                lineItems,
                note,
                customMappings,
                createdAt,
                updatedAt);
        }
    }
}

