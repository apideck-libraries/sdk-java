/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EcommerceOrder {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Order number, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_number")
    private JsonNullable<String> orderNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private List<EcommerceDiscount> discounts;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<String> subTotal;

    /**
     * Shipping cost, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_cost")
    private JsonNullable<String> shippingCost;

    /**
     * Coupon discount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_discount")
    private JsonNullable<String> couponDiscount;

    /**
     * Total discount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<String> totalDiscount;

    /**
     * Total tax, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<String> totalTax;

    /**
     * Total amount due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<String> totalAmount;

    /**
     * Refunded amount, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_amount")
    private JsonNullable<String> refundedAmount;

    /**
     * Current status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<EcommerceOrderStatus> status;

    /**
     * Current payment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    private JsonNullable<EcommerceOrderPaymentStatus> paymentStatus;

    /**
     * Current fulfillment status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillment_status")
    private JsonNullable<FulfillmentStatus> fulfillmentStatus;

    /**
     * Payment method used for this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private LinkedEcommerceCustomer customer;

    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private EcommerceAddress billingAddress;

    /**
     * An object representing a shipping or billing address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private EcommerceAddress shippingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    private List<TrackingItem> tracking;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private List<EcommerceOrderLineItem> lineItems;

    /**
     * Note for the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private List<EcommerceOrderRefund> refunds;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public EcommerceOrder(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("order_number") @Nullable JsonNullable<String> orderNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("discounts") @Nullable List<EcommerceDiscount> discounts,
            @JsonProperty("sub_total") @Nullable JsonNullable<String> subTotal,
            @JsonProperty("shipping_cost") @Nullable JsonNullable<String> shippingCost,
            @JsonProperty("coupon_discount") @Nullable JsonNullable<String> couponDiscount,
            @JsonProperty("total_discount") @Nullable JsonNullable<String> totalDiscount,
            @JsonProperty("total_tax") @Nullable JsonNullable<String> totalTax,
            @JsonProperty("total_amount") @Nullable JsonNullable<String> totalAmount,
            @JsonProperty("refunded_amount") @Nullable JsonNullable<String> refundedAmount,
            @JsonProperty("status") @Nullable JsonNullable<EcommerceOrderStatus> status,
            @JsonProperty("payment_status") @Nullable JsonNullable<EcommerceOrderPaymentStatus> paymentStatus,
            @JsonProperty("fulfillment_status") @Nullable JsonNullable<FulfillmentStatus> fulfillmentStatus,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("customer") @Nullable LinkedEcommerceCustomer customer,
            @JsonProperty("billing_address") @Nullable EcommerceAddress billingAddress,
            @JsonProperty("shipping_address") @Nullable EcommerceAddress shippingAddress,
            @JsonProperty("tracking") @Nullable List<TrackingItem> tracking,
            @JsonProperty("line_items") @Nullable List<EcommerceOrderLineItem> lineItems,
            @JsonProperty("note") @Nullable JsonNullable<String> note,
            @JsonProperty("refunds") @Nullable List<EcommerceOrderRefund> refunds,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.orderNumber = Optional.ofNullable(orderNumber)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.discounts = discounts;
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.shippingCost = Optional.ofNullable(shippingCost)
            .orElse(JsonNullable.undefined());
        this.couponDiscount = Optional.ofNullable(couponDiscount)
            .orElse(JsonNullable.undefined());
        this.totalDiscount = Optional.ofNullable(totalDiscount)
            .orElse(JsonNullable.undefined());
        this.totalTax = Optional.ofNullable(totalTax)
            .orElse(JsonNullable.undefined());
        this.totalAmount = Optional.ofNullable(totalAmount)
            .orElse(JsonNullable.undefined());
        this.refundedAmount = Optional.ofNullable(refundedAmount)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.paymentStatus = Optional.ofNullable(paymentStatus)
            .orElse(JsonNullable.undefined());
        this.fulfillmentStatus = Optional.ofNullable(fulfillmentStatus)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.customer = customer;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.tracking = tracking;
        this.lineItems = lineItems;
        this.note = Optional.ofNullable(note)
            .orElse(JsonNullable.undefined());
        this.refunds = refunds;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceOrder(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * Order number, if any.
     */
    public JsonNullable<String> orderNumber() {
        return this.orderNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public Optional<List<EcommerceDiscount>> discounts() {
        return Optional.ofNullable(this.discounts);
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JsonNullable<String> subTotal() {
        return this.subTotal;
    }

    /**
     * Shipping cost, if any.
     */
    public JsonNullable<String> shippingCost() {
        return this.shippingCost;
    }

    /**
     * Coupon discount, if any.
     */
    public JsonNullable<String> couponDiscount() {
        return this.couponDiscount;
    }

    /**
     * Total discount, if any.
     */
    public JsonNullable<String> totalDiscount() {
        return this.totalDiscount;
    }

    /**
     * Total tax, if any.
     */
    public JsonNullable<String> totalTax() {
        return this.totalTax;
    }

    /**
     * Total amount due.
     */
    public JsonNullable<String> totalAmount() {
        return this.totalAmount;
    }

    /**
     * Refunded amount, if any.
     */
    public JsonNullable<String> refundedAmount() {
        return this.refundedAmount;
    }

    /**
     * Current status of the order.
     */
    public JsonNullable<EcommerceOrderStatus> status() {
        return this.status;
    }

    /**
     * Current payment status of the order.
     */
    public JsonNullable<EcommerceOrderPaymentStatus> paymentStatus() {
        return this.paymentStatus;
    }

    /**
     * Current fulfillment status of the order.
     */
    public JsonNullable<FulfillmentStatus> fulfillmentStatus() {
        return this.fulfillmentStatus;
    }

    /**
     * Payment method used for this order.
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * The customer this entity is linked to.
     */
    public Optional<LinkedEcommerceCustomer> customer() {
        return Optional.ofNullable(this.customer);
    }

    /**
     * An object representing a shipping or billing address.
     */
    public Optional<EcommerceAddress> billingAddress() {
        return Optional.ofNullable(this.billingAddress);
    }

    /**
     * An object representing a shipping or billing address.
     */
    public Optional<EcommerceAddress> shippingAddress() {
        return Optional.ofNullable(this.shippingAddress);
    }

    public Optional<List<TrackingItem>> tracking() {
        return Optional.ofNullable(this.tracking);
    }

    public Optional<List<EcommerceOrderLineItem>> lineItems() {
        return Optional.ofNullable(this.lineItems);
    }

    /**
     * Note for the order.
     */
    public JsonNullable<String> note() {
        return this.note;
    }

    public Optional<List<EcommerceOrderRefund>> refunds() {
        return Optional.ofNullable(this.refunds);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceOrder withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * Order number, if any.
     */
    public EcommerceOrder withOrderNumber(@Nullable String orderNumber) {
        this.orderNumber = JsonNullable.of(orderNumber);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EcommerceOrder withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    public EcommerceOrder withDiscounts(@Nullable List<EcommerceDiscount> discounts) {
        this.discounts = discounts;
        return this;
    }


    /**
     * Sub-total amount, normally before tax.
     */
    public EcommerceOrder withSubTotal(@Nullable String subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * Shipping cost, if any.
     */
    public EcommerceOrder withShippingCost(@Nullable String shippingCost) {
        this.shippingCost = JsonNullable.of(shippingCost);
        return this;
    }


    /**
     * Coupon discount, if any.
     */
    public EcommerceOrder withCouponDiscount(@Nullable String couponDiscount) {
        this.couponDiscount = JsonNullable.of(couponDiscount);
        return this;
    }


    /**
     * Total discount, if any.
     */
    public EcommerceOrder withTotalDiscount(@Nullable String totalDiscount) {
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }


    /**
     * Total tax, if any.
     */
    public EcommerceOrder withTotalTax(@Nullable String totalTax) {
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }


    /**
     * Total amount due.
     */
    public EcommerceOrder withTotalAmount(@Nullable String totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    /**
     * Refunded amount, if any.
     */
    public EcommerceOrder withRefundedAmount(@Nullable String refundedAmount) {
        this.refundedAmount = JsonNullable.of(refundedAmount);
        return this;
    }


    /**
     * Current status of the order.
     */
    public EcommerceOrder withStatus(@Nullable EcommerceOrderStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Current payment status of the order.
     */
    public EcommerceOrder withPaymentStatus(@Nullable EcommerceOrderPaymentStatus paymentStatus) {
        this.paymentStatus = JsonNullable.of(paymentStatus);
        return this;
    }


    /**
     * Current fulfillment status of the order.
     */
    public EcommerceOrder withFulfillmentStatus(@Nullable FulfillmentStatus fulfillmentStatus) {
        this.fulfillmentStatus = JsonNullable.of(fulfillmentStatus);
        return this;
    }


    /**
     * Payment method used for this order.
     */
    public EcommerceOrder withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * The customer this entity is linked to.
     */
    public EcommerceOrder withCustomer(@Nullable LinkedEcommerceCustomer customer) {
        this.customer = customer;
        return this;
    }


    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withBillingAddress(@Nullable EcommerceAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }


    /**
     * An object representing a shipping or billing address.
     */
    public EcommerceOrder withShippingAddress(@Nullable EcommerceAddress shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }


    public EcommerceOrder withTracking(@Nullable List<TrackingItem> tracking) {
        this.tracking = tracking;
        return this;
    }


    public EcommerceOrder withLineItems(@Nullable List<EcommerceOrderLineItem> lineItems) {
        this.lineItems = lineItems;
        return this;
    }


    /**
     * Note for the order.
     */
    public EcommerceOrder withNote(@Nullable String note) {
        this.note = JsonNullable.of(note);
        return this;
    }


    public EcommerceOrder withRefunds(@Nullable List<EcommerceOrderRefund> refunds) {
        this.refunds = refunds;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceOrder withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public EcommerceOrder withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public EcommerceOrder withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceOrder other = (EcommerceOrder) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.orderNumber, other.orderNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.discounts, other.discounts) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.shippingCost, other.shippingCost) &&
            Utils.enhancedDeepEquals(this.couponDiscount, other.couponDiscount) &&
            Utils.enhancedDeepEquals(this.totalDiscount, other.totalDiscount) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.paymentStatus, other.paymentStatus) &&
            Utils.enhancedDeepEquals(this.fulfillmentStatus, other.fulfillmentStatus) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.tracking, other.tracking) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.note, other.note) &&
            Utils.enhancedDeepEquals(this.refunds, other.refunds) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, orderNumber, currency,
            discounts, subTotal, shippingCost,
            couponDiscount, totalDiscount, totalTax,
            totalAmount, refundedAmount, status,
            paymentStatus, fulfillmentStatus, paymentMethod,
            customer, billingAddress, shippingAddress,
            tracking, lineItems, note,
            refunds, customMappings, createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceOrder.class,
                "id", id,
                "orderNumber", orderNumber,
                "currency", currency,
                "discounts", discounts,
                "subTotal", subTotal,
                "shippingCost", shippingCost,
                "couponDiscount", couponDiscount,
                "totalDiscount", totalDiscount,
                "totalTax", totalTax,
                "totalAmount", totalAmount,
                "refundedAmount", refundedAmount,
                "status", status,
                "paymentStatus", paymentStatus,
                "fulfillmentStatus", fulfillmentStatus,
                "paymentMethod", paymentMethod,
                "customer", customer,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "tracking", tracking,
                "lineItems", lineItems,
                "note", note,
                "refunds", refunds,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> orderNumber;

        private JsonNullable<Currency> currency;

        private List<EcommerceDiscount> discounts;

        private JsonNullable<String> subTotal;

        private JsonNullable<String> shippingCost;

        private JsonNullable<String> couponDiscount;

        private JsonNullable<String> totalDiscount;

        private JsonNullable<String> totalTax;

        private JsonNullable<String> totalAmount;

        private JsonNullable<String> refundedAmount;

        private JsonNullable<EcommerceOrderStatus> status;

        private JsonNullable<EcommerceOrderPaymentStatus> paymentStatus;

        private JsonNullable<FulfillmentStatus> fulfillmentStatus;

        private JsonNullable<String> paymentMethod;

        private LinkedEcommerceCustomer customer;

        private EcommerceAddress billingAddress;

        private EcommerceAddress shippingAddress;

        private List<TrackingItem> tracking;

        private List<EcommerceOrderLineItem> lineItems;

        private JsonNullable<String> note;

        private List<EcommerceOrderRefund> refunds;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * Order number, if any.
         */
        public Builder orderNumber(@Nullable String orderNumber) {
            this.orderNumber = JsonNullable.of(orderNumber);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder discounts(@Nullable List<EcommerceDiscount> discounts) {
            this.discounts = discounts;
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(@Nullable String subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Shipping cost, if any.
         */
        public Builder shippingCost(@Nullable String shippingCost) {
            this.shippingCost = JsonNullable.of(shippingCost);
            return this;
        }

        /**
         * Coupon discount, if any.
         */
        public Builder couponDiscount(@Nullable String couponDiscount) {
            this.couponDiscount = JsonNullable.of(couponDiscount);
            return this;
        }

        /**
         * Total discount, if any.
         */
        public Builder totalDiscount(@Nullable String totalDiscount) {
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        /**
         * Total tax, if any.
         */
        public Builder totalTax(@Nullable String totalTax) {
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total amount due.
         */
        public Builder totalAmount(@Nullable String totalAmount) {
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Refunded amount, if any.
         */
        public Builder refundedAmount(@Nullable String refundedAmount) {
            this.refundedAmount = JsonNullable.of(refundedAmount);
            return this;
        }

        /**
         * Current status of the order.
         */
        public Builder status(@Nullable EcommerceOrderStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Current payment status of the order.
         */
        public Builder paymentStatus(@Nullable EcommerceOrderPaymentStatus paymentStatus) {
            this.paymentStatus = JsonNullable.of(paymentStatus);
            return this;
        }

        /**
         * Current fulfillment status of the order.
         */
        public Builder fulfillmentStatus(@Nullable FulfillmentStatus fulfillmentStatus) {
            this.fulfillmentStatus = JsonNullable.of(fulfillmentStatus);
            return this;
        }

        /**
         * Payment method used for this order.
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(@Nullable LinkedEcommerceCustomer customer) {
            this.customer = customer;
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder billingAddress(@Nullable EcommerceAddress billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * An object representing a shipping or billing address.
         */
        public Builder shippingAddress(@Nullable EcommerceAddress shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder tracking(@Nullable List<TrackingItem> tracking) {
            this.tracking = tracking;
            return this;
        }

        public Builder lineItems(@Nullable List<EcommerceOrderLineItem> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Note for the order.
         */
        public Builder note(@Nullable String note) {
            this.note = JsonNullable.of(note);
            return this;
        }

        public Builder refunds(@Nullable List<EcommerceOrderRefund> refunds) {
            this.refunds = refunds;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        public EcommerceOrder build() {
            return new EcommerceOrder(
                id, orderNumber, currency,
                discounts, subTotal, shippingCost,
                couponDiscount, totalDiscount, totalTax,
                totalAmount, refundedAmount, status,
                paymentStatus, fulfillmentStatus, paymentMethod,
                customer, billingAddress, shippingAddress,
                tracking, lineItems, note,
                refunds, customMappings, createdAt,
                updatedAt);
        }

    }
}
