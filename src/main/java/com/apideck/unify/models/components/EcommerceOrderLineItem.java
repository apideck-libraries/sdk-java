/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceOrderLineItem
 * 
 * <p>A single line item of an ecommerce order, representing a product or variant with associated options, quantity, and pricing information.
 */
public class EcommerceOrderLineItem {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * A unique identifier for the product associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private JsonNullable<String> productId;

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variant_id")
    private JsonNullable<String> variantId;

    /**
     * The SKU of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The name of the product or variant associated with the line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The description of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private List<Options> options;

    /**
     * The quantity of the product or variant associated with the line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("quantity")
    private JsonNullable<String> quantity;

    /**
     * The unit price of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<String> unitPrice;

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private JsonNullable<String> taxRate;

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<String> taxAmount;

    /**
     * Whether the line item has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_refunded")
    private JsonNullable<Boolean> isRefunded;

    /**
     * The amount of the line item that has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_amount")
    private JsonNullable<String> refundedAmount;

    /**
     * The quantity of the line item that has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_quantity")
    private JsonNullable<String> refundedQuantity;

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<String> subTotal;

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<String> totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private List<EcommerceDiscount> discounts;

    @JsonCreator
    public EcommerceOrderLineItem(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("product_id") @Nullable JsonNullable<String> productId,
            @JsonProperty("variant_id") @Nullable JsonNullable<String> variantId,
            @JsonProperty("sku") @Nullable JsonNullable<String> sku,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("options") @Nullable List<Options> options,
            @JsonProperty("quantity") @Nullable String quantity,
            @JsonProperty("unit_price") @Nullable JsonNullable<String> unitPrice,
            @JsonProperty("tax_rate") @Nullable JsonNullable<String> taxRate,
            @JsonProperty("tax_amount") @Nullable JsonNullable<String> taxAmount,
            @JsonProperty("is_refunded") @Nullable JsonNullable<Boolean> isRefunded,
            @JsonProperty("refunded_amount") @Nullable JsonNullable<String> refundedAmount,
            @JsonProperty("refunded_quantity") @Nullable JsonNullable<String> refundedQuantity,
            @JsonProperty("sub_total") @Nullable JsonNullable<String> subTotal,
            @JsonProperty("total_amount") @Nullable JsonNullable<String> totalAmount,
            @JsonProperty("discounts") @Nullable List<EcommerceDiscount> discounts) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.productId = Optional.ofNullable(productId)
            .orElse(JsonNullable.undefined());
        this.variantId = Optional.ofNullable(variantId)
            .orElse(JsonNullable.undefined());
        this.sku = Optional.ofNullable(sku)
            .orElse(JsonNullable.undefined());
        this.name = JsonNullable.of(name);
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.options = options;
        this.quantity = JsonNullable.of(quantity);
        this.unitPrice = Optional.ofNullable(unitPrice)
            .orElse(JsonNullable.undefined());
        this.taxRate = Optional.ofNullable(taxRate)
            .orElse(JsonNullable.undefined());
        this.taxAmount = Optional.ofNullable(taxAmount)
            .orElse(JsonNullable.undefined());
        this.isRefunded = Optional.ofNullable(isRefunded)
            .orElse(JsonNullable.undefined());
        this.refundedAmount = Optional.ofNullable(refundedAmount)
            .orElse(JsonNullable.undefined());
        this.refundedQuantity = Optional.ofNullable(refundedQuantity)
            .orElse(JsonNullable.undefined());
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.totalAmount = Optional.ofNullable(totalAmount)
            .orElse(JsonNullable.undefined());
        this.discounts = discounts;
    }
    
    public EcommerceOrderLineItem() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * A unique identifier for the product associated with the line item.
     */
    public JsonNullable<String> productId() {
        return this.productId;
    }

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    public JsonNullable<String> variantId() {
        return this.variantId;
    }

    /**
     * The SKU of the product or variant associated with the line item.
     */
    public JsonNullable<String> sku() {
        return this.sku;
    }

    /**
     * The name of the product or variant associated with the line item.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The description of the product or variant associated with the line item.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    public Optional<List<Options>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The quantity of the product or variant associated with the line item.
     */
    public JsonNullable<String> quantity() {
        return this.quantity;
    }

    /**
     * The unit price of the product or variant associated with the line item.
     */
    public JsonNullable<String> unitPrice() {
        return this.unitPrice;
    }

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    public JsonNullable<String> taxRate() {
        return this.taxRate;
    }

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    public JsonNullable<String> taxAmount() {
        return this.taxAmount;
    }

    /**
     * Whether the line item has been refunded.
     */
    public JsonNullable<Boolean> isRefunded() {
        return this.isRefunded;
    }

    /**
     * The amount of the line item that has been refunded.
     */
    public JsonNullable<String> refundedAmount() {
        return this.refundedAmount;
    }

    /**
     * The quantity of the line item that has been refunded.
     */
    public JsonNullable<String> refundedQuantity() {
        return this.refundedQuantity;
    }

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and discounts.
     */
    public JsonNullable<String> subTotal() {
        return this.subTotal;
    }

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and discounts.
     */
    public JsonNullable<String> totalAmount() {
        return this.totalAmount;
    }

    public Optional<List<EcommerceDiscount>> discounts() {
        return Optional.ofNullable(this.discounts);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceOrderLineItem withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * A unique identifier for the product associated with the line item.
     */
    public EcommerceOrderLineItem withProductId(@Nullable String productId) {
        this.productId = JsonNullable.of(productId);
        return this;
    }


    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    public EcommerceOrderLineItem withVariantId(@Nullable String variantId) {
        this.variantId = JsonNullable.of(variantId);
        return this;
    }


    /**
     * The SKU of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withSku(@Nullable String sku) {
        this.sku = JsonNullable.of(sku);
        return this;
    }


    /**
     * The name of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The description of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    public EcommerceOrderLineItem withOptions(@Nullable List<Options> options) {
        this.options = options;
        return this;
    }


    /**
     * The quantity of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withQuantity(@Nullable String quantity) {
        this.quantity = JsonNullable.of(quantity);
        return this;
    }


    /**
     * The unit price of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withUnitPrice(@Nullable String unitPrice) {
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }


    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxRate(@Nullable String taxRate) {
        this.taxRate = JsonNullable.of(taxRate);
        return this;
    }


    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxAmount(@Nullable String taxAmount) {
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }


    /**
     * Whether the line item has been refunded.
     */
    public EcommerceOrderLineItem withIsRefunded(@Nullable Boolean isRefunded) {
        this.isRefunded = JsonNullable.of(isRefunded);
        return this;
    }


    /**
     * The amount of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedAmount(@Nullable String refundedAmount) {
        this.refundedAmount = JsonNullable.of(refundedAmount);
        return this;
    }


    /**
     * The quantity of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedQuantity(@Nullable String refundedQuantity) {
        this.refundedQuantity = JsonNullable.of(refundedQuantity);
        return this;
    }


    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and discounts.
     */
    public EcommerceOrderLineItem withSubTotal(@Nullable String subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and discounts.
     */
    public EcommerceOrderLineItem withTotalAmount(@Nullable String totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    public EcommerceOrderLineItem withDiscounts(@Nullable List<EcommerceDiscount> discounts) {
        this.discounts = discounts;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceOrderLineItem other = (EcommerceOrderLineItem) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.variantId, other.variantId) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.isRefunded, other.isRefunded) &&
            Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
            Utils.enhancedDeepEquals(this.refundedQuantity, other.refundedQuantity) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.discounts, other.discounts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, productId, variantId,
            sku, name, description,
            options, quantity, unitPrice,
            taxRate, taxAmount, isRefunded,
            refundedAmount, refundedQuantity, subTotal,
            totalAmount, discounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceOrderLineItem.class,
                "id", id,
                "productId", productId,
                "variantId", variantId,
                "sku", sku,
                "name", name,
                "description", description,
                "options", options,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "taxRate", taxRate,
                "taxAmount", taxAmount,
                "isRefunded", isRefunded,
                "refundedAmount", refundedAmount,
                "refundedQuantity", refundedQuantity,
                "subTotal", subTotal,
                "totalAmount", totalAmount,
                "discounts", discounts);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> productId;

        private JsonNullable<String> variantId;

        private JsonNullable<String> sku;

        private String name;

        private JsonNullable<String> description;

        private List<Options> options;

        private String quantity;

        private JsonNullable<String> unitPrice;

        private JsonNullable<String> taxRate;

        private JsonNullable<String> taxAmount;

        private JsonNullable<Boolean> isRefunded;

        private JsonNullable<String> refundedAmount;

        private JsonNullable<String> refundedQuantity;

        private JsonNullable<String> subTotal;

        private JsonNullable<String> totalAmount;

        private List<EcommerceDiscount> discounts;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for the product associated with the line item.
         */
        public Builder productId(@Nullable String productId) {
            this.productId = JsonNullable.of(productId);
            return this;
        }

        /**
         * A unique identifier for the variant of the product associated with the line item, if applicable.
         */
        public Builder variantId(@Nullable String variantId) {
            this.variantId = JsonNullable.of(variantId);
            return this;
        }

        /**
         * The SKU of the product or variant associated with the line item.
         */
        public Builder sku(@Nullable String sku) {
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The name of the product or variant associated with the line item.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * The description of the product or variant associated with the line item.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder options(@Nullable List<Options> options) {
            this.options = options;
            return this;
        }

        /**
         * The quantity of the product or variant associated with the line item.
         */
        public Builder quantity(@Nullable String quantity) {
            this.quantity = quantity;
            return this;
        }

        /**
         * The unit price of the product or variant associated with the line item.
         */
        public Builder unitPrice(@Nullable String unitPrice) {
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        /**
         * The tax rate applied to the product or variant associated with the line item.
         */
        public Builder taxRate(@Nullable String taxRate) {
            this.taxRate = JsonNullable.of(taxRate);
            return this;
        }

        /**
         * The total tax amount applied to the product or variant associated with the line item.
         */
        public Builder taxAmount(@Nullable String taxAmount) {
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Whether the line item has been refunded.
         */
        public Builder isRefunded(@Nullable Boolean isRefunded) {
            this.isRefunded = JsonNullable.of(isRefunded);
            return this;
        }

        /**
         * The amount of the line item that has been refunded.
         */
        public Builder refundedAmount(@Nullable String refundedAmount) {
            this.refundedAmount = JsonNullable.of(refundedAmount);
            return this;
        }

        /**
         * The quantity of the line item that has been refunded.
         */
        public Builder refundedQuantity(@Nullable String refundedQuantity) {
            this.refundedQuantity = JsonNullable.of(refundedQuantity);
            return this;
        }

        /**
         * The sub total for the product(s) or variant associated with the line item, excluding taxes and discounts.
         */
        public Builder subTotal(@Nullable String subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * The total amount for the product(s) or variant associated with the line item, including taxes and discounts.
         */
        public Builder totalAmount(@Nullable String totalAmount) {
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        public Builder discounts(@Nullable List<EcommerceDiscount> discounts) {
            this.discounts = discounts;
            return this;
        }

        public EcommerceOrderLineItem build() {
            return new EcommerceOrderLineItem(
                id, productId, variantId,
                sku, name, description,
                options, quantity, unitPrice,
                taxRate, taxAmount, isRefunded,
                refundedAmount, refundedQuantity, subTotal,
                totalAmount, discounts);
        }

    }
}
