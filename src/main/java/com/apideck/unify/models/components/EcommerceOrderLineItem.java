/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EcommerceOrderLineItem
 * 
 * <p>A single line item of an ecommerce order, representing a product or variant with associated options,
 * quantity, and pricing information.
 */
public class EcommerceOrderLineItem {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * A unique identifier for the product associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_id")
    private JsonNullable<String> productId;

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variant_id")
    private JsonNullable<String> variantId;

    /**
     * The SKU of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The name of the product or variant associated with the line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<Options>> options;

    /**
     * The quantity of the product or variant associated with the line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("quantity")
    private Optional<String> quantity;

    /**
     * The unit price of the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<String> unitPrice;

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private JsonNullable<String> taxRate;

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<String> taxAmount;

    /**
     * Whether the line item has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_refunded")
    private JsonNullable<Boolean> isRefunded;

    /**
     * The amount of the line item that has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_amount")
    private JsonNullable<String> refundedAmount;

    /**
     * The quantity of the line item that has been refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_quantity")
    private JsonNullable<String> refundedQuantity;

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and
     * discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<String> subTotal;

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and
     * discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<String> totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private Optional<? extends List<EcommerceDiscount>> discounts;

    @JsonCreator
    public EcommerceOrderLineItem(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("product_id") JsonNullable<String> productId,
            @JsonProperty("variant_id") JsonNullable<String> variantId,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("options") Optional<? extends List<Options>> options,
            @JsonProperty("quantity") Optional<String> quantity,
            @JsonProperty("unit_price") JsonNullable<String> unitPrice,
            @JsonProperty("tax_rate") JsonNullable<String> taxRate,
            @JsonProperty("tax_amount") JsonNullable<String> taxAmount,
            @JsonProperty("is_refunded") JsonNullable<Boolean> isRefunded,
            @JsonProperty("refunded_amount") JsonNullable<String> refundedAmount,
            @JsonProperty("refunded_quantity") JsonNullable<String> refundedQuantity,
            @JsonProperty("sub_total") JsonNullable<String> subTotal,
            @JsonProperty("total_amount") JsonNullable<String> totalAmount,
            @JsonProperty("discounts") Optional<? extends List<EcommerceDiscount>> discounts) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(productId, "productId");
        Utils.checkNotNull(variantId, "variantId");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(isRefunded, "isRefunded");
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        Utils.checkNotNull(refundedQuantity, "refundedQuantity");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(discounts, "discounts");
        this.id = id;
        this.productId = productId;
        this.variantId = variantId;
        this.sku = sku;
        this.name = name;
        this.description = description;
        this.options = options;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.taxRate = taxRate;
        this.taxAmount = taxAmount;
        this.isRefunded = isRefunded;
        this.refundedAmount = refundedAmount;
        this.refundedQuantity = refundedQuantity;
        this.subTotal = subTotal;
        this.totalAmount = totalAmount;
        this.discounts = discounts;
    }
    
    public EcommerceOrderLineItem() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * A unique identifier for the product associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> productId() {
        return productId;
    }

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    @JsonIgnore
    public JsonNullable<String> variantId() {
        return variantId;
    }

    /**
     * The SKU of the product or variant associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * The name of the product or variant associated with the line item.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the product or variant associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Options>> options() {
        return (Optional<List<Options>>) options;
    }

    /**
     * The quantity of the product or variant associated with the line item.
     */
    @JsonIgnore
    public Optional<String> quantity() {
        return quantity;
    }

    /**
     * The unit price of the product or variant associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> unitPrice() {
        return unitPrice;
    }

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> taxRate() {
        return taxRate;
    }

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    @JsonIgnore
    public JsonNullable<String> taxAmount() {
        return taxAmount;
    }

    /**
     * Whether the line item has been refunded.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isRefunded() {
        return isRefunded;
    }

    /**
     * The amount of the line item that has been refunded.
     */
    @JsonIgnore
    public JsonNullable<String> refundedAmount() {
        return refundedAmount;
    }

    /**
     * The quantity of the line item that has been refunded.
     */
    @JsonIgnore
    public JsonNullable<String> refundedQuantity() {
        return refundedQuantity;
    }

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and
     * discounts.
     */
    @JsonIgnore
    public JsonNullable<String> subTotal() {
        return subTotal;
    }

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and
     * discounts.
     */
    @JsonIgnore
    public JsonNullable<String> totalAmount() {
        return totalAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceDiscount>> discounts() {
        return (Optional<List<EcommerceDiscount>>) discounts;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceOrderLineItem withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public EcommerceOrderLineItem withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A unique identifier for the product associated with the line item.
     */
    public EcommerceOrderLineItem withProductId(String productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = JsonNullable.of(productId);
        return this;
    }

    /**
     * A unique identifier for the product associated with the line item.
     */
    public EcommerceOrderLineItem withProductId(JsonNullable<String> productId) {
        Utils.checkNotNull(productId, "productId");
        this.productId = productId;
        return this;
    }

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    public EcommerceOrderLineItem withVariantId(String variantId) {
        Utils.checkNotNull(variantId, "variantId");
        this.variantId = JsonNullable.of(variantId);
        return this;
    }

    /**
     * A unique identifier for the variant of the product associated with the line item, if applicable.
     */
    public EcommerceOrderLineItem withVariantId(JsonNullable<String> variantId) {
        Utils.checkNotNull(variantId, "variantId");
        this.variantId = variantId;
        return this;
    }

    /**
     * The SKU of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The SKU of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The name of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public EcommerceOrderLineItem withOptions(List<Options> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }


    public EcommerceOrderLineItem withOptions(Optional<? extends List<Options>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    /**
     * The quantity of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withQuantity(String quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * The quantity of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withQuantity(Optional<String> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The unit price of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withUnitPrice(String unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }

    /**
     * The unit price of the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withUnitPrice(JsonNullable<String> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxRate(String taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = JsonNullable.of(taxRate);
        return this;
    }

    /**
     * The tax rate applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxRate(JsonNullable<String> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxAmount(String taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * The total tax amount applied to the product or variant associated with the line item.
     */
    public EcommerceOrderLineItem withTaxAmount(JsonNullable<String> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Whether the line item has been refunded.
     */
    public EcommerceOrderLineItem withIsRefunded(boolean isRefunded) {
        Utils.checkNotNull(isRefunded, "isRefunded");
        this.isRefunded = JsonNullable.of(isRefunded);
        return this;
    }

    /**
     * Whether the line item has been refunded.
     */
    public EcommerceOrderLineItem withIsRefunded(JsonNullable<Boolean> isRefunded) {
        Utils.checkNotNull(isRefunded, "isRefunded");
        this.isRefunded = isRefunded;
        return this;
    }

    /**
     * The amount of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedAmount(String refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = JsonNullable.of(refundedAmount);
        return this;
    }

    /**
     * The amount of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedAmount(JsonNullable<String> refundedAmount) {
        Utils.checkNotNull(refundedAmount, "refundedAmount");
        this.refundedAmount = refundedAmount;
        return this;
    }

    /**
     * The quantity of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedQuantity(String refundedQuantity) {
        Utils.checkNotNull(refundedQuantity, "refundedQuantity");
        this.refundedQuantity = JsonNullable.of(refundedQuantity);
        return this;
    }

    /**
     * The quantity of the line item that has been refunded.
     */
    public EcommerceOrderLineItem withRefundedQuantity(JsonNullable<String> refundedQuantity) {
        Utils.checkNotNull(refundedQuantity, "refundedQuantity");
        this.refundedQuantity = refundedQuantity;
        return this;
    }

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and
     * discounts.
     */
    public EcommerceOrderLineItem withSubTotal(String subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * The sub total for the product(s) or variant associated with the line item, excluding taxes and
     * discounts.
     */
    public EcommerceOrderLineItem withSubTotal(JsonNullable<String> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and
     * discounts.
     */
    public EcommerceOrderLineItem withTotalAmount(String totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * The total amount for the product(s) or variant associated with the line item, including taxes and
     * discounts.
     */
    public EcommerceOrderLineItem withTotalAmount(JsonNullable<String> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public EcommerceOrderLineItem withDiscounts(List<EcommerceDiscount> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = Optional.ofNullable(discounts);
        return this;
    }


    public EcommerceOrderLineItem withDiscounts(Optional<? extends List<EcommerceDiscount>> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = discounts;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceOrderLineItem other = (EcommerceOrderLineItem) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.productId, other.productId) &&
            Utils.enhancedDeepEquals(this.variantId, other.variantId) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.isRefunded, other.isRefunded) &&
            Utils.enhancedDeepEquals(this.refundedAmount, other.refundedAmount) &&
            Utils.enhancedDeepEquals(this.refundedQuantity, other.refundedQuantity) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.discounts, other.discounts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, productId, variantId,
            sku, name, description,
            options, quantity, unitPrice,
            taxRate, taxAmount, isRefunded,
            refundedAmount, refundedQuantity, subTotal,
            totalAmount, discounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceOrderLineItem.class,
                "id", id,
                "productId", productId,
                "variantId", variantId,
                "sku", sku,
                "name", name,
                "description", description,
                "options", options,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "taxRate", taxRate,
                "taxAmount", taxAmount,
                "isRefunded", isRefunded,
                "refundedAmount", refundedAmount,
                "refundedQuantity", refundedQuantity,
                "subTotal", subTotal,
                "totalAmount", totalAmount,
                "discounts", discounts);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<String> productId = JsonNullable.undefined();

        private JsonNullable<String> variantId = JsonNullable.undefined();

        private JsonNullable<String> sku = JsonNullable.undefined();

        private Optional<String> name = Optional.empty();

        private JsonNullable<String> description = JsonNullable.undefined();

        private Optional<? extends List<Options>> options = Optional.empty();

        private Optional<String> quantity = Optional.empty();

        private JsonNullable<String> unitPrice = JsonNullable.undefined();

        private JsonNullable<String> taxRate = JsonNullable.undefined();

        private JsonNullable<String> taxAmount = JsonNullable.undefined();

        private JsonNullable<Boolean> isRefunded = JsonNullable.undefined();

        private JsonNullable<String> refundedAmount = JsonNullable.undefined();

        private JsonNullable<String> refundedQuantity = JsonNullable.undefined();

        private JsonNullable<String> subTotal = JsonNullable.undefined();

        private JsonNullable<String> totalAmount = JsonNullable.undefined();

        private Optional<? extends List<EcommerceDiscount>> discounts = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A unique identifier for the product associated with the line item.
         */
        public Builder productId(String productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = JsonNullable.of(productId);
            return this;
        }

        /**
         * A unique identifier for the product associated with the line item.
         */
        public Builder productId(JsonNullable<String> productId) {
            Utils.checkNotNull(productId, "productId");
            this.productId = productId;
            return this;
        }


        /**
         * A unique identifier for the variant of the product associated with the line item, if applicable.
         */
        public Builder variantId(String variantId) {
            Utils.checkNotNull(variantId, "variantId");
            this.variantId = JsonNullable.of(variantId);
            return this;
        }

        /**
         * A unique identifier for the variant of the product associated with the line item, if applicable.
         */
        public Builder variantId(JsonNullable<String> variantId) {
            Utils.checkNotNull(variantId, "variantId");
            this.variantId = variantId;
            return this;
        }


        /**
         * The SKU of the product or variant associated with the line item.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The SKU of the product or variant associated with the line item.
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        /**
         * The name of the product or variant associated with the line item.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the product or variant associated with the line item.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The description of the product or variant associated with the line item.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the product or variant associated with the line item.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder options(List<Options> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends List<Options>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }


        /**
         * The quantity of the product or variant associated with the line item.
         */
        public Builder quantity(String quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The quantity of the product or variant associated with the line item.
         */
        public Builder quantity(Optional<String> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The unit price of the product or variant associated with the line item.
         */
        public Builder unitPrice(String unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        /**
         * The unit price of the product or variant associated with the line item.
         */
        public Builder unitPrice(JsonNullable<String> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }


        /**
         * The tax rate applied to the product or variant associated with the line item.
         */
        public Builder taxRate(String taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = JsonNullable.of(taxRate);
            return this;
        }

        /**
         * The tax rate applied to the product or variant associated with the line item.
         */
        public Builder taxRate(JsonNullable<String> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        /**
         * The total tax amount applied to the product or variant associated with the line item.
         */
        public Builder taxAmount(String taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * The total tax amount applied to the product or variant associated with the line item.
         */
        public Builder taxAmount(JsonNullable<String> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        /**
         * Whether the line item has been refunded.
         */
        public Builder isRefunded(boolean isRefunded) {
            Utils.checkNotNull(isRefunded, "isRefunded");
            this.isRefunded = JsonNullable.of(isRefunded);
            return this;
        }

        /**
         * Whether the line item has been refunded.
         */
        public Builder isRefunded(JsonNullable<Boolean> isRefunded) {
            Utils.checkNotNull(isRefunded, "isRefunded");
            this.isRefunded = isRefunded;
            return this;
        }


        /**
         * The amount of the line item that has been refunded.
         */
        public Builder refundedAmount(String refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = JsonNullable.of(refundedAmount);
            return this;
        }

        /**
         * The amount of the line item that has been refunded.
         */
        public Builder refundedAmount(JsonNullable<String> refundedAmount) {
            Utils.checkNotNull(refundedAmount, "refundedAmount");
            this.refundedAmount = refundedAmount;
            return this;
        }


        /**
         * The quantity of the line item that has been refunded.
         */
        public Builder refundedQuantity(String refundedQuantity) {
            Utils.checkNotNull(refundedQuantity, "refundedQuantity");
            this.refundedQuantity = JsonNullable.of(refundedQuantity);
            return this;
        }

        /**
         * The quantity of the line item that has been refunded.
         */
        public Builder refundedQuantity(JsonNullable<String> refundedQuantity) {
            Utils.checkNotNull(refundedQuantity, "refundedQuantity");
            this.refundedQuantity = refundedQuantity;
            return this;
        }


        /**
         * The sub total for the product(s) or variant associated with the line item, excluding taxes and
         * discounts.
         */
        public Builder subTotal(String subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * The sub total for the product(s) or variant associated with the line item, excluding taxes and
         * discounts.
         */
        public Builder subTotal(JsonNullable<String> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }


        /**
         * The total amount for the product(s) or variant associated with the line item, including taxes and
         * discounts.
         */
        public Builder totalAmount(String totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * The total amount for the product(s) or variant associated with the line item, including taxes and
         * discounts.
         */
        public Builder totalAmount(JsonNullable<String> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        public Builder discounts(List<EcommerceDiscount> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = Optional.ofNullable(discounts);
            return this;
        }

        public Builder discounts(Optional<? extends List<EcommerceDiscount>> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = discounts;
            return this;
        }

        public EcommerceOrderLineItem build() {

            return new EcommerceOrderLineItem(
                id, productId, variantId,
                sku, name, description,
                options, quantity, unitPrice,
                taxRate, taxAmount, isRefunded,
                refundedAmount, refundedQuantity, subTotal,
                totalAmount, discounts);
        }

    }
}
