/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class EcommerceOrdersFilter {
    /**
     * Customer email address to filter on
     */
    @SpeakeasyMetadata("queryParam:name=email")
    private String email;

    /**
     * Customer id to filter on
     */
    @SpeakeasyMetadata("queryParam:name=customer_id")
    private String customerId;

    /**
     * Minimum date the order was last modified
     */
    @SpeakeasyMetadata("queryParam:name=updated_since")
    private String updatedSince;

    /**
     * Minimum date the order was created
     */
    @SpeakeasyMetadata("queryParam:name=created_since")
    private String createdSince;

    @JsonCreator
    public EcommerceOrdersFilter(
            @Nullable String email,
            @Nullable String customerId,
            @Nullable String updatedSince,
            @Nullable String createdSince) {
        this.email = email;
        this.customerId = customerId;
        this.updatedSince = updatedSince;
        this.createdSince = createdSince;
    }
    
    public EcommerceOrdersFilter() {
        this(null, null, null,
            null);
    }

    /**
     * Customer email address to filter on
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Customer id to filter on
     */
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * Minimum date the order was last modified
     */
    public Optional<String> updatedSince() {
        return Optional.ofNullable(this.updatedSince);
    }

    /**
     * Minimum date the order was created
     */
    public Optional<String> createdSince() {
        return Optional.ofNullable(this.createdSince);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Customer email address to filter on
     */
    public EcommerceOrdersFilter withEmail(@Nullable String email) {
        this.email = email;
        return this;
    }


    /**
     * Customer id to filter on
     */
    public EcommerceOrdersFilter withCustomerId(@Nullable String customerId) {
        this.customerId = customerId;
        return this;
    }


    /**
     * Minimum date the order was last modified
     */
    public EcommerceOrdersFilter withUpdatedSince(@Nullable String updatedSince) {
        this.updatedSince = updatedSince;
        return this;
    }


    /**
     * Minimum date the order was created
     */
    public EcommerceOrdersFilter withCreatedSince(@Nullable String createdSince) {
        this.createdSince = createdSince;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceOrdersFilter other = (EcommerceOrdersFilter) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.createdSince, other.createdSince);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email, customerId, updatedSince,
            createdSince);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceOrdersFilter.class,
                "email", email,
                "customerId", customerId,
                "updatedSince", updatedSince,
                "createdSince", createdSince);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String email;

        private String customerId;

        private String updatedSince;

        private String createdSince;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Customer email address to filter on
         */
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }

        /**
         * Customer id to filter on
         */
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * Minimum date the order was last modified
         */
        public Builder updatedSince(@Nullable String updatedSince) {
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Minimum date the order was created
         */
        public Builder createdSince(@Nullable String createdSince) {
            this.createdSince = createdSince;
            return this;
        }

        public EcommerceOrdersFilter build() {
            return new EcommerceOrdersFilter(
                email, customerId, updatedSince,
                createdSince);
        }

    }
}
