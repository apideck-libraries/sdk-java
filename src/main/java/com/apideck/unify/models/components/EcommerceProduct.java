/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EcommerceProduct {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the product as it should be displayed to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A detailed description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current status of the product (active or archived).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<ProductStatus> status;

    /**
     * The price of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private JsonNullable<String> price;

    /**
     * The stock keeping unit of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The quantity of the product in stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_quantity")
    private JsonNullable<String> inventoryQuantity;

    /**
     * An array of image URLs for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private JsonNullable<List<Images>> images;

    /**
     * The weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private JsonNullable<String> weight;

    /**
     * The unit of measurement for the weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private JsonNullable<String> weightUnit;

    /**
     * An array of options for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private List<EcommerceProductOptions> options;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    private List<Variants> variants;

    /**
     * An array of tags for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private List<String> tags;

    /**
     * An array of categories for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private List<EcommerceProductCategories> categories;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public EcommerceProduct(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("status") @Nullable JsonNullable<ProductStatus> status,
            @JsonProperty("price") @Nullable JsonNullable<String> price,
            @JsonProperty("sku") @Nullable JsonNullable<String> sku,
            @JsonProperty("inventory_quantity") @Nullable JsonNullable<String> inventoryQuantity,
            @JsonProperty("images") @Nullable JsonNullable<List<Images>> images,
            @JsonProperty("weight") @Nullable JsonNullable<String> weight,
            @JsonProperty("weight_unit") @Nullable JsonNullable<String> weightUnit,
            @JsonProperty("options") @Nullable List<EcommerceProductOptions> options,
            @JsonProperty("variants") @Nullable List<Variants> variants,
            @JsonProperty("tags") @Nullable List<String> tags,
            @JsonProperty("categories") @Nullable List<EcommerceProductCategories> categories,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.price = Optional.ofNullable(price)
            .orElse(JsonNullable.undefined());
        this.sku = Optional.ofNullable(sku)
            .orElse(JsonNullable.undefined());
        this.inventoryQuantity = Optional.ofNullable(inventoryQuantity)
            .orElse(JsonNullable.undefined());
        this.images = Optional.ofNullable(images)
            .orElse(JsonNullable.undefined());
        this.weight = Optional.ofNullable(weight)
            .orElse(JsonNullable.undefined());
        this.weightUnit = Optional.ofNullable(weightUnit)
            .orElse(JsonNullable.undefined());
        this.options = options;
        this.variants = variants;
        this.tags = tags;
        this.categories = categories;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceProduct(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The name of the product as it should be displayed to customers.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * A detailed description of the product.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The current status of the product (active or archived).
     */
    public JsonNullable<ProductStatus> status() {
        return this.status;
    }

    /**
     * The price of the product.
     */
    public JsonNullable<String> price() {
        return this.price;
    }

    /**
     * The stock keeping unit of the product.
     */
    public JsonNullable<String> sku() {
        return this.sku;
    }

    /**
     * The quantity of the product in stock.
     */
    public JsonNullable<String> inventoryQuantity() {
        return this.inventoryQuantity;
    }

    /**
     * An array of image URLs for the product.
     */
    public JsonNullable<List<Images>> images() {
        return this.images;
    }

    /**
     * The weight of the product.
     */
    public JsonNullable<String> weight() {
        return this.weight;
    }

    /**
     * The unit of measurement for the weight of the product.
     */
    public JsonNullable<String> weightUnit() {
        return this.weightUnit;
    }

    /**
     * An array of options for the product.
     */
    public Optional<List<EcommerceProductOptions>> options() {
        return Optional.ofNullable(this.options);
    }

    public Optional<List<Variants>> variants() {
        return Optional.ofNullable(this.variants);
    }

    /**
     * An array of tags for the product, used for organization and searching.
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * An array of categories for the product, used for organization and searching.
     */
    public Optional<List<EcommerceProductCategories>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceProduct withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The name of the product as it should be displayed to customers.
     */
    public EcommerceProduct withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * A detailed description of the product.
     */
    public EcommerceProduct withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The current status of the product (active or archived).
     */
    public EcommerceProduct withStatus(@Nullable ProductStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * The price of the product.
     */
    public EcommerceProduct withPrice(@Nullable String price) {
        this.price = JsonNullable.of(price);
        return this;
    }


    /**
     * The stock keeping unit of the product.
     */
    public EcommerceProduct withSku(@Nullable String sku) {
        this.sku = JsonNullable.of(sku);
        return this;
    }


    /**
     * The quantity of the product in stock.
     */
    public EcommerceProduct withInventoryQuantity(@Nullable String inventoryQuantity) {
        this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
        return this;
    }


    /**
     * An array of image URLs for the product.
     */
    public EcommerceProduct withImages(@Nullable List<Images> images) {
        this.images = JsonNullable.of(images);
        return this;
    }


    /**
     * The weight of the product.
     */
    public EcommerceProduct withWeight(@Nullable String weight) {
        this.weight = JsonNullable.of(weight);
        return this;
    }


    /**
     * The unit of measurement for the weight of the product.
     */
    public EcommerceProduct withWeightUnit(@Nullable String weightUnit) {
        this.weightUnit = JsonNullable.of(weightUnit);
        return this;
    }


    /**
     * An array of options for the product.
     */
    public EcommerceProduct withOptions(@Nullable List<EcommerceProductOptions> options) {
        this.options = options;
        return this;
    }


    public EcommerceProduct withVariants(@Nullable List<Variants> variants) {
        this.variants = variants;
        return this;
    }


    /**
     * An array of tags for the product, used for organization and searching.
     */
    public EcommerceProduct withTags(@Nullable List<String> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * An array of categories for the product, used for organization and searching.
     */
    public EcommerceProduct withCategories(@Nullable List<EcommerceProductCategories> categories) {
        this.categories = categories;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceProduct withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public EcommerceProduct withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public EcommerceProduct withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceProduct other = (EcommerceProduct) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.price, other.price) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.inventoryQuantity, other.inventoryQuantity) &&
            Utils.enhancedDeepEquals(this.images, other.images) &&
            Utils.enhancedDeepEquals(this.weight, other.weight) &&
            Utils.enhancedDeepEquals(this.weightUnit, other.weightUnit) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.variants, other.variants) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            status, price, sku,
            inventoryQuantity, images, weight,
            weightUnit, options, variants,
            tags, categories, customMappings,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceProduct.class,
                "id", id,
                "name", name,
                "description", description,
                "status", status,
                "price", price,
                "sku", sku,
                "inventoryQuantity", inventoryQuantity,
                "images", images,
                "weight", weight,
                "weightUnit", weightUnit,
                "options", options,
                "variants", variants,
                "tags", tags,
                "categories", categories,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> description;

        private JsonNullable<ProductStatus> status;

        private JsonNullable<String> price;

        private JsonNullable<String> sku;

        private JsonNullable<String> inventoryQuantity;

        private JsonNullable<List<Images>> images;

        private JsonNullable<String> weight;

        private JsonNullable<String> weightUnit;

        private List<EcommerceProductOptions> options;

        private List<Variants> variants;

        private List<String> tags;

        private List<EcommerceProductCategories> categories;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The name of the product as it should be displayed to customers.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * A detailed description of the product.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The current status of the product (active or archived).
         */
        public Builder status(@Nullable ProductStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The price of the product.
         */
        public Builder price(@Nullable String price) {
            this.price = JsonNullable.of(price);
            return this;
        }

        /**
         * The stock keeping unit of the product.
         */
        public Builder sku(@Nullable String sku) {
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The quantity of the product in stock.
         */
        public Builder inventoryQuantity(@Nullable String inventoryQuantity) {
            this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
            return this;
        }

        /**
         * An array of image URLs for the product.
         */
        public Builder images(@Nullable List<Images> images) {
            this.images = JsonNullable.of(images);
            return this;
        }

        /**
         * The weight of the product.
         */
        public Builder weight(@Nullable String weight) {
            this.weight = JsonNullable.of(weight);
            return this;
        }

        /**
         * The unit of measurement for the weight of the product.
         */
        public Builder weightUnit(@Nullable String weightUnit) {
            this.weightUnit = JsonNullable.of(weightUnit);
            return this;
        }

        /**
         * An array of options for the product.
         */
        public Builder options(@Nullable List<EcommerceProductOptions> options) {
            this.options = options;
            return this;
        }

        public Builder variants(@Nullable List<Variants> variants) {
            this.variants = variants;
            return this;
        }

        /**
         * An array of tags for the product, used for organization and searching.
         */
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * An array of categories for the product, used for organization and searching.
         */
        public Builder categories(@Nullable List<EcommerceProductCategories> categories) {
            this.categories = categories;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        public EcommerceProduct build() {
            return new EcommerceProduct(
                id, name, description,
                status, price, sku,
                inventoryQuantity, images, weight,
                weightUnit, options, variants,
                tags, categories, customMappings,
                createdAt, updatedAt);
        }

    }
}
