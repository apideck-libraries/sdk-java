/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class EcommerceProduct {

    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the product as it should be displayed to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A detailed description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current status of the product (active or archived).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends ProductStatus> status;

    /**
     * The price of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private JsonNullable<String> price;

    /**
     * The stock keeping unit of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The quantity of the product in stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_quantity")
    private JsonNullable<String> inventoryQuantity;

    /**
     * An array of image URLs for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private JsonNullable<? extends List<Images>> images;

    /**
     * The weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private JsonNullable<String> weight;

    /**
     * The unit of measurement for the weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private JsonNullable<String> weightUnit;

    /**
     * An array of options for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<EcommerceProductOptions>> options;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    private Optional<? extends List<Variants>> variants;

    /**
     * An array of tags for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    /**
     * An array of categories for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<EcommerceProductCategories>> categories;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public EcommerceProduct(
            @JsonProperty("id") String id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("status") JsonNullable<? extends ProductStatus> status,
            @JsonProperty("price") JsonNullable<String> price,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("inventory_quantity") JsonNullable<String> inventoryQuantity,
            @JsonProperty("images") JsonNullable<? extends List<Images>> images,
            @JsonProperty("weight") JsonNullable<String> weight,
            @JsonProperty("weight_unit") JsonNullable<String> weightUnit,
            @JsonProperty("options") Optional<? extends List<EcommerceProductOptions>> options,
            @JsonProperty("variants") Optional<? extends List<Variants>> variants,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("categories") Optional<? extends List<EcommerceProductCategories>> categories,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(price, "price");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        Utils.checkNotNull(images, "images");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(weightUnit, "weightUnit");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(variants, "variants");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.name = name;
        this.description = description;
        this.status = status;
        this.price = price;
        this.sku = sku;
        this.inventoryQuantity = inventoryQuantity;
        this.images = images;
        this.weight = weight;
        this.weightUnit = weightUnit;
        this.options = options;
        this.variants = variants;
        this.tags = tags;
        this.categories = categories;
        this.customMappings = customMappings;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public EcommerceProduct(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The name of the product as it should be displayed to customers.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * A detailed description of the product.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The current status of the product (active or archived).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProductStatus> status() {
        return (JsonNullable<ProductStatus>) status;
    }

    /**
     * The price of the product.
     */
    @JsonIgnore
    public JsonNullable<String> price() {
        return price;
    }

    /**
     * The stock keeping unit of the product.
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * The quantity of the product in stock.
     */
    @JsonIgnore
    public JsonNullable<String> inventoryQuantity() {
        return inventoryQuantity;
    }

    /**
     * An array of image URLs for the product.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Images>> images() {
        return (JsonNullable<List<Images>>) images;
    }

    /**
     * The weight of the product.
     */
    @JsonIgnore
    public JsonNullable<String> weight() {
        return weight;
    }

    /**
     * The unit of measurement for the weight of the product.
     */
    @JsonIgnore
    public JsonNullable<String> weightUnit() {
        return weightUnit;
    }

    /**
     * An array of options for the product.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceProductOptions>> options() {
        return (Optional<List<EcommerceProductOptions>>) options;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Variants>> variants() {
        return (Optional<List<Variants>>) variants;
    }

    /**
     * An array of tags for the product, used for organization and searching.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    /**
     * An array of categories for the product, used for organization and searching.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceProductCategories>> categories() {
        return (Optional<List<EcommerceProductCategories>>) categories;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for an object.
     */
    public EcommerceProduct withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the product as it should be displayed to customers.
     */
    public EcommerceProduct withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the product as it should be displayed to customers.
     */
    public EcommerceProduct withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A detailed description of the product.
     */
    public EcommerceProduct withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A detailed description of the product.
     */
    public EcommerceProduct withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The current status of the product (active or archived).
     */
    public EcommerceProduct withStatus(ProductStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The current status of the product (active or archived).
     */
    public EcommerceProduct withStatus(JsonNullable<? extends ProductStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The price of the product.
     */
    public EcommerceProduct withPrice(String price) {
        Utils.checkNotNull(price, "price");
        this.price = JsonNullable.of(price);
        return this;
    }

    /**
     * The price of the product.
     */
    public EcommerceProduct withPrice(JsonNullable<String> price) {
        Utils.checkNotNull(price, "price");
        this.price = price;
        return this;
    }

    /**
     * The stock keeping unit of the product.
     */
    public EcommerceProduct withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The stock keeping unit of the product.
     */
    public EcommerceProduct withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The quantity of the product in stock.
     */
    public EcommerceProduct withInventoryQuantity(String inventoryQuantity) {
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
        return this;
    }

    /**
     * The quantity of the product in stock.
     */
    public EcommerceProduct withInventoryQuantity(JsonNullable<String> inventoryQuantity) {
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        this.inventoryQuantity = inventoryQuantity;
        return this;
    }

    /**
     * An array of image URLs for the product.
     */
    public EcommerceProduct withImages(List<Images> images) {
        Utils.checkNotNull(images, "images");
        this.images = JsonNullable.of(images);
        return this;
    }

    /**
     * An array of image URLs for the product.
     */
    public EcommerceProduct withImages(JsonNullable<? extends List<Images>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    /**
     * The weight of the product.
     */
    public EcommerceProduct withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = JsonNullable.of(weight);
        return this;
    }

    /**
     * The weight of the product.
     */
    public EcommerceProduct withWeight(JsonNullable<String> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * The unit of measurement for the weight of the product.
     */
    public EcommerceProduct withWeightUnit(String weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = JsonNullable.of(weightUnit);
        return this;
    }

    /**
     * The unit of measurement for the weight of the product.
     */
    public EcommerceProduct withWeightUnit(JsonNullable<String> weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = weightUnit;
        return this;
    }

    /**
     * An array of options for the product.
     */
    public EcommerceProduct withOptions(List<EcommerceProductOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * An array of options for the product.
     */
    public EcommerceProduct withOptions(Optional<? extends List<EcommerceProductOptions>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public EcommerceProduct withVariants(List<Variants> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = Optional.ofNullable(variants);
        return this;
    }

    public EcommerceProduct withVariants(Optional<? extends List<Variants>> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = variants;
        return this;
    }

    /**
     * An array of tags for the product, used for organization and searching.
     */
    public EcommerceProduct withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * An array of tags for the product, used for organization and searching.
     */
    public EcommerceProduct withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * An array of categories for the product, used for organization and searching.
     */
    public EcommerceProduct withCategories(List<EcommerceProductCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    /**
     * An array of categories for the product, used for organization and searching.
     */
    public EcommerceProduct withCategories(Optional<? extends List<EcommerceProductCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceProduct withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public EcommerceProduct withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public EcommerceProduct withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public EcommerceProduct withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public EcommerceProduct withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public EcommerceProduct withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceProduct other = (EcommerceProduct) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.price, other.price) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.inventoryQuantity, other.inventoryQuantity) &&
            Objects.deepEquals(this.images, other.images) &&
            Objects.deepEquals(this.weight, other.weight) &&
            Objects.deepEquals(this.weightUnit, other.weightUnit) &&
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.variants, other.variants) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            description,
            status,
            price,
            sku,
            inventoryQuantity,
            images,
            weight,
            weightUnit,
            options,
            variants,
            tags,
            categories,
            customMappings,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceProduct.class,
                "id", id,
                "name", name,
                "description", description,
                "status", status,
                "price", price,
                "sku", sku,
                "inventoryQuantity", inventoryQuantity,
                "images", images,
                "weight", weight,
                "weightUnit", weightUnit,
                "options", options,
                "variants", variants,
                "tags", tags,
                "categories", categories,
                "customMappings", customMappings,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends ProductStatus> status = JsonNullable.undefined();
 
        private JsonNullable<String> price = JsonNullable.undefined();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private JsonNullable<String> inventoryQuantity = JsonNullable.undefined();
 
        private JsonNullable<? extends List<Images>> images = JsonNullable.undefined();
 
        private JsonNullable<String> weight = JsonNullable.undefined();
 
        private JsonNullable<String> weightUnit = JsonNullable.undefined();
 
        private Optional<? extends List<EcommerceProductOptions>> options = Optional.empty();
 
        private Optional<? extends List<Variants>> variants = Optional.empty();
 
        private Optional<? extends List<String>> tags = Optional.empty();
 
        private Optional<? extends List<EcommerceProductCategories>> categories = Optional.empty();
 
        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the product as it should be displayed to customers.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the product as it should be displayed to customers.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A detailed description of the product.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A detailed description of the product.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The current status of the product (active or archived).
         */
        public Builder status(ProductStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The current status of the product (active or archived).
         */
        public Builder status(JsonNullable<? extends ProductStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The price of the product.
         */
        public Builder price(String price) {
            Utils.checkNotNull(price, "price");
            this.price = JsonNullable.of(price);
            return this;
        }

        /**
         * The price of the product.
         */
        public Builder price(JsonNullable<String> price) {
            Utils.checkNotNull(price, "price");
            this.price = price;
            return this;
        }

        /**
         * The stock keeping unit of the product.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The stock keeping unit of the product.
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * The quantity of the product in stock.
         */
        public Builder inventoryQuantity(String inventoryQuantity) {
            Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
            this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
            return this;
        }

        /**
         * The quantity of the product in stock.
         */
        public Builder inventoryQuantity(JsonNullable<String> inventoryQuantity) {
            Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
            this.inventoryQuantity = inventoryQuantity;
            return this;
        }

        /**
         * An array of image URLs for the product.
         */
        public Builder images(List<Images> images) {
            Utils.checkNotNull(images, "images");
            this.images = JsonNullable.of(images);
            return this;
        }

        /**
         * An array of image URLs for the product.
         */
        public Builder images(JsonNullable<? extends List<Images>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }

        /**
         * The weight of the product.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = JsonNullable.of(weight);
            return this;
        }

        /**
         * The weight of the product.
         */
        public Builder weight(JsonNullable<String> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * The unit of measurement for the weight of the product.
         */
        public Builder weightUnit(String weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = JsonNullable.of(weightUnit);
            return this;
        }

        /**
         * The unit of measurement for the weight of the product.
         */
        public Builder weightUnit(JsonNullable<String> weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = weightUnit;
            return this;
        }

        /**
         * An array of options for the product.
         */
        public Builder options(List<EcommerceProductOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * An array of options for the product.
         */
        public Builder options(Optional<? extends List<EcommerceProductOptions>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder variants(List<Variants> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = Optional.ofNullable(variants);
            return this;
        }

        public Builder variants(Optional<? extends List<Variants>> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = variants;
            return this;
        }

        /**
         * An array of tags for the product, used for organization and searching.
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * An array of tags for the product, used for organization and searching.
         */
        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * An array of categories for the product, used for organization and searching.
         */
        public Builder categories(List<EcommerceProductCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * An array of categories for the product, used for organization and searching.
         */
        public Builder categories(Optional<? extends List<EcommerceProductCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public EcommerceProduct build() {
            return new EcommerceProduct(
                id,
                name,
                description,
                status,
                price,
                sku,
                inventoryQuantity,
                images,
                weight,
                weightUnit,
                options,
                variants,
                tags,
                categories,
                customMappings,
                createdAt,
                updatedAt);
        }
    }
}
