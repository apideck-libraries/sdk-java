/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EcommerceProductImages {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The URL of an image of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    @JsonCreator
    public EcommerceProductImages(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("url") @Nullable JsonNullable<String> url) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.url = Optional.ofNullable(url)
            .orElse(JsonNullable.undefined());
    }
    
    public EcommerceProductImages() {
        this(null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The URL of an image of the variant.
     */
    public JsonNullable<String> url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EcommerceProductImages withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The URL of an image of the variant.
     */
    public EcommerceProductImages withUrl(@Nullable String url) {
        this.url = JsonNullable.of(url);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceProductImages other = (EcommerceProductImages) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceProductImages.class,
                "id", id,
                "url", url);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> url;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The URL of an image of the variant.
         */
        public Builder url(@Nullable String url) {
            this.url = JsonNullable.of(url);
            return this;
        }

        public EcommerceProductImages build() {
            return new EcommerceProductImages(
                id, url);
        }

    }
}
