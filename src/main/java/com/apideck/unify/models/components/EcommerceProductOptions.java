/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class EcommerceProductOptions {

    /**
     * A unique identifier for the option of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The name of the option for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("values")
    private Optional<? extends List<String>> values;

    @JsonCreator
    public EcommerceProductOptions(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("values") Optional<? extends List<String>> values) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(values, "values");
        this.id = id;
        this.name = name;
        this.values = values;
    }
    
    public EcommerceProductOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for the option of the product.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The name of the option for the product.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> values() {
        return (Optional<List<String>>) values;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for the option of the product.
     */
    public EcommerceProductOptions withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * A unique identifier for the option of the product.
     */
    public EcommerceProductOptions withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the option for the product.
     */
    public EcommerceProductOptions withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the option for the product.
     */
    public EcommerceProductOptions withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public EcommerceProductOptions withValues(List<String> values) {
        Utils.checkNotNull(values, "values");
        this.values = Optional.ofNullable(values);
        return this;
    }

    public EcommerceProductOptions withValues(Optional<? extends List<String>> values) {
        Utils.checkNotNull(values, "values");
        this.values = values;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceProductOptions other = (EcommerceProductOptions) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.values, other.values);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            values);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceProductOptions.class,
                "id", id,
                "name", name,
                "values", values);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private Optional<? extends List<String>> values = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the option of the product.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for the option of the product.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the option for the product.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the option for the product.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder values(List<String> values) {
            Utils.checkNotNull(values, "values");
            this.values = Optional.ofNullable(values);
            return this;
        }

        public Builder values(Optional<? extends List<String>> values) {
            Utils.checkNotNull(values, "values");
            this.values = values;
            return this;
        }
        
        public EcommerceProductOptions build() {
            return new EcommerceProductOptions(
                id,
                name,
                values);
        }
    }
}
