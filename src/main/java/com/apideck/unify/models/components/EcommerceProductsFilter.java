/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class EcommerceProductsFilter {
    /**
     * Product name to filter on
     */
    @SpeakeasyMetadata("queryParam:name=name")
    private Optional<String> name;

    /**
     * Minimum date the product was last modified
     */
    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<String> updatedSince;

    /**
     * Minimum date the product was created
     */
    @SpeakeasyMetadata("queryParam:name=created_since")
    private Optional<String> createdSince;

    @JsonCreator
    public EcommerceProductsFilter(
            Optional<String> name,
            Optional<String> updatedSince,
            Optional<String> createdSince) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(createdSince, "createdSince");
        this.name = name;
        this.updatedSince = updatedSince;
        this.createdSince = createdSince;
    }
    
    public EcommerceProductsFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Product name to filter on
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Minimum date the product was last modified
     */
    @JsonIgnore
    public Optional<String> updatedSince() {
        return updatedSince;
    }

    /**
     * Minimum date the product was created
     */
    @JsonIgnore
    public Optional<String> createdSince() {
        return createdSince;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Product name to filter on
     */
    public EcommerceProductsFilter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * Product name to filter on
     */
    public EcommerceProductsFilter withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Minimum date the product was last modified
     */
    public EcommerceProductsFilter withUpdatedSince(String updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }


    /**
     * Minimum date the product was last modified
     */
    public EcommerceProductsFilter withUpdatedSince(Optional<String> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Minimum date the product was created
     */
    public EcommerceProductsFilter withCreatedSince(String createdSince) {
        Utils.checkNotNull(createdSince, "createdSince");
        this.createdSince = Optional.ofNullable(createdSince);
        return this;
    }


    /**
     * Minimum date the product was created
     */
    public EcommerceProductsFilter withCreatedSince(Optional<String> createdSince) {
        Utils.checkNotNull(createdSince, "createdSince");
        this.createdSince = createdSince;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EcommerceProductsFilter other = (EcommerceProductsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.createdSince, other.createdSince);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, updatedSince, createdSince);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EcommerceProductsFilter.class,
                "name", name,
                "updatedSince", updatedSince,
                "createdSince", createdSince);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> updatedSince = Optional.empty();

        private Optional<String> createdSince = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Product name to filter on
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Product name to filter on
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Minimum date the product was last modified
         */
        public Builder updatedSince(String updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Minimum date the product was last modified
         */
        public Builder updatedSince(Optional<String> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }


        /**
         * Minimum date the product was created
         */
        public Builder createdSince(String createdSince) {
            Utils.checkNotNull(createdSince, "createdSince");
            this.createdSince = Optional.ofNullable(createdSince);
            return this;
        }

        /**
         * Minimum date the product was created
         */
        public Builder createdSince(Optional<String> createdSince) {
            Utils.checkNotNull(createdSince, "createdSince");
            this.createdSince = createdSince;
            return this;
        }

        public EcommerceProductsFilter build() {

            return new EcommerceProductsFilter(
                name, updatedSince, createdSince);
        }

    }
}
