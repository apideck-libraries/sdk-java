/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Email {

    /**
     * Unique identifier for the email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Email address
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * Email type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends EmailType> type;

    @JsonCreator
    public Email(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("type") JsonNullable<? extends EmailType> type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.email = email;
        this.type = type;
    }
    
    public Email() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Unique identifier for the email address
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Email address
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * Email type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmailType> type() {
        return (JsonNullable<EmailType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for the email address
     */
    public Email withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier for the email address
     */
    public Email withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Email address
     */
    public Email withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * Email address
     */
    public Email withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Email type
     */
    public Email withType(EmailType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Email type
     */
    public Email withType(JsonNullable<? extends EmailType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Email other = (Email) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            email,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Email.class,
                "id", id,
                "email", email,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private Optional<String> email = Optional.empty();
 
        private JsonNullable<? extends EmailType> type = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the email address
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier for the email address
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Email address
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Email type
         */
        public Builder type(EmailType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Email type
         */
        public Builder type(JsonNullable<? extends EmailType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Email build() {
            return new Email(
                id,
                email,
                type);
        }
    }
}
