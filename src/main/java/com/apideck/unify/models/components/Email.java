/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Email {
    /**
     * Unique identifier for the email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Email address
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * Email type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<EmailType> type;

    @JsonCreator
    public Email(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("email") @Nullable String email,
            @JsonProperty("type") @Nullable JsonNullable<EmailType> type) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.email = JsonNullable.of(email);
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
    }
    
    public Email() {
        this(null, null, null);
    }

    /**
     * Unique identifier for the email address
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Email address
     */
    public JsonNullable<String> email() {
        return this.email;
    }

    /**
     * Email type
     */
    public JsonNullable<EmailType> type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the email address
     */
    public Email withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Email address
     */
    public Email withEmail(@Nullable String email) {
        this.email = JsonNullable.of(email);
        return this;
    }


    /**
     * Email type
     */
    public Email withType(@Nullable EmailType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Email other = (Email) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, email, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Email.class,
                "id", id,
                "email", email,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private String email;

        private JsonNullable<EmailType> type;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the email address
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Email address
         */
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }

        /**
         * Email type
         */
        public Builder type(@Nullable EmailType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        public Email build() {
            return new Email(
                id, email, type);
        }

    }
}
