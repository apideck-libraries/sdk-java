/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Employee {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_name")
    private JsonNullable<String> preferredName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The marital status of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private JsonNullable<String> maritalStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partner")
    private Person partner;

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private JsonNullable<String> division;

    /**
     * Unique identifier of the division this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division_id")
    private JsonNullable<String> divisionId;

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    @Deprecated
    private JsonNullable<String> department;

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * Name of the department this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_name")
    private JsonNullable<String> departmentName;

    /**
     * The team the person is currently in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team")
    private JsonNullable<Team> team;

    /**
     * The unique identifier of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * A Start Date is the date that the employee started working at the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_start_date")
    private JsonNullable<String> employmentStartDate;

    /**
     * An End Date is the date that the employee ended working at the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_end_date")
    private JsonNullable<String> employmentEndDate;

    /**
     * The reason because the employment ended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaving_reason")
    private JsonNullable<LeavingReason> leavingReason;

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<EmploymentStatus> employmentStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_role")
    private EmploymentRole employmentRole;

    /**
     * The ethnicity of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ethnicity")
    private JsonNullable<String> ethnicity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Manager manager;

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direct_reports")
    private JsonNullable<List<String>> directReports;

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_security_number")
    private JsonNullable<String> socialSecurityNumber;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * The date the person deceased.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deceased_on")
    private JsonNullable<LocalDate> deceasedOn;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_of_birth")
    private JsonNullable<String> countryOfBirth;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The gender represents the gender identity of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<Gender> gender;

    /**
     * The preferred pronouns of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pronouns")
    private JsonNullable<String> pronouns;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_language")
    private JsonNullable<String> preferredLanguage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    private List<String> languages;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nationalities")
    private List<String> nationalities;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private JsonNullable<String> timezone;

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private JsonNullable<String> source;

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobs")
    private JsonNullable<List<EmployeeJob>> jobs;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensations")
    private JsonNullable<List<EmployeeCompensation>> compensations;

    /**
     * Indicates if the employee works from a remote location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("works_remote")
    private JsonNullable<Boolean> worksRemote;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLink> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private List<BankAccount> bankAccounts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private JsonNullable<String> taxId;

    /**
     * Indicate the employee's dietary preference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dietary_preference")
    private JsonNullable<String> dietaryPreference;

    /**
     * Indicate the employee's food allergies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("food_allergies")
    private JsonNullable<List<String>> foodAllergies;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probation_period")
    private ProbationPeriod probationPeriod;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Employee(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("downstream_id") @Nullable JsonNullable<String> downstreamId,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("preferred_name") @Nullable JsonNullable<String> preferredName,
            @JsonProperty("initials") @Nullable JsonNullable<String> initials,
            @JsonProperty("salutation") @Nullable JsonNullable<String> salutation,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("marital_status") @Nullable JsonNullable<String> maritalStatus,
            @JsonProperty("partner") @Nullable Person partner,
            @JsonProperty("division") @Nullable JsonNullable<String> division,
            @JsonProperty("division_id") @Nullable JsonNullable<String> divisionId,
            @JsonProperty("department") @Nullable JsonNullable<String> department,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("department_name") @Nullable JsonNullable<String> departmentName,
            @JsonProperty("team") @Nullable JsonNullable<Team> team,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("employment_start_date") @Nullable JsonNullable<String> employmentStartDate,
            @JsonProperty("employment_end_date") @Nullable JsonNullable<String> employmentEndDate,
            @JsonProperty("leaving_reason") @Nullable JsonNullable<LeavingReason> leavingReason,
            @JsonProperty("employee_number") @Nullable JsonNullable<String> employeeNumber,
            @JsonProperty("employment_status") @Nullable JsonNullable<EmploymentStatus> employmentStatus,
            @JsonProperty("employment_role") @Nullable EmploymentRole employmentRole,
            @JsonProperty("ethnicity") @Nullable JsonNullable<String> ethnicity,
            @JsonProperty("manager") @Nullable Manager manager,
            @JsonProperty("direct_reports") @Nullable JsonNullable<List<String>> directReports,
            @JsonProperty("social_security_number") @Nullable JsonNullable<String> socialSecurityNumber,
            @JsonProperty("birthday") @Nullable JsonNullable<LocalDate> birthday,
            @JsonProperty("deceased_on") @Nullable JsonNullable<LocalDate> deceasedOn,
            @JsonProperty("country_of_birth") @Nullable JsonNullable<String> countryOfBirth,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("gender") @Nullable JsonNullable<Gender> gender,
            @JsonProperty("pronouns") @Nullable JsonNullable<String> pronouns,
            @JsonProperty("preferred_language") @Nullable JsonNullable<String> preferredLanguage,
            @JsonProperty("languages") @Nullable List<String> languages,
            @JsonProperty("nationalities") @Nullable List<String> nationalities,
            @JsonProperty("photo_url") @Nullable JsonNullable<String> photoUrl,
            @JsonProperty("timezone") @Nullable JsonNullable<String> timezone,
            @JsonProperty("source") @Nullable JsonNullable<String> source,
            @JsonProperty("source_id") @Nullable JsonNullable<String> sourceId,
            @JsonProperty("record_url") @Nullable JsonNullable<String> recordUrl,
            @JsonProperty("jobs") @Nullable JsonNullable<List<EmployeeJob>> jobs,
            @JsonProperty("compensations") @Nullable JsonNullable<List<EmployeeCompensation>> compensations,
            @JsonProperty("works_remote") @Nullable JsonNullable<Boolean> worksRemote,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("social_links") @Nullable List<SocialLink> socialLinks,
            @JsonProperty("bank_accounts") @Nullable List<BankAccount> bankAccounts,
            @JsonProperty("tax_code") @Nullable JsonNullable<String> taxCode,
            @JsonProperty("tax_id") @Nullable JsonNullable<String> taxId,
            @JsonProperty("dietary_preference") @Nullable JsonNullable<String> dietaryPreference,
            @JsonProperty("food_allergies") @Nullable JsonNullable<List<String>> foodAllergies,
            @JsonProperty("probation_period") @Nullable ProbationPeriod probationPeriod,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("deleted") @Nullable JsonNullable<Boolean> deleted,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.downstreamId = Optional.ofNullable(downstreamId)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.preferredName = Optional.ofNullable(preferredName)
            .orElse(JsonNullable.undefined());
        this.initials = Optional.ofNullable(initials)
            .orElse(JsonNullable.undefined());
        this.salutation = Optional.ofNullable(salutation)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.maritalStatus = Optional.ofNullable(maritalStatus)
            .orElse(JsonNullable.undefined());
        this.partner = partner;
        this.division = Optional.ofNullable(division)
            .orElse(JsonNullable.undefined());
        this.divisionId = Optional.ofNullable(divisionId)
            .orElse(JsonNullable.undefined());
        this.department = Optional.ofNullable(department)
            .orElse(JsonNullable.undefined());
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.departmentName = Optional.ofNullable(departmentName)
            .orElse(JsonNullable.undefined());
        this.team = Optional.ofNullable(team)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.employmentStartDate = Optional.ofNullable(employmentStartDate)
            .orElse(JsonNullable.undefined());
        this.employmentEndDate = Optional.ofNullable(employmentEndDate)
            .orElse(JsonNullable.undefined());
        this.leavingReason = Optional.ofNullable(leavingReason)
            .orElse(JsonNullable.undefined());
        this.employeeNumber = Optional.ofNullable(employeeNumber)
            .orElse(JsonNullable.undefined());
        this.employmentStatus = Optional.ofNullable(employmentStatus)
            .orElse(JsonNullable.undefined());
        this.employmentRole = employmentRole;
        this.ethnicity = Optional.ofNullable(ethnicity)
            .orElse(JsonNullable.undefined());
        this.manager = manager;
        this.directReports = Optional.ofNullable(directReports)
            .orElse(JsonNullable.undefined());
        this.socialSecurityNumber = Optional.ofNullable(socialSecurityNumber)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.deceasedOn = Optional.ofNullable(deceasedOn)
            .orElse(JsonNullable.undefined());
        this.countryOfBirth = Optional.ofNullable(countryOfBirth)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.gender = Optional.ofNullable(gender)
            .orElse(JsonNullable.undefined());
        this.pronouns = Optional.ofNullable(pronouns)
            .orElse(JsonNullable.undefined());
        this.preferredLanguage = Optional.ofNullable(preferredLanguage)
            .orElse(JsonNullable.undefined());
        this.languages = languages;
        this.nationalities = nationalities;
        this.photoUrl = Optional.ofNullable(photoUrl)
            .orElse(JsonNullable.undefined());
        this.timezone = Optional.ofNullable(timezone)
            .orElse(JsonNullable.undefined());
        this.source = Optional.ofNullable(source)
            .orElse(JsonNullable.undefined());
        this.sourceId = Optional.ofNullable(sourceId)
            .orElse(JsonNullable.undefined());
        this.recordUrl = Optional.ofNullable(recordUrl)
            .orElse(JsonNullable.undefined());
        this.jobs = Optional.ofNullable(jobs)
            .orElse(JsonNullable.undefined());
        this.compensations = Optional.ofNullable(compensations)
            .orElse(JsonNullable.undefined());
        this.worksRemote = Optional.ofNullable(worksRemote)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customFields = customFields;
        this.socialLinks = socialLinks;
        this.bankAccounts = bankAccounts;
        this.taxCode = Optional.ofNullable(taxCode)
            .orElse(JsonNullable.undefined());
        this.taxId = Optional.ofNullable(taxId)
            .orElse(JsonNullable.undefined());
        this.dietaryPreference = Optional.ofNullable(dietaryPreference)
            .orElse(JsonNullable.undefined());
        this.foodAllergies = Optional.ofNullable(foodAllergies)
            .orElse(JsonNullable.undefined());
        this.probationPeriod = probationPeriod;
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.deleted = Optional.ofNullable(deleted)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Employee() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The third-party API ID of original entity
     */
    public JsonNullable<String> downstreamId() {
        return this.downstreamId;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    public JsonNullable<String> preferredName() {
        return this.preferredName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public JsonNullable<String> initials() {
        return this.initials;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public JsonNullable<String> salutation() {
        return this.salutation;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The marital status of the employee.
     */
    public JsonNullable<String> maritalStatus() {
        return this.maritalStatus;
    }

    public Optional<Person> partner() {
        return Optional.ofNullable(this.partner);
    }

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public JsonNullable<String> division() {
        return this.division;
    }

    /**
     * Unique identifier of the division this employee belongs to.
     */
    public JsonNullable<String> divisionId() {
        return this.divisionId;
    }

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> department() {
        return this.department;
    }

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    /**
     * Name of the department this employee belongs to.
     */
    public JsonNullable<String> departmentName() {
        return this.departmentName;
    }

    /**
     * The team the person is currently in.
     */
    public JsonNullable<Team> team() {
        return this.team;
    }

    /**
     * The unique identifier of the company.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * A Start Date is the date that the employee started working at the company
     */
    public JsonNullable<String> employmentStartDate() {
        return this.employmentStartDate;
    }

    /**
     * An End Date is the date that the employee ended working at the company
     */
    public JsonNullable<String> employmentEndDate() {
        return this.employmentEndDate;
    }

    /**
     * The reason because the employment ended.
     */
    public JsonNullable<LeavingReason> leavingReason() {
        return this.leavingReason;
    }

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public JsonNullable<String> employeeNumber() {
        return this.employeeNumber;
    }

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public JsonNullable<EmploymentStatus> employmentStatus() {
        return this.employmentStatus;
    }

    public Optional<EmploymentRole> employmentRole() {
        return Optional.ofNullable(this.employmentRole);
    }

    /**
     * The ethnicity of the employee
     */
    public JsonNullable<String> ethnicity() {
        return this.ethnicity;
    }

    public Optional<Manager> manager() {
        return Optional.ofNullable(this.manager);
    }

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    public JsonNullable<List<String>> directReports() {
        return this.directReports;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public JsonNullable<String> socialSecurityNumber() {
        return this.socialSecurityNumber;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<LocalDate> birthday() {
        return this.birthday;
    }

    /**
     * The date the person deceased.
     */
    public JsonNullable<LocalDate> deceasedOn() {
        return this.deceasedOn;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<String> countryOfBirth() {
        return this.countryOfBirth;
    }

    /**
     * A description of the object.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public JsonNullable<Gender> gender() {
        return this.gender;
    }

    /**
     * The preferred pronouns of the person.
     */
    public JsonNullable<String> pronouns() {
        return this.pronouns;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> preferredLanguage() {
        return this.preferredLanguage;
    }

    public Optional<List<String>> languages() {
        return Optional.ofNullable(this.languages);
    }

    public Optional<List<String>> nationalities() {
        return Optional.ofNullable(this.nationalities);
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<String> photoUrl() {
        return this.photoUrl;
    }

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    public JsonNullable<String> timezone() {
        return this.timezone;
    }

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    public JsonNullable<String> source() {
        return this.source;
    }

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    public JsonNullable<String> sourceId() {
        return this.sourceId;
    }

    public JsonNullable<String> recordUrl() {
        return this.recordUrl;
    }

    public JsonNullable<List<EmployeeJob>> jobs() {
        return this.jobs;
    }

    public JsonNullable<List<EmployeeCompensation>> compensations() {
        return this.compensations;
    }

    /**
     * Indicates if the employee works from a remote location.
     */
    public JsonNullable<Boolean> worksRemote() {
        return this.worksRemote;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public Optional<List<SocialLink>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<List<BankAccount>> bankAccounts() {
        return Optional.ofNullable(this.bankAccounts);
    }

    public JsonNullable<String> taxCode() {
        return this.taxCode;
    }

    public JsonNullable<String> taxId() {
        return this.taxId;
    }

    /**
     * Indicate the employee's dietary preference.
     */
    public JsonNullable<String> dietaryPreference() {
        return this.dietaryPreference;
    }

    /**
     * Indicate the employee's food allergies.
     */
    public JsonNullable<List<String>> foodAllergies() {
        return this.foodAllergies;
    }

    public Optional<ProbationPeriod> probationPeriod() {
        return Optional.ofNullable(this.probationPeriod);
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<Boolean> deleted() {
        return this.deleted;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Employee withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The third-party API ID of original entity
     */
    public Employee withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }


    /**
     * The first name of the person.
     */
    public Employee withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public Employee withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Middle name of the person.
     */
    public Employee withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    public Employee withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    public Employee withPreferredName(@Nullable String preferredName) {
        this.preferredName = JsonNullable.of(preferredName);
        return this;
    }


    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Employee withInitials(@Nullable String initials) {
        this.initials = JsonNullable.of(initials);
        return this;
    }


    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public Employee withSalutation(@Nullable String salutation) {
        this.salutation = JsonNullable.of(salutation);
        return this;
    }


    /**
     * The job title of the person.
     */
    public Employee withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The marital status of the employee.
     */
    public Employee withMaritalStatus(@Nullable String maritalStatus) {
        this.maritalStatus = JsonNullable.of(maritalStatus);
        return this;
    }


    public Employee withPartner(@Nullable Person partner) {
        this.partner = partner;
        return this;
    }


    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public Employee withDivision(@Nullable String division) {
        this.division = JsonNullable.of(division);
        return this;
    }


    /**
     * Unique identifier of the division this employee belongs to.
     */
    public Employee withDivisionId(@Nullable String divisionId) {
        this.divisionId = JsonNullable.of(divisionId);
        return this;
    }


    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withDepartment(@Nullable String department) {
        this.department = JsonNullable.of(department);
        return this;
    }


    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    public Employee withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    /**
     * Name of the department this employee belongs to.
     */
    public Employee withDepartmentName(@Nullable String departmentName) {
        this.departmentName = JsonNullable.of(departmentName);
        return this;
    }


    /**
     * The team the person is currently in.
     */
    public Employee withTeam(@Nullable Team team) {
        this.team = JsonNullable.of(team);
        return this;
    }


    /**
     * The unique identifier of the company.
     */
    public Employee withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The name of the company.
     */
    public Employee withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * A Start Date is the date that the employee started working at the company
     */
    public Employee withEmploymentStartDate(@Nullable String employmentStartDate) {
        this.employmentStartDate = JsonNullable.of(employmentStartDate);
        return this;
    }


    /**
     * An End Date is the date that the employee ended working at the company
     */
    public Employee withEmploymentEndDate(@Nullable String employmentEndDate) {
        this.employmentEndDate = JsonNullable.of(employmentEndDate);
        return this;
    }


    /**
     * The reason because the employment ended.
     */
    public Employee withLeavingReason(@Nullable LeavingReason leavingReason) {
        this.leavingReason = JsonNullable.of(leavingReason);
        return this;
    }


    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public Employee withEmployeeNumber(@Nullable String employeeNumber) {
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }


    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public Employee withEmploymentStatus(@Nullable EmploymentStatus employmentStatus) {
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }


    public Employee withEmploymentRole(@Nullable EmploymentRole employmentRole) {
        this.employmentRole = employmentRole;
        return this;
    }


    /**
     * The ethnicity of the employee
     */
    public Employee withEthnicity(@Nullable String ethnicity) {
        this.ethnicity = JsonNullable.of(ethnicity);
        return this;
    }


    public Employee withManager(@Nullable Manager manager) {
        this.manager = manager;
        return this;
    }


    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    public Employee withDirectReports(@Nullable List<String> directReports) {
        this.directReports = JsonNullable.of(directReports);
        return this;
    }


    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public Employee withSocialSecurityNumber(@Nullable String socialSecurityNumber) {
        this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
        return this;
    }


    /**
     * The date of birth of the person.
     */
    public Employee withBirthday(@Nullable LocalDate birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    /**
     * The date the person deceased.
     */
    public Employee withDeceasedOn(@Nullable LocalDate deceasedOn) {
        this.deceasedOn = JsonNullable.of(deceasedOn);
        return this;
    }


    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public Employee withCountryOfBirth(@Nullable String countryOfBirth) {
        this.countryOfBirth = JsonNullable.of(countryOfBirth);
        return this;
    }


    /**
     * A description of the object.
     */
    public Employee withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The gender represents the gender identity of a person.
     */
    public Employee withGender(@Nullable Gender gender) {
        this.gender = JsonNullable.of(gender);
        return this;
    }


    /**
     * The preferred pronouns of the person.
     */
    public Employee withPronouns(@Nullable String pronouns) {
        this.pronouns = JsonNullable.of(pronouns);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Employee withPreferredLanguage(@Nullable String preferredLanguage) {
        this.preferredLanguage = JsonNullable.of(preferredLanguage);
        return this;
    }


    public Employee withLanguages(@Nullable List<String> languages) {
        this.languages = languages;
        return this;
    }


    public Employee withNationalities(@Nullable List<String> nationalities) {
        this.nationalities = nationalities;
        return this;
    }


    /**
     * The URL of the photo of a person.
     */
    public Employee withPhotoUrl(@Nullable String photoUrl) {
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }


    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    public Employee withTimezone(@Nullable String timezone) {
        this.timezone = JsonNullable.of(timezone);
        return this;
    }


    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    public Employee withSource(@Nullable String source) {
        this.source = JsonNullable.of(source);
        return this;
    }


    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    public Employee withSourceId(@Nullable String sourceId) {
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }


    public Employee withRecordUrl(@Nullable String recordUrl) {
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }


    public Employee withJobs(@Nullable List<EmployeeJob> jobs) {
        this.jobs = JsonNullable.of(jobs);
        return this;
    }


    public Employee withCompensations(@Nullable List<EmployeeCompensation> compensations) {
        this.compensations = JsonNullable.of(compensations);
        return this;
    }


    /**
     * Indicates if the employee works from a remote location.
     */
    public Employee withWorksRemote(@Nullable Boolean worksRemote) {
        this.worksRemote = JsonNullable.of(worksRemote);
        return this;
    }


    public Employee withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Employee withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public Employee withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public Employee withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    public Employee withSocialLinks(@Nullable List<SocialLink> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public Employee withBankAccounts(@Nullable List<BankAccount> bankAccounts) {
        this.bankAccounts = bankAccounts;
        return this;
    }


    public Employee withTaxCode(@Nullable String taxCode) {
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }


    public Employee withTaxId(@Nullable String taxId) {
        this.taxId = JsonNullable.of(taxId);
        return this;
    }


    /**
     * Indicate the employee's dietary preference.
     */
    public Employee withDietaryPreference(@Nullable String dietaryPreference) {
        this.dietaryPreference = JsonNullable.of(dietaryPreference);
        return this;
    }


    /**
     * Indicate the employee's food allergies.
     */
    public Employee withFoodAllergies(@Nullable List<String> foodAllergies) {
        this.foodAllergies = JsonNullable.of(foodAllergies);
        return this;
    }


    public Employee withProbationPeriod(@Nullable ProbationPeriod probationPeriod) {
        this.probationPeriod = probationPeriod;
        return this;
    }


    public Employee withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Employee withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Employee withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * Flag to indicate if the object is deleted.
     */
    public Employee withDeleted(@Nullable Boolean deleted) {
        this.deleted = JsonNullable.of(deleted);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Employee withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Employee withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Employee withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Employee withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Employee withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Employee other = (Employee) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.preferredName, other.preferredName) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.salutation, other.salutation) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.maritalStatus, other.maritalStatus) &&
            Utils.enhancedDeepEquals(this.partner, other.partner) &&
            Utils.enhancedDeepEquals(this.division, other.division) &&
            Utils.enhancedDeepEquals(this.divisionId, other.divisionId) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.departmentName, other.departmentName) &&
            Utils.enhancedDeepEquals(this.team, other.team) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.employmentStartDate, other.employmentStartDate) &&
            Utils.enhancedDeepEquals(this.employmentEndDate, other.employmentEndDate) &&
            Utils.enhancedDeepEquals(this.leavingReason, other.leavingReason) &&
            Utils.enhancedDeepEquals(this.employeeNumber, other.employeeNumber) &&
            Utils.enhancedDeepEquals(this.employmentStatus, other.employmentStatus) &&
            Utils.enhancedDeepEquals(this.employmentRole, other.employmentRole) &&
            Utils.enhancedDeepEquals(this.ethnicity, other.ethnicity) &&
            Utils.enhancedDeepEquals(this.manager, other.manager) &&
            Utils.enhancedDeepEquals(this.directReports, other.directReports) &&
            Utils.enhancedDeepEquals(this.socialSecurityNumber, other.socialSecurityNumber) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.deceasedOn, other.deceasedOn) &&
            Utils.enhancedDeepEquals(this.countryOfBirth, other.countryOfBirth) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.pronouns, other.pronouns) &&
            Utils.enhancedDeepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Utils.enhancedDeepEquals(this.languages, other.languages) &&
            Utils.enhancedDeepEquals(this.nationalities, other.nationalities) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.jobs, other.jobs) &&
            Utils.enhancedDeepEquals(this.compensations, other.compensations) &&
            Utils.enhancedDeepEquals(this.worksRemote, other.worksRemote) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.bankAccounts, other.bankAccounts) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.taxId, other.taxId) &&
            Utils.enhancedDeepEquals(this.dietaryPreference, other.dietaryPreference) &&
            Utils.enhancedDeepEquals(this.foodAllergies, other.foodAllergies) &&
            Utils.enhancedDeepEquals(this.probationPeriod, other.probationPeriod) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, downstreamId, firstName,
            lastName, middleName, displayName,
            preferredName, initials, salutation,
            title, maritalStatus, partner,
            division, divisionId, department,
            departmentId, departmentName, team,
            companyId, companyName, employmentStartDate,
            employmentEndDate, leavingReason, employeeNumber,
            employmentStatus, employmentRole, ethnicity,
            manager, directReports, socialSecurityNumber,
            birthday, deceasedOn, countryOfBirth,
            description, gender, pronouns,
            preferredLanguage, languages, nationalities,
            photoUrl, timezone, source,
            sourceId, recordUrl, jobs,
            compensations, worksRemote, addresses,
            phoneNumbers, emails, customFields,
            socialLinks, bankAccounts, taxCode,
            taxId, dietaryPreference, foodAllergies,
            probationPeriod, tags, customMappings,
            rowVersion, deleted, updatedBy,
            createdBy, updatedAt, createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Employee.class,
                "id", id,
                "downstreamId", downstreamId,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "displayName", displayName,
                "preferredName", preferredName,
                "initials", initials,
                "salutation", salutation,
                "title", title,
                "maritalStatus", maritalStatus,
                "partner", partner,
                "division", division,
                "divisionId", divisionId,
                "department", department,
                "departmentId", departmentId,
                "departmentName", departmentName,
                "team", team,
                "companyId", companyId,
                "companyName", companyName,
                "employmentStartDate", employmentStartDate,
                "employmentEndDate", employmentEndDate,
                "leavingReason", leavingReason,
                "employeeNumber", employeeNumber,
                "employmentStatus", employmentStatus,
                "employmentRole", employmentRole,
                "ethnicity", ethnicity,
                "manager", manager,
                "directReports", directReports,
                "socialSecurityNumber", socialSecurityNumber,
                "birthday", birthday,
                "deceasedOn", deceasedOn,
                "countryOfBirth", countryOfBirth,
                "description", description,
                "gender", gender,
                "pronouns", pronouns,
                "preferredLanguage", preferredLanguage,
                "languages", languages,
                "nationalities", nationalities,
                "photoUrl", photoUrl,
                "timezone", timezone,
                "source", source,
                "sourceId", sourceId,
                "recordUrl", recordUrl,
                "jobs", jobs,
                "compensations", compensations,
                "worksRemote", worksRemote,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customFields", customFields,
                "socialLinks", socialLinks,
                "bankAccounts", bankAccounts,
                "taxCode", taxCode,
                "taxId", taxId,
                "dietaryPreference", dietaryPreference,
                "foodAllergies", foodAllergies,
                "probationPeriod", probationPeriod,
                "tags", tags,
                "customMappings", customMappings,
                "rowVersion", rowVersion,
                "deleted", deleted,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> downstreamId;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> displayName;

        private JsonNullable<String> preferredName;

        private JsonNullable<String> initials;

        private JsonNullable<String> salutation;

        private JsonNullable<String> title;

        private JsonNullable<String> maritalStatus;

        private Person partner;

        private JsonNullable<String> division;

        private JsonNullable<String> divisionId;

        @Deprecated
        private JsonNullable<String> department;

        private JsonNullable<String> departmentId;

        private JsonNullable<String> departmentName;

        private JsonNullable<Team> team;

        private JsonNullable<String> companyId;

        private JsonNullable<String> companyName;

        private JsonNullable<String> employmentStartDate;

        private JsonNullable<String> employmentEndDate;

        private JsonNullable<LeavingReason> leavingReason;

        private JsonNullable<String> employeeNumber;

        private JsonNullable<EmploymentStatus> employmentStatus;

        private EmploymentRole employmentRole;

        private JsonNullable<String> ethnicity;

        private Manager manager;

        private JsonNullable<List<String>> directReports;

        private JsonNullable<String> socialSecurityNumber;

        private JsonNullable<LocalDate> birthday;

        private JsonNullable<LocalDate> deceasedOn;

        private JsonNullable<String> countryOfBirth;

        private JsonNullable<String> description;

        private JsonNullable<Gender> gender;

        private JsonNullable<String> pronouns;

        private JsonNullable<String> preferredLanguage;

        private List<String> languages;

        private List<String> nationalities;

        private JsonNullable<String> photoUrl;

        private JsonNullable<String> timezone;

        private JsonNullable<String> source;

        private JsonNullable<String> sourceId;

        private JsonNullable<String> recordUrl;

        private JsonNullable<List<EmployeeJob>> jobs;

        private JsonNullable<List<EmployeeCompensation>> compensations;

        private JsonNullable<Boolean> worksRemote;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private List<CustomField> customFields;

        private List<SocialLink> socialLinks;

        private List<BankAccount> bankAccounts;

        private JsonNullable<String> taxCode;

        private JsonNullable<String> taxId;

        private JsonNullable<String> dietaryPreference;

        private JsonNullable<List<String>> foodAllergies;

        private ProbationPeriod probationPeriod;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> rowVersion;

        private JsonNullable<Boolean> deleted;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The name used to display the employee, often a combination of their first and last names.
         */
        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The name the employee prefers to be addressed by, which may be different from their legal name.
         */
        public Builder preferredName(@Nullable String preferredName) {
            this.preferredName = JsonNullable.of(preferredName);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(@Nullable String initials) {
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(@Nullable String salutation) {
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The marital status of the employee.
         */
        public Builder maritalStatus(@Nullable String maritalStatus) {
            this.maritalStatus = JsonNullable.of(maritalStatus);
            return this;
        }

        public Builder partner(@Nullable Person partner) {
            this.partner = partner;
            return this;
        }

        /**
         * The division the person is currently in. Usually a collection of departments or teams or regions.
         */
        public Builder division(@Nullable String division) {
            this.division = JsonNullable.of(division);
            return this;
        }

        /**
         * Unique identifier of the division this employee belongs to.
         */
        public Builder divisionId(@Nullable String divisionId) {
            this.divisionId = JsonNullable.of(divisionId);
            return this;
        }

        /**
         * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(@Nullable String department) {
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * Unique identifier of the department ID this employee belongs to.
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * Name of the department this employee belongs to.
         */
        public Builder departmentName(@Nullable String departmentName) {
            this.departmentName = JsonNullable.of(departmentName);
            return this;
        }

        /**
         * The team the person is currently in.
         */
        public Builder team(@Nullable Team team) {
            this.team = JsonNullable.of(team);
            return this;
        }

        /**
         * The unique identifier of the company.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * A Start Date is the date that the employee started working at the company
         */
        public Builder employmentStartDate(@Nullable String employmentStartDate) {
            this.employmentStartDate = JsonNullable.of(employmentStartDate);
            return this;
        }

        /**
         * An End Date is the date that the employee ended working at the company
         */
        public Builder employmentEndDate(@Nullable String employmentEndDate) {
            this.employmentEndDate = JsonNullable.of(employmentEndDate);
            return this;
        }

        /**
         * The reason because the employment ended.
         */
        public Builder leavingReason(@Nullable LeavingReason leavingReason) {
            this.leavingReason = JsonNullable.of(leavingReason);
            return this;
        }

        /**
         * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
         */
        public Builder employeeNumber(@Nullable String employeeNumber) {
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
         */
        public Builder employmentStatus(@Nullable EmploymentStatus employmentStatus) {
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        public Builder employmentRole(@Nullable EmploymentRole employmentRole) {
            this.employmentRole = employmentRole;
            return this;
        }

        /**
         * The ethnicity of the employee
         */
        public Builder ethnicity(@Nullable String ethnicity) {
            this.ethnicity = JsonNullable.of(ethnicity);
            return this;
        }

        public Builder manager(@Nullable Manager manager) {
            this.manager = manager;
            return this;
        }

        /**
         * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
         */
        public Builder directReports(@Nullable List<String> directReports) {
            this.directReports = JsonNullable.of(directReports);
            return this;
        }

        /**
         * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
         */
        public Builder socialSecurityNumber(@Nullable String socialSecurityNumber) {
            this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(@Nullable LocalDate birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date the person deceased.
         */
        public Builder deceasedOn(@Nullable LocalDate deceasedOn) {
            this.deceasedOn = JsonNullable.of(deceasedOn);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder countryOfBirth(@Nullable String countryOfBirth) {
            this.countryOfBirth = JsonNullable.of(countryOfBirth);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(@Nullable Gender gender) {
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The preferred pronouns of the person.
         */
        public Builder pronouns(@Nullable String pronouns) {
            this.pronouns = JsonNullable.of(pronouns);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder preferredLanguage(@Nullable String preferredLanguage) {
            this.preferredLanguage = JsonNullable.of(preferredLanguage);
            return this;
        }

        public Builder languages(@Nullable List<String> languages) {
            this.languages = languages;
            return this;
        }

        public Builder nationalities(@Nullable List<String> nationalities) {
            this.nationalities = nationalities;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(@Nullable String photoUrl) {
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
         */
        public Builder timezone(@Nullable String timezone) {
            this.timezone = JsonNullable.of(timezone);
            return this;
        }

        /**
         * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
         */
        public Builder source(@Nullable String source) {
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
         */
        public Builder sourceId(@Nullable String sourceId) {
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        public Builder recordUrl(@Nullable String recordUrl) {
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder jobs(@Nullable List<EmployeeJob> jobs) {
            this.jobs = JsonNullable.of(jobs);
            return this;
        }

        public Builder compensations(@Nullable List<EmployeeCompensation> compensations) {
            this.compensations = JsonNullable.of(compensations);
            return this;
        }

        /**
         * Indicates if the employee works from a remote location.
         */
        public Builder worksRemote(@Nullable Boolean worksRemote) {
            this.worksRemote = JsonNullable.of(worksRemote);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLink> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder bankAccounts(@Nullable List<BankAccount> bankAccounts) {
            this.bankAccounts = bankAccounts;
            return this;
        }

        public Builder taxCode(@Nullable String taxCode) {
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        public Builder taxId(@Nullable String taxId) {
            this.taxId = JsonNullable.of(taxId);
            return this;
        }

        /**
         * Indicate the employee's dietary preference.
         */
        public Builder dietaryPreference(@Nullable String dietaryPreference) {
            this.dietaryPreference = JsonNullable.of(dietaryPreference);
            return this;
        }

        /**
         * Indicate the employee's food allergies.
         */
        public Builder foodAllergies(@Nullable List<String> foodAllergies) {
            this.foodAllergies = JsonNullable.of(foodAllergies);
            return this;
        }

        public Builder probationPeriod(@Nullable ProbationPeriod probationPeriod) {
            this.probationPeriod = probationPeriod;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Employee build() {
            return new Employee(
                id, downstreamId, firstName,
                lastName, middleName, displayName,
                preferredName, initials, salutation,
                title, maritalStatus, partner,
                division, divisionId, department,
                departmentId, departmentName, team,
                companyId, companyName, employmentStartDate,
                employmentEndDate, leavingReason, employeeNumber,
                employmentStatus, employmentRole, ethnicity,
                manager, directReports, socialSecurityNumber,
                birthday, deceasedOn, countryOfBirth,
                description, gender, pronouns,
                preferredLanguage, languages, nationalities,
                photoUrl, timezone, source,
                sourceId, recordUrl, jobs,
                compensations, worksRemote, addresses,
                phoneNumbers, emails, customFields,
                socialLinks, bankAccounts, taxCode,
                taxId, dietaryPreference, foodAllergies,
                probationPeriod, tags, customMappings,
                rowVersion, deleted, updatedBy,
                createdBy, updatedAt, createdAt,
                passThrough);
        }

    }
}
