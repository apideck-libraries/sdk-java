/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeCompensation {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The ID of the job to which the compensation belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private JsonNullable<String> jobId;

    /**
     * The amount paid per payment unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private JsonNullable<Double> rate;

    /**
     * Unit of measurement for employee compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_unit")
    private JsonNullable<PaymentUnit> paymentUnit;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The FLSA status for this compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flsa_status")
    private JsonNullable<FlsaStatus> flsaStatus;

    /**
     * The date on which a change to an employee's compensation takes effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private JsonNullable<String> effectiveDate;

    /**
     * Frequency of employee compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_frequency")
    private JsonNullable<PaymentFrequency> paymentFrequency;

    @JsonCreator
    public EmployeeCompensation(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("job_id") @Nullable JsonNullable<String> jobId,
            @JsonProperty("rate") @Nullable JsonNullable<Double> rate,
            @JsonProperty("payment_unit") @Nullable JsonNullable<PaymentUnit> paymentUnit,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("flsa_status") @Nullable JsonNullable<FlsaStatus> flsaStatus,
            @JsonProperty("effective_date") @Nullable JsonNullable<String> effectiveDate,
            @JsonProperty("payment_frequency") @Nullable JsonNullable<PaymentFrequency> paymentFrequency) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.jobId = Optional.ofNullable(jobId)
            .orElse(JsonNullable.undefined());
        this.rate = Optional.ofNullable(rate)
            .orElse(JsonNullable.undefined());
        this.paymentUnit = Optional.ofNullable(paymentUnit)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.flsaStatus = Optional.ofNullable(flsaStatus)
            .orElse(JsonNullable.undefined());
        this.effectiveDate = Optional.ofNullable(effectiveDate)
            .orElse(JsonNullable.undefined());
        this.paymentFrequency = Optional.ofNullable(paymentFrequency)
            .orElse(JsonNullable.undefined());
    }
    
    public EmployeeCompensation() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The ID of the job to which the compensation belongs.
     */
    public JsonNullable<String> jobId() {
        return this.jobId;
    }

    /**
     * The amount paid per payment unit.
     */
    public JsonNullable<Double> rate() {
        return this.rate;
    }

    /**
     * Unit of measurement for employee compensation.
     */
    public JsonNullable<PaymentUnit> paymentUnit() {
        return this.paymentUnit;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The FLSA status for this compensation.
     */
    public JsonNullable<FlsaStatus> flsaStatus() {
        return this.flsaStatus;
    }

    /**
     * The date on which a change to an employee's compensation takes effect.
     */
    public JsonNullable<String> effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Frequency of employee compensation.
     */
    public JsonNullable<PaymentFrequency> paymentFrequency() {
        return this.paymentFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EmployeeCompensation withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The ID of the job to which the compensation belongs.
     */
    public EmployeeCompensation withJobId(@Nullable String jobId) {
        this.jobId = JsonNullable.of(jobId);
        return this;
    }


    /**
     * The amount paid per payment unit.
     */
    public EmployeeCompensation withRate(@Nullable Double rate) {
        this.rate = JsonNullable.of(rate);
        return this;
    }


    /**
     * Unit of measurement for employee compensation.
     */
    public EmployeeCompensation withPaymentUnit(@Nullable PaymentUnit paymentUnit) {
        this.paymentUnit = JsonNullable.of(paymentUnit);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EmployeeCompensation withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The FLSA status for this compensation.
     */
    public EmployeeCompensation withFlsaStatus(@Nullable FlsaStatus flsaStatus) {
        this.flsaStatus = JsonNullable.of(flsaStatus);
        return this;
    }


    /**
     * The date on which a change to an employee's compensation takes effect.
     */
    public EmployeeCompensation withEffectiveDate(@Nullable String effectiveDate) {
        this.effectiveDate = JsonNullable.of(effectiveDate);
        return this;
    }


    /**
     * Frequency of employee compensation.
     */
    public EmployeeCompensation withPaymentFrequency(@Nullable PaymentFrequency paymentFrequency) {
        this.paymentFrequency = JsonNullable.of(paymentFrequency);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeCompensation other = (EmployeeCompensation) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.paymentUnit, other.paymentUnit) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.flsaStatus, other.flsaStatus) &&
            Utils.enhancedDeepEquals(this.effectiveDate, other.effectiveDate) &&
            Utils.enhancedDeepEquals(this.paymentFrequency, other.paymentFrequency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, jobId, rate,
            paymentUnit, currency, flsaStatus,
            effectiveDate, paymentFrequency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeCompensation.class,
                "id", id,
                "jobId", jobId,
                "rate", rate,
                "paymentUnit", paymentUnit,
                "currency", currency,
                "flsaStatus", flsaStatus,
                "effectiveDate", effectiveDate,
                "paymentFrequency", paymentFrequency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> jobId;

        private JsonNullable<Double> rate;

        private JsonNullable<PaymentUnit> paymentUnit;

        private JsonNullable<Currency> currency;

        private JsonNullable<FlsaStatus> flsaStatus;

        private JsonNullable<String> effectiveDate;

        private JsonNullable<PaymentFrequency> paymentFrequency;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The ID of the job to which the compensation belongs.
         */
        public Builder jobId(@Nullable String jobId) {
            this.jobId = JsonNullable.of(jobId);
            return this;
        }

        /**
         * The amount paid per payment unit.
         */
        public Builder rate(@Nullable Double rate) {
            this.rate = JsonNullable.of(rate);
            return this;
        }

        /**
         * Unit of measurement for employee compensation.
         */
        public Builder paymentUnit(@Nullable PaymentUnit paymentUnit) {
            this.paymentUnit = JsonNullable.of(paymentUnit);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The FLSA status for this compensation.
         */
        public Builder flsaStatus(@Nullable FlsaStatus flsaStatus) {
            this.flsaStatus = JsonNullable.of(flsaStatus);
            return this;
        }

        /**
         * The date on which a change to an employee's compensation takes effect.
         */
        public Builder effectiveDate(@Nullable String effectiveDate) {
            this.effectiveDate = JsonNullable.of(effectiveDate);
            return this;
        }

        /**
         * Frequency of employee compensation.
         */
        public Builder paymentFrequency(@Nullable PaymentFrequency paymentFrequency) {
            this.paymentFrequency = JsonNullable.of(paymentFrequency);
            return this;
        }

        public EmployeeCompensation build() {
            return new EmployeeCompensation(
                id, jobId, rate,
                paymentUnit, currency, flsaStatus,
                effectiveDate, paymentFrequency);
        }

    }
}
