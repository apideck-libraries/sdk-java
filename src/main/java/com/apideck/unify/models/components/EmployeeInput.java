/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeInput {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_name")
    private JsonNullable<String> preferredName;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<String> salutation;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The marital status of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private JsonNullable<String> maritalStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partner")
    private Optional<? extends PersonInput> partner;

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private JsonNullable<String> division;

    /**
     * Unique identifier of the division this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division_id")
    private JsonNullable<String> divisionId;

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    @Deprecated
    private JsonNullable<String> department;

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * Name of the department this employee belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_name")
    private JsonNullable<String> departmentName;

    /**
     * The team the person is currently in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team")
    private JsonNullable<? extends Team> team;

    /**
     * The unique identifier of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * A Start Date is the date that the employee started working at the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_start_date")
    private JsonNullable<String> employmentStartDate;

    /**
     * An End Date is the date that the employee ended working at the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_end_date")
    private JsonNullable<String> employmentEndDate;

    /**
     * The reason because the employment ended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaving_reason")
    private JsonNullable<? extends LeavingReason> leavingReason;

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<? extends EmploymentStatus> employmentStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_role")
    private Optional<? extends EmploymentRole> employmentRole;

    /**
     * The ethnicity of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ethnicity")
    private JsonNullable<String> ethnicity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends Manager> manager;

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direct_reports")
    private JsonNullable<? extends List<String>> directReports;

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_security_number")
    private JsonNullable<String> socialSecurityNumber;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * The date the person deceased.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deceased_on")
    private JsonNullable<LocalDate> deceasedOn;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_of_birth")
    private JsonNullable<String> countryOfBirth;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The gender represents the gender identity of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends Gender> gender;

    /**
     * The preferred pronouns of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pronouns")
    private JsonNullable<String> pronouns;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_language")
    private JsonNullable<String> preferredLanguage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    private Optional<? extends List<String>> languages;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nationalities")
    private Optional<? extends List<String>> nationalities;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private JsonNullable<String> timezone;

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private JsonNullable<String> source;

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobs")
    private JsonNullable<? extends List<EmployeeJobInput>> jobs;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensations")
    private JsonNullable<? extends List<EmployeeCompensationInput>> compensations;

    /**
     * Indicates if the employee works from a remote location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("works_remote")
    private JsonNullable<Boolean> worksRemote;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLink>> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private Optional<? extends List<BankAccount>> bankAccounts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private JsonNullable<String> taxId;

    /**
     * Indicate the employee's dietary preference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dietary_preference")
    private JsonNullable<String> dietaryPreference;

    /**
     * Indicate the employee's food allergies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("food_allergies")
    private JsonNullable<? extends List<String>> foodAllergies;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probation_period")
    private Optional<? extends ProbationPeriod> probationPeriod;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public EmployeeInput(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("middle_name") JsonNullable<String> middleName,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("preferred_name") JsonNullable<String> preferredName,
            @JsonProperty("initials") JsonNullable<String> initials,
            @JsonProperty("salutation") JsonNullable<String> salutation,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("marital_status") JsonNullable<String> maritalStatus,
            @JsonProperty("partner") Optional<? extends PersonInput> partner,
            @JsonProperty("division") JsonNullable<String> division,
            @JsonProperty("division_id") JsonNullable<String> divisionId,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("department_name") JsonNullable<String> departmentName,
            @JsonProperty("team") JsonNullable<? extends Team> team,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("employment_start_date") JsonNullable<String> employmentStartDate,
            @JsonProperty("employment_end_date") JsonNullable<String> employmentEndDate,
            @JsonProperty("leaving_reason") JsonNullable<? extends LeavingReason> leavingReason,
            @JsonProperty("employee_number") JsonNullable<String> employeeNumber,
            @JsonProperty("employment_status") JsonNullable<? extends EmploymentStatus> employmentStatus,
            @JsonProperty("employment_role") Optional<? extends EmploymentRole> employmentRole,
            @JsonProperty("ethnicity") JsonNullable<String> ethnicity,
            @JsonProperty("manager") Optional<? extends Manager> manager,
            @JsonProperty("direct_reports") JsonNullable<? extends List<String>> directReports,
            @JsonProperty("social_security_number") JsonNullable<String> socialSecurityNumber,
            @JsonProperty("birthday") JsonNullable<LocalDate> birthday,
            @JsonProperty("deceased_on") JsonNullable<LocalDate> deceasedOn,
            @JsonProperty("country_of_birth") JsonNullable<String> countryOfBirth,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("gender") JsonNullable<? extends Gender> gender,
            @JsonProperty("pronouns") JsonNullable<String> pronouns,
            @JsonProperty("preferred_language") JsonNullable<String> preferredLanguage,
            @JsonProperty("languages") Optional<? extends List<String>> languages,
            @JsonProperty("nationalities") Optional<? extends List<String>> nationalities,
            @JsonProperty("photo_url") JsonNullable<String> photoUrl,
            @JsonProperty("timezone") JsonNullable<String> timezone,
            @JsonProperty("source") JsonNullable<String> source,
            @JsonProperty("source_id") JsonNullable<String> sourceId,
            @JsonProperty("record_url") JsonNullable<String> recordUrl,
            @JsonProperty("jobs") JsonNullable<? extends List<EmployeeJobInput>> jobs,
            @JsonProperty("compensations") JsonNullable<? extends List<EmployeeCompensationInput>> compensations,
            @JsonProperty("works_remote") JsonNullable<Boolean> worksRemote,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("social_links") Optional<? extends List<SocialLink>> socialLinks,
            @JsonProperty("bank_accounts") Optional<? extends List<BankAccount>> bankAccounts,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("tax_id") JsonNullable<String> taxId,
            @JsonProperty("dietary_preference") JsonNullable<String> dietaryPreference,
            @JsonProperty("food_allergies") JsonNullable<? extends List<String>> foodAllergies,
            @JsonProperty("probation_period") Optional<? extends ProbationPeriod> probationPeriod,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(preferredName, "preferredName");
        Utils.checkNotNull(initials, "initials");
        Utils.checkNotNull(salutation, "salutation");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        Utils.checkNotNull(partner, "partner");
        Utils.checkNotNull(division, "division");
        Utils.checkNotNull(divisionId, "divisionId");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(departmentName, "departmentName");
        Utils.checkNotNull(team, "team");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(employmentStartDate, "employmentStartDate");
        Utils.checkNotNull(employmentEndDate, "employmentEndDate");
        Utils.checkNotNull(leavingReason, "leavingReason");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(employmentRole, "employmentRole");
        Utils.checkNotNull(ethnicity, "ethnicity");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(directReports, "directReports");
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(deceasedOn, "deceasedOn");
        Utils.checkNotNull(countryOfBirth, "countryOfBirth");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(pronouns, "pronouns");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(languages, "languages");
        Utils.checkNotNull(nationalities, "nationalities");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(jobs, "jobs");
        Utils.checkNotNull(compensations, "compensations");
        Utils.checkNotNull(worksRemote, "worksRemote");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(taxId, "taxId");
        Utils.checkNotNull(dietaryPreference, "dietaryPreference");
        Utils.checkNotNull(foodAllergies, "foodAllergies");
        Utils.checkNotNull(probationPeriod, "probationPeriod");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleName = middleName;
        this.displayName = displayName;
        this.preferredName = preferredName;
        this.initials = initials;
        this.salutation = salutation;
        this.title = title;
        this.maritalStatus = maritalStatus;
        this.partner = partner;
        this.division = division;
        this.divisionId = divisionId;
        this.department = department;
        this.departmentId = departmentId;
        this.departmentName = departmentName;
        this.team = team;
        this.companyId = companyId;
        this.companyName = companyName;
        this.employmentStartDate = employmentStartDate;
        this.employmentEndDate = employmentEndDate;
        this.leavingReason = leavingReason;
        this.employeeNumber = employeeNumber;
        this.employmentStatus = employmentStatus;
        this.employmentRole = employmentRole;
        this.ethnicity = ethnicity;
        this.manager = manager;
        this.directReports = directReports;
        this.socialSecurityNumber = socialSecurityNumber;
        this.birthday = birthday;
        this.deceasedOn = deceasedOn;
        this.countryOfBirth = countryOfBirth;
        this.description = description;
        this.gender = gender;
        this.pronouns = pronouns;
        this.preferredLanguage = preferredLanguage;
        this.languages = languages;
        this.nationalities = nationalities;
        this.photoUrl = photoUrl;
        this.timezone = timezone;
        this.source = source;
        this.sourceId = sourceId;
        this.recordUrl = recordUrl;
        this.jobs = jobs;
        this.compensations = compensations;
        this.worksRemote = worksRemote;
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customFields = customFields;
        this.socialLinks = socialLinks;
        this.bankAccounts = bankAccounts;
        this.taxCode = taxCode;
        this.taxId = taxId;
        this.dietaryPreference = dietaryPreference;
        this.foodAllergies = foodAllergies;
        this.probationPeriod = probationPeriod;
        this.tags = tags;
        this.rowVersion = rowVersion;
        this.deleted = deleted;
        this.passThrough = passThrough;
    }
    
    public EmployeeInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The first name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Middle name of the person.
     */
    @JsonIgnore
    public JsonNullable<String> middleName() {
        return middleName;
    }

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    @JsonIgnore
    public JsonNullable<String> preferredName() {
        return preferredName;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonIgnore
    public JsonNullable<String> initials() {
        return initials;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    @JsonIgnore
    public JsonNullable<String> salutation() {
        return salutation;
    }

    /**
     * The job title of the person.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The marital status of the employee.
     */
    @JsonIgnore
    public JsonNullable<String> maritalStatus() {
        return maritalStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PersonInput> partner() {
        return (Optional<PersonInput>) partner;
    }

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    @JsonIgnore
    public JsonNullable<String> division() {
        return division;
    }

    /**
     * Unique identifier of the division this employee belongs to.
     */
    @JsonIgnore
    public JsonNullable<String> divisionId() {
        return divisionId;
    }

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * Name of the department this employee belongs to.
     */
    @JsonIgnore
    public JsonNullable<String> departmentName() {
        return departmentName;
    }

    /**
     * The team the person is currently in.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Team> team() {
        return (JsonNullable<Team>) team;
    }

    /**
     * The unique identifier of the company.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The name of the company.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * A Start Date is the date that the employee started working at the company
     */
    @JsonIgnore
    public JsonNullable<String> employmentStartDate() {
        return employmentStartDate;
    }

    /**
     * An End Date is the date that the employee ended working at the company
     */
    @JsonIgnore
    public JsonNullable<String> employmentEndDate() {
        return employmentEndDate;
    }

    /**
     * The reason because the employment ended.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LeavingReason> leavingReason() {
        return (JsonNullable<LeavingReason>) leavingReason;
    }

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    @JsonIgnore
    public JsonNullable<String> employeeNumber() {
        return employeeNumber;
    }

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentStatus> employmentStatus() {
        return (JsonNullable<EmploymentStatus>) employmentStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmploymentRole> employmentRole() {
        return (Optional<EmploymentRole>) employmentRole;
    }

    /**
     * The ethnicity of the employee
     */
    @JsonIgnore
    public JsonNullable<String> ethnicity() {
        return ethnicity;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Manager> manager() {
        return (Optional<Manager>) manager;
    }

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> directReports() {
        return (JsonNullable<List<String>>) directReports;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    @JsonIgnore
    public JsonNullable<String> socialSecurityNumber() {
        return socialSecurityNumber;
    }

    /**
     * The date of birth of the person.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> birthday() {
        return birthday;
    }

    /**
     * The date the person deceased.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> deceasedOn() {
        return deceasedOn;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> countryOfBirth() {
        return countryOfBirth;
    }

    /**
     * A description of the object.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Gender> gender() {
        return (JsonNullable<Gender>) gender;
    }

    /**
     * The preferred pronouns of the person.
     */
    @JsonIgnore
    public JsonNullable<String> pronouns() {
        return pronouns;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> preferredLanguage() {
        return preferredLanguage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> languages() {
        return (Optional<List<String>>) languages;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> nationalities() {
        return (Optional<List<String>>) nationalities;
    }

    /**
     * The URL of the photo of a person.
     */
    @JsonIgnore
    public JsonNullable<String> photoUrl() {
        return photoUrl;
    }

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    @JsonIgnore
    public JsonNullable<String> timezone() {
        return timezone;
    }

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    @JsonIgnore
    public JsonNullable<String> source() {
        return source;
    }

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    @JsonIgnore
    public JsonNullable<String> sourceId() {
        return sourceId;
    }

    @JsonIgnore
    public JsonNullable<String> recordUrl() {
        return recordUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EmployeeJobInput>> jobs() {
        return (JsonNullable<List<EmployeeJobInput>>) jobs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EmployeeCompensationInput>> compensations() {
        return (JsonNullable<List<EmployeeCompensationInput>>) compensations;
    }

    /**
     * Indicates if the employee works from a remote location.
     */
    @JsonIgnore
    public JsonNullable<Boolean> worksRemote() {
        return worksRemote;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLink>> socialLinks() {
        return (Optional<List<SocialLink>>) socialLinks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BankAccount>> bankAccounts() {
        return (Optional<List<BankAccount>>) bankAccounts;
    }

    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    @JsonIgnore
    public JsonNullable<String> taxId() {
        return taxId;
    }

    /**
     * Indicate the employee's dietary preference.
     */
    @JsonIgnore
    public JsonNullable<String> dietaryPreference() {
        return dietaryPreference;
    }

    /**
     * Indicate the employee's food allergies.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> foodAllergies() {
        return (JsonNullable<List<String>>) foodAllergies;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProbationPeriod> probationPeriod() {
        return (Optional<ProbationPeriod>) probationPeriod;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EmployeeInput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public EmployeeInput withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The first name of the person.
     */
    public EmployeeInput withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public EmployeeInput withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the person.
     */
    public EmployeeInput withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public EmployeeInput withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public EmployeeInput withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public EmployeeInput withMiddleName(JsonNullable<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    public EmployeeInput withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The name used to display the employee, often a combination of their first and last names.
     */
    public EmployeeInput withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    public EmployeeInput withPreferredName(String preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = JsonNullable.of(preferredName);
        return this;
    }

    /**
     * The name the employee prefers to be addressed by, which may be different from their legal name.
     */
    public EmployeeInput withPreferredName(JsonNullable<String> preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = preferredName;
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public EmployeeInput withInitials(String initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = JsonNullable.of(initials);
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public EmployeeInput withInitials(JsonNullable<String> initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = initials;
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public EmployeeInput withSalutation(String salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = JsonNullable.of(salutation);
        return this;
    }

    /**
     * A formal salutation for the person. For example, 'Mr', 'Mrs'
     */
    public EmployeeInput withSalutation(JsonNullable<String> salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = salutation;
        return this;
    }

    /**
     * The job title of the person.
     */
    public EmployeeInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public EmployeeInput withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The marital status of the employee.
     */
    public EmployeeInput withMaritalStatus(String maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = JsonNullable.of(maritalStatus);
        return this;
    }

    /**
     * The marital status of the employee.
     */
    public EmployeeInput withMaritalStatus(JsonNullable<String> maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = maritalStatus;
        return this;
    }

    public EmployeeInput withPartner(PersonInput partner) {
        Utils.checkNotNull(partner, "partner");
        this.partner = Optional.ofNullable(partner);
        return this;
    }


    public EmployeeInput withPartner(Optional<? extends PersonInput> partner) {
        Utils.checkNotNull(partner, "partner");
        this.partner = partner;
        return this;
    }

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public EmployeeInput withDivision(String division) {
        Utils.checkNotNull(division, "division");
        this.division = JsonNullable.of(division);
        return this;
    }

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public EmployeeInput withDivision(JsonNullable<String> division) {
        Utils.checkNotNull(division, "division");
        this.division = division;
        return this;
    }

    /**
     * Unique identifier of the division this employee belongs to.
     */
    public EmployeeInput withDivisionId(String divisionId) {
        Utils.checkNotNull(divisionId, "divisionId");
        this.divisionId = JsonNullable.of(divisionId);
        return this;
    }

    /**
     * Unique identifier of the division this employee belongs to.
     */
    public EmployeeInput withDivisionId(JsonNullable<String> divisionId) {
        Utils.checkNotNull(divisionId, "divisionId");
        this.divisionId = divisionId;
        return this;
    }

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EmployeeInput withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public EmployeeInput withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    public EmployeeInput withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * Unique identifier of the department ID this employee belongs to.
     */
    public EmployeeInput withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * Name of the department this employee belongs to.
     */
    public EmployeeInput withDepartmentName(String departmentName) {
        Utils.checkNotNull(departmentName, "departmentName");
        this.departmentName = JsonNullable.of(departmentName);
        return this;
    }

    /**
     * Name of the department this employee belongs to.
     */
    public EmployeeInput withDepartmentName(JsonNullable<String> departmentName) {
        Utils.checkNotNull(departmentName, "departmentName");
        this.departmentName = departmentName;
        return this;
    }

    /**
     * The team the person is currently in.
     */
    public EmployeeInput withTeam(Team team) {
        Utils.checkNotNull(team, "team");
        this.team = JsonNullable.of(team);
        return this;
    }

    /**
     * The team the person is currently in.
     */
    public EmployeeInput withTeam(JsonNullable<? extends Team> team) {
        Utils.checkNotNull(team, "team");
        this.team = team;
        return this;
    }

    /**
     * The unique identifier of the company.
     */
    public EmployeeInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The unique identifier of the company.
     */
    public EmployeeInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The name of the company.
     */
    public EmployeeInput withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company.
     */
    public EmployeeInput withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * A Start Date is the date that the employee started working at the company
     */
    public EmployeeInput withEmploymentStartDate(String employmentStartDate) {
        Utils.checkNotNull(employmentStartDate, "employmentStartDate");
        this.employmentStartDate = JsonNullable.of(employmentStartDate);
        return this;
    }

    /**
     * A Start Date is the date that the employee started working at the company
     */
    public EmployeeInput withEmploymentStartDate(JsonNullable<String> employmentStartDate) {
        Utils.checkNotNull(employmentStartDate, "employmentStartDate");
        this.employmentStartDate = employmentStartDate;
        return this;
    }

    /**
     * An End Date is the date that the employee ended working at the company
     */
    public EmployeeInput withEmploymentEndDate(String employmentEndDate) {
        Utils.checkNotNull(employmentEndDate, "employmentEndDate");
        this.employmentEndDate = JsonNullable.of(employmentEndDate);
        return this;
    }

    /**
     * An End Date is the date that the employee ended working at the company
     */
    public EmployeeInput withEmploymentEndDate(JsonNullable<String> employmentEndDate) {
        Utils.checkNotNull(employmentEndDate, "employmentEndDate");
        this.employmentEndDate = employmentEndDate;
        return this;
    }

    /**
     * The reason because the employment ended.
     */
    public EmployeeInput withLeavingReason(LeavingReason leavingReason) {
        Utils.checkNotNull(leavingReason, "leavingReason");
        this.leavingReason = JsonNullable.of(leavingReason);
        return this;
    }

    /**
     * The reason because the employment ended.
     */
    public EmployeeInput withLeavingReason(JsonNullable<? extends LeavingReason> leavingReason) {
        Utils.checkNotNull(leavingReason, "leavingReason");
        this.leavingReason = leavingReason;
        return this;
    }

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public EmployeeInput withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public EmployeeInput withEmployeeNumber(JsonNullable<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public EmployeeInput withEmploymentStatus(EmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public EmployeeInput withEmploymentStatus(JsonNullable<? extends EmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    public EmployeeInput withEmploymentRole(EmploymentRole employmentRole) {
        Utils.checkNotNull(employmentRole, "employmentRole");
        this.employmentRole = Optional.ofNullable(employmentRole);
        return this;
    }


    public EmployeeInput withEmploymentRole(Optional<? extends EmploymentRole> employmentRole) {
        Utils.checkNotNull(employmentRole, "employmentRole");
        this.employmentRole = employmentRole;
        return this;
    }

    /**
     * The ethnicity of the employee
     */
    public EmployeeInput withEthnicity(String ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = JsonNullable.of(ethnicity);
        return this;
    }

    /**
     * The ethnicity of the employee
     */
    public EmployeeInput withEthnicity(JsonNullable<String> ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = ethnicity;
        return this;
    }

    public EmployeeInput withManager(Manager manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }


    public EmployeeInput withManager(Optional<? extends Manager> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    public EmployeeInput withDirectReports(List<String> directReports) {
        Utils.checkNotNull(directReports, "directReports");
        this.directReports = JsonNullable.of(directReports);
        return this;
    }

    /**
     * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
     */
    public EmployeeInput withDirectReports(JsonNullable<? extends List<String>> directReports) {
        Utils.checkNotNull(directReports, "directReports");
        this.directReports = directReports;
        return this;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public EmployeeInput withSocialSecurityNumber(String socialSecurityNumber) {
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
        return this;
    }

    /**
     * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
     */
    public EmployeeInput withSocialSecurityNumber(JsonNullable<String> socialSecurityNumber) {
        Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
        this.socialSecurityNumber = socialSecurityNumber;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public EmployeeInput withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public EmployeeInput withBirthday(JsonNullable<LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The date the person deceased.
     */
    public EmployeeInput withDeceasedOn(LocalDate deceasedOn) {
        Utils.checkNotNull(deceasedOn, "deceasedOn");
        this.deceasedOn = JsonNullable.of(deceasedOn);
        return this;
    }

    /**
     * The date the person deceased.
     */
    public EmployeeInput withDeceasedOn(JsonNullable<LocalDate> deceasedOn) {
        Utils.checkNotNull(deceasedOn, "deceasedOn");
        this.deceasedOn = deceasedOn;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public EmployeeInput withCountryOfBirth(String countryOfBirth) {
        Utils.checkNotNull(countryOfBirth, "countryOfBirth");
        this.countryOfBirth = JsonNullable.of(countryOfBirth);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public EmployeeInput withCountryOfBirth(JsonNullable<String> countryOfBirth) {
        Utils.checkNotNull(countryOfBirth, "countryOfBirth");
        this.countryOfBirth = countryOfBirth;
        return this;
    }

    /**
     * A description of the object.
     */
    public EmployeeInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public EmployeeInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public EmployeeInput withGender(Gender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public EmployeeInput withGender(JsonNullable<? extends Gender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * The preferred pronouns of the person.
     */
    public EmployeeInput withPronouns(String pronouns) {
        Utils.checkNotNull(pronouns, "pronouns");
        this.pronouns = JsonNullable.of(pronouns);
        return this;
    }

    /**
     * The preferred pronouns of the person.
     */
    public EmployeeInput withPronouns(JsonNullable<String> pronouns) {
        Utils.checkNotNull(pronouns, "pronouns");
        this.pronouns = pronouns;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public EmployeeInput withPreferredLanguage(String preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = JsonNullable.of(preferredLanguage);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public EmployeeInput withPreferredLanguage(JsonNullable<String> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    public EmployeeInput withLanguages(List<String> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = Optional.ofNullable(languages);
        return this;
    }


    public EmployeeInput withLanguages(Optional<? extends List<String>> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = languages;
        return this;
    }

    public EmployeeInput withNationalities(List<String> nationalities) {
        Utils.checkNotNull(nationalities, "nationalities");
        this.nationalities = Optional.ofNullable(nationalities);
        return this;
    }


    public EmployeeInput withNationalities(Optional<? extends List<String>> nationalities) {
        Utils.checkNotNull(nationalities, "nationalities");
        this.nationalities = nationalities;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public EmployeeInput withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public EmployeeInput withPhotoUrl(JsonNullable<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    public EmployeeInput withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = JsonNullable.of(timezone);
        return this;
    }

    /**
     * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
     */
    public EmployeeInput withTimezone(JsonNullable<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    public EmployeeInput withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = JsonNullable.of(source);
        return this;
    }

    /**
     * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
     */
    public EmployeeInput withSource(JsonNullable<String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    public EmployeeInput withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }

    /**
     * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
     */
    public EmployeeInput withSourceId(JsonNullable<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public EmployeeInput withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    public EmployeeInput withRecordUrl(JsonNullable<String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    public EmployeeInput withJobs(List<EmployeeJobInput> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = JsonNullable.of(jobs);
        return this;
    }

    public EmployeeInput withJobs(JsonNullable<? extends List<EmployeeJobInput>> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = jobs;
        return this;
    }

    public EmployeeInput withCompensations(List<EmployeeCompensationInput> compensations) {
        Utils.checkNotNull(compensations, "compensations");
        this.compensations = JsonNullable.of(compensations);
        return this;
    }

    public EmployeeInput withCompensations(JsonNullable<? extends List<EmployeeCompensationInput>> compensations) {
        Utils.checkNotNull(compensations, "compensations");
        this.compensations = compensations;
        return this;
    }

    /**
     * Indicates if the employee works from a remote location.
     */
    public EmployeeInput withWorksRemote(boolean worksRemote) {
        Utils.checkNotNull(worksRemote, "worksRemote");
        this.worksRemote = JsonNullable.of(worksRemote);
        return this;
    }

    /**
     * Indicates if the employee works from a remote location.
     */
    public EmployeeInput withWorksRemote(JsonNullable<Boolean> worksRemote) {
        Utils.checkNotNull(worksRemote, "worksRemote");
        this.worksRemote = worksRemote;
        return this;
    }

    public EmployeeInput withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }


    public EmployeeInput withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public EmployeeInput withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }


    public EmployeeInput withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public EmployeeInput withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }


    public EmployeeInput withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public EmployeeInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public EmployeeInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public EmployeeInput withSocialLinks(List<SocialLink> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }


    public EmployeeInput withSocialLinks(Optional<? extends List<SocialLink>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public EmployeeInput withBankAccounts(List<BankAccount> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = Optional.ofNullable(bankAccounts);
        return this;
    }


    public EmployeeInput withBankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = bankAccounts;
        return this;
    }

    public EmployeeInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    public EmployeeInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    public EmployeeInput withTaxId(String taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = JsonNullable.of(taxId);
        return this;
    }

    public EmployeeInput withTaxId(JsonNullable<String> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }

    /**
     * Indicate the employee's dietary preference.
     */
    public EmployeeInput withDietaryPreference(String dietaryPreference) {
        Utils.checkNotNull(dietaryPreference, "dietaryPreference");
        this.dietaryPreference = JsonNullable.of(dietaryPreference);
        return this;
    }

    /**
     * Indicate the employee's dietary preference.
     */
    public EmployeeInput withDietaryPreference(JsonNullable<String> dietaryPreference) {
        Utils.checkNotNull(dietaryPreference, "dietaryPreference");
        this.dietaryPreference = dietaryPreference;
        return this;
    }

    /**
     * Indicate the employee's food allergies.
     */
    public EmployeeInput withFoodAllergies(List<String> foodAllergies) {
        Utils.checkNotNull(foodAllergies, "foodAllergies");
        this.foodAllergies = JsonNullable.of(foodAllergies);
        return this;
    }

    /**
     * Indicate the employee's food allergies.
     */
    public EmployeeInput withFoodAllergies(JsonNullable<? extends List<String>> foodAllergies) {
        Utils.checkNotNull(foodAllergies, "foodAllergies");
        this.foodAllergies = foodAllergies;
        return this;
    }

    public EmployeeInput withProbationPeriod(ProbationPeriod probationPeriod) {
        Utils.checkNotNull(probationPeriod, "probationPeriod");
        this.probationPeriod = Optional.ofNullable(probationPeriod);
        return this;
    }


    public EmployeeInput withProbationPeriod(Optional<? extends ProbationPeriod> probationPeriod) {
        Utils.checkNotNull(probationPeriod, "probationPeriod");
        this.probationPeriod = probationPeriod;
        return this;
    }

    public EmployeeInput withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public EmployeeInput withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public EmployeeInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public EmployeeInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public EmployeeInput withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public EmployeeInput withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public EmployeeInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public EmployeeInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeInput other = (EmployeeInput) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.preferredName, other.preferredName) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.salutation, other.salutation) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.maritalStatus, other.maritalStatus) &&
            Utils.enhancedDeepEquals(this.partner, other.partner) &&
            Utils.enhancedDeepEquals(this.division, other.division) &&
            Utils.enhancedDeepEquals(this.divisionId, other.divisionId) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.departmentName, other.departmentName) &&
            Utils.enhancedDeepEquals(this.team, other.team) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.employmentStartDate, other.employmentStartDate) &&
            Utils.enhancedDeepEquals(this.employmentEndDate, other.employmentEndDate) &&
            Utils.enhancedDeepEquals(this.leavingReason, other.leavingReason) &&
            Utils.enhancedDeepEquals(this.employeeNumber, other.employeeNumber) &&
            Utils.enhancedDeepEquals(this.employmentStatus, other.employmentStatus) &&
            Utils.enhancedDeepEquals(this.employmentRole, other.employmentRole) &&
            Utils.enhancedDeepEquals(this.ethnicity, other.ethnicity) &&
            Utils.enhancedDeepEquals(this.manager, other.manager) &&
            Utils.enhancedDeepEquals(this.directReports, other.directReports) &&
            Utils.enhancedDeepEquals(this.socialSecurityNumber, other.socialSecurityNumber) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.deceasedOn, other.deceasedOn) &&
            Utils.enhancedDeepEquals(this.countryOfBirth, other.countryOfBirth) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.pronouns, other.pronouns) &&
            Utils.enhancedDeepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Utils.enhancedDeepEquals(this.languages, other.languages) &&
            Utils.enhancedDeepEquals(this.nationalities, other.nationalities) &&
            Utils.enhancedDeepEquals(this.photoUrl, other.photoUrl) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.jobs, other.jobs) &&
            Utils.enhancedDeepEquals(this.compensations, other.compensations) &&
            Utils.enhancedDeepEquals(this.worksRemote, other.worksRemote) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.bankAccounts, other.bankAccounts) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.taxId, other.taxId) &&
            Utils.enhancedDeepEquals(this.dietaryPreference, other.dietaryPreference) &&
            Utils.enhancedDeepEquals(this.foodAllergies, other.foodAllergies) &&
            Utils.enhancedDeepEquals(this.probationPeriod, other.probationPeriod) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, firstName, lastName,
            middleName, displayName, preferredName,
            initials, salutation, title,
            maritalStatus, partner, division,
            divisionId, department, departmentId,
            departmentName, team, companyId,
            companyName, employmentStartDate, employmentEndDate,
            leavingReason, employeeNumber, employmentStatus,
            employmentRole, ethnicity, manager,
            directReports, socialSecurityNumber, birthday,
            deceasedOn, countryOfBirth, description,
            gender, pronouns, preferredLanguage,
            languages, nationalities, photoUrl,
            timezone, source, sourceId,
            recordUrl, jobs, compensations,
            worksRemote, addresses, phoneNumbers,
            emails, customFields, socialLinks,
            bankAccounts, taxCode, taxId,
            dietaryPreference, foodAllergies, probationPeriod,
            tags, rowVersion, deleted,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeInput.class,
                "id", id,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "displayName", displayName,
                "preferredName", preferredName,
                "initials", initials,
                "salutation", salutation,
                "title", title,
                "maritalStatus", maritalStatus,
                "partner", partner,
                "division", division,
                "divisionId", divisionId,
                "department", department,
                "departmentId", departmentId,
                "departmentName", departmentName,
                "team", team,
                "companyId", companyId,
                "companyName", companyName,
                "employmentStartDate", employmentStartDate,
                "employmentEndDate", employmentEndDate,
                "leavingReason", leavingReason,
                "employeeNumber", employeeNumber,
                "employmentStatus", employmentStatus,
                "employmentRole", employmentRole,
                "ethnicity", ethnicity,
                "manager", manager,
                "directReports", directReports,
                "socialSecurityNumber", socialSecurityNumber,
                "birthday", birthday,
                "deceasedOn", deceasedOn,
                "countryOfBirth", countryOfBirth,
                "description", description,
                "gender", gender,
                "pronouns", pronouns,
                "preferredLanguage", preferredLanguage,
                "languages", languages,
                "nationalities", nationalities,
                "photoUrl", photoUrl,
                "timezone", timezone,
                "source", source,
                "sourceId", sourceId,
                "recordUrl", recordUrl,
                "jobs", jobs,
                "compensations", compensations,
                "worksRemote", worksRemote,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customFields", customFields,
                "socialLinks", socialLinks,
                "bankAccounts", bankAccounts,
                "taxCode", taxCode,
                "taxId", taxId,
                "dietaryPreference", dietaryPreference,
                "foodAllergies", foodAllergies,
                "probationPeriod", probationPeriod,
                "tags", tags,
                "rowVersion", rowVersion,
                "deleted", deleted,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<String> firstName = JsonNullable.undefined();

        private JsonNullable<String> lastName = JsonNullable.undefined();

        private JsonNullable<String> middleName = JsonNullable.undefined();

        private JsonNullable<String> displayName = JsonNullable.undefined();

        private JsonNullable<String> preferredName = JsonNullable.undefined();

        private JsonNullable<String> initials = JsonNullable.undefined();

        private JsonNullable<String> salutation = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<String> maritalStatus = JsonNullable.undefined();

        private Optional<? extends PersonInput> partner = Optional.empty();

        private JsonNullable<String> division = JsonNullable.undefined();

        private JsonNullable<String> divisionId = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> department = JsonNullable.undefined();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private JsonNullable<String> departmentName = JsonNullable.undefined();

        private JsonNullable<? extends Team> team = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> companyName = JsonNullable.undefined();

        private JsonNullable<String> employmentStartDate = JsonNullable.undefined();

        private JsonNullable<String> employmentEndDate = JsonNullable.undefined();

        private JsonNullable<? extends LeavingReason> leavingReason = JsonNullable.undefined();

        private JsonNullable<String> employeeNumber = JsonNullable.undefined();

        private JsonNullable<? extends EmploymentStatus> employmentStatus = JsonNullable.undefined();

        private Optional<? extends EmploymentRole> employmentRole = Optional.empty();

        private JsonNullable<String> ethnicity = JsonNullable.undefined();

        private Optional<? extends Manager> manager = Optional.empty();

        private JsonNullable<? extends List<String>> directReports = JsonNullable.undefined();

        private JsonNullable<String> socialSecurityNumber = JsonNullable.undefined();

        private JsonNullable<LocalDate> birthday = JsonNullable.undefined();

        private JsonNullable<LocalDate> deceasedOn = JsonNullable.undefined();

        private JsonNullable<String> countryOfBirth = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<? extends Gender> gender = JsonNullable.undefined();

        private JsonNullable<String> pronouns = JsonNullable.undefined();

        private JsonNullable<String> preferredLanguage = JsonNullable.undefined();

        private Optional<? extends List<String>> languages = Optional.empty();

        private Optional<? extends List<String>> nationalities = Optional.empty();

        private JsonNullable<String> photoUrl = JsonNullable.undefined();

        private JsonNullable<String> timezone = JsonNullable.undefined();

        private JsonNullable<String> source = JsonNullable.undefined();

        private JsonNullable<String> sourceId = JsonNullable.undefined();

        private JsonNullable<String> recordUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<EmployeeJobInput>> jobs = JsonNullable.undefined();

        private JsonNullable<? extends List<EmployeeCompensationInput>> compensations = JsonNullable.undefined();

        private JsonNullable<Boolean> worksRemote = JsonNullable.undefined();

        private Optional<? extends List<Address>> addresses = Optional.empty();

        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();

        private Optional<? extends List<Email>> emails = Optional.empty();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private Optional<? extends List<SocialLink>> socialLinks = Optional.empty();

        private Optional<? extends List<BankAccount>> bankAccounts = Optional.empty();

        private JsonNullable<String> taxCode = JsonNullable.undefined();

        private JsonNullable<String> taxId = JsonNullable.undefined();

        private JsonNullable<String> dietaryPreference = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> foodAllergies = JsonNullable.undefined();

        private Optional<? extends ProbationPeriod> probationPeriod = Optional.empty();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private JsonNullable<Boolean> deleted = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }


        /**
         * The name used to display the employee, often a combination of their first and last names.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The name used to display the employee, often a combination of their first and last names.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        /**
         * The name the employee prefers to be addressed by, which may be different from their legal name.
         */
        public Builder preferredName(String preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = JsonNullable.of(preferredName);
            return this;
        }

        /**
         * The name the employee prefers to be addressed by, which may be different from their legal name.
         */
        public Builder preferredName(JsonNullable<String> preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = preferredName;
            return this;
        }


        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(String initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(JsonNullable<String> initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = initials;
            return this;
        }


        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(String salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * A formal salutation for the person. For example, 'Mr', 'Mrs'
         */
        public Builder salutation(JsonNullable<String> salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = salutation;
            return this;
        }


        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The marital status of the employee.
         */
        public Builder maritalStatus(String maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = JsonNullable.of(maritalStatus);
            return this;
        }

        /**
         * The marital status of the employee.
         */
        public Builder maritalStatus(JsonNullable<String> maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = maritalStatus;
            return this;
        }


        public Builder partner(PersonInput partner) {
            Utils.checkNotNull(partner, "partner");
            this.partner = Optional.ofNullable(partner);
            return this;
        }

        public Builder partner(Optional<? extends PersonInput> partner) {
            Utils.checkNotNull(partner, "partner");
            this.partner = partner;
            return this;
        }


        /**
         * The division the person is currently in. Usually a collection of departments or teams or regions.
         */
        public Builder division(String division) {
            Utils.checkNotNull(division, "division");
            this.division = JsonNullable.of(division);
            return this;
        }

        /**
         * The division the person is currently in. Usually a collection of departments or teams or regions.
         */
        public Builder division(JsonNullable<String> division) {
            Utils.checkNotNull(division, "division");
            this.division = division;
            return this;
        }


        /**
         * Unique identifier of the division this employee belongs to.
         */
        public Builder divisionId(String divisionId) {
            Utils.checkNotNull(divisionId, "divisionId");
            this.divisionId = JsonNullable.of(divisionId);
            return this;
        }

        /**
         * Unique identifier of the division this employee belongs to.
         */
        public Builder divisionId(JsonNullable<String> divisionId) {
            Utils.checkNotNull(divisionId, "divisionId");
            this.divisionId = divisionId;
            return this;
        }


        /**
         * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }


        /**
         * Unique identifier of the department ID this employee belongs to.
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * Unique identifier of the department ID this employee belongs to.
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * Name of the department this employee belongs to.
         */
        public Builder departmentName(String departmentName) {
            Utils.checkNotNull(departmentName, "departmentName");
            this.departmentName = JsonNullable.of(departmentName);
            return this;
        }

        /**
         * Name of the department this employee belongs to.
         */
        public Builder departmentName(JsonNullable<String> departmentName) {
            Utils.checkNotNull(departmentName, "departmentName");
            this.departmentName = departmentName;
            return this;
        }


        /**
         * The team the person is currently in.
         */
        public Builder team(Team team) {
            Utils.checkNotNull(team, "team");
            this.team = JsonNullable.of(team);
            return this;
        }

        /**
         * The team the person is currently in.
         */
        public Builder team(JsonNullable<? extends Team> team) {
            Utils.checkNotNull(team, "team");
            this.team = team;
            return this;
        }


        /**
         * The unique identifier of the company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The unique identifier of the company.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The name of the company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }


        /**
         * A Start Date is the date that the employee started working at the company
         */
        public Builder employmentStartDate(String employmentStartDate) {
            Utils.checkNotNull(employmentStartDate, "employmentStartDate");
            this.employmentStartDate = JsonNullable.of(employmentStartDate);
            return this;
        }

        /**
         * A Start Date is the date that the employee started working at the company
         */
        public Builder employmentStartDate(JsonNullable<String> employmentStartDate) {
            Utils.checkNotNull(employmentStartDate, "employmentStartDate");
            this.employmentStartDate = employmentStartDate;
            return this;
        }


        /**
         * An End Date is the date that the employee ended working at the company
         */
        public Builder employmentEndDate(String employmentEndDate) {
            Utils.checkNotNull(employmentEndDate, "employmentEndDate");
            this.employmentEndDate = JsonNullable.of(employmentEndDate);
            return this;
        }

        /**
         * An End Date is the date that the employee ended working at the company
         */
        public Builder employmentEndDate(JsonNullable<String> employmentEndDate) {
            Utils.checkNotNull(employmentEndDate, "employmentEndDate");
            this.employmentEndDate = employmentEndDate;
            return this;
        }


        /**
         * The reason because the employment ended.
         */
        public Builder leavingReason(LeavingReason leavingReason) {
            Utils.checkNotNull(leavingReason, "leavingReason");
            this.leavingReason = JsonNullable.of(leavingReason);
            return this;
        }

        /**
         * The reason because the employment ended.
         */
        public Builder leavingReason(JsonNullable<? extends LeavingReason> leavingReason) {
            Utils.checkNotNull(leavingReason, "leavingReason");
            this.leavingReason = leavingReason;
            return this;
        }


        /**
         * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
         */
        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
         */
        public Builder employeeNumber(JsonNullable<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }


        /**
         * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
         */
        public Builder employmentStatus(EmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        /**
         * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
         */
        public Builder employmentStatus(JsonNullable<? extends EmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }


        public Builder employmentRole(EmploymentRole employmentRole) {
            Utils.checkNotNull(employmentRole, "employmentRole");
            this.employmentRole = Optional.ofNullable(employmentRole);
            return this;
        }

        public Builder employmentRole(Optional<? extends EmploymentRole> employmentRole) {
            Utils.checkNotNull(employmentRole, "employmentRole");
            this.employmentRole = employmentRole;
            return this;
        }


        /**
         * The ethnicity of the employee
         */
        public Builder ethnicity(String ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = JsonNullable.of(ethnicity);
            return this;
        }

        /**
         * The ethnicity of the employee
         */
        public Builder ethnicity(JsonNullable<String> ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = ethnicity;
            return this;
        }


        public Builder manager(Manager manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        public Builder manager(Optional<? extends Manager> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }


        /**
         * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
         */
        public Builder directReports(List<String> directReports) {
            Utils.checkNotNull(directReports, "directReports");
            this.directReports = JsonNullable.of(directReports);
            return this;
        }

        /**
         * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
         */
        public Builder directReports(JsonNullable<? extends List<String>> directReports) {
            Utils.checkNotNull(directReports, "directReports");
            this.directReports = directReports;
            return this;
        }


        /**
         * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
         */
        public Builder socialSecurityNumber(String socialSecurityNumber) {
            Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
            this.socialSecurityNumber = JsonNullable.of(socialSecurityNumber);
            return this;
        }

        /**
         * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
         */
        public Builder socialSecurityNumber(JsonNullable<String> socialSecurityNumber) {
            Utils.checkNotNull(socialSecurityNumber, "socialSecurityNumber");
            this.socialSecurityNumber = socialSecurityNumber;
            return this;
        }


        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }


        /**
         * The date the person deceased.
         */
        public Builder deceasedOn(LocalDate deceasedOn) {
            Utils.checkNotNull(deceasedOn, "deceasedOn");
            this.deceasedOn = JsonNullable.of(deceasedOn);
            return this;
        }

        /**
         * The date the person deceased.
         */
        public Builder deceasedOn(JsonNullable<LocalDate> deceasedOn) {
            Utils.checkNotNull(deceasedOn, "deceasedOn");
            this.deceasedOn = deceasedOn;
            return this;
        }


        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder countryOfBirth(String countryOfBirth) {
            Utils.checkNotNull(countryOfBirth, "countryOfBirth");
            this.countryOfBirth = JsonNullable.of(countryOfBirth);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder countryOfBirth(JsonNullable<String> countryOfBirth) {
            Utils.checkNotNull(countryOfBirth, "countryOfBirth");
            this.countryOfBirth = countryOfBirth;
            return this;
        }


        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(Gender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(JsonNullable<? extends Gender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }


        /**
         * The preferred pronouns of the person.
         */
        public Builder pronouns(String pronouns) {
            Utils.checkNotNull(pronouns, "pronouns");
            this.pronouns = JsonNullable.of(pronouns);
            return this;
        }

        /**
         * The preferred pronouns of the person.
         */
        public Builder pronouns(JsonNullable<String> pronouns) {
            Utils.checkNotNull(pronouns, "pronouns");
            this.pronouns = pronouns;
            return this;
        }


        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder preferredLanguage(String preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = JsonNullable.of(preferredLanguage);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder preferredLanguage(JsonNullable<String> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }


        public Builder languages(List<String> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = Optional.ofNullable(languages);
            return this;
        }

        public Builder languages(Optional<? extends List<String>> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = languages;
            return this;
        }


        public Builder nationalities(List<String> nationalities) {
            Utils.checkNotNull(nationalities, "nationalities");
            this.nationalities = Optional.ofNullable(nationalities);
            return this;
        }

        public Builder nationalities(Optional<? extends List<String>> nationalities) {
            Utils.checkNotNull(nationalities, "nationalities");
            this.nationalities = nationalities;
            return this;
        }


        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }


        /**
         * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
         */
        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = JsonNullable.of(timezone);
            return this;
        }

        /**
         * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
         */
        public Builder timezone(JsonNullable<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }


        /**
         * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
         */
        public Builder source(JsonNullable<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
         */
        public Builder sourceId(JsonNullable<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }


        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder recordUrl(JsonNullable<String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }


        public Builder jobs(List<EmployeeJobInput> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = JsonNullable.of(jobs);
            return this;
        }

        public Builder jobs(JsonNullable<? extends List<EmployeeJobInput>> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = jobs;
            return this;
        }


        public Builder compensations(List<EmployeeCompensationInput> compensations) {
            Utils.checkNotNull(compensations, "compensations");
            this.compensations = JsonNullable.of(compensations);
            return this;
        }

        public Builder compensations(JsonNullable<? extends List<EmployeeCompensationInput>> compensations) {
            Utils.checkNotNull(compensations, "compensations");
            this.compensations = compensations;
            return this;
        }


        /**
         * Indicates if the employee works from a remote location.
         */
        public Builder worksRemote(boolean worksRemote) {
            Utils.checkNotNull(worksRemote, "worksRemote");
            this.worksRemote = JsonNullable.of(worksRemote);
            return this;
        }

        /**
         * Indicates if the employee works from a remote location.
         */
        public Builder worksRemote(JsonNullable<Boolean> worksRemote) {
            Utils.checkNotNull(worksRemote, "worksRemote");
            this.worksRemote = worksRemote;
            return this;
        }


        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }


        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        public Builder socialLinks(List<SocialLink> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLink>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }


        public Builder bankAccounts(List<BankAccount> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = Optional.ofNullable(bankAccounts);
            return this;
        }

        public Builder bankAccounts(Optional<? extends List<BankAccount>> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = bankAccounts;
            return this;
        }


        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }


        public Builder taxId(String taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = JsonNullable.of(taxId);
            return this;
        }

        public Builder taxId(JsonNullable<String> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }


        /**
         * Indicate the employee's dietary preference.
         */
        public Builder dietaryPreference(String dietaryPreference) {
            Utils.checkNotNull(dietaryPreference, "dietaryPreference");
            this.dietaryPreference = JsonNullable.of(dietaryPreference);
            return this;
        }

        /**
         * Indicate the employee's dietary preference.
         */
        public Builder dietaryPreference(JsonNullable<String> dietaryPreference) {
            Utils.checkNotNull(dietaryPreference, "dietaryPreference");
            this.dietaryPreference = dietaryPreference;
            return this;
        }


        /**
         * Indicate the employee's food allergies.
         */
        public Builder foodAllergies(List<String> foodAllergies) {
            Utils.checkNotNull(foodAllergies, "foodAllergies");
            this.foodAllergies = JsonNullable.of(foodAllergies);
            return this;
        }

        /**
         * Indicate the employee's food allergies.
         */
        public Builder foodAllergies(JsonNullable<? extends List<String>> foodAllergies) {
            Utils.checkNotNull(foodAllergies, "foodAllergies");
            this.foodAllergies = foodAllergies;
            return this;
        }


        public Builder probationPeriod(ProbationPeriod probationPeriod) {
            Utils.checkNotNull(probationPeriod, "probationPeriod");
            this.probationPeriod = Optional.ofNullable(probationPeriod);
            return this;
        }

        public Builder probationPeriod(Optional<? extends ProbationPeriod> probationPeriod) {
            Utils.checkNotNull(probationPeriod, "probationPeriod");
            this.probationPeriod = probationPeriod;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public EmployeeInput build() {

            return new EmployeeInput(
                id, firstName, lastName,
                middleName, displayName, preferredName,
                initials, salutation, title,
                maritalStatus, partner, division,
                divisionId, department, departmentId,
                departmentName, team, companyId,
                companyName, employmentStartDate, employmentEndDate,
                leavingReason, employeeNumber, employmentStatus,
                employmentRole, ethnicity, manager,
                directReports, socialSecurityNumber, birthday,
                deceasedOn, countryOfBirth, description,
                gender, pronouns, preferredLanguage,
                languages, nationalities, photoUrl,
                timezone, source, sourceId,
                recordUrl, jobs, compensations,
                worksRemote, addresses, phoneNumbers,
                emails, customFields, socialLinks,
                bankAccounts, taxCode, taxId,
                dietaryPreference, foodAllergies, probationPeriod,
                tags, rowVersion, deleted,
                passThrough);
        }

    }
}
