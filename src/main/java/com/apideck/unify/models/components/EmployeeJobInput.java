/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeJobInput {
    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The position and responsibilities of the person within the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private JsonNullable<String> role;

    /**
     * The date on which the employee starts working in their current job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<LocalDate> startDate;

    /**
     * The date on which the employee leaves or is expected to leave their current job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<LocalDate> endDate;

    /**
     * The rate of pay for the employee in their current job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensation_rate")
    private JsonNullable<Double> compensationRate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Unit of measurement for employee compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_unit")
    private JsonNullable<PaymentUnit> paymentUnit;

    /**
     * The date on which the employee was hired by the organization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hired_at")
    private JsonNullable<LocalDate> hiredAt;

    /**
     * Indicates whether this the employee's primary job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_primary")
    private JsonNullable<Boolean> isPrimary;

    /**
     * Indicates whether this the employee has a manager role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_manager")
    private JsonNullable<Boolean> isManager;

    /**
     * Indicates the status of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<EmployeeJobStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Address location;

    @JsonCreator
    public EmployeeJobInput(
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("role") @Nullable JsonNullable<String> role,
            @JsonProperty("start_date") @Nullable JsonNullable<LocalDate> startDate,
            @JsonProperty("end_date") @Nullable JsonNullable<LocalDate> endDate,
            @JsonProperty("compensation_rate") @Nullable JsonNullable<Double> compensationRate,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("payment_unit") @Nullable JsonNullable<PaymentUnit> paymentUnit,
            @JsonProperty("hired_at") @Nullable JsonNullable<LocalDate> hiredAt,
            @JsonProperty("is_primary") @Nullable JsonNullable<Boolean> isPrimary,
            @JsonProperty("is_manager") @Nullable JsonNullable<Boolean> isManager,
            @JsonProperty("status") @Nullable JsonNullable<EmployeeJobStatus> status,
            @JsonProperty("location") @Nullable Address location) {
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.role = Optional.ofNullable(role)
            .orElse(JsonNullable.undefined());
        this.startDate = Optional.ofNullable(startDate)
            .orElse(JsonNullable.undefined());
        this.endDate = Optional.ofNullable(endDate)
            .orElse(JsonNullable.undefined());
        this.compensationRate = Optional.ofNullable(compensationRate)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.paymentUnit = Optional.ofNullable(paymentUnit)
            .orElse(JsonNullable.undefined());
        this.hiredAt = Optional.ofNullable(hiredAt)
            .orElse(JsonNullable.undefined());
        this.isPrimary = Optional.ofNullable(isPrimary)
            .orElse(JsonNullable.undefined());
        this.isManager = Optional.ofNullable(isManager)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.location = location;
    }
    
    public EmployeeJobInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The position and responsibilities of the person within the organization.
     */
    public JsonNullable<String> role() {
        return this.role;
    }

    /**
     * The date on which the employee starts working in their current job role.
     */
    public JsonNullable<LocalDate> startDate() {
        return this.startDate;
    }

    /**
     * The date on which the employee leaves or is expected to leave their current job role.
     */
    public JsonNullable<LocalDate> endDate() {
        return this.endDate;
    }

    /**
     * The rate of pay for the employee in their current job role.
     */
    public JsonNullable<Double> compensationRate() {
        return this.compensationRate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Unit of measurement for employee compensation.
     */
    public JsonNullable<PaymentUnit> paymentUnit() {
        return this.paymentUnit;
    }

    /**
     * The date on which the employee was hired by the organization
     */
    public JsonNullable<LocalDate> hiredAt() {
        return this.hiredAt;
    }

    /**
     * Indicates whether this the employee's primary job.
     */
    public JsonNullable<Boolean> isPrimary() {
        return this.isPrimary;
    }

    /**
     * Indicates whether this the employee has a manager role.
     */
    public JsonNullable<Boolean> isManager() {
        return this.isManager;
    }

    /**
     * Indicates the status of the job.
     */
    public JsonNullable<EmployeeJobStatus> status() {
        return this.status;
    }

    public Optional<Address> location() {
        return Optional.ofNullable(this.location);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The job title of the person.
     */
    public EmployeeJobInput withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The position and responsibilities of the person within the organization.
     */
    public EmployeeJobInput withRole(@Nullable String role) {
        this.role = JsonNullable.of(role);
        return this;
    }


    /**
     * The date on which the employee starts working in their current job role.
     */
    public EmployeeJobInput withStartDate(@Nullable LocalDate startDate) {
        this.startDate = JsonNullable.of(startDate);
        return this;
    }


    /**
     * The date on which the employee leaves or is expected to leave their current job role.
     */
    public EmployeeJobInput withEndDate(@Nullable LocalDate endDate) {
        this.endDate = JsonNullable.of(endDate);
        return this;
    }


    /**
     * The rate of pay for the employee in their current job role.
     */
    public EmployeeJobInput withCompensationRate(@Nullable Double compensationRate) {
        this.compensationRate = JsonNullable.of(compensationRate);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public EmployeeJobInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Unit of measurement for employee compensation.
     */
    public EmployeeJobInput withPaymentUnit(@Nullable PaymentUnit paymentUnit) {
        this.paymentUnit = JsonNullable.of(paymentUnit);
        return this;
    }


    /**
     * The date on which the employee was hired by the organization
     */
    public EmployeeJobInput withHiredAt(@Nullable LocalDate hiredAt) {
        this.hiredAt = JsonNullable.of(hiredAt);
        return this;
    }


    /**
     * Indicates whether this the employee's primary job.
     */
    public EmployeeJobInput withIsPrimary(@Nullable Boolean isPrimary) {
        this.isPrimary = JsonNullable.of(isPrimary);
        return this;
    }


    /**
     * Indicates whether this the employee has a manager role.
     */
    public EmployeeJobInput withIsManager(@Nullable Boolean isManager) {
        this.isManager = JsonNullable.of(isManager);
        return this;
    }


    /**
     * Indicates the status of the job.
     */
    public EmployeeJobInput withStatus(@Nullable EmployeeJobStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    public EmployeeJobInput withLocation(@Nullable Address location) {
        this.location = location;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeJobInput other = (EmployeeJobInput) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.compensationRate, other.compensationRate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.paymentUnit, other.paymentUnit) &&
            Utils.enhancedDeepEquals(this.hiredAt, other.hiredAt) &&
            Utils.enhancedDeepEquals(this.isPrimary, other.isPrimary) &&
            Utils.enhancedDeepEquals(this.isManager, other.isManager) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.location, other.location);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, role, startDate,
            endDate, compensationRate, currency,
            paymentUnit, hiredAt, isPrimary,
            isManager, status, location);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeJobInput.class,
                "title", title,
                "role", role,
                "startDate", startDate,
                "endDate", endDate,
                "compensationRate", compensationRate,
                "currency", currency,
                "paymentUnit", paymentUnit,
                "hiredAt", hiredAt,
                "isPrimary", isPrimary,
                "isManager", isManager,
                "status", status,
                "location", location);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> title;

        private JsonNullable<String> role;

        private JsonNullable<LocalDate> startDate;

        private JsonNullable<LocalDate> endDate;

        private JsonNullable<Double> compensationRate;

        private JsonNullable<Currency> currency;

        private JsonNullable<PaymentUnit> paymentUnit;

        private JsonNullable<LocalDate> hiredAt;

        private JsonNullable<Boolean> isPrimary;

        private JsonNullable<Boolean> isManager;

        private JsonNullable<EmployeeJobStatus> status;

        private Address location;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The position and responsibilities of the person within the organization.
         */
        public Builder role(@Nullable String role) {
            this.role = JsonNullable.of(role);
            return this;
        }

        /**
         * The date on which the employee starts working in their current job role.
         */
        public Builder startDate(@Nullable LocalDate startDate) {
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The date on which the employee leaves or is expected to leave their current job role.
         */
        public Builder endDate(@Nullable LocalDate endDate) {
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * The rate of pay for the employee in their current job role.
         */
        public Builder compensationRate(@Nullable Double compensationRate) {
            this.compensationRate = JsonNullable.of(compensationRate);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Unit of measurement for employee compensation.
         */
        public Builder paymentUnit(@Nullable PaymentUnit paymentUnit) {
            this.paymentUnit = JsonNullable.of(paymentUnit);
            return this;
        }

        /**
         * The date on which the employee was hired by the organization
         */
        public Builder hiredAt(@Nullable LocalDate hiredAt) {
            this.hiredAt = JsonNullable.of(hiredAt);
            return this;
        }

        /**
         * Indicates whether this the employee's primary job.
         */
        public Builder isPrimary(@Nullable Boolean isPrimary) {
            this.isPrimary = JsonNullable.of(isPrimary);
            return this;
        }

        /**
         * Indicates whether this the employee has a manager role.
         */
        public Builder isManager(@Nullable Boolean isManager) {
            this.isManager = JsonNullable.of(isManager);
            return this;
        }

        /**
         * Indicates the status of the job.
         */
        public Builder status(@Nullable EmployeeJobStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder location(@Nullable Address location) {
            this.location = location;
            return this;
        }

        public EmployeeJobInput build() {
            return new EmployeeJobInput(
                title, role, startDate,
                endDate, compensationRate, currency,
                paymentUnit, hiredAt, isPrimary,
                isManager, status, location);
        }

    }
}
