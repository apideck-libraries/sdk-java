/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeePayroll {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * ID of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private JsonNullable<String> employeeId;

    /**
     * The unique identifier of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("processed")
    private JsonNullable<Boolean> processed;

    /**
     * The date the payroll was processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processed_date")
    private JsonNullable<String> processedDate;

    /**
     * The date on which employees will be paid for the payroll.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("check_date")
    private JsonNullable<String> checkDate;

    /**
     * The start date, inclusive, of the pay period.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("start_date")
    private JsonNullable<String> startDate;

    /**
     * The end date, inclusive, of the pay period.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("end_date")
    private JsonNullable<String> endDate;

    /**
     * The overview of the payroll totals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private PayrollTotals totals;

    /**
     * An array of compensations for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensations")
    private List<Compensation> compensations;

    @JsonCreator
    public EmployeePayroll(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("employee_id") @Nullable JsonNullable<String> employeeId,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("processed") @Nullable Boolean processed,
            @JsonProperty("processed_date") @Nullable JsonNullable<String> processedDate,
            @JsonProperty("check_date") @Nullable String checkDate,
            @JsonProperty("start_date") @Nullable String startDate,
            @JsonProperty("end_date") @Nullable String endDate,
            @JsonProperty("totals") @Nullable PayrollTotals totals,
            @JsonProperty("compensations") @Nullable List<Compensation> compensations) {
        this.id = JsonNullable.of(id);
        this.employeeId = Optional.ofNullable(employeeId)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.processed = JsonNullable.of(processed);
        this.processedDate = Optional.ofNullable(processedDate)
            .orElse(JsonNullable.undefined());
        this.checkDate = JsonNullable.of(checkDate);
        this.startDate = JsonNullable.of(startDate);
        this.endDate = JsonNullable.of(endDate);
        this.totals = totals;
        this.compensations = compensations;
    }
    
    public EmployeePayroll() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * ID of the employee
     */
    public JsonNullable<String> employeeId() {
        return this.employeeId;
    }

    /**
     * The unique identifier of the company.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    public JsonNullable<Boolean> processed() {
        return this.processed;
    }

    /**
     * The date the payroll was processed.
     */
    public JsonNullable<String> processedDate() {
        return this.processedDate;
    }

    /**
     * The date on which employees will be paid for the payroll.
     */
    public JsonNullable<String> checkDate() {
        return this.checkDate;
    }

    /**
     * The start date, inclusive, of the pay period.
     */
    public JsonNullable<String> startDate() {
        return this.startDate;
    }

    /**
     * The end date, inclusive, of the pay period.
     */
    public JsonNullable<String> endDate() {
        return this.endDate;
    }

    /**
     * The overview of the payroll totals.
     */
    public Optional<PayrollTotals> totals() {
        return Optional.ofNullable(this.totals);
    }

    /**
     * An array of compensations for the payroll.
     */
    public Optional<List<Compensation>> compensations() {
        return Optional.ofNullable(this.compensations);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public EmployeePayroll withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * ID of the employee
     */
    public EmployeePayroll withEmployeeId(@Nullable String employeeId) {
        this.employeeId = JsonNullable.of(employeeId);
        return this;
    }


    /**
     * The unique identifier of the company.
     */
    public EmployeePayroll withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    public EmployeePayroll withProcessed(@Nullable Boolean processed) {
        this.processed = JsonNullable.of(processed);
        return this;
    }


    /**
     * The date the payroll was processed.
     */
    public EmployeePayroll withProcessedDate(@Nullable String processedDate) {
        this.processedDate = JsonNullable.of(processedDate);
        return this;
    }


    /**
     * The date on which employees will be paid for the payroll.
     */
    public EmployeePayroll withCheckDate(@Nullable String checkDate) {
        this.checkDate = JsonNullable.of(checkDate);
        return this;
    }


    /**
     * The start date, inclusive, of the pay period.
     */
    public EmployeePayroll withStartDate(@Nullable String startDate) {
        this.startDate = JsonNullable.of(startDate);
        return this;
    }


    /**
     * The end date, inclusive, of the pay period.
     */
    public EmployeePayroll withEndDate(@Nullable String endDate) {
        this.endDate = JsonNullable.of(endDate);
        return this;
    }


    /**
     * The overview of the payroll totals.
     */
    public EmployeePayroll withTotals(@Nullable PayrollTotals totals) {
        this.totals = totals;
        return this;
    }


    /**
     * An array of compensations for the payroll.
     */
    public EmployeePayroll withCompensations(@Nullable List<Compensation> compensations) {
        this.compensations = compensations;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeePayroll other = (EmployeePayroll) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.employeeId, other.employeeId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.processed, other.processed) &&
            Utils.enhancedDeepEquals(this.processedDate, other.processedDate) &&
            Utils.enhancedDeepEquals(this.checkDate, other.checkDate) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.totals, other.totals) &&
            Utils.enhancedDeepEquals(this.compensations, other.compensations);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, employeeId, companyId,
            processed, processedDate, checkDate,
            startDate, endDate, totals,
            compensations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeePayroll.class,
                "id", id,
                "employeeId", employeeId,
                "companyId", companyId,
                "processed", processed,
                "processedDate", processedDate,
                "checkDate", checkDate,
                "startDate", startDate,
                "endDate", endDate,
                "totals", totals,
                "compensations", compensations);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> employeeId;

        private JsonNullable<String> companyId;

        private Boolean processed;

        private JsonNullable<String> processedDate;

        private String checkDate;

        private String startDate;

        private String endDate;

        private PayrollTotals totals;

        private List<Compensation> compensations;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * ID of the employee
         */
        public Builder employeeId(@Nullable String employeeId) {
            this.employeeId = JsonNullable.of(employeeId);
            return this;
        }

        /**
         * The unique identifier of the company.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
         */
        public Builder processed(@Nullable Boolean processed) {
            this.processed = processed;
            return this;
        }

        /**
         * The date the payroll was processed.
         */
        public Builder processedDate(@Nullable String processedDate) {
            this.processedDate = JsonNullable.of(processedDate);
            return this;
        }

        /**
         * The date on which employees will be paid for the payroll.
         */
        public Builder checkDate(@Nullable String checkDate) {
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The start date, inclusive, of the pay period.
         */
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date, inclusive, of the pay period.
         */
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * The overview of the payroll totals.
         */
        public Builder totals(@Nullable PayrollTotals totals) {
            this.totals = totals;
            return this;
        }

        /**
         * An array of compensations for the payroll.
         */
        public Builder compensations(@Nullable List<Compensation> compensations) {
            this.compensations = compensations;
            return this;
        }

        public EmployeePayroll build() {
            return new EmployeePayroll(
                id, employeeId, companyId,
                processed, processedDate, checkDate,
                startDate, endDate, totals,
                compensations);
        }

    }
}
