/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeSchedules {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee")
    private Optional<? extends Employee> employee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedules")
    private JsonNullable<? extends List<Schedule>> schedules;

    @JsonCreator
    public EmployeeSchedules(
            @JsonProperty("employee") Optional<? extends Employee> employee,
            @JsonProperty("schedules") JsonNullable<? extends List<Schedule>> schedules) {
        Utils.checkNotNull(employee, "employee");
        Utils.checkNotNull(schedules, "schedules");
        this.employee = employee;
        this.schedules = schedules;
    }
    
    public EmployeeSchedules() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Employee> employee() {
        return (Optional<Employee>) employee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Schedule>> schedules() {
        return (JsonNullable<List<Schedule>>) schedules;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EmployeeSchedules withEmployee(Employee employee) {
        Utils.checkNotNull(employee, "employee");
        this.employee = Optional.ofNullable(employee);
        return this;
    }


    public EmployeeSchedules withEmployee(Optional<? extends Employee> employee) {
        Utils.checkNotNull(employee, "employee");
        this.employee = employee;
        return this;
    }

    public EmployeeSchedules withSchedules(List<Schedule> schedules) {
        Utils.checkNotNull(schedules, "schedules");
        this.schedules = JsonNullable.of(schedules);
        return this;
    }

    public EmployeeSchedules withSchedules(JsonNullable<? extends List<Schedule>> schedules) {
        Utils.checkNotNull(schedules, "schedules");
        this.schedules = schedules;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeSchedules other = (EmployeeSchedules) o;
        return 
            Utils.enhancedDeepEquals(this.employee, other.employee) &&
            Utils.enhancedDeepEquals(this.schedules, other.schedules);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            employee, schedules);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeSchedules.class,
                "employee", employee,
                "schedules", schedules);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Employee> employee = Optional.empty();

        private JsonNullable<? extends List<Schedule>> schedules = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder employee(Employee employee) {
            Utils.checkNotNull(employee, "employee");
            this.employee = Optional.ofNullable(employee);
            return this;
        }

        public Builder employee(Optional<? extends Employee> employee) {
            Utils.checkNotNull(employee, "employee");
            this.employee = employee;
            return this;
        }


        public Builder schedules(List<Schedule> schedules) {
            Utils.checkNotNull(schedules, "schedules");
            this.schedules = JsonNullable.of(schedules);
            return this;
        }

        public Builder schedules(JsonNullable<? extends List<Schedule>> schedules) {
            Utils.checkNotNull(schedules, "schedules");
            this.schedules = schedules;
            return this;
        }

        public EmployeeSchedules build() {

            return new EmployeeSchedules(
                employee, schedules);
        }

    }
}
