/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeSchedules {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee")
    private Employee employee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedules")
    private JsonNullable<List<Schedule>> schedules;

    @JsonCreator
    public EmployeeSchedules(
            @JsonProperty("employee") @Nullable Employee employee,
            @JsonProperty("schedules") @Nullable JsonNullable<List<Schedule>> schedules) {
        this.employee = employee;
        this.schedules = Optional.ofNullable(schedules)
            .orElse(JsonNullable.undefined());
    }
    
    public EmployeeSchedules() {
        this(null, null);
    }

    public Optional<Employee> employee() {
        return Optional.ofNullable(this.employee);
    }

    public JsonNullable<List<Schedule>> schedules() {
        return this.schedules;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EmployeeSchedules withEmployee(@Nullable Employee employee) {
        this.employee = employee;
        return this;
    }


    public EmployeeSchedules withSchedules(@Nullable List<Schedule> schedules) {
        this.schedules = JsonNullable.of(schedules);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeSchedules other = (EmployeeSchedules) o;
        return 
            Utils.enhancedDeepEquals(this.employee, other.employee) &&
            Utils.enhancedDeepEquals(this.schedules, other.schedules);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            employee, schedules);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeSchedules.class,
                "employee", employee,
                "schedules", schedules);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Employee employee;

        private JsonNullable<List<Schedule>> schedules;

        private Builder() {
          // force use of static builder() method
        }

        public Builder employee(@Nullable Employee employee) {
            this.employee = employee;
            return this;
        }

        public Builder schedules(@Nullable List<Schedule> schedules) {
            this.schedules = JsonNullable.of(schedules);
            return this;
        }

        public EmployeeSchedules build() {
            return new EmployeeSchedules(
                employee, schedules);
        }

    }
}
