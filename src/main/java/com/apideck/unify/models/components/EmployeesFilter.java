/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class EmployeesFilter {
    /**
     * Company ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=company_id")
    private String companyId;

    /**
     * Email to filter on
     */
    @SpeakeasyMetadata("queryParam:name=email")
    private String email;

    /**
     * First Name to filter on
     */
    @SpeakeasyMetadata("queryParam:name=first_name")
    private String firstName;

    /**
     * Job title to filter on
     */
    @SpeakeasyMetadata("queryParam:name=title")
    private String title;

    /**
     * Last Name to filter on
     */
    @SpeakeasyMetadata("queryParam:name=last_name")
    private String lastName;

    /**
     * Manager id to filter on
     */
    @SpeakeasyMetadata("queryParam:name=manager_id")
    private String managerId;

    /**
     * Employment status to filter on
     */
    @SpeakeasyMetadata("queryParam:name=employment_status")
    private EmployeesFilterEmploymentStatus employmentStatus;

    /**
     * Employee number to filter on
     */
    @SpeakeasyMetadata("queryParam:name=employee_number")
    private String employeeNumber;

    /**
     * ID of the department to filter on
     */
    @SpeakeasyMetadata("queryParam:name=department_id")
    private String departmentId;

    /**
     * City to filter on
     */
    @SpeakeasyMetadata("queryParam:name=city")
    private String city;

    /**
     * Country to filter on
     */
    @SpeakeasyMetadata("queryParam:name=country")
    private String country;

    @JsonCreator
    public EmployeesFilter(
            @Nullable String companyId,
            @Nullable String email,
            @Nullable String firstName,
            @Nullable String title,
            @Nullable String lastName,
            @Nullable String managerId,
            @Nullable EmployeesFilterEmploymentStatus employmentStatus,
            @Nullable String employeeNumber,
            @Nullable String departmentId,
            @Nullable String city,
            @Nullable String country) {
        this.companyId = companyId;
        this.email = email;
        this.firstName = firstName;
        this.title = title;
        this.lastName = lastName;
        this.managerId = managerId;
        this.employmentStatus = employmentStatus;
        this.employeeNumber = employeeNumber;
        this.departmentId = departmentId;
        this.city = city;
        this.country = country;
    }
    
    public EmployeesFilter() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Company ID to filter on
     */
    public Optional<String> companyId() {
        return Optional.ofNullable(this.companyId);
    }

    /**
     * Email to filter on
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * First Name to filter on
     */
    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Job title to filter on
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Last Name to filter on
     */
    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * Manager id to filter on
     */
    public Optional<String> managerId() {
        return Optional.ofNullable(this.managerId);
    }

    /**
     * Employment status to filter on
     */
    public Optional<EmployeesFilterEmploymentStatus> employmentStatus() {
        return Optional.ofNullable(this.employmentStatus);
    }

    /**
     * Employee number to filter on
     */
    public Optional<String> employeeNumber() {
        return Optional.ofNullable(this.employeeNumber);
    }

    /**
     * ID of the department to filter on
     */
    public Optional<String> departmentId() {
        return Optional.ofNullable(this.departmentId);
    }

    /**
     * City to filter on
     */
    public Optional<String> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * Country to filter on
     */
    public Optional<String> country() {
        return Optional.ofNullable(this.country);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Company ID to filter on
     */
    public EmployeesFilter withCompanyId(@Nullable String companyId) {
        this.companyId = companyId;
        return this;
    }


    /**
     * Email to filter on
     */
    public EmployeesFilter withEmail(@Nullable String email) {
        this.email = email;
        return this;
    }


    /**
     * First Name to filter on
     */
    public EmployeesFilter withFirstName(@Nullable String firstName) {
        this.firstName = firstName;
        return this;
    }


    /**
     * Job title to filter on
     */
    public EmployeesFilter withTitle(@Nullable String title) {
        this.title = title;
        return this;
    }


    /**
     * Last Name to filter on
     */
    public EmployeesFilter withLastName(@Nullable String lastName) {
        this.lastName = lastName;
        return this;
    }


    /**
     * Manager id to filter on
     */
    public EmployeesFilter withManagerId(@Nullable String managerId) {
        this.managerId = managerId;
        return this;
    }


    /**
     * Employment status to filter on
     */
    public EmployeesFilter withEmploymentStatus(@Nullable EmployeesFilterEmploymentStatus employmentStatus) {
        this.employmentStatus = employmentStatus;
        return this;
    }


    /**
     * Employee number to filter on
     */
    public EmployeesFilter withEmployeeNumber(@Nullable String employeeNumber) {
        this.employeeNumber = employeeNumber;
        return this;
    }


    /**
     * ID of the department to filter on
     */
    public EmployeesFilter withDepartmentId(@Nullable String departmentId) {
        this.departmentId = departmentId;
        return this;
    }


    /**
     * City to filter on
     */
    public EmployeesFilter withCity(@Nullable String city) {
        this.city = city;
        return this;
    }


    /**
     * Country to filter on
     */
    public EmployeesFilter withCountry(@Nullable String country) {
        this.country = country;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeesFilter other = (EmployeesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.managerId, other.managerId) &&
            Utils.enhancedDeepEquals(this.employmentStatus, other.employmentStatus) &&
            Utils.enhancedDeepEquals(this.employeeNumber, other.employeeNumber) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            companyId, email, firstName,
            title, lastName, managerId,
            employmentStatus, employeeNumber, departmentId,
            city, country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeesFilter.class,
                "companyId", companyId,
                "email", email,
                "firstName", firstName,
                "title", title,
                "lastName", lastName,
                "managerId", managerId,
                "employmentStatus", employmentStatus,
                "employeeNumber", employeeNumber,
                "departmentId", departmentId,
                "city", city,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String companyId;

        private String email;

        private String firstName;

        private String title;

        private String lastName;

        private String managerId;

        private EmployeesFilterEmploymentStatus employmentStatus;

        private String employeeNumber;

        private String departmentId;

        private String city;

        private String country;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Company ID to filter on
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = companyId;
            return this;
        }

        /**
         * Email to filter on
         */
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }

        /**
         * First Name to filter on
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = firstName;
            return this;
        }

        /**
         * Job title to filter on
         */
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }

        /**
         * Last Name to filter on
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * Manager id to filter on
         */
        public Builder managerId(@Nullable String managerId) {
            this.managerId = managerId;
            return this;
        }

        /**
         * Employment status to filter on
         */
        public Builder employmentStatus(@Nullable EmployeesFilterEmploymentStatus employmentStatus) {
            this.employmentStatus = employmentStatus;
            return this;
        }

        /**
         * Employee number to filter on
         */
        public Builder employeeNumber(@Nullable String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }

        /**
         * ID of the department to filter on
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = departmentId;
            return this;
        }

        /**
         * City to filter on
         */
        public Builder city(@Nullable String city) {
            this.city = city;
            return this;
        }

        /**
         * Country to filter on
         */
        public Builder country(@Nullable String country) {
            this.country = country;
            return this;
        }

        public EmployeesFilter build() {
            return new EmployeesFilter(
                companyId, email, firstName,
                title, lastName, managerId,
                employmentStatus, employeeNumber, departmentId,
                city, country);
        }

    }
}
