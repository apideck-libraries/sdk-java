/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExpenseInput {
    /**
     * Number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("transaction_date")
    private JsonNullable<OffsetDateTime> transactionDate;

    /**
     * The unique identifier for the ledger account that this expense should be credited to.
     */
    @JsonProperty("account_id")
    private String accountId;

    /**
     * The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private String customerId;

    /**
     * The ID of the supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier_id")
    private String supplierId;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The type of payment for the expense.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_type")
    private JsonNullable<ExpensePaymentType> paymentType;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * The type of expense.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<ExpenseType> type;

    /**
     * The memo of the expense.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRateInput taxRate;

    /**
     * The total amount of the expense line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;

    /**
     * Expense line items linked to this expense.
     */
    @JsonProperty("line_items")
    private List<ExpenseLineItemInput> lineItems;

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public ExpenseInput(
            @JsonProperty("number") @Nullable JsonNullable<String> number,
            @JsonProperty("transaction_date") @Nullable OffsetDateTime transactionDate,
            @JsonProperty("account_id") @Nonnull String accountId,
            @JsonProperty("customer_id") @Nullable String customerId,
            @JsonProperty("supplier_id") @Nullable String supplierId,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("payment_type") @Nullable JsonNullable<ExpensePaymentType> paymentType,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("type") @Nullable JsonNullable<ExpenseType> type,
            @JsonProperty("memo") @Nullable JsonNullable<String> memo,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRateInput taxRate,
            @JsonProperty("total_amount") @Nullable JsonNullable<Double> totalAmount,
            @JsonProperty("line_items") @Nonnull List<ExpenseLineItemInput> lineItems,
            @JsonProperty("reference") @Nullable JsonNullable<String> reference,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.number = Optional.ofNullable(number)
            .orElse(JsonNullable.undefined());
        this.transactionDate = JsonNullable.of(transactionDate);
        this.accountId = Optional.ofNullable(accountId)
            .orElseThrow(() -> new IllegalArgumentException("accountId cannot be null"));
        this.customerId = customerId;
        this.supplierId = supplierId;
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.paymentType = Optional.ofNullable(paymentType)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.memo = Optional.ofNullable(memo)
            .orElse(JsonNullable.undefined());
        this.taxRate = taxRate;
        this.totalAmount = Optional.ofNullable(totalAmount)
            .orElse(JsonNullable.undefined());
        this.lineItems = Optional.ofNullable(lineItems)
            .orElseThrow(() -> new IllegalArgumentException("lineItems cannot be null"));
        this.reference = Optional.ofNullable(reference)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public ExpenseInput(
            @Nonnull String accountId,
            @Nonnull List<ExpenseLineItemInput> lineItems) {
        this(null, null, accountId,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, lineItems,
            null, null, null,
            null);
    }

    /**
     * Number.
     */
    public JsonNullable<String> number() {
        return this.number;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public JsonNullable<OffsetDateTime> transactionDate() {
        return this.transactionDate;
    }

    /**
     * The unique identifier for the ledger account that this expense should be credited to.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
     */
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * The ID of the supplier this entity is linked to.
     */
    public Optional<String> supplierId() {
        return Optional.ofNullable(this.supplierId);
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The ID of the department
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    /**
     * The type of payment for the expense.
     */
    public JsonNullable<ExpensePaymentType> paymentType() {
        return this.paymentType;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * The type of expense.
     */
    public JsonNullable<ExpenseType> type() {
        return this.type;
    }

    /**
     * The memo of the expense.
     */
    public JsonNullable<String> memo() {
        return this.memo;
    }

    public Optional<LinkedTaxRateInput> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    /**
     * The total amount of the expense line item.
     */
    public JsonNullable<Double> totalAmount() {
        return this.totalAmount;
    }

    /**
     * Expense line items linked to this expense.
     */
    public List<ExpenseLineItemInput> lineItems() {
        return this.lineItems;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public JsonNullable<String> reference() {
        return this.reference;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Number.
     */
    public ExpenseInput withNumber(@Nullable String number) {
        this.number = JsonNullable.of(number);
        return this;
    }


    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public ExpenseInput withTransactionDate(@Nullable OffsetDateTime transactionDate) {
        this.transactionDate = JsonNullable.of(transactionDate);
        return this;
    }


    /**
     * The unique identifier for the ledger account that this expense should be credited to.
     */
    public ExpenseInput withAccountId(@Nonnull String accountId) {
        this.accountId = Utils.checkNotNull(accountId, "accountId");
        return this;
    }


    /**
     * The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
     */
    public ExpenseInput withCustomerId(@Nullable String customerId) {
        this.customerId = customerId;
        return this;
    }


    /**
     * The ID of the supplier this entity is linked to.
     */
    public ExpenseInput withSupplierId(@Nullable String supplierId) {
        this.supplierId = supplierId;
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public ExpenseInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The ID of the department
     */
    public ExpenseInput withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    /**
     * The type of payment for the expense.
     */
    public ExpenseInput withPaymentType(@Nullable ExpensePaymentType paymentType) {
        this.paymentType = JsonNullable.of(paymentType);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ExpenseInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public ExpenseInput withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * The type of expense.
     */
    public ExpenseInput withType(@Nullable ExpenseType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The memo of the expense.
     */
    public ExpenseInput withMemo(@Nullable String memo) {
        this.memo = JsonNullable.of(memo);
        return this;
    }


    public ExpenseInput withTaxRate(@Nullable LinkedTaxRateInput taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    /**
     * The total amount of the expense line item.
     */
    public ExpenseInput withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    /**
     * Expense line items linked to this expense.
     */
    public ExpenseInput withLineItems(@Nonnull List<ExpenseLineItemInput> lineItems) {
        this.lineItems = Utils.checkNotNull(lineItems, "lineItems");
        return this;
    }


    /**
     * Optional reference identifier for the transaction.
     */
    public ExpenseInput withReference(@Nullable String reference) {
        this.reference = JsonNullable.of(reference);
        return this;
    }


    public ExpenseInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public ExpenseInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ExpenseInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpenseInput other = (ExpenseInput) o;
        return 
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.transactionDate, other.transactionDate) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.supplierId, other.supplierId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.paymentType, other.paymentType) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            number, transactionDate, accountId,
            customerId, supplierId, companyId,
            departmentId, paymentType, currency,
            currencyRate, type, memo,
            taxRate, totalAmount, lineItems,
            reference, customFields, rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpenseInput.class,
                "number", number,
                "transactionDate", transactionDate,
                "accountId", accountId,
                "customerId", customerId,
                "supplierId", supplierId,
                "companyId", companyId,
                "departmentId", departmentId,
                "paymentType", paymentType,
                "currency", currency,
                "currencyRate", currencyRate,
                "type", type,
                "memo", memo,
                "taxRate", taxRate,
                "totalAmount", totalAmount,
                "lineItems", lineItems,
                "reference", reference,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> number;

        private OffsetDateTime transactionDate;

        private String accountId;

        private String customerId;

        private String supplierId;

        private JsonNullable<String> companyId;

        private JsonNullable<String> departmentId;

        private JsonNullable<ExpensePaymentType> paymentType;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> currencyRate;

        private JsonNullable<ExpenseType> type;

        private JsonNullable<String> memo;

        private LinkedTaxRateInput taxRate;

        private JsonNullable<Double> totalAmount;

        private List<ExpenseLineItemInput> lineItems;

        private JsonNullable<String> reference;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number.
         */
        public Builder number(@Nullable String number) {
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(@Nullable OffsetDateTime transactionDate) {
            this.transactionDate = transactionDate;
            return this;
        }

        /**
         * The unique identifier for the ledger account that this expense should be credited to.
         */
        public Builder accountId(@Nonnull String accountId) {
            this.accountId = Utils.checkNotNull(accountId, "accountId");
            return this;
        }

        /**
         * The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
         */
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * The ID of the supplier this entity is linked to.
         */
        public Builder supplierId(@Nullable String supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The type of payment for the expense.
         */
        public Builder paymentType(@Nullable ExpensePaymentType paymentType) {
            this.paymentType = JsonNullable.of(paymentType);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * The type of expense.
         */
        public Builder type(@Nullable ExpenseType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The memo of the expense.
         */
        public Builder memo(@Nullable String memo) {
            this.memo = JsonNullable.of(memo);
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRateInput taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        /**
         * The total amount of the expense line item.
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Expense line items linked to this expense.
         */
        public Builder lineItems(@Nonnull List<ExpenseLineItemInput> lineItems) {
            this.lineItems = Utils.checkNotNull(lineItems, "lineItems");
            return this;
        }

        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = JsonNullable.of(reference);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public ExpenseInput build() {
            return new ExpenseInput(
                number, transactionDate, accountId,
                customerId, supplierId, companyId,
                departmentId, paymentType, currency,
                currencyRate, type, memo,
                taxRate, totalAmount, lineItems,
                reference, customFields, rowVersion,
                passThrough);
        }

    }
}
