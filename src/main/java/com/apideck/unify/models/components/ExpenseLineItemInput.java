/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExpenseLineItemInput {
    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    /**
     * The unique identifier for the ledger account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private Optional<String> accountId;

    /**
     * The ID of the customer this expense item is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private Optional<String> customerId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRateInput> taxRate;

    /**
     * The expense line item description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The total amount of the expense line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    /**
     * Boolean that indicates if the line item is billable or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billable")
    private Optional<Boolean> billable;

    /**
     * Line number of the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    @JsonCreator
    public ExpenseLineItemInput(
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("account_id") Optional<String> accountId,
            @JsonProperty("customer_id") Optional<String> customerId,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("location_id") JsonNullable<String> locationId,
            @JsonProperty("subsidiary_id") JsonNullable<String> subsidiaryId,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRateInput> taxRate,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("billable") Optional<Boolean> billable,
            @JsonProperty("line_number") JsonNullable<Long> lineNumber) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(billable, "billable");
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.trackingCategories = trackingCategories;
        this.accountId = accountId;
        this.customerId = customerId;
        this.departmentId = departmentId;
        this.locationId = locationId;
        this.subsidiaryId = subsidiaryId;
        this.taxRate = taxRate;
        this.description = description;
        this.totalAmount = totalAmount;
        this.billable = billable;
        this.lineNumber = lineNumber;
    }
    
    public ExpenseLineItemInput() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    /**
     * The unique identifier for the ledger account.
     */
    @JsonIgnore
    public Optional<String> accountId() {
        return accountId;
    }

    /**
     * The ID of the customer this expense item is linked to.
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * The ID of the department
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The ID of the location
     */
    @JsonIgnore
    public JsonNullable<String> locationId() {
        return locationId;
    }

    /**
     * The ID of the subsidiary
     */
    @JsonIgnore
    public JsonNullable<String> subsidiaryId() {
        return subsidiaryId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRateInput> taxRate() {
        return (Optional<LinkedTaxRateInput>) taxRate;
    }

    /**
     * The expense line item description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The total amount of the expense line item.
     */
    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Boolean that indicates if the line item is billable or not.
     */
    @JsonIgnore
    public Optional<Boolean> billable() {
        return billable;
    }

    /**
     * Line number of the resource
     */
    @JsonIgnore
    public JsonNullable<Long> lineNumber() {
        return lineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A list of linked tracking categories.
     */
    public ExpenseLineItemInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public ExpenseLineItemInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * The unique identifier for the ledger account.
     */
    public ExpenseLineItemInput withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.ofNullable(accountId);
        return this;
    }


    /**
     * The unique identifier for the ledger account.
     */
    public ExpenseLineItemInput withAccountId(Optional<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The ID of the customer this expense item is linked to.
     */
    public ExpenseLineItemInput withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * The ID of the customer this expense item is linked to.
     */
    public ExpenseLineItemInput withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The ID of the department
     */
    public ExpenseLineItemInput withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The ID of the department
     */
    public ExpenseLineItemInput withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The ID of the location
     */
    public ExpenseLineItemInput withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = JsonNullable.of(locationId);
        return this;
    }

    /**
     * The ID of the location
     */
    public ExpenseLineItemInput withLocationId(JsonNullable<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public ExpenseLineItemInput withSubsidiaryId(String subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public ExpenseLineItemInput withSubsidiaryId(JsonNullable<String> subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = subsidiaryId;
        return this;
    }

    public ExpenseLineItemInput withTaxRate(LinkedTaxRateInput taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }


    public ExpenseLineItemInput withTaxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * The expense line item description
     */
    public ExpenseLineItemInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The expense line item description
     */
    public ExpenseLineItemInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The total amount of the expense line item.
     */
    public ExpenseLineItemInput withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * The total amount of the expense line item.
     */
    public ExpenseLineItemInput withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Boolean that indicates if the line item is billable or not.
     */
    public ExpenseLineItemInput withBillable(boolean billable) {
        Utils.checkNotNull(billable, "billable");
        this.billable = Optional.ofNullable(billable);
        return this;
    }


    /**
     * Boolean that indicates if the line item is billable or not.
     */
    public ExpenseLineItemInput withBillable(Optional<Boolean> billable) {
        Utils.checkNotNull(billable, "billable");
        this.billable = billable;
        return this;
    }

    /**
     * Line number of the resource
     */
    public ExpenseLineItemInput withLineNumber(long lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * Line number of the resource
     */
    public ExpenseLineItemInput withLineNumber(JsonNullable<Long> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpenseLineItemInput other = (ExpenseLineItemInput) o;
        return 
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.billable, other.billable) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            trackingCategories, accountId, customerId,
            departmentId, locationId, subsidiaryId,
            taxRate, description, totalAmount,
            billable, lineNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpenseLineItemInput.class,
                "trackingCategories", trackingCategories,
                "accountId", accountId,
                "customerId", customerId,
                "departmentId", departmentId,
                "locationId", locationId,
                "subsidiaryId", subsidiaryId,
                "taxRate", taxRate,
                "description", description,
                "totalAmount", totalAmount,
                "billable", billable,
                "lineNumber", lineNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private Optional<String> accountId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private JsonNullable<String> locationId = JsonNullable.undefined();

        private JsonNullable<String> subsidiaryId = JsonNullable.undefined();

        private Optional<? extends LinkedTaxRateInput> taxRate = Optional.empty();

        private JsonNullable<String> description = JsonNullable.undefined();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Boolean> billable = Optional.empty();

        private JsonNullable<Long> lineNumber = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        /**
         * The unique identifier for the ledger account.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        /**
         * The unique identifier for the ledger account.
         */
        public Builder accountId(Optional<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The ID of the customer this expense item is linked to.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * The ID of the customer this expense item is linked to.
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The ID of the department
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * The ID of the location
         */
        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(JsonNullable<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }


        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(String subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(JsonNullable<String> subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = subsidiaryId;
            return this;
        }


        public Builder taxRate(LinkedTaxRateInput taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        /**
         * The expense line item description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The expense line item description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The total amount of the expense line item.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * The total amount of the expense line item.
         */
        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * Boolean that indicates if the line item is billable or not.
         */
        public Builder billable(boolean billable) {
            Utils.checkNotNull(billable, "billable");
            this.billable = Optional.ofNullable(billable);
            return this;
        }

        /**
         * Boolean that indicates if the line item is billable or not.
         */
        public Builder billable(Optional<Boolean> billable) {
            Utils.checkNotNull(billable, "billable");
            this.billable = billable;
            return this;
        }


        /**
         * Line number of the resource
         */
        public Builder lineNumber(long lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(JsonNullable<Long> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }

        public ExpenseLineItemInput build() {

            return new ExpenseLineItemInput(
                trackingCategories, accountId, customerId,
                departmentId, locationId, subsidiaryId,
                taxRate, description, totalAmount,
                billable, lineNumber);
        }

    }
}
