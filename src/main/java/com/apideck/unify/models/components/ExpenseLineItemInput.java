/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExpenseLineItemInput {
    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

    /**
     * The unique identifier for the ledger account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private String accountId;

    /**
     * The ID of the customer this expense item is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private String customerId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRateInput taxRate;

    /**
     * The expense line item description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The total amount of the expense line item.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;

    /**
     * Boolean that indicates if the line item is billable or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billable")
    private Boolean billable;

    /**
     * Line number of the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    @JsonCreator
    public ExpenseLineItemInput(
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("account_id") @Nullable String accountId,
            @JsonProperty("customer_id") @Nullable String customerId,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("location_id") @Nullable JsonNullable<String> locationId,
            @JsonProperty("subsidiary_id") @Nullable JsonNullable<String> subsidiaryId,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRateInput taxRate,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("total_amount") @Nullable Double totalAmount,
            @JsonProperty("billable") @Nullable Boolean billable,
            @JsonProperty("line_number") @Nullable JsonNullable<Long> lineNumber) {
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.accountId = accountId;
        this.customerId = customerId;
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.locationId = Optional.ofNullable(locationId)
            .orElse(JsonNullable.undefined());
        this.subsidiaryId = Optional.ofNullable(subsidiaryId)
            .orElse(JsonNullable.undefined());
        this.taxRate = taxRate;
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.totalAmount = JsonNullable.of(totalAmount);
        this.billable = billable;
        this.lineNumber = Optional.ofNullable(lineNumber)
            .orElse(JsonNullable.undefined());
    }
    
    public ExpenseLineItemInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    /**
     * The unique identifier for the ledger account.
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The ID of the customer this expense item is linked to.
     */
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * The ID of the department
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    /**
     * The ID of the location
     */
    public JsonNullable<String> locationId() {
        return this.locationId;
    }

    /**
     * The ID of the subsidiary
     */
    public JsonNullable<String> subsidiaryId() {
        return this.subsidiaryId;
    }

    public Optional<LinkedTaxRateInput> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    /**
     * The expense line item description
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The total amount of the expense line item.
     */
    public JsonNullable<Double> totalAmount() {
        return this.totalAmount;
    }

    /**
     * Boolean that indicates if the line item is billable or not.
     */
    public Optional<Boolean> billable() {
        return Optional.ofNullable(this.billable);
    }

    /**
     * Line number of the resource
     */
    public JsonNullable<Long> lineNumber() {
        return this.lineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A list of linked tracking categories.
     */
    public ExpenseLineItemInput withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    /**
     * The unique identifier for the ledger account.
     */
    public ExpenseLineItemInput withAccountId(@Nullable String accountId) {
        this.accountId = accountId;
        return this;
    }


    /**
     * The ID of the customer this expense item is linked to.
     */
    public ExpenseLineItemInput withCustomerId(@Nullable String customerId) {
        this.customerId = customerId;
        return this;
    }


    /**
     * The ID of the department
     */
    public ExpenseLineItemInput withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    /**
     * The ID of the location
     */
    public ExpenseLineItemInput withLocationId(@Nullable String locationId) {
        this.locationId = JsonNullable.of(locationId);
        return this;
    }


    /**
     * The ID of the subsidiary
     */
    public ExpenseLineItemInput withSubsidiaryId(@Nullable String subsidiaryId) {
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }


    public ExpenseLineItemInput withTaxRate(@Nullable LinkedTaxRateInput taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    /**
     * The expense line item description
     */
    public ExpenseLineItemInput withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The total amount of the expense line item.
     */
    public ExpenseLineItemInput withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    /**
     * Boolean that indicates if the line item is billable or not.
     */
    public ExpenseLineItemInput withBillable(@Nullable Boolean billable) {
        this.billable = billable;
        return this;
    }


    /**
     * Line number of the resource
     */
    public ExpenseLineItemInput withLineNumber(@Nullable Long lineNumber) {
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpenseLineItemInput other = (ExpenseLineItemInput) o;
        return 
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.billable, other.billable) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            trackingCategories, accountId, customerId,
            departmentId, locationId, subsidiaryId,
            taxRate, description, totalAmount,
            billable, lineNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpenseLineItemInput.class,
                "trackingCategories", trackingCategories,
                "accountId", accountId,
                "customerId", customerId,
                "departmentId", departmentId,
                "locationId", locationId,
                "subsidiaryId", subsidiaryId,
                "taxRate", taxRate,
                "description", description,
                "totalAmount", totalAmount,
                "billable", billable,
                "lineNumber", lineNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private String accountId;

        private String customerId;

        private JsonNullable<String> departmentId;

        private JsonNullable<String> locationId;

        private JsonNullable<String> subsidiaryId;

        private LinkedTaxRateInput taxRate;

        private JsonNullable<String> description;

        private Double totalAmount;

        private Boolean billable;

        private JsonNullable<Long> lineNumber;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * The unique identifier for the ledger account.
         */
        public Builder accountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * The ID of the customer this expense item is linked to.
         */
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(@Nullable String locationId) {
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(@Nullable String subsidiaryId) {
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRateInput taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        /**
         * The expense line item description
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The total amount of the expense line item.
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Boolean that indicates if the line item is billable or not.
         */
        public Builder billable(@Nullable Boolean billable) {
            this.billable = billable;
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(@Nullable Long lineNumber) {
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        public ExpenseLineItemInput build() {
            return new ExpenseLineItemInput(
                trackingCategories, accountId, customerId,
                departmentId, locationId, subsidiaryId,
                taxRate, description, totalAmount,
                billable, lineNumber);
        }

    }
}
