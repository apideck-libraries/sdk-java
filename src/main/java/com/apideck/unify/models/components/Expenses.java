/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Expenses
 * 
 * <p>The operating expenses accounts
 */
public class Expenses {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The account code of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private String code;

    /**
     * The name of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private String title;

    /**
     * The type of profit and loss
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<ProfitAndLossType> type;

    /**
     * The aggregated total of all accounts within this category.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total")
    private JsonNullable<Double> total;


    @JsonProperty("records")
    private Object records;

    @JsonCreator
    public Expenses(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("code") @Nullable String code,
            @JsonProperty("title") @Nullable String title,
            @JsonProperty("type") @Nullable JsonNullable<ProfitAndLossType> type,
            @JsonProperty("total") @Nullable Double total,
            @JsonProperty("records") @Nonnull Object records) {
        this.id = id;
        this.code = code;
        this.title = title;
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.total = JsonNullable.of(total);
        this.records = Optional.ofNullable(records)
            .orElseThrow(() -> new IllegalArgumentException("records cannot be null"));
    }
    
    public Expenses(
            @Nonnull Object records) {
        this(null, null, null,
            null, null, records);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The account code of the account
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * The name of the account.
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The type of profit and loss
     */
    public JsonNullable<ProfitAndLossType> type() {
        return this.type;
    }

    /**
     * The aggregated total of all accounts within this category.
     */
    public JsonNullable<Double> total() {
        return this.total;
    }

    public Object records() {
        return this.records;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Expenses withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The account code of the account
     */
    public Expenses withCode(@Nullable String code) {
        this.code = code;
        return this;
    }


    /**
     * The name of the account.
     */
    public Expenses withTitle(@Nullable String title) {
        this.title = title;
        return this;
    }


    /**
     * The type of profit and loss
     */
    public Expenses withType(@Nullable ProfitAndLossType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The aggregated total of all accounts within this category.
     */
    public Expenses withTotal(@Nullable Double total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    public Expenses withRecords(@Nonnull Object records) {
        this.records = Utils.checkNotNull(records, "records");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Expenses other = (Expenses) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.records, other.records);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, code, title,
            type, total, records);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Expenses.class,
                "id", id,
                "code", code,
                "title", title,
                "type", type,
                "total", total,
                "records", records);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String code;

        private String title;

        private JsonNullable<ProfitAndLossType> type;

        private Double total;

        private Object records;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The account code of the account
         */
        public Builder code(@Nullable String code) {
            this.code = code;
            return this;
        }

        /**
         * The name of the account.
         */
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }

        /**
         * The type of profit and loss
         */
        public Builder type(@Nullable ProfitAndLossType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The aggregated total of all accounts within this category.
         */
        public Builder total(@Nullable Double total) {
            this.total = total;
            return this;
        }

        public Builder records(@Nonnull Object records) {
            this.records = Utils.checkNotNull(records, "records");
            return this;
        }

        public Expenses build() {
            return new Expenses(
                id, code, title,
                type, total, records);
        }

    }
}
