/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ExtendPaths {
    /**
     * JSONPath string specifying where to apply the value.
     */
    @JsonProperty("path")
    private String path;

    /**
     * The value to set at the specified path, can be any type.
     */
    @JsonProperty("value")
    private Object value;

    @JsonCreator
    public ExtendPaths(
            @JsonProperty("path") @Nonnull String path,
            @JsonProperty("value") @Nonnull Object value) {
        this.path = Optional.ofNullable(path)
            .orElseThrow(() -> new IllegalArgumentException("path cannot be null"));
        this.value = Optional.ofNullable(value)
            .orElseThrow(() -> new IllegalArgumentException("value cannot be null"));
    }

    /**
     * JSONPath string specifying where to apply the value.
     */
    public String path() {
        return this.path;
    }

    /**
     * The value to set at the specified path, can be any type.
     */
    public Object value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * JSONPath string specifying where to apply the value.
     */
    public ExtendPaths withPath(@Nonnull String path) {
        this.path = Utils.checkNotNull(path, "path");
        return this;
    }


    /**
     * The value to set at the specified path, can be any type.
     */
    public ExtendPaths withValue(@Nonnull Object value) {
        this.value = Utils.checkNotNull(value, "value");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExtendPaths other = (ExtendPaths) o;
        return 
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            path, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExtendPaths.class,
                "path", path,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String path;

        private Object value;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * JSONPath string specifying where to apply the value.
         */
        public Builder path(@Nonnull String path) {
            this.path = Utils.checkNotNull(path, "path");
            return this;
        }

        /**
         * The value to set at the specified path, can be any type.
         */
        public Builder value(@Nonnull Object value) {
            this.value = Utils.checkNotNull(value, "value");
            return this;
        }

        public ExtendPaths build() {
            return new ExtendPaths(
                path, value);
        }

    }
}
