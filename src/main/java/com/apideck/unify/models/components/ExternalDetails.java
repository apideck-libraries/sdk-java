/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ExternalDetails - Details about an external payment.
 */

public class ExternalDetails {

    /**
     * The type of external payment the seller received. It can be one of the following:
     * - CHECK - Paid using a physical check.
     * - BANK_TRANSFER - Paid using external bank transfer.
     * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
     * - CRYPTO - Paid using a crypto currency.
     * - SQUARE_CASH - Paid using Square Cash App.
     * - SOCIAL - Paid using peer-to-peer payment applications.
     * - EXTERNAL - A third-party application gathered this payment outside of Square.
     * - EMONEY - Paid using an E-money provider.
     * - CARD - A credit or debit card that Square does not support.
     * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
     * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
     * - OTHER - A type not listed here.
     */
    @JsonProperty("type")
    private PosPaymentType type;

    /**
     * A description of the external payment source. For example, 
     * "Food Delivery Service".
     */
    @JsonProperty("source")
    private String source;

    /**
     * An ID to associate the payment to its originating source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private Optional<String> sourceId;

    /**
     * The fees paid to the source. The amount minus this field is the net amount seller receives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_fee_amount")
    private Optional<Double> sourceFeeAmount;

    @JsonCreator
    public ExternalDetails(
            @JsonProperty("type") PosPaymentType type,
            @JsonProperty("source") String source,
            @JsonProperty("source_id") Optional<String> sourceId,
            @JsonProperty("source_fee_amount") Optional<Double> sourceFeeAmount) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sourceFeeAmount, "sourceFeeAmount");
        this.type = type;
        this.source = source;
        this.sourceId = sourceId;
        this.sourceFeeAmount = sourceFeeAmount;
    }
    
    public ExternalDetails(
            PosPaymentType type,
            String source) {
        this(type, source, Optional.empty(), Optional.empty());
    }

    /**
     * The type of external payment the seller received. It can be one of the following:
     * - CHECK - Paid using a physical check.
     * - BANK_TRANSFER - Paid using external bank transfer.
     * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
     * - CRYPTO - Paid using a crypto currency.
     * - SQUARE_CASH - Paid using Square Cash App.
     * - SOCIAL - Paid using peer-to-peer payment applications.
     * - EXTERNAL - A third-party application gathered this payment outside of Square.
     * - EMONEY - Paid using an E-money provider.
     * - CARD - A credit or debit card that Square does not support.
     * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
     * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
     * - OTHER - A type not listed here.
     */
    @JsonIgnore
    public PosPaymentType type() {
        return type;
    }

    /**
     * A description of the external payment source. For example, 
     * "Food Delivery Service".
     */
    @JsonIgnore
    public String source() {
        return source;
    }

    /**
     * An ID to associate the payment to its originating source.
     */
    @JsonIgnore
    public Optional<String> sourceId() {
        return sourceId;
    }

    /**
     * The fees paid to the source. The amount minus this field is the net amount seller receives.
     */
    @JsonIgnore
    public Optional<Double> sourceFeeAmount() {
        return sourceFeeAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The type of external payment the seller received. It can be one of the following:
     * - CHECK - Paid using a physical check.
     * - BANK_TRANSFER - Paid using external bank transfer.
     * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
     * - CRYPTO - Paid using a crypto currency.
     * - SQUARE_CASH - Paid using Square Cash App.
     * - SOCIAL - Paid using peer-to-peer payment applications.
     * - EXTERNAL - A third-party application gathered this payment outside of Square.
     * - EMONEY - Paid using an E-money provider.
     * - CARD - A credit or debit card that Square does not support.
     * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
     * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
     * - OTHER - A type not listed here.
     */
    public ExternalDetails withType(PosPaymentType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * A description of the external payment source. For example, 
     * "Food Delivery Service".
     */
    public ExternalDetails withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * An ID to associate the payment to its originating source.
     */
    public ExternalDetails withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }

    /**
     * An ID to associate the payment to its originating source.
     */
    public ExternalDetails withSourceId(Optional<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * The fees paid to the source. The amount minus this field is the net amount seller receives.
     */
    public ExternalDetails withSourceFeeAmount(double sourceFeeAmount) {
        Utils.checkNotNull(sourceFeeAmount, "sourceFeeAmount");
        this.sourceFeeAmount = Optional.ofNullable(sourceFeeAmount);
        return this;
    }

    /**
     * The fees paid to the source. The amount minus this field is the net amount seller receives.
     */
    public ExternalDetails withSourceFeeAmount(Optional<Double> sourceFeeAmount) {
        Utils.checkNotNull(sourceFeeAmount, "sourceFeeAmount");
        this.sourceFeeAmount = sourceFeeAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalDetails other = (ExternalDetails) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.sourceFeeAmount, other.sourceFeeAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            source,
            sourceId,
            sourceFeeAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExternalDetails.class,
                "type", type,
                "source", source,
                "sourceId", sourceId,
                "sourceFeeAmount", sourceFeeAmount);
    }
    
    public final static class Builder {
 
        private PosPaymentType type;
 
        private String source;
 
        private Optional<String> sourceId = Optional.empty();
 
        private Optional<Double> sourceFeeAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of external payment the seller received. It can be one of the following:
         * - CHECK - Paid using a physical check.
         * - BANK_TRANSFER - Paid using external bank transfer.
         * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
         * - CRYPTO - Paid using a crypto currency.
         * - SQUARE_CASH - Paid using Square Cash App.
         * - SOCIAL - Paid using peer-to-peer payment applications.
         * - EXTERNAL - A third-party application gathered this payment outside of Square.
         * - EMONEY - Paid using an E-money provider.
         * - CARD - A credit or debit card that Square does not support.
         * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
         * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
         * - OTHER - A type not listed here.
         */
        public Builder type(PosPaymentType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * A description of the external payment source. For example, 
         * "Food Delivery Service".
         */
        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * An ID to associate the payment to its originating source.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * An ID to associate the payment to its originating source.
         */
        public Builder sourceId(Optional<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        /**
         * The fees paid to the source. The amount minus this field is the net amount seller receives.
         */
        public Builder sourceFeeAmount(double sourceFeeAmount) {
            Utils.checkNotNull(sourceFeeAmount, "sourceFeeAmount");
            this.sourceFeeAmount = Optional.ofNullable(sourceFeeAmount);
            return this;
        }

        /**
         * The fees paid to the source. The amount minus this field is the net amount seller receives.
         */
        public Builder sourceFeeAmount(Optional<Double> sourceFeeAmount) {
            Utils.checkNotNull(sourceFeeAmount, "sourceFeeAmount");
            this.sourceFeeAmount = sourceFeeAmount;
            return this;
        }
        
        public ExternalDetails build() {
            return new ExternalDetails(
                type,
                source,
                sourceId,
                sourceFeeAmount);
        }
    }
}

