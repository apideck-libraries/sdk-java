/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Fields {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private CustomObjectSchemaType type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Boolean required;

    /**
     * Options for select and multiselect types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private JsonNullable<List<CustomObjectSchemaOptions>> options;

    /**
     * Default value for the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_value")
    private JsonNullable<String> defaultValue;

    @JsonCreator
    public Fields(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("type") @Nullable CustomObjectSchemaType type,
            @JsonProperty("required") @Nullable Boolean required,
            @JsonProperty("options") @Nullable JsonNullable<List<CustomObjectSchemaOptions>> options,
            @JsonProperty("default_value") @Nullable JsonNullable<String> defaultValue) {
        this.id = id;
        this.name = name;
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.type = type;
        this.required = required;
        this.options = Optional.ofNullable(options)
            .orElse(JsonNullable.undefined());
        this.defaultValue = Optional.ofNullable(defaultValue)
            .orElse(JsonNullable.undefined());
    }
    
    public Fields() {
        this(null, null, null,
            null, null, null,
            null);
    }

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public JsonNullable<String> description() {
        return this.description;
    }

    public Optional<CustomObjectSchemaType> type() {
        return Optional.ofNullable(this.type);
    }

    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Options for select and multiselect types
     */
    public JsonNullable<List<CustomObjectSchemaOptions>> options() {
        return this.options;
    }

    /**
     * Default value for the field
     */
    public JsonNullable<String> defaultValue() {
        return this.defaultValue;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Fields withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public Fields withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    public Fields withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    public Fields withType(@Nullable CustomObjectSchemaType type) {
        this.type = type;
        return this;
    }


    public Fields withRequired(@Nullable Boolean required) {
        this.required = required;
        return this;
    }


    /**
     * Options for select and multiselect types
     */
    public Fields withOptions(@Nullable List<CustomObjectSchemaOptions> options) {
        this.options = JsonNullable.of(options);
        return this;
    }


    /**
     * Default value for the field
     */
    public Fields withDefaultValue(@Nullable String defaultValue) {
        this.defaultValue = JsonNullable.of(defaultValue);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fields other = (Fields) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.required, other.required) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.defaultValue, other.defaultValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            type, required, options,
            defaultValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Fields.class,
                "id", id,
                "name", name,
                "description", description,
                "type", type,
                "required", required,
                "options", options,
                "defaultValue", defaultValue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private JsonNullable<String> description;

        private CustomObjectSchemaType type;

        private Boolean required;

        private JsonNullable<List<CustomObjectSchemaOptions>> options;

        private JsonNullable<String> defaultValue;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder type(@Nullable CustomObjectSchemaType type) {
            this.type = type;
            return this;
        }

        public Builder required(@Nullable Boolean required) {
            this.required = required;
            return this;
        }

        /**
         * Options for select and multiselect types
         */
        public Builder options(@Nullable List<CustomObjectSchemaOptions> options) {
            this.options = JsonNullable.of(options);
            return this;
        }

        /**
         * Default value for the field
         */
        public Builder defaultValue(@Nullable String defaultValue) {
            this.defaultValue = JsonNullable.of(defaultValue);
            return this;
        }

        public Fields build() {
            return new Fields(
                id, name, description,
                type, required, options,
                defaultValue);
        }

    }
}
