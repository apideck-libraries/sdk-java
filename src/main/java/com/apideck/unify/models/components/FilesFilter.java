/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class FilesFilter {
    /**
     * ID of the drive to filter on
     */
    @SpeakeasyMetadata("queryParam:name=drive_id")
    private String driveId;

    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    @SpeakeasyMetadata("queryParam:name=folder_id")
    private String folderId;

    /**
     * Only return files and folders that are shared
     */
    @SpeakeasyMetadata("queryParam:name=shared")
    private Boolean shared;

    @JsonCreator
    public FilesFilter(
            @Nullable String driveId,
            @Nullable String folderId,
            @Nullable Boolean shared) {
        this.driveId = driveId;
        this.folderId = folderId;
        this.shared = shared;
    }
    
    public FilesFilter() {
        this(null, null, null);
    }

    /**
     * ID of the drive to filter on
     */
    public Optional<String> driveId() {
        return Optional.ofNullable(this.driveId);
    }

    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    public Optional<String> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Only return files and folders that are shared
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the drive to filter on
     */
    public FilesFilter withDriveId(@Nullable String driveId) {
        this.driveId = driveId;
        return this;
    }


    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    public FilesFilter withFolderId(@Nullable String folderId) {
        this.folderId = folderId;
        return this;
    }


    /**
     * Only return files and folders that are shared
     */
    public FilesFilter withShared(@Nullable Boolean shared) {
        this.shared = shared;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilesFilter other = (FilesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.driveId, other.driveId) &&
            Utils.enhancedDeepEquals(this.folderId, other.folderId) &&
            Utils.enhancedDeepEquals(this.shared, other.shared);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            driveId, folderId, shared);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilesFilter.class,
                "driveId", driveId,
                "folderId", folderId,
                "shared", shared);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String driveId;

        private String folderId;

        private Boolean shared;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the drive to filter on
         */
        public Builder driveId(@Nullable String driveId) {
            this.driveId = driveId;
            return this;
        }

        /**
         * ID of the folder to filter on. The root folder has an alias "root"
         */
        public Builder folderId(@Nullable String folderId) {
            this.folderId = folderId;
            return this;
        }

        /**
         * Only return files and folders that are shared
         */
        public Builder shared(@Nullable Boolean shared) {
            this.shared = shared;
            return this;
        }

        public FilesFilter build() {
            return new FilesFilter(
                driveId, folderId, shared);
        }

    }
}
