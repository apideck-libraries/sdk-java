/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class FilesFilter {
    /**
     * ID of the drive to filter on
     */
    @SpeakeasyMetadata("queryParam:name=drive_id")
    private Optional<String> driveId;

    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    @SpeakeasyMetadata("queryParam:name=folder_id")
    private Optional<String> folderId;

    /**
     * Only return files and folders that are shared
     */
    @SpeakeasyMetadata("queryParam:name=shared")
    private Optional<Boolean> shared;

    @JsonCreator
    public FilesFilter(
            Optional<String> driveId,
            Optional<String> folderId,
            Optional<Boolean> shared) {
        Utils.checkNotNull(driveId, "driveId");
        Utils.checkNotNull(folderId, "folderId");
        Utils.checkNotNull(shared, "shared");
        this.driveId = driveId;
        this.folderId = folderId;
        this.shared = shared;
    }
    
    public FilesFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * ID of the drive to filter on
     */
    @JsonIgnore
    public Optional<String> driveId() {
        return driveId;
    }

    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    @JsonIgnore
    public Optional<String> folderId() {
        return folderId;
    }

    /**
     * Only return files and folders that are shared
     */
    @JsonIgnore
    public Optional<Boolean> shared() {
        return shared;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the drive to filter on
     */
    public FilesFilter withDriveId(String driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = Optional.ofNullable(driveId);
        return this;
    }


    /**
     * ID of the drive to filter on
     */
    public FilesFilter withDriveId(Optional<String> driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = driveId;
        return this;
    }

    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    public FilesFilter withFolderId(String folderId) {
        Utils.checkNotNull(folderId, "folderId");
        this.folderId = Optional.ofNullable(folderId);
        return this;
    }


    /**
     * ID of the folder to filter on. The root folder has an alias "root"
     */
    public FilesFilter withFolderId(Optional<String> folderId) {
        Utils.checkNotNull(folderId, "folderId");
        this.folderId = folderId;
        return this;
    }

    /**
     * Only return files and folders that are shared
     */
    public FilesFilter withShared(boolean shared) {
        Utils.checkNotNull(shared, "shared");
        this.shared = Optional.ofNullable(shared);
        return this;
    }


    /**
     * Only return files and folders that are shared
     */
    public FilesFilter withShared(Optional<Boolean> shared) {
        Utils.checkNotNull(shared, "shared");
        this.shared = shared;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilesFilter other = (FilesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.driveId, other.driveId) &&
            Utils.enhancedDeepEquals(this.folderId, other.folderId) &&
            Utils.enhancedDeepEquals(this.shared, other.shared);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            driveId, folderId, shared);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilesFilter.class,
                "driveId", driveId,
                "folderId", folderId,
                "shared", shared);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> driveId = Optional.empty();

        private Optional<String> folderId = Optional.empty();

        private Optional<Boolean> shared = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * ID of the drive to filter on
         */
        public Builder driveId(String driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = Optional.ofNullable(driveId);
            return this;
        }

        /**
         * ID of the drive to filter on
         */
        public Builder driveId(Optional<String> driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = driveId;
            return this;
        }


        /**
         * ID of the folder to filter on. The root folder has an alias "root"
         */
        public Builder folderId(String folderId) {
            Utils.checkNotNull(folderId, "folderId");
            this.folderId = Optional.ofNullable(folderId);
            return this;
        }

        /**
         * ID of the folder to filter on. The root folder has an alias "root"
         */
        public Builder folderId(Optional<String> folderId) {
            Utils.checkNotNull(folderId, "folderId");
            this.folderId = folderId;
            return this;
        }


        /**
         * Only return files and folders that are shared
         */
        public Builder shared(boolean shared) {
            Utils.checkNotNull(shared, "shared");
            this.shared = Optional.ofNullable(shared);
            return this;
        }

        /**
         * Only return files and folders that are shared
         */
        public Builder shared(Optional<Boolean> shared) {
            Utils.checkNotNull(shared, "shared");
            this.shared = shared;
            return this;
        }

        public FilesFilter build() {

            return new FilesFilter(
                driveId, folderId, shared);
        }

    }
}
