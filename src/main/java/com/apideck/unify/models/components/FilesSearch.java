/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class FilesSearch {

    /**
     * The query to search for. May match across multiple fields.
     */
    @JsonProperty("query")
    private String query;

    /**
     * ID of the drive to filter on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drive_id")
    private Optional<String> driveId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public FilesSearch(
            @JsonProperty("query") String query,
            @JsonProperty("drive_id") Optional<String> driveId,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(driveId, "driveId");
        Utils.checkNotNull(passThrough, "passThrough");
        this.query = query;
        this.driveId = driveId;
        this.passThrough = passThrough;
    }
    
    public FilesSearch(
            String query) {
        this(query, Optional.empty(), Optional.empty());
    }

    /**
     * The query to search for. May match across multiple fields.
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * ID of the drive to filter on
     */
    @JsonIgnore
    public Optional<String> driveId() {
        return driveId;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The query to search for. May match across multiple fields.
     */
    public FilesSearch withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * ID of the drive to filter on
     */
    public FilesSearch withDriveId(String driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = Optional.ofNullable(driveId);
        return this;
    }

    /**
     * ID of the drive to filter on
     */
    public FilesSearch withDriveId(Optional<String> driveId) {
        Utils.checkNotNull(driveId, "driveId");
        this.driveId = driveId;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public FilesSearch withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public FilesSearch withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilesSearch other = (FilesSearch) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.driveId, other.driveId) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            driveId,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilesSearch.class,
                "query", query,
                "driveId", driveId,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private String query;
 
        private Optional<String> driveId = Optional.empty();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The query to search for. May match across multiple fields.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * ID of the drive to filter on
         */
        public Builder driveId(String driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = Optional.ofNullable(driveId);
            return this;
        }

        /**
         * ID of the drive to filter on
         */
        public Builder driveId(Optional<String> driveId) {
            Utils.checkNotNull(driveId, "driveId");
            this.driveId = driveId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public FilesSearch build() {
            return new FilesSearch(
                query,
                driveId,
                passThrough);
        }
    }
}

