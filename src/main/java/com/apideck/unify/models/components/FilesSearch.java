/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class FilesSearch {
    /**
     * The query to search for. May match across multiple fields.
     */
    @JsonProperty("query")
    private String query;

    /**
     * ID of the drive to filter on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drive_id")
    private String driveId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public FilesSearch(
            @JsonProperty("query") @Nonnull String query,
            @JsonProperty("drive_id") @Nullable String driveId,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.query = Optional.ofNullable(query)
            .orElseThrow(() -> new IllegalArgumentException("query cannot be null"));
        this.driveId = driveId;
        this.passThrough = passThrough;
    }
    
    public FilesSearch(
            @Nonnull String query) {
        this(query, null, null);
    }

    /**
     * The query to search for. May match across multiple fields.
     */
    public String query() {
        return this.query;
    }

    /**
     * ID of the drive to filter on
     */
    public Optional<String> driveId() {
        return Optional.ofNullable(this.driveId);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The query to search for. May match across multiple fields.
     */
    public FilesSearch withQuery(@Nonnull String query) {
        this.query = Utils.checkNotNull(query, "query");
        return this;
    }


    /**
     * ID of the drive to filter on
     */
    public FilesSearch withDriveId(@Nullable String driveId) {
        this.driveId = driveId;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public FilesSearch withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FilesSearch other = (FilesSearch) o;
        return 
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.driveId, other.driveId) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            query, driveId, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FilesSearch.class,
                "query", query,
                "driveId", driveId,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String query;

        private String driveId;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The query to search for. May match across multiple fields.
         */
        public Builder query(@Nonnull String query) {
            this.query = Utils.checkNotNull(query, "query");
            return this;
        }

        /**
         * ID of the drive to filter on
         */
        public Builder driveId(@Nullable String driveId) {
            this.driveId = driveId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public FilesSearch build() {
            return new FilesSearch(
                query, driveId, passThrough);
        }

    }
}
