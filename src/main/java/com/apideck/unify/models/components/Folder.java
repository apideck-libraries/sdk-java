/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Folder {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the folder
     */
    @JsonProperty("name")
    private String name;

    /**
     * Optional description of the folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The full path of the folder (includes the folder name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private JsonNullable<String> path;

    /**
     * The size of the folder in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Optional<? extends Owner> owner;

    /**
     * The parent folders of the file, starting from the root
     */
    @JsonProperty("parent_folders")
    private List<LinkedFolder> parentFolders;

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders_complete")
    private Optional<Boolean> parentFoldersComplete;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Folder(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") String name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("path") JsonNullable<String> path,
            @JsonProperty("size") JsonNullable<Long> size,
            @JsonProperty("owner") Optional<? extends Owner> owner,
            @JsonProperty("parent_folders") List<LinkedFolder> parentFolders,
            @JsonProperty("parent_folders_complete") Optional<Boolean> parentFoldersComplete,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(owner, "owner");
        Utils.checkNotNull(parentFolders, "parentFolders");
        Utils.checkNotNull(parentFoldersComplete, "parentFoldersComplete");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.name = name;
        this.description = description;
        this.path = path;
        this.size = size;
        this.owner = owner;
        this.parentFolders = parentFolders;
        this.parentFoldersComplete = parentFoldersComplete;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Folder(
            String name,
            List<LinkedFolder> parentFolders) {
        this(Optional.empty(), name, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), parentFolders, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the folder
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Optional description of the folder
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The full path of the folder (includes the folder name)
     */
    @JsonIgnore
    public JsonNullable<String> path() {
        return path;
    }

    /**
     * The size of the folder in bytes
     */
    @JsonIgnore
    public JsonNullable<Long> size() {
        return size;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Owner> owner() {
        return (Optional<Owner>) owner;
    }

    /**
     * The parent folders of the file, starting from the root
     */
    @JsonIgnore
    public List<LinkedFolder> parentFolders() {
        return parentFolders;
    }

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    @JsonIgnore
    public Optional<Boolean> parentFoldersComplete() {
        return parentFoldersComplete;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public Folder withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Folder withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the folder
     */
    public Folder withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Optional description of the folder
     */
    public Folder withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Optional description of the folder
     */
    public Folder withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The full path of the folder (includes the folder name)
     */
    public Folder withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = JsonNullable.of(path);
        return this;
    }

    /**
     * The full path of the folder (includes the folder name)
     */
    public Folder withPath(JsonNullable<String> path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * The size of the folder in bytes
     */
    public Folder withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = JsonNullable.of(size);
        return this;
    }

    /**
     * The size of the folder in bytes
     */
    public Folder withSize(JsonNullable<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public Folder withOwner(Owner owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = Optional.ofNullable(owner);
        return this;
    }

    public Folder withOwner(Optional<? extends Owner> owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = owner;
        return this;
    }

    /**
     * The parent folders of the file, starting from the root
     */
    public Folder withParentFolders(List<LinkedFolder> parentFolders) {
        Utils.checkNotNull(parentFolders, "parentFolders");
        this.parentFolders = parentFolders;
        return this;
    }

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    public Folder withParentFoldersComplete(boolean parentFoldersComplete) {
        Utils.checkNotNull(parentFoldersComplete, "parentFoldersComplete");
        this.parentFoldersComplete = Optional.ofNullable(parentFoldersComplete);
        return this;
    }

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    public Folder withParentFoldersComplete(Optional<Boolean> parentFoldersComplete) {
        Utils.checkNotNull(parentFoldersComplete, "parentFoldersComplete");
        this.parentFoldersComplete = parentFoldersComplete;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Folder withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Folder withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Folder withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Folder withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Folder withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Folder withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Folder withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Folder withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Folder withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Folder withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Folder other = (Folder) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.owner, other.owner) &&
            Objects.deepEquals(this.parentFolders, other.parentFolders) &&
            Objects.deepEquals(this.parentFoldersComplete, other.parentFoldersComplete) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            description,
            path,
            size,
            owner,
            parentFolders,
            parentFoldersComplete,
            customMappings,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Folder.class,
                "id", id,
                "name", name,
                "description", description,
                "path", path,
                "size", size,
                "owner", owner,
                "parentFolders", parentFolders,
                "parentFoldersComplete", parentFoldersComplete,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String name;
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> path = JsonNullable.undefined();
 
        private JsonNullable<Long> size = JsonNullable.undefined();
 
        private Optional<? extends Owner> owner = Optional.empty();
 
        private List<LinkedFolder> parentFolders;
 
        private Optional<Boolean> parentFoldersComplete = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the folder
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Optional description of the folder
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Optional description of the folder
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The full path of the folder (includes the folder name)
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = JsonNullable.of(path);
            return this;
        }

        /**
         * The full path of the folder (includes the folder name)
         */
        public Builder path(JsonNullable<String> path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * The size of the folder in bytes
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = JsonNullable.of(size);
            return this;
        }

        /**
         * The size of the folder in bytes
         */
        public Builder size(JsonNullable<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder owner(Owner owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        public Builder owner(Optional<? extends Owner> owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = owner;
            return this;
        }

        /**
         * The parent folders of the file, starting from the root
         */
        public Builder parentFolders(List<LinkedFolder> parentFolders) {
            Utils.checkNotNull(parentFolders, "parentFolders");
            this.parentFolders = parentFolders;
            return this;
        }

        /**
         * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
         */
        public Builder parentFoldersComplete(boolean parentFoldersComplete) {
            Utils.checkNotNull(parentFoldersComplete, "parentFoldersComplete");
            this.parentFoldersComplete = Optional.ofNullable(parentFoldersComplete);
            return this;
        }

        /**
         * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
         */
        public Builder parentFoldersComplete(Optional<Boolean> parentFoldersComplete) {
            Utils.checkNotNull(parentFoldersComplete, "parentFoldersComplete");
            this.parentFoldersComplete = parentFoldersComplete;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public Folder build() {
            return new Folder(
                id,
                name,
                description,
                path,
                size,
                owner,
                parentFolders,
                parentFoldersComplete,
                customMappings,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt);
        }
    }
}

