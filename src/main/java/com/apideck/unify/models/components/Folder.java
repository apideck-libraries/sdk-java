/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Folder {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of the folder
     */
    @JsonProperty("name")
    private String name;

    /**
     * Optional description of the folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The full path of the folder (includes the folder name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private JsonNullable<String> path;

    /**
     * The size of the folder in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Owner owner;

    /**
     * The parent folders of the file, starting from the root
     */
    @JsonProperty("parent_folders")
    private List<LinkedFolder> parentFolders;

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders_complete")
    private Boolean parentFoldersComplete;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Folder(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("path") @Nullable JsonNullable<String> path,
            @JsonProperty("size") @Nullable JsonNullable<Long> size,
            @JsonProperty("owner") @Nullable Owner owner,
            @JsonProperty("parent_folders") @Nonnull List<LinkedFolder> parentFolders,
            @JsonProperty("parent_folders_complete") @Nullable Boolean parentFoldersComplete,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.path = Optional.ofNullable(path)
            .orElse(JsonNullable.undefined());
        this.size = Optional.ofNullable(size)
            .orElse(JsonNullable.undefined());
        this.owner = owner;
        this.parentFolders = Optional.ofNullable(parentFolders)
            .orElseThrow(() -> new IllegalArgumentException("parentFolders cannot be null"));
        this.parentFoldersComplete = parentFoldersComplete;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
    }
    
    public Folder(
            @Nonnull String name,
            @Nonnull List<LinkedFolder> parentFolders) {
        this(null, name, null,
            null, null, null,
            parentFolders, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the folder
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional description of the folder
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The full path of the folder (includes the folder name)
     */
    public JsonNullable<String> path() {
        return this.path;
    }

    /**
     * The size of the folder in bytes
     */
    public JsonNullable<Long> size() {
        return this.size;
    }

    public Optional<Owner> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The parent folders of the file, starting from the root
     */
    public List<LinkedFolder> parentFolders() {
        return this.parentFolders;
    }

    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    public Optional<Boolean> parentFoldersComplete() {
        return Optional.ofNullable(this.parentFoldersComplete);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Folder withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of the folder
     */
    public Folder withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    /**
     * Optional description of the folder
     */
    public Folder withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The full path of the folder (includes the folder name)
     */
    public Folder withPath(@Nullable String path) {
        this.path = JsonNullable.of(path);
        return this;
    }


    /**
     * The size of the folder in bytes
     */
    public Folder withSize(@Nullable Long size) {
        this.size = JsonNullable.of(size);
        return this;
    }


    public Folder withOwner(@Nullable Owner owner) {
        this.owner = owner;
        return this;
    }


    /**
     * The parent folders of the file, starting from the root
     */
    public Folder withParentFolders(@Nonnull List<LinkedFolder> parentFolders) {
        this.parentFolders = Utils.checkNotNull(parentFolders, "parentFolders");
        return this;
    }


    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
     */
    public Folder withParentFoldersComplete(@Nullable Boolean parentFoldersComplete) {
        this.parentFoldersComplete = parentFoldersComplete;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Folder withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Folder withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Folder withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Folder withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Folder withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Folder other = (Folder) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.owner, other.owner) &&
            Utils.enhancedDeepEquals(this.parentFolders, other.parentFolders) &&
            Utils.enhancedDeepEquals(this.parentFoldersComplete, other.parentFoldersComplete) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            path, size, owner,
            parentFolders, parentFoldersComplete, customMappings,
            updatedBy, createdBy, updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Folder.class,
                "id", id,
                "name", name,
                "description", description,
                "path", path,
                "size", size,
                "owner", owner,
                "parentFolders", parentFolders,
                "parentFoldersComplete", parentFoldersComplete,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private JsonNullable<String> description;

        private JsonNullable<String> path;

        private JsonNullable<Long> size;

        private Owner owner;

        private List<LinkedFolder> parentFolders;

        private Boolean parentFoldersComplete;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of the folder
         */
        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        /**
         * Optional description of the folder
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The full path of the folder (includes the folder name)
         */
        public Builder path(@Nullable String path) {
            this.path = JsonNullable.of(path);
            return this;
        }

        /**
         * The size of the folder in bytes
         */
        public Builder size(@Nullable Long size) {
            this.size = JsonNullable.of(size);
            return this;
        }

        public Builder owner(@Nullable Owner owner) {
            this.owner = owner;
            return this;
        }

        /**
         * The parent folders of the file, starting from the root
         */
        public Builder parentFolders(@Nonnull List<LinkedFolder> parentFolders) {
            this.parentFolders = Utils.checkNotNull(parentFolders, "parentFolders");
            return this;
        }

        /**
         * Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
         */
        public Builder parentFoldersComplete(@Nullable Boolean parentFoldersComplete) {
            this.parentFoldersComplete = parentFoldersComplete;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        public Folder build() {
            return new Folder(
                id, name, description,
                path, size, owner,
                parentFolders, parentFoldersComplete, customMappings,
                updatedBy, createdBy, updatedAt,
                createdAt);
        }

    }
}
