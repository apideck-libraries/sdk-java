/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class FormField {
    /**
     * The unique identifier of the form field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The label of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private String label;

    /**
     * The placeholder for the form field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placeholder")
    private JsonNullable<String> placeholder;

    /**
     * The description of the form field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private FormFieldType type;

    /**
     * Indicates if the form field is required, which means it must be filled in before the form can be submitted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Boolean required;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_field")
    private Boolean customField;

    /**
     * Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_custom_values")
    private Boolean allowCustomValues;

    /**
     * Indicates if the form field is displayed in a “read-only” mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    private JsonNullable<Boolean> disabled;

    /**
     * Indicates if the form field is not displayed but the value that is being stored on the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private JsonNullable<Boolean> hidden;

    /**
     * When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deprecated")
    private JsonNullable<Boolean> deprecated;

    /**
     * Indicates if the form field contains sensitive data, which will display the value as a masked input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitive")
    private JsonNullable<Boolean> sensitive;

    /**
     * Prefix to display in front of the form field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * Suffix to display next to the form field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private List<FormFieldOption> options;

    @JsonCreator
    public FormField(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("label") @Nullable String label,
            @JsonProperty("placeholder") @Nullable JsonNullable<String> placeholder,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("type") @Nullable FormFieldType type,
            @JsonProperty("required") @Nullable Boolean required,
            @JsonProperty("custom_field") @Nullable Boolean customField,
            @JsonProperty("allow_custom_values") @Nullable Boolean allowCustomValues,
            @JsonProperty("disabled") @Nullable JsonNullable<Boolean> disabled,
            @JsonProperty("hidden") @Nullable JsonNullable<Boolean> hidden,
            @JsonProperty("deprecated") @Nullable JsonNullable<Boolean> deprecated,
            @JsonProperty("sensitive") @Nullable JsonNullable<Boolean> sensitive,
            @JsonProperty("prefix") @Nullable JsonNullable<String> prefix,
            @JsonProperty("suffix") @Nullable JsonNullable<String> suffix,
            @JsonProperty("options") @Nullable List<FormFieldOption> options) {
        this.id = id;
        this.label = label;
        this.placeholder = Optional.ofNullable(placeholder)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.type = type;
        this.required = required;
        this.customField = customField;
        this.allowCustomValues = Optional.ofNullable(allowCustomValues)
            .orElse(Builder._SINGLETON_VALUE_AllowCustomValues.value());
        this.disabled = Optional.ofNullable(disabled)
            .orElse(JsonNullable.undefined());
        this.hidden = Optional.ofNullable(hidden)
            .orElse(JsonNullable.undefined());
        this.deprecated = Optional.ofNullable(deprecated)
            .orElse(JsonNullable.undefined());
        this.sensitive = Optional.ofNullable(sensitive)
            .orElse(JsonNullable.undefined());
        this.prefix = Optional.ofNullable(prefix)
            .orElse(JsonNullable.undefined());
        this.suffix = Optional.ofNullable(suffix)
            .orElse(JsonNullable.undefined());
        this.options = options;
    }
    
    public FormField() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The unique identifier of the form field.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The label of the field
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The placeholder for the form field
     */
    public JsonNullable<String> placeholder() {
        return this.placeholder;
    }

    /**
     * The description of the form field
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    public Optional<FormFieldType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Indicates if the form field is required, which means it must be filled in before the form can be submitted
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }

    public Optional<Boolean> customField() {
        return Optional.ofNullable(this.customField);
    }

    /**
     * Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
     */
    public Optional<Boolean> allowCustomValues() {
        return Optional.ofNullable(this.allowCustomValues);
    }

    /**
     * Indicates if the form field is displayed in a “read-only” mode.
     */
    public JsonNullable<Boolean> disabled() {
        return this.disabled;
    }

    /**
     * Indicates if the form field is not displayed but the value that is being stored on the connection.
     */
    public JsonNullable<Boolean> hidden() {
        return this.hidden;
    }

    /**
     * When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
     */
    public JsonNullable<Boolean> deprecated() {
        return this.deprecated;
    }

    /**
     * Indicates if the form field contains sensitive data, which will display the value as a masked input.
     */
    public JsonNullable<Boolean> sensitive() {
        return this.sensitive;
    }

    /**
     * Prefix to display in front of the form field.
     */
    public JsonNullable<String> prefix() {
        return this.prefix;
    }

    /**
     * Suffix to display next to the form field.
     */
    public JsonNullable<String> suffix() {
        return this.suffix;
    }

    public Optional<List<FormFieldOption>> options() {
        return Optional.ofNullable(this.options);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the form field.
     */
    public FormField withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The label of the field
     */
    public FormField withLabel(@Nullable String label) {
        this.label = label;
        return this;
    }


    /**
     * The placeholder for the form field
     */
    public FormField withPlaceholder(@Nullable String placeholder) {
        this.placeholder = JsonNullable.of(placeholder);
        return this;
    }


    /**
     * The description of the form field
     */
    public FormField withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    public FormField withType(@Nullable FormFieldType type) {
        this.type = type;
        return this;
    }


    /**
     * Indicates if the form field is required, which means it must be filled in before the form can be submitted
     */
    public FormField withRequired(@Nullable Boolean required) {
        this.required = required;
        return this;
    }


    public FormField withCustomField(@Nullable Boolean customField) {
        this.customField = customField;
        return this;
    }


    /**
     * Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
     */
    public FormField withAllowCustomValues(@Nullable Boolean allowCustomValues) {
        this.allowCustomValues = allowCustomValues;
        return this;
    }


    /**
     * Indicates if the form field is displayed in a “read-only” mode.
     */
    public FormField withDisabled(@Nullable Boolean disabled) {
        this.disabled = JsonNullable.of(disabled);
        return this;
    }


    /**
     * Indicates if the form field is not displayed but the value that is being stored on the connection.
     */
    public FormField withHidden(@Nullable Boolean hidden) {
        this.hidden = JsonNullable.of(hidden);
        return this;
    }


    /**
     * When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
     */
    public FormField withDeprecated(@Nullable Boolean deprecated) {
        this.deprecated = JsonNullable.of(deprecated);
        return this;
    }


    /**
     * Indicates if the form field contains sensitive data, which will display the value as a masked input.
     */
    public FormField withSensitive(@Nullable Boolean sensitive) {
        this.sensitive = JsonNullable.of(sensitive);
        return this;
    }


    /**
     * Prefix to display in front of the form field.
     */
    public FormField withPrefix(@Nullable String prefix) {
        this.prefix = JsonNullable.of(prefix);
        return this;
    }


    /**
     * Suffix to display next to the form field.
     */
    public FormField withSuffix(@Nullable String suffix) {
        this.suffix = JsonNullable.of(suffix);
        return this;
    }


    public FormField withOptions(@Nullable List<FormFieldOption> options) {
        this.options = options;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormField other = (FormField) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.placeholder, other.placeholder) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.required, other.required) &&
            Utils.enhancedDeepEquals(this.customField, other.customField) &&
            Utils.enhancedDeepEquals(this.allowCustomValues, other.allowCustomValues) &&
            Utils.enhancedDeepEquals(this.disabled, other.disabled) &&
            Utils.enhancedDeepEquals(this.hidden, other.hidden) &&
            Utils.enhancedDeepEquals(this.deprecated, other.deprecated) &&
            Utils.enhancedDeepEquals(this.sensitive, other.sensitive) &&
            Utils.enhancedDeepEquals(this.prefix, other.prefix) &&
            Utils.enhancedDeepEquals(this.suffix, other.suffix) &&
            Utils.enhancedDeepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, label, placeholder,
            description, type, required,
            customField, allowCustomValues, disabled,
            hidden, deprecated, sensitive,
            prefix, suffix, options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormField.class,
                "id", id,
                "label", label,
                "placeholder", placeholder,
                "description", description,
                "type", type,
                "required", required,
                "customField", customField,
                "allowCustomValues", allowCustomValues,
                "disabled", disabled,
                "hidden", hidden,
                "deprecated", deprecated,
                "sensitive", sensitive,
                "prefix", prefix,
                "suffix", suffix,
                "options", options);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String label;

        private JsonNullable<String> placeholder;

        private JsonNullable<String> description;

        private FormFieldType type;

        private Boolean required;

        private Boolean customField;

        private Boolean allowCustomValues;

        private JsonNullable<Boolean> disabled;

        private JsonNullable<Boolean> hidden;

        private JsonNullable<Boolean> deprecated;

        private JsonNullable<Boolean> sensitive;

        private JsonNullable<String> prefix;

        private JsonNullable<String> suffix;

        private List<FormFieldOption> options;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the form field.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The label of the field
         */
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }

        /**
         * The placeholder for the form field
         */
        public Builder placeholder(@Nullable String placeholder) {
            this.placeholder = JsonNullable.of(placeholder);
            return this;
        }

        /**
         * The description of the form field
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder type(@Nullable FormFieldType type) {
            this.type = type;
            return this;
        }

        /**
         * Indicates if the form field is required, which means it must be filled in before the form can be submitted
         */
        public Builder required(@Nullable Boolean required) {
            this.required = required;
            return this;
        }

        public Builder customField(@Nullable Boolean customField) {
            this.customField = customField;
            return this;
        }

        /**
         * Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
         */
        public Builder allowCustomValues(@Nullable Boolean allowCustomValues) {
            this.allowCustomValues = allowCustomValues;
            return this;
        }

        /**
         * Indicates if the form field is displayed in a “read-only” mode.
         */
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = JsonNullable.of(disabled);
            return this;
        }

        /**
         * Indicates if the form field is not displayed but the value that is being stored on the connection.
         */
        public Builder hidden(@Nullable Boolean hidden) {
            this.hidden = JsonNullable.of(hidden);
            return this;
        }

        /**
         * When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
         */
        public Builder deprecated(@Nullable Boolean deprecated) {
            this.deprecated = JsonNullable.of(deprecated);
            return this;
        }

        /**
         * Indicates if the form field contains sensitive data, which will display the value as a masked input.
         */
        public Builder sensitive(@Nullable Boolean sensitive) {
            this.sensitive = JsonNullable.of(sensitive);
            return this;
        }

        /**
         * Prefix to display in front of the form field.
         */
        public Builder prefix(@Nullable String prefix) {
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * Suffix to display next to the form field.
         */
        public Builder suffix(@Nullable String suffix) {
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        public Builder options(@Nullable List<FormFieldOption> options) {
            this.options = options;
            return this;
        }

        public FormField build() {
            return new FormField(
                id, label, placeholder,
                description, type, required,
                customField, allowCustomValues, disabled,
                hidden, deprecated, sensitive,
                prefix, suffix, options);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_AllowCustomValues =
                new LazySingletonValue<>(
                        "allow_custom_values",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
