/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FormFieldOptionGroup {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<String> label;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<SimpleFormFieldOption>> options;

    @JsonCreator
    public FormFieldOptionGroup(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("label") Optional<String> label,
            @JsonProperty("options") Optional<? extends List<SimpleFormFieldOption>> options) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(options, "options");
        this.id = id;
        this.label = label;
        this.options = options;
    }
    
    public FormFieldOptionGroup() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SimpleFormFieldOption>> options() {
        return (Optional<List<SimpleFormFieldOption>>) options;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FormFieldOptionGroup withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public FormFieldOptionGroup withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public FormFieldOptionGroup withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    public FormFieldOptionGroup withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public FormFieldOptionGroup withOptions(List<SimpleFormFieldOption> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    public FormFieldOptionGroup withOptions(Optional<? extends List<SimpleFormFieldOption>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormFieldOptionGroup other = (FormFieldOptionGroup) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            label,
            options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormFieldOptionGroup.class,
                "id", id,
                "label", label,
                "options", options);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> label = Optional.empty();
 
        private Optional<? extends List<SimpleFormFieldOption>> options = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder options(List<SimpleFormFieldOption> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends List<SimpleFormFieldOption>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }
        
        public FormFieldOptionGroup build() {
            return new FormFieldOptionGroup(
                id,
                label,
                options);
        }
    }
}

