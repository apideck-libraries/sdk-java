/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetConsumersResponse
 * 
 * <p>Consumers
 */
public class GetConsumersResponse {
    /**
     * HTTP Response Status Code
     */
    @JsonProperty("status_code")
    private long statusCode;

    /**
     * HTTP Response Status
     */
    @JsonProperty("status")
    private String status;


    @JsonProperty("data")
    private List<Data> data;

    /**
     * Response metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Meta meta;

    /**
     * Links to navigate to previous or next pages through the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    private Links links;

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_raw")
    private JsonNullable<Map<String, Object>> raw;

    @JsonCreator
    public GetConsumersResponse(
            @JsonProperty("status_code") long statusCode,
            @JsonProperty("status") @Nonnull String status,
            @JsonProperty("data") @Nonnull List<Data> data,
            @JsonProperty("meta") @Nullable Meta meta,
            @JsonProperty("links") @Nullable Links links,
            @JsonProperty("_raw") @Nullable JsonNullable<Map<String, Object>> raw) {
        this.statusCode = statusCode;
        this.status = Optional.ofNullable(status)
            .orElseThrow(() -> new IllegalArgumentException("status cannot be null"));
        this.data = Optional.ofNullable(data)
            .orElseThrow(() -> new IllegalArgumentException("data cannot be null"));
        this.meta = meta;
        this.links = links;
        this.raw = Optional.ofNullable(raw)
            .orElse(JsonNullable.undefined());
    }
    
    public GetConsumersResponse(
            long statusCode,
            @Nonnull String status,
            @Nonnull List<Data> data) {
        this(statusCode, status, data,
            null, null, null);
    }

    /**
     * HTTP Response Status Code
     */
    public long statusCode() {
        return this.statusCode;
    }

    /**
     * HTTP Response Status
     */
    public String status() {
        return this.status;
    }

    public List<Data> data() {
        return this.data;
    }

    /**
     * Response metadata
     */
    public Optional<Meta> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Links to navigate to previous or next pages through the API
     */
    public Optional<Links> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public JsonNullable<Map<String, Object>> raw() {
        return this.raw;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP Response Status Code
     */
    public GetConsumersResponse withStatusCode(long statusCode) {
        this.statusCode = statusCode;
        return this;
    }


    /**
     * HTTP Response Status
     */
    public GetConsumersResponse withStatus(@Nonnull String status) {
        this.status = Utils.checkNotNull(status, "status");
        return this;
    }


    public GetConsumersResponse withData(@Nonnull List<Data> data) {
        this.data = Utils.checkNotNull(data, "data");
        return this;
    }


    /**
     * Response metadata
     */
    public GetConsumersResponse withMeta(@Nullable Meta meta) {
        this.meta = meta;
        return this;
    }


    /**
     * Links to navigate to previous or next pages through the API
     */
    public GetConsumersResponse withLinks(@Nullable Links links) {
        this.links = links;
        return this;
    }


    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public GetConsumersResponse withRaw(@Nullable Map<String, Object> raw) {
        this.raw = JsonNullable.of(raw);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetConsumersResponse other = (GetConsumersResponse) o;
        return 
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.data, other.data) &&
            Utils.enhancedDeepEquals(this.meta, other.meta) &&
            Utils.enhancedDeepEquals(this.links, other.links) &&
            Utils.enhancedDeepEquals(this.raw, other.raw);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusCode, status, data,
            meta, links, raw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetConsumersResponse.class,
                "statusCode", statusCode,
                "status", status,
                "data", data,
                "meta", meta,
                "links", links,
                "raw", raw);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long statusCode;

        private String status;

        private List<Data> data;

        private Meta meta;

        private Links links;

        private JsonNullable<Map<String, Object>> raw;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP Response Status Code
         */
        public Builder statusCode(long statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * HTTP Response Status
         */
        public Builder status(@Nonnull String status) {
            this.status = Utils.checkNotNull(status, "status");
            return this;
        }

        public Builder data(@Nonnull List<Data> data) {
            this.data = Utils.checkNotNull(data, "data");
            return this;
        }

        /**
         * Response metadata
         */
        public Builder meta(@Nullable Meta meta) {
            this.meta = meta;
            return this;
        }

        /**
         * Links to navigate to previous or next pages through the API
         */
        public Builder links(@Nullable Links links) {
            this.links = links;
            return this;
        }

        /**
         * Raw response from the integration when raw=true query param is provided
         */
        public Builder raw(@Nullable Map<String, Object> raw) {
            this.raw = JsonNullable.of(raw);
            return this;
        }

        public GetConsumersResponse build() {
            return new GetConsumersResponse(
                statusCode, status, data,
                meta, links, raw);
        }

    }
}
