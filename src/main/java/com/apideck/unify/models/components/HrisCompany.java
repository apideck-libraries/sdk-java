/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class HrisCompany {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("legal_name")
    private JsonNullable<String> legalName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subdomain")
    private JsonNullable<String> subdomain;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private HrisCompanyStatus status;

    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_number")
    private JsonNullable<String> companyNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debtor_id")
    private JsonNullable<String> debtorId;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private Boolean deleted;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public HrisCompany(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("legal_name") @Nullable String legalName,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("subdomain") @Nullable JsonNullable<String> subdomain,
            @JsonProperty("status") @Nullable HrisCompanyStatus status,
            @JsonProperty("company_number") @Nullable JsonNullable<String> companyNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("debtor_id") @Nullable JsonNullable<String> debtorId,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("deleted") @Nullable Boolean deleted,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.legalName = JsonNullable.of(legalName);
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.subdomain = Optional.ofNullable(subdomain)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.companyNumber = Optional.ofNullable(companyNumber)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.websites = websites;
        this.debtorId = Optional.ofNullable(debtorId)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.deleted = deleted;
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public HrisCompany() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public JsonNullable<String> legalName() {
        return this.legalName;
    }

    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    public JsonNullable<String> subdomain() {
        return this.subdomain;
    }

    public Optional<HrisCompanyStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    public JsonNullable<String> companyNumber() {
        return this.companyNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public JsonNullable<String> debtorId() {
        return this.debtorId;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    public Optional<Boolean> deleted() {
        return Optional.ofNullable(this.deleted);
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public HrisCompany withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public HrisCompany withLegalName(@Nullable String legalName) {
        this.legalName = JsonNullable.of(legalName);
        return this;
    }


    public HrisCompany withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    public HrisCompany withSubdomain(@Nullable String subdomain) {
        this.subdomain = JsonNullable.of(subdomain);
        return this;
    }


    public HrisCompany withStatus(@Nullable HrisCompanyStatus status) {
        this.status = status;
        return this;
    }


    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    public HrisCompany withCompanyNumber(@Nullable String companyNumber) {
        this.companyNumber = JsonNullable.of(companyNumber);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public HrisCompany withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    public HrisCompany withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public HrisCompany withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public HrisCompany withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public HrisCompany withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public HrisCompany withDebtorId(@Nullable String debtorId) {
        this.debtorId = JsonNullable.of(debtorId);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public HrisCompany withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    public HrisCompany withDeleted(@Nullable Boolean deleted) {
        this.deleted = deleted;
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public HrisCompany withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public HrisCompany withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public HrisCompany withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public HrisCompany withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public HrisCompany withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisCompany other = (HrisCompany) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.legalName, other.legalName) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.subdomain, other.subdomain) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.companyNumber, other.companyNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.debtorId, other.debtorId) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, legalName, displayName,
            subdomain, status, companyNumber,
            currency, addresses, phoneNumbers,
            emails, websites, debtorId,
            customMappings, deleted, updatedBy,
            createdBy, updatedAt, createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisCompany.class,
                "id", id,
                "legalName", legalName,
                "displayName", displayName,
                "subdomain", subdomain,
                "status", status,
                "companyNumber", companyNumber,
                "currency", currency,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "websites", websites,
                "debtorId", debtorId,
                "customMappings", customMappings,
                "deleted", deleted,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String legalName;

        private JsonNullable<String> displayName;

        private JsonNullable<String> subdomain;

        private HrisCompanyStatus status;

        private JsonNullable<String> companyNumber;

        private JsonNullable<Currency> currency;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private List<Website> websites;

        private JsonNullable<String> debtorId;

        private JsonNullable<Map<String, Object>> customMappings;

        private Boolean deleted;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder legalName(@Nullable String legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = JsonNullable.of(subdomain);
            return this;
        }

        public Builder status(@Nullable HrisCompanyStatus status) {
            this.status = status;
            return this;
        }

        /**
         * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
         */
        public Builder companyNumber(@Nullable String companyNumber) {
            this.companyNumber = JsonNullable.of(companyNumber);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder debtorId(@Nullable String debtorId) {
            this.debtorId = JsonNullable.of(debtorId);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public HrisCompany build() {
            return new HrisCompany(
                id, legalName, displayName,
                subdomain, status, companyNumber,
                currency, addresses, phoneNumbers,
                emails, websites, debtorId,
                customMappings, deleted, updatedBy,
                createdBy, updatedAt, createdAt,
                passThrough);
        }

    }
}
