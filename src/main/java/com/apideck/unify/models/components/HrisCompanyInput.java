/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class HrisCompanyInput {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("legal_name")
    private JsonNullable<String> legalName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subdomain")
    private JsonNullable<String> subdomain;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private HrisCompanyStatus status;

    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_number")
    private JsonNullable<String> companyNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debtor_id")
    private JsonNullable<String> debtorId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public HrisCompanyInput(
            @JsonProperty("legal_name") @Nullable String legalName,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("subdomain") @Nullable JsonNullable<String> subdomain,
            @JsonProperty("status") @Nullable HrisCompanyStatus status,
            @JsonProperty("company_number") @Nullable JsonNullable<String> companyNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("debtor_id") @Nullable JsonNullable<String> debtorId,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.legalName = JsonNullable.of(legalName);
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.subdomain = Optional.ofNullable(subdomain)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.companyNumber = Optional.ofNullable(companyNumber)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.websites = websites;
        this.debtorId = Optional.ofNullable(debtorId)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public HrisCompanyInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    public JsonNullable<String> legalName() {
        return this.legalName;
    }

    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    public JsonNullable<String> subdomain() {
        return this.subdomain;
    }

    public Optional<HrisCompanyStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    public JsonNullable<String> companyNumber() {
        return this.companyNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public JsonNullable<String> debtorId() {
        return this.debtorId;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    public HrisCompanyInput withLegalName(@Nullable String legalName) {
        this.legalName = JsonNullable.of(legalName);
        return this;
    }


    public HrisCompanyInput withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    public HrisCompanyInput withSubdomain(@Nullable String subdomain) {
        this.subdomain = JsonNullable.of(subdomain);
        return this;
    }


    public HrisCompanyInput withStatus(@Nullable HrisCompanyStatus status) {
        this.status = status;
        return this;
    }


    /**
     * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
     */
    public HrisCompanyInput withCompanyNumber(@Nullable String companyNumber) {
        this.companyNumber = JsonNullable.of(companyNumber);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public HrisCompanyInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    public HrisCompanyInput withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public HrisCompanyInput withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public HrisCompanyInput withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public HrisCompanyInput withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public HrisCompanyInput withDebtorId(@Nullable String debtorId) {
        this.debtorId = JsonNullable.of(debtorId);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public HrisCompanyInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisCompanyInput other = (HrisCompanyInput) o;
        return 
            Utils.enhancedDeepEquals(this.legalName, other.legalName) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.subdomain, other.subdomain) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.companyNumber, other.companyNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.debtorId, other.debtorId) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            legalName, displayName, subdomain,
            status, companyNumber, currency,
            addresses, phoneNumbers, emails,
            websites, debtorId, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisCompanyInput.class,
                "legalName", legalName,
                "displayName", displayName,
                "subdomain", subdomain,
                "status", status,
                "companyNumber", companyNumber,
                "currency", currency,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "websites", websites,
                "debtorId", debtorId,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String legalName;

        private JsonNullable<String> displayName;

        private JsonNullable<String> subdomain;

        private HrisCompanyStatus status;

        private JsonNullable<String> companyNumber;

        private JsonNullable<Currency> currency;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private List<Website> websites;

        private JsonNullable<String> debtorId;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        public Builder legalName(@Nullable String legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = JsonNullable.of(subdomain);
            return this;
        }

        public Builder status(@Nullable HrisCompanyStatus status) {
            this.status = status;
            return this;
        }

        /**
         * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
         */
        public Builder companyNumber(@Nullable String companyNumber) {
            this.companyNumber = JsonNullable.of(companyNumber);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder debtorId(@Nullable String debtorId) {
            this.debtorId = JsonNullable.of(debtorId);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public HrisCompanyInput build() {
            return new HrisCompanyInput(
                legalName, displayName, subdomain,
                status, companyNumber, currency,
                addresses, phoneNumbers, emails,
                websites, debtorId, passThrough);
        }

    }
}
