/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceInput {
    /**
     * Invoice type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends InvoiceType> type;

    /**
     * Invoice number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_date")
    private JsonNullable<LocalDate> invoiceDate;

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<LocalDate> dueDate;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Invoice status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends InvoiceStatus> status;

    /**
     * Invoice sent to contact/customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_sent")
    private Optional<Boolean> invoiceSent;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Discount percentage applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * Discount amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Double> discountAmount;

    /**
     * Total amount of invoice, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Balance of invoice due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * Amount of deposit made to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deposit")
    private JsonNullable<Double> deposit;

    /**
     * Customer memo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_memo")
    private JsonNullable<String> customerMemo;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<InvoiceLineItemInput>> lineItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends Address> billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends Address> shippingAddress;

    /**
     * Optional invoice template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private JsonNullable<String> templateId;

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_document_url")
    private JsonNullable<String> sourceDocumentUrl;

    /**
     * IDs of payments made on the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_allocations")
    private JsonNullable<? extends List<PaymentAllocations>> paymentAllocations;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private Optional<? extends BankAccount> bankAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public InvoiceInput(
            @JsonProperty("type") JsonNullable<? extends InvoiceType> type,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("invoice_date") JsonNullable<LocalDate> invoiceDate,
            @JsonProperty("due_date") JsonNullable<LocalDate> dueDate,
            @JsonProperty("terms") JsonNullable<String> terms,
            @JsonProperty("po_number") JsonNullable<String> poNumber,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("status") JsonNullable<? extends InvoiceStatus> status,
            @JsonProperty("invoice_sent") Optional<Boolean> invoiceSent,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") JsonNullable<Boolean> taxInclusive,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") JsonNullable<Double> totalTax,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("discount_percentage") JsonNullable<Double> discountPercentage,
            @JsonProperty("discount_amount") JsonNullable<Double> discountAmount,
            @JsonProperty("total") JsonNullable<Double> total,
            @JsonProperty("balance") JsonNullable<Double> balance,
            @JsonProperty("deposit") JsonNullable<Double> deposit,
            @JsonProperty("customer_memo") JsonNullable<String> customerMemo,
            @JsonProperty("tracking_category") JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("line_items") Optional<? extends List<InvoiceLineItemInput>> lineItems,
            @JsonProperty("billing_address") Optional<? extends Address> billingAddress,
            @JsonProperty("shipping_address") Optional<? extends Address> shippingAddress,
            @JsonProperty("template_id") JsonNullable<String> templateId,
            @JsonProperty("source_document_url") JsonNullable<String> sourceDocumentUrl,
            @JsonProperty("payment_allocations") JsonNullable<? extends List<PaymentAllocations>> paymentAllocations,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("channel") JsonNullable<String> channel,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("accounting_by_row") JsonNullable<Boolean> accountingByRow,
            @JsonProperty("bank_account") Optional<? extends BankAccount> bankAccount,
            @JsonProperty("ledger_account") JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(terms, "terms");
        Utils.checkNotNull(poNumber, "poNumber");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(invoiceSent, "invoiceSent");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(deposit, "deposit");
        Utils.checkNotNull(customerMemo, "customerMemo");
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.type = type;
        this.number = number;
        this.customer = customer;
        this.companyId = companyId;
        this.invoiceDate = invoiceDate;
        this.dueDate = dueDate;
        this.terms = terms;
        this.poNumber = poNumber;
        this.reference = reference;
        this.status = status;
        this.invoiceSent = invoiceSent;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.taxInclusive = taxInclusive;
        this.subTotal = subTotal;
        this.totalTax = totalTax;
        this.taxCode = taxCode;
        this.discountPercentage = discountPercentage;
        this.discountAmount = discountAmount;
        this.total = total;
        this.balance = balance;
        this.deposit = deposit;
        this.customerMemo = customerMemo;
        this.trackingCategory = trackingCategory;
        this.trackingCategories = trackingCategories;
        this.lineItems = lineItems;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.templateId = templateId;
        this.sourceDocumentUrl = sourceDocumentUrl;
        this.paymentAllocations = paymentAllocations;
        this.paymentMethod = paymentMethod;
        this.channel = channel;
        this.language = language;
        this.accountingByRow = accountingByRow;
        this.bankAccount = bankAccount;
        this.ledgerAccount = ledgerAccount;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public InvoiceInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Invoice type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceType> type() {
        return (JsonNullable<InvoiceType>) type;
    }

    /**
     * Invoice number.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> invoiceDate() {
        return invoiceDate;
    }

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dueDate() {
        return dueDate;
    }

    /**
     * Terms of payment.
     */
    @JsonIgnore
    public JsonNullable<String> terms() {
        return terms;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonIgnore
    public JsonNullable<String> poNumber() {
        return poNumber;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * Invoice status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceStatus> status() {
        return (JsonNullable<InvoiceStatus>) status;
    }

    /**
     * Invoice sent to contact/customer.
     */
    @JsonIgnore
    public Optional<Boolean> invoiceSent() {
        return invoiceSent;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Amounts are including tax
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxInclusive() {
        return taxInclusive;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> totalTax() {
        return totalTax;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    /**
     * Discount percentage applied to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> discountPercentage() {
        return discountPercentage;
    }

    /**
     * Discount amount applied to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> discountAmount() {
        return discountAmount;
    }

    /**
     * Total amount of invoice, including tax.
     */
    @JsonIgnore
    public JsonNullable<Double> total() {
        return total;
    }

    /**
     * Balance of invoice due.
     */
    @JsonIgnore
    public JsonNullable<Double> balance() {
        return balance;
    }

    /**
     * Amount of deposit made to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> deposit() {
        return deposit;
    }

    /**
     * Customer memo
     */
    @JsonIgnore
    public JsonNullable<String> customerMemo() {
        return customerMemo;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return (JsonNullable<DeprecatedLinkedTrackingCategory>) trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<InvoiceLineItemInput>> lineItems() {
        return (Optional<List<InvoiceLineItemInput>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> billingAddress() {
        return (Optional<Address>) billingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> shippingAddress() {
        return (Optional<Address>) shippingAddress;
    }

    /**
     * Optional invoice template
     */
    @JsonIgnore
    public JsonNullable<String> templateId() {
        return templateId;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    @JsonIgnore
    public JsonNullable<String> sourceDocumentUrl() {
        return sourceDocumentUrl;
    }

    /**
     * IDs of payments made on the invoice
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PaymentAllocations>> paymentAllocations() {
        return (JsonNullable<List<PaymentAllocations>>) paymentAllocations;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The channel through which the transaction is processed.
     */
    @JsonIgnore
    public JsonNullable<String> channel() {
        return channel;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonIgnore
    public JsonNullable<Boolean> accountingByRow() {
        return accountingByRow;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccount> bankAccount() {
        return (Optional<BankAccount>) bankAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) ledgerAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Invoice type
     */
    public InvoiceInput withType(InvoiceType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Invoice type
     */
    public InvoiceInput withType(JsonNullable<? extends InvoiceType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Invoice number.
     */
    public InvoiceInput withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Invoice number.
     */
    public InvoiceInput withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public InvoiceInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public InvoiceInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public InvoiceInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public InvoiceInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    public InvoiceInput withInvoiceDate(LocalDate invoiceDate) {
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        this.invoiceDate = JsonNullable.of(invoiceDate);
        return this;
    }

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    public InvoiceInput withInvoiceDate(JsonNullable<LocalDate> invoiceDate) {
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        this.invoiceDate = invoiceDate;
        return this;
    }

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    public InvoiceInput withDueDate(LocalDate dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    public InvoiceInput withDueDate(JsonNullable<LocalDate> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Terms of payment.
     */
    public InvoiceInput withTerms(String terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = JsonNullable.of(terms);
        return this;
    }

    /**
     * Terms of payment.
     */
    public InvoiceInput withTerms(JsonNullable<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public InvoiceInput withPoNumber(String poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public InvoiceInput withPoNumber(JsonNullable<String> poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public InvoiceInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public InvoiceInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Invoice status
     */
    public InvoiceInput withStatus(InvoiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Invoice status
     */
    public InvoiceInput withStatus(JsonNullable<? extends InvoiceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Invoice sent to contact/customer.
     */
    public InvoiceInput withInvoiceSent(boolean invoiceSent) {
        Utils.checkNotNull(invoiceSent, "invoiceSent");
        this.invoiceSent = Optional.ofNullable(invoiceSent);
        return this;
    }


    /**
     * Invoice sent to contact/customer.
     */
    public InvoiceInput withInvoiceSent(Optional<Boolean> invoiceSent) {
        Utils.checkNotNull(invoiceSent, "invoiceSent");
        this.invoiceSent = invoiceSent;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public InvoiceInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public InvoiceInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public InvoiceInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public InvoiceInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Amounts are including tax
     */
    public InvoiceInput withTaxInclusive(boolean taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }

    /**
     * Amounts are including tax
     */
    public InvoiceInput withTaxInclusive(JsonNullable<Boolean> taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = taxInclusive;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public InvoiceInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public InvoiceInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public InvoiceInput withTotalTax(double totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public InvoiceInput withTotalTax(JsonNullable<Double> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public InvoiceInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public InvoiceInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    /**
     * Discount percentage applied to this invoice.
     */
    public InvoiceInput withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Discount percentage applied to this invoice.
     */
    public InvoiceInput withDiscountPercentage(JsonNullable<Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Discount amount applied to this invoice.
     */
    public InvoiceInput withDiscountAmount(double discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * Discount amount applied to this invoice.
     */
    public InvoiceInput withDiscountAmount(JsonNullable<Double> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public InvoiceInput withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = JsonNullable.of(total);
        return this;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public InvoiceInput withTotal(JsonNullable<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * Balance of invoice due.
     */
    public InvoiceInput withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * Balance of invoice due.
     */
    public InvoiceInput withBalance(JsonNullable<Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Amount of deposit made to this invoice.
     */
    public InvoiceInput withDeposit(double deposit) {
        Utils.checkNotNull(deposit, "deposit");
        this.deposit = JsonNullable.of(deposit);
        return this;
    }

    /**
     * Amount of deposit made to this invoice.
     */
    public InvoiceInput withDeposit(JsonNullable<Double> deposit) {
        Utils.checkNotNull(deposit, "deposit");
        this.deposit = deposit;
        return this;
    }

    /**
     * Customer memo
     */
    public InvoiceInput withCustomerMemo(String customerMemo) {
        Utils.checkNotNull(customerMemo, "customerMemo");
        this.customerMemo = JsonNullable.of(customerMemo);
        return this;
    }

    /**
     * Customer memo
     */
    public InvoiceInput withCustomerMemo(JsonNullable<String> customerMemo) {
        Utils.checkNotNull(customerMemo, "customerMemo");
        this.customerMemo = customerMemo;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceInput withTrackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceInput withTrackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = trackingCategory;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public InvoiceInput withLineItems(List<InvoiceLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }


    public InvoiceInput withLineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public InvoiceInput withBillingAddress(Address billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    public InvoiceInput withBillingAddress(Optional<? extends Address> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public InvoiceInput withShippingAddress(Address shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    public InvoiceInput withShippingAddress(Optional<? extends Address> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Optional invoice template
     */
    public InvoiceInput withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = JsonNullable.of(templateId);
        return this;
    }

    /**
     * Optional invoice template
     */
    public InvoiceInput withTemplateId(JsonNullable<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public InvoiceInput withSourceDocumentUrl(String sourceDocumentUrl) {
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
        return this;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public InvoiceInput withSourceDocumentUrl(JsonNullable<String> sourceDocumentUrl) {
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        this.sourceDocumentUrl = sourceDocumentUrl;
        return this;
    }

    /**
     * IDs of payments made on the invoice
     */
    public InvoiceInput withPaymentAllocations(List<PaymentAllocations> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = JsonNullable.of(paymentAllocations);
        return this;
    }

    /**
     * IDs of payments made on the invoice
     */
    public InvoiceInput withPaymentAllocations(JsonNullable<? extends List<PaymentAllocations>> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = paymentAllocations;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public InvoiceInput withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public InvoiceInput withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public InvoiceInput withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = JsonNullable.of(channel);
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public InvoiceInput withChannel(JsonNullable<String> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public InvoiceInput withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public InvoiceInput withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public InvoiceInput withAccountingByRow(boolean accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public InvoiceInput withAccountingByRow(JsonNullable<Boolean> accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = accountingByRow;
        return this;
    }

    public InvoiceInput withBankAccount(BankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }


    public InvoiceInput withBankAccount(Optional<? extends BankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    public InvoiceInput withLedgerAccount(LinkedLedgerAccountInput ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }

    public InvoiceInput withLedgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = ledgerAccount;
        return this;
    }

    public InvoiceInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public InvoiceInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceInput other = (InvoiceInput) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.invoiceDate, other.invoiceDate) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.poNumber, other.poNumber) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.invoiceSent, other.invoiceSent) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.balance, other.balance) &&
            Utils.enhancedDeepEquals(this.deposit, other.deposit) &&
            Utils.enhancedDeepEquals(this.customerMemo, other.customerMemo) &&
            Utils.enhancedDeepEquals(this.trackingCategory, other.trackingCategory) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.sourceDocumentUrl, other.sourceDocumentUrl) &&
            Utils.enhancedDeepEquals(this.paymentAllocations, other.paymentAllocations) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.accountingByRow, other.accountingByRow) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, number, customer,
            companyId, invoiceDate, dueDate,
            terms, poNumber, reference,
            status, invoiceSent, currency,
            currencyRate, taxInclusive, subTotal,
            totalTax, taxCode, discountPercentage,
            discountAmount, total, balance,
            deposit, customerMemo, trackingCategory,
            trackingCategories, lineItems, billingAddress,
            shippingAddress, templateId, sourceDocumentUrl,
            paymentAllocations, paymentMethod, channel,
            language, accountingByRow, bankAccount,
            ledgerAccount, customFields, rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceInput.class,
                "type", type,
                "number", number,
                "customer", customer,
                "companyId", companyId,
                "invoiceDate", invoiceDate,
                "dueDate", dueDate,
                "terms", terms,
                "poNumber", poNumber,
                "reference", reference,
                "status", status,
                "invoiceSent", invoiceSent,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "taxCode", taxCode,
                "discountPercentage", discountPercentage,
                "discountAmount", discountAmount,
                "total", total,
                "balance", balance,
                "deposit", deposit,
                "customerMemo", customerMemo,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "lineItems", lineItems,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "templateId", templateId,
                "sourceDocumentUrl", sourceDocumentUrl,
                "paymentAllocations", paymentAllocations,
                "paymentMethod", paymentMethod,
                "channel", channel,
                "language", language,
                "accountingByRow", accountingByRow,
                "bankAccount", bankAccount,
                "ledgerAccount", ledgerAccount,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends InvoiceType> type = JsonNullable.undefined();

        private JsonNullable<String> number = JsonNullable.undefined();

        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<LocalDate> invoiceDate = JsonNullable.undefined();

        private JsonNullable<LocalDate> dueDate = JsonNullable.undefined();

        private JsonNullable<String> terms = JsonNullable.undefined();

        private JsonNullable<String> poNumber = JsonNullable.undefined();

        private JsonNullable<String> reference = JsonNullable.undefined();

        private JsonNullable<? extends InvoiceStatus> status = JsonNullable.undefined();

        private Optional<Boolean> invoiceSent = Optional.empty();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> currencyRate = JsonNullable.undefined();

        private JsonNullable<Boolean> taxInclusive = JsonNullable.undefined();

        private JsonNullable<Double> subTotal = JsonNullable.undefined();

        private JsonNullable<Double> totalTax = JsonNullable.undefined();

        private JsonNullable<String> taxCode = JsonNullable.undefined();

        private JsonNullable<Double> discountPercentage = JsonNullable.undefined();

        private JsonNullable<Double> discountAmount = JsonNullable.undefined();

        private JsonNullable<Double> total = JsonNullable.undefined();

        private JsonNullable<Double> balance = JsonNullable.undefined();

        private JsonNullable<Double> deposit = JsonNullable.undefined();

        private JsonNullable<String> customerMemo = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory = JsonNullable.undefined();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private Optional<? extends List<InvoiceLineItemInput>> lineItems = Optional.empty();

        private Optional<? extends Address> billingAddress = Optional.empty();

        private Optional<? extends Address> shippingAddress = Optional.empty();

        private JsonNullable<String> templateId = JsonNullable.undefined();

        private JsonNullable<String> sourceDocumentUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<PaymentAllocations>> paymentAllocations = JsonNullable.undefined();

        private JsonNullable<String> paymentMethod = JsonNullable.undefined();

        private JsonNullable<String> channel = JsonNullable.undefined();

        private JsonNullable<String> language = JsonNullable.undefined();

        private JsonNullable<Boolean> accountingByRow = JsonNullable.undefined();

        private Optional<? extends BankAccount> bankAccount = Optional.empty();

        private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Invoice type
         */
        public Builder type(InvoiceType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Invoice type
         */
        public Builder type(JsonNullable<? extends InvoiceType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * Invoice number.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Invoice number.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }


        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * Date invoice was issued - YYYY-MM-DD.
         */
        public Builder invoiceDate(LocalDate invoiceDate) {
            Utils.checkNotNull(invoiceDate, "invoiceDate");
            this.invoiceDate = JsonNullable.of(invoiceDate);
            return this;
        }

        /**
         * Date invoice was issued - YYYY-MM-DD.
         */
        public Builder invoiceDate(JsonNullable<LocalDate> invoiceDate) {
            Utils.checkNotNull(invoiceDate, "invoiceDate");
            this.invoiceDate = invoiceDate;
            return this;
        }


        /**
         * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
         */
        public Builder dueDate(LocalDate dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
         */
        public Builder dueDate(JsonNullable<LocalDate> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        /**
         * Terms of payment.
         */
        public Builder terms(String terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(JsonNullable<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }


        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(String poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(JsonNullable<String> poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = poNumber;
            return this;
        }


        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * Invoice status
         */
        public Builder status(InvoiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Invoice status
         */
        public Builder status(JsonNullable<? extends InvoiceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Invoice sent to contact/customer.
         */
        public Builder invoiceSent(boolean invoiceSent) {
            Utils.checkNotNull(invoiceSent, "invoiceSent");
            this.invoiceSent = Optional.ofNullable(invoiceSent);
            return this;
        }

        /**
         * Invoice sent to contact/customer.
         */
        public Builder invoiceSent(Optional<Boolean> invoiceSent) {
            Utils.checkNotNull(invoiceSent, "invoiceSent");
            this.invoiceSent = invoiceSent;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }


        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(boolean taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(JsonNullable<Boolean> taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = taxInclusive;
            return this;
        }


        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }


        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(double totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(JsonNullable<Double> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }


        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }


        /**
         * Discount percentage applied to this invoice.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount percentage applied to this invoice.
         */
        public Builder discountPercentage(JsonNullable<Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }


        /**
         * Discount amount applied to this invoice.
         */
        public Builder discountAmount(double discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Discount amount applied to this invoice.
         */
        public Builder discountAmount(JsonNullable<Double> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }


        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(JsonNullable<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }


        /**
         * Balance of invoice due.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Balance of invoice due.
         */
        public Builder balance(JsonNullable<Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }


        /**
         * Amount of deposit made to this invoice.
         */
        public Builder deposit(double deposit) {
            Utils.checkNotNull(deposit, "deposit");
            this.deposit = JsonNullable.of(deposit);
            return this;
        }

        /**
         * Amount of deposit made to this invoice.
         */
        public Builder deposit(JsonNullable<Double> deposit) {
            Utils.checkNotNull(deposit, "deposit");
            this.deposit = deposit;
            return this;
        }


        /**
         * Customer memo
         */
        public Builder customerMemo(String customerMemo) {
            Utils.checkNotNull(customerMemo, "customerMemo");
            this.customerMemo = JsonNullable.of(customerMemo);
            return this;
        }

        /**
         * Customer memo
         */
        public Builder customerMemo(JsonNullable<String> customerMemo) {
            Utils.checkNotNull(customerMemo, "customerMemo");
            this.customerMemo = customerMemo;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = trackingCategory;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        public Builder lineItems(List<InvoiceLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }


        public Builder billingAddress(Address billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends Address> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        public Builder shippingAddress(Address shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends Address> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        /**
         * Optional invoice template
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = JsonNullable.of(templateId);
            return this;
        }

        /**
         * Optional invoice template
         */
        public Builder templateId(JsonNullable<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }


        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
         */
        public Builder sourceDocumentUrl(String sourceDocumentUrl) {
            Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
            this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
            return this;
        }

        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
         */
        public Builder sourceDocumentUrl(JsonNullable<String> sourceDocumentUrl) {
            Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
            this.sourceDocumentUrl = sourceDocumentUrl;
            return this;
        }


        /**
         * IDs of payments made on the invoice
         */
        public Builder paymentAllocations(List<PaymentAllocations> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = JsonNullable.of(paymentAllocations);
            return this;
        }

        /**
         * IDs of payments made on the invoice
         */
        public Builder paymentAllocations(JsonNullable<? extends List<PaymentAllocations>> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = paymentAllocations;
            return this;
        }


        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }


        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(JsonNullable<String> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }


        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }


        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(boolean accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(JsonNullable<Boolean> accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = accountingByRow;
            return this;
        }


        public Builder bankAccount(BankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        public Builder bankAccount(Optional<? extends BankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }


        public Builder ledgerAccount(LinkedLedgerAccountInput ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        public Builder ledgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = ledgerAccount;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public InvoiceInput build() {

            return new InvoiceInput(
                type, number, customer,
                companyId, invoiceDate, dueDate,
                terms, poNumber, reference,
                status, invoiceSent, currency,
                currencyRate, taxInclusive, subTotal,
                totalTax, taxCode, discountPercentage,
                discountAmount, total, balance,
                deposit, customerMemo, trackingCategory,
                trackingCategories, lineItems, billingAddress,
                shippingAddress, templateId, sourceDocumentUrl,
                paymentAllocations, paymentMethod, channel,
                language, accountingByRow, bankAccount,
                ledgerAccount, customFields, rowVersion,
                passThrough);
        }

    }
}
