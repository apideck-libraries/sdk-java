/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceInput {
    /**
     * Invoice type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<InvoiceType> type;

    /**
     * Invoice number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<LinkedCustomerInput> customer;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_date")
    private JsonNullable<LocalDate> invoiceDate;

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<LocalDate> dueDate;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Invoice status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<InvoiceStatus> status;

    /**
     * Invoice sent to contact/customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_sent")
    private Boolean invoiceSent;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Discount percentage applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * Discount amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Double> discountAmount;

    /**
     * Total amount of invoice, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Balance of invoice due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<Double> balance;

    /**
     * Amount of deposit made to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deposit")
    private JsonNullable<Double> deposit;

    /**
     * Customer memo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_memo")
    private JsonNullable<String> customerMemo;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private List<InvoiceLineItemInput> lineItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Address billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Address shippingAddress;

    /**
     * Optional invoice template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private JsonNullable<String> templateId;

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_document_url")
    private JsonNullable<String> sourceDocumentUrl;

    /**
     * IDs of payments made on the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_allocations")
    private JsonNullable<List<PaymentAllocations>> paymentAllocations;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private BankAccount bankAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<LinkedLedgerAccountInput> ledgerAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public InvoiceInput(
            @JsonProperty("type") @Nullable JsonNullable<InvoiceType> type,
            @JsonProperty("number") @Nullable JsonNullable<String> number,
            @JsonProperty("customer") @Nullable JsonNullable<LinkedCustomerInput> customer,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("invoice_date") @Nullable JsonNullable<LocalDate> invoiceDate,
            @JsonProperty("due_date") @Nullable JsonNullable<LocalDate> dueDate,
            @JsonProperty("terms") @Nullable JsonNullable<String> terms,
            @JsonProperty("po_number") @Nullable JsonNullable<String> poNumber,
            @JsonProperty("reference") @Nullable JsonNullable<String> reference,
            @JsonProperty("status") @Nullable JsonNullable<InvoiceStatus> status,
            @JsonProperty("invoice_sent") @Nullable Boolean invoiceSent,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") @Nullable JsonNullable<Boolean> taxInclusive,
            @JsonProperty("sub_total") @Nullable JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") @Nullable JsonNullable<Double> totalTax,
            @JsonProperty("tax_code") @Nullable JsonNullable<String> taxCode,
            @JsonProperty("discount_percentage") @Nullable JsonNullable<Double> discountPercentage,
            @JsonProperty("discount_amount") @Nullable JsonNullable<Double> discountAmount,
            @JsonProperty("total") @Nullable JsonNullable<Double> total,
            @JsonProperty("balance") @Nullable JsonNullable<Double> balance,
            @JsonProperty("deposit") @Nullable JsonNullable<Double> deposit,
            @JsonProperty("customer_memo") @Nullable JsonNullable<String> customerMemo,
            @JsonProperty("tracking_category") @Nullable JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("line_items") @Nullable List<InvoiceLineItemInput> lineItems,
            @JsonProperty("billing_address") @Nullable Address billingAddress,
            @JsonProperty("shipping_address") @Nullable Address shippingAddress,
            @JsonProperty("template_id") @Nullable JsonNullable<String> templateId,
            @JsonProperty("source_document_url") @Nullable JsonNullable<String> sourceDocumentUrl,
            @JsonProperty("payment_allocations") @Nullable JsonNullable<List<PaymentAllocations>> paymentAllocations,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("channel") @Nullable JsonNullable<String> channel,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("accounting_by_row") @Nullable JsonNullable<Boolean> accountingByRow,
            @JsonProperty("bank_account") @Nullable BankAccount bankAccount,
            @JsonProperty("ledger_account") @Nullable JsonNullable<LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.number = Optional.ofNullable(number)
            .orElse(JsonNullable.undefined());
        this.customer = Optional.ofNullable(customer)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.invoiceDate = Optional.ofNullable(invoiceDate)
            .orElse(JsonNullable.undefined());
        this.dueDate = Optional.ofNullable(dueDate)
            .orElse(JsonNullable.undefined());
        this.terms = Optional.ofNullable(terms)
            .orElse(JsonNullable.undefined());
        this.poNumber = Optional.ofNullable(poNumber)
            .orElse(JsonNullable.undefined());
        this.reference = Optional.ofNullable(reference)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.invoiceSent = invoiceSent;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.taxInclusive = Optional.ofNullable(taxInclusive)
            .orElse(JsonNullable.undefined());
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.totalTax = Optional.ofNullable(totalTax)
            .orElse(JsonNullable.undefined());
        this.taxCode = Optional.ofNullable(taxCode)
            .orElse(JsonNullable.undefined());
        this.discountPercentage = Optional.ofNullable(discountPercentage)
            .orElse(JsonNullable.undefined());
        this.discountAmount = Optional.ofNullable(discountAmount)
            .orElse(JsonNullable.undefined());
        this.total = Optional.ofNullable(total)
            .orElse(JsonNullable.undefined());
        this.balance = Optional.ofNullable(balance)
            .orElse(JsonNullable.undefined());
        this.deposit = Optional.ofNullable(deposit)
            .orElse(JsonNullable.undefined());
        this.customerMemo = Optional.ofNullable(customerMemo)
            .orElse(JsonNullable.undefined());
        this.trackingCategory = Optional.ofNullable(trackingCategory)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.lineItems = lineItems;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.templateId = Optional.ofNullable(templateId)
            .orElse(JsonNullable.undefined());
        this.sourceDocumentUrl = Optional.ofNullable(sourceDocumentUrl)
            .orElse(JsonNullable.undefined());
        this.paymentAllocations = Optional.ofNullable(paymentAllocations)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.channel = Optional.ofNullable(channel)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.accountingByRow = Optional.ofNullable(accountingByRow)
            .orElse(JsonNullable.undefined());
        this.bankAccount = bankAccount;
        this.ledgerAccount = Optional.ofNullable(ledgerAccount)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public InvoiceInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * Invoice type
     */
    public JsonNullable<InvoiceType> type() {
        return this.type;
    }

    /**
     * Invoice number.
     */
    public JsonNullable<String> number() {
        return this.number;
    }

    /**
     * The customer this entity is linked to.
     */
    public JsonNullable<LinkedCustomerInput> customer() {
        return this.customer;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> invoiceDate() {
        return this.invoiceDate;
    }

    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> dueDate() {
        return this.dueDate;
    }

    /**
     * Terms of payment.
     */
    public JsonNullable<String> terms() {
        return this.terms;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public JsonNullable<String> poNumber() {
        return this.poNumber;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public JsonNullable<String> reference() {
        return this.reference;
    }

    /**
     * Invoice status
     */
    public JsonNullable<InvoiceStatus> status() {
        return this.status;
    }

    /**
     * Invoice sent to contact/customer.
     */
    public Optional<Boolean> invoiceSent() {
        return Optional.ofNullable(this.invoiceSent);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * Amounts are including tax
     */
    public JsonNullable<Boolean> taxInclusive() {
        return this.taxInclusive;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JsonNullable<Double> subTotal() {
        return this.subTotal;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public JsonNullable<Double> totalTax() {
        return this.totalTax;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JsonNullable<String> taxCode() {
        return this.taxCode;
    }

    /**
     * Discount percentage applied to this invoice.
     */
    public JsonNullable<Double> discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Discount amount applied to this invoice.
     */
    public JsonNullable<Double> discountAmount() {
        return this.discountAmount;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public JsonNullable<Double> total() {
        return this.total;
    }

    /**
     * Balance of invoice due.
     */
    public JsonNullable<Double> balance() {
        return this.balance;
    }

    /**
     * Amount of deposit made to this invoice.
     */
    public JsonNullable<Double> deposit() {
        return this.deposit;
    }

    /**
     * Customer memo
     */
    public JsonNullable<String> customerMemo() {
        return this.customerMemo;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return this.trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    public Optional<List<InvoiceLineItemInput>> lineItems() {
        return Optional.ofNullable(this.lineItems);
    }

    public Optional<Address> billingAddress() {
        return Optional.ofNullable(this.billingAddress);
    }

    public Optional<Address> shippingAddress() {
        return Optional.ofNullable(this.shippingAddress);
    }

    /**
     * Optional invoice template
     */
    public JsonNullable<String> templateId() {
        return this.templateId;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public JsonNullable<String> sourceDocumentUrl() {
        return this.sourceDocumentUrl;
    }

    /**
     * IDs of payments made on the invoice
     */
    public JsonNullable<List<PaymentAllocations>> paymentAllocations() {
        return this.paymentAllocations;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public JsonNullable<String> channel() {
        return this.channel;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public JsonNullable<Boolean> accountingByRow() {
        return this.accountingByRow;
    }

    public Optional<BankAccount> bankAccount() {
        return Optional.ofNullable(this.bankAccount);
    }

    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return this.ledgerAccount;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Invoice type
     */
    public InvoiceInput withType(@Nullable InvoiceType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * Invoice number.
     */
    public InvoiceInput withNumber(@Nullable String number) {
        this.number = JsonNullable.of(number);
        return this;
    }


    /**
     * The customer this entity is linked to.
     */
    public InvoiceInput withCustomer(@Nullable LinkedCustomerInput customer) {
        this.customer = JsonNullable.of(customer);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public InvoiceInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    public InvoiceInput withInvoiceDate(@Nullable LocalDate invoiceDate) {
        this.invoiceDate = JsonNullable.of(invoiceDate);
        return this;
    }


    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    public InvoiceInput withDueDate(@Nullable LocalDate dueDate) {
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }


    /**
     * Terms of payment.
     */
    public InvoiceInput withTerms(@Nullable String terms) {
        this.terms = JsonNullable.of(terms);
        return this;
    }


    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    public InvoiceInput withPoNumber(@Nullable String poNumber) {
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }


    /**
     * Optional reference identifier for the transaction.
     */
    public InvoiceInput withReference(@Nullable String reference) {
        this.reference = JsonNullable.of(reference);
        return this;
    }


    /**
     * Invoice status
     */
    public InvoiceInput withStatus(@Nullable InvoiceStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Invoice sent to contact/customer.
     */
    public InvoiceInput withInvoiceSent(@Nullable Boolean invoiceSent) {
        this.invoiceSent = invoiceSent;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public InvoiceInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public InvoiceInput withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * Amounts are including tax
     */
    public InvoiceInput withTaxInclusive(@Nullable Boolean taxInclusive) {
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }


    /**
     * Sub-total amount, normally before tax.
     */
    public InvoiceInput withSubTotal(@Nullable Double subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * Total tax amount applied to this invoice.
     */
    public InvoiceInput withTotalTax(@Nullable Double totalTax) {
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }


    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public InvoiceInput withTaxCode(@Nullable String taxCode) {
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }


    /**
     * Discount percentage applied to this invoice.
     */
    public InvoiceInput withDiscountPercentage(@Nullable Double discountPercentage) {
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }


    /**
     * Discount amount applied to this invoice.
     */
    public InvoiceInput withDiscountAmount(@Nullable Double discountAmount) {
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }


    /**
     * Total amount of invoice, including tax.
     */
    public InvoiceInput withTotal(@Nullable Double total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    /**
     * Balance of invoice due.
     */
    public InvoiceInput withBalance(@Nullable Double balance) {
        this.balance = JsonNullable.of(balance);
        return this;
    }


    /**
     * Amount of deposit made to this invoice.
     */
    public InvoiceInput withDeposit(@Nullable Double deposit) {
        this.deposit = JsonNullable.of(deposit);
        return this;
    }


    /**
     * Customer memo
     */
    public InvoiceInput withCustomerMemo(@Nullable String customerMemo) {
        this.customerMemo = JsonNullable.of(customerMemo);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceInput withTrackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public InvoiceInput withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    public InvoiceInput withLineItems(@Nullable List<InvoiceLineItemInput> lineItems) {
        this.lineItems = lineItems;
        return this;
    }


    public InvoiceInput withBillingAddress(@Nullable Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }


    public InvoiceInput withShippingAddress(@Nullable Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }


    /**
     * Optional invoice template
     */
    public InvoiceInput withTemplateId(@Nullable String templateId) {
        this.templateId = JsonNullable.of(templateId);
        return this;
    }


    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    public InvoiceInput withSourceDocumentUrl(@Nullable String sourceDocumentUrl) {
        this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
        return this;
    }


    /**
     * IDs of payments made on the invoice
     */
    public InvoiceInput withPaymentAllocations(@Nullable List<PaymentAllocations> paymentAllocations) {
        this.paymentAllocations = JsonNullable.of(paymentAllocations);
        return this;
    }


    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public InvoiceInput withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * The channel through which the transaction is processed.
     */
    public InvoiceInput withChannel(@Nullable String channel) {
        this.channel = JsonNullable.of(channel);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public InvoiceInput withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public InvoiceInput withAccountingByRow(@Nullable Boolean accountingByRow) {
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }


    public InvoiceInput withBankAccount(@Nullable BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }


    public InvoiceInput withLedgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }


    public InvoiceInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceInput other = (InvoiceInput) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.invoiceDate, other.invoiceDate) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.poNumber, other.poNumber) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.invoiceSent, other.invoiceSent) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.balance, other.balance) &&
            Utils.enhancedDeepEquals(this.deposit, other.deposit) &&
            Utils.enhancedDeepEquals(this.customerMemo, other.customerMemo) &&
            Utils.enhancedDeepEquals(this.trackingCategory, other.trackingCategory) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.sourceDocumentUrl, other.sourceDocumentUrl) &&
            Utils.enhancedDeepEquals(this.paymentAllocations, other.paymentAllocations) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.accountingByRow, other.accountingByRow) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, number, customer,
            companyId, invoiceDate, dueDate,
            terms, poNumber, reference,
            status, invoiceSent, currency,
            currencyRate, taxInclusive, subTotal,
            totalTax, taxCode, discountPercentage,
            discountAmount, total, balance,
            deposit, customerMemo, trackingCategory,
            trackingCategories, lineItems, billingAddress,
            shippingAddress, templateId, sourceDocumentUrl,
            paymentAllocations, paymentMethod, channel,
            language, accountingByRow, bankAccount,
            ledgerAccount, customFields, rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceInput.class,
                "type", type,
                "number", number,
                "customer", customer,
                "companyId", companyId,
                "invoiceDate", invoiceDate,
                "dueDate", dueDate,
                "terms", terms,
                "poNumber", poNumber,
                "reference", reference,
                "status", status,
                "invoiceSent", invoiceSent,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "taxCode", taxCode,
                "discountPercentage", discountPercentage,
                "discountAmount", discountAmount,
                "total", total,
                "balance", balance,
                "deposit", deposit,
                "customerMemo", customerMemo,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "lineItems", lineItems,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "templateId", templateId,
                "sourceDocumentUrl", sourceDocumentUrl,
                "paymentAllocations", paymentAllocations,
                "paymentMethod", paymentMethod,
                "channel", channel,
                "language", language,
                "accountingByRow", accountingByRow,
                "bankAccount", bankAccount,
                "ledgerAccount", ledgerAccount,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<InvoiceType> type;

        private JsonNullable<String> number;

        private JsonNullable<LinkedCustomerInput> customer;

        private JsonNullable<String> companyId;

        private JsonNullable<LocalDate> invoiceDate;

        private JsonNullable<LocalDate> dueDate;

        private JsonNullable<String> terms;

        private JsonNullable<String> poNumber;

        private JsonNullable<String> reference;

        private JsonNullable<InvoiceStatus> status;

        private Boolean invoiceSent;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> currencyRate;

        private JsonNullable<Boolean> taxInclusive;

        private JsonNullable<Double> subTotal;

        private JsonNullable<Double> totalTax;

        private JsonNullable<String> taxCode;

        private JsonNullable<Double> discountPercentage;

        private JsonNullable<Double> discountAmount;

        private JsonNullable<Double> total;

        private JsonNullable<Double> balance;

        private JsonNullable<Double> deposit;

        private JsonNullable<String> customerMemo;

        @Deprecated
        private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private List<InvoiceLineItemInput> lineItems;

        private Address billingAddress;

        private Address shippingAddress;

        private JsonNullable<String> templateId;

        private JsonNullable<String> sourceDocumentUrl;

        private JsonNullable<List<PaymentAllocations>> paymentAllocations;

        private JsonNullable<String> paymentMethod;

        private JsonNullable<String> channel;

        private JsonNullable<String> language;

        private JsonNullable<Boolean> accountingByRow;

        private BankAccount bankAccount;

        private JsonNullable<LinkedLedgerAccountInput> ledgerAccount;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Invoice type
         */
        public Builder type(@Nullable InvoiceType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Invoice number.
         */
        public Builder number(@Nullable String number) {
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(@Nullable LinkedCustomerInput customer) {
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Date invoice was issued - YYYY-MM-DD.
         */
        public Builder invoiceDate(@Nullable LocalDate invoiceDate) {
            this.invoiceDate = JsonNullable.of(invoiceDate);
            return this;
        }

        /**
         * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
         */
        public Builder dueDate(@Nullable LocalDate dueDate) {
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(@Nullable String terms) {
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
         */
        public Builder poNumber(@Nullable String poNumber) {
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Invoice status
         */
        public Builder status(@Nullable InvoiceStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Invoice sent to contact/customer.
         */
        public Builder invoiceSent(@Nullable Boolean invoiceSent) {
            this.invoiceSent = invoiceSent;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(@Nullable Boolean taxInclusive) {
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(@Nullable Double subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(@Nullable Double totalTax) {
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(@Nullable String taxCode) {
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Discount percentage applied to this invoice.
         */
        public Builder discountPercentage(@Nullable Double discountPercentage) {
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount amount applied to this invoice.
         */
        public Builder discountAmount(@Nullable Double discountAmount) {
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(@Nullable Double total) {
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Balance of invoice due.
         */
        public Builder balance(@Nullable Double balance) {
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Amount of deposit made to this invoice.
         */
        public Builder deposit(@Nullable Double deposit) {
            this.deposit = JsonNullable.of(deposit);
            return this;
        }

        /**
         * Customer memo
         */
        public Builder customerMemo(@Nullable String customerMemo) {
            this.customerMemo = JsonNullable.of(customerMemo);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        public Builder lineItems(@Nullable List<InvoiceLineItemInput> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        public Builder billingAddress(@Nullable Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder shippingAddress(@Nullable Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * Optional invoice template
         */
        public Builder templateId(@Nullable String templateId) {
            this.templateId = JsonNullable.of(templateId);
            return this;
        }

        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
         */
        public Builder sourceDocumentUrl(@Nullable String sourceDocumentUrl) {
            this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
            return this;
        }

        /**
         * IDs of payments made on the invoice
         */
        public Builder paymentAllocations(@Nullable List<PaymentAllocations> paymentAllocations) {
            this.paymentAllocations = JsonNullable.of(paymentAllocations);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(@Nullable String channel) {
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(@Nullable Boolean accountingByRow) {
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        public Builder bankAccount(@Nullable BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        public Builder ledgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public InvoiceInput build() {
            return new InvoiceInput(
                type, number, customer,
                companyId, invoiceDate, dueDate,
                terms, poNumber, reference,
                status, invoiceSent, currency,
                currencyRate, taxInclusive, subTotal,
                totalTax, taxCode, discountPercentage,
                discountAmount, total, balance,
                deposit, customerMemo, trackingCategory,
                trackingCategories, lineItems, billingAddress,
                shippingAddress, templateId, sourceDocumentUrl,
                paymentAllocations, paymentMethod, channel,
                language, accountingByRow, bankAccount,
                ledgerAccount, customFields, rowVersion,
                passThrough);
        }

    }
}
