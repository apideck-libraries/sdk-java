/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceItem {
    /**
     * The ID of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Item name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A short description of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * User defined item code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Item will be available on sales transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sold")
    private JsonNullable<Boolean> sold;

    /**
     * Item is available for purchase transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchased")
    private JsonNullable<Boolean> purchased;

    /**
     * Item is inventoried
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracked")
    private JsonNullable<Boolean> tracked;

    /**
     * If true, transactions for this item are taxable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable")
    private JsonNullable<Boolean> taxable;

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_date")
    private JsonNullable<LocalDate> inventoryDate;

    /**
     * Item type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<InvoiceItemTypeType> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_details")
    private SalesDetails salesDetails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchase_details")
    private PurchaseDetails purchaseDetails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Double> quantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_account")
    private JsonNullable<LinkedLedgerAccount> assetAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("income_account")
    private JsonNullable<LinkedLedgerAccount> incomeAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expense_account")
    private JsonNullable<LinkedLedgerAccount> expenseAccount;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;

    /**
     * The ID of the tax schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_schedule_id")
    private JsonNullable<String> taxScheduleId;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public InvoiceItem(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("code") @Nullable JsonNullable<String> code,
            @JsonProperty("sold") @Nullable JsonNullable<Boolean> sold,
            @JsonProperty("purchased") @Nullable JsonNullable<Boolean> purchased,
            @JsonProperty("tracked") @Nullable JsonNullable<Boolean> tracked,
            @JsonProperty("taxable") @Nullable JsonNullable<Boolean> taxable,
            @JsonProperty("inventory_date") @Nullable JsonNullable<LocalDate> inventoryDate,
            @JsonProperty("type") @Nullable JsonNullable<InvoiceItemTypeType> type,
            @JsonProperty("sales_details") @Nullable SalesDetails salesDetails,
            @JsonProperty("purchase_details") @Nullable PurchaseDetails purchaseDetails,
            @JsonProperty("quantity") @Nullable JsonNullable<Double> quantity,
            @JsonProperty("unit_price") @Nullable JsonNullable<Double> unitPrice,
            @JsonProperty("asset_account") @Nullable JsonNullable<LinkedLedgerAccount> assetAccount,
            @JsonProperty("income_account") @Nullable JsonNullable<LinkedLedgerAccount> incomeAccount,
            @JsonProperty("expense_account") @Nullable JsonNullable<LinkedLedgerAccount> expenseAccount,
            @JsonProperty("tracking_category") @Nullable JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("active") @Nullable JsonNullable<Boolean> active,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("location_id") @Nullable JsonNullable<String> locationId,
            @JsonProperty("subsidiary_id") @Nullable JsonNullable<String> subsidiaryId,
            @JsonProperty("tax_schedule_id") @Nullable JsonNullable<String> taxScheduleId,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.code = Optional.ofNullable(code)
            .orElse(JsonNullable.undefined());
        this.sold = Optional.ofNullable(sold)
            .orElse(JsonNullable.undefined());
        this.purchased = Optional.ofNullable(purchased)
            .orElse(JsonNullable.undefined());
        this.tracked = Optional.ofNullable(tracked)
            .orElse(JsonNullable.undefined());
        this.taxable = Optional.ofNullable(taxable)
            .orElse(JsonNullable.undefined());
        this.inventoryDate = Optional.ofNullable(inventoryDate)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.salesDetails = salesDetails;
        this.purchaseDetails = purchaseDetails;
        this.quantity = Optional.ofNullable(quantity)
            .orElse(JsonNullable.undefined());
        this.unitPrice = Optional.ofNullable(unitPrice)
            .orElse(JsonNullable.undefined());
        this.assetAccount = Optional.ofNullable(assetAccount)
            .orElse(JsonNullable.undefined());
        this.incomeAccount = Optional.ofNullable(incomeAccount)
            .orElse(JsonNullable.undefined());
        this.expenseAccount = Optional.ofNullable(expenseAccount)
            .orElse(JsonNullable.undefined());
        this.trackingCategory = Optional.ofNullable(trackingCategory)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.active = Optional.ofNullable(active)
            .orElse(JsonNullable.undefined());
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.locationId = Optional.ofNullable(locationId)
            .orElse(JsonNullable.undefined());
        this.subsidiaryId = Optional.ofNullable(subsidiaryId)
            .orElse(JsonNullable.undefined());
        this.taxScheduleId = Optional.ofNullable(taxScheduleId)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public InvoiceItem() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The ID of the item.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Item name
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * A short description of the item
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * User defined item code
     */
    public JsonNullable<String> code() {
        return this.code;
    }

    /**
     * Item will be available on sales transactions
     */
    public JsonNullable<Boolean> sold() {
        return this.sold;
    }

    /**
     * Item is available for purchase transactions
     */
    public JsonNullable<Boolean> purchased() {
        return this.purchased;
    }

    /**
     * Item is inventoried
     */
    public JsonNullable<Boolean> tracked() {
        return this.tracked;
    }

    /**
     * If true, transactions for this item are taxable
     */
    public JsonNullable<Boolean> taxable() {
        return this.taxable;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> inventoryDate() {
        return this.inventoryDate;
    }

    /**
     * Item type
     */
    public JsonNullable<InvoiceItemTypeType> type() {
        return this.type;
    }

    public Optional<SalesDetails> salesDetails() {
        return Optional.ofNullable(this.salesDetails);
    }

    public Optional<PurchaseDetails> purchaseDetails() {
        return Optional.ofNullable(this.purchaseDetails);
    }

    public JsonNullable<Double> quantity() {
        return this.quantity;
    }

    public JsonNullable<Double> unitPrice() {
        return this.unitPrice;
    }

    public JsonNullable<LinkedLedgerAccount> assetAccount() {
        return this.assetAccount;
    }

    public JsonNullable<LinkedLedgerAccount> incomeAccount() {
        return this.incomeAccount;
    }

    public JsonNullable<LinkedLedgerAccount> expenseAccount() {
        return this.expenseAccount;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return this.trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    public JsonNullable<Boolean> active() {
        return this.active;
    }

    /**
     * The ID of the department
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    /**
     * The ID of the location
     */
    public JsonNullable<String> locationId() {
        return this.locationId;
    }

    /**
     * The ID of the subsidiary
     */
    public JsonNullable<String> subsidiaryId() {
        return this.subsidiaryId;
    }

    /**
     * The ID of the tax schedule
     */
    public JsonNullable<String> taxScheduleId() {
        return this.taxScheduleId;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the item.
     */
    public InvoiceItem withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Item name
     */
    public InvoiceItem withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * A short description of the item
     */
    public InvoiceItem withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * User defined item code
     */
    public InvoiceItem withCode(@Nullable String code) {
        this.code = JsonNullable.of(code);
        return this;
    }


    /**
     * Item will be available on sales transactions
     */
    public InvoiceItem withSold(@Nullable Boolean sold) {
        this.sold = JsonNullable.of(sold);
        return this;
    }


    /**
     * Item is available for purchase transactions
     */
    public InvoiceItem withPurchased(@Nullable Boolean purchased) {
        this.purchased = JsonNullable.of(purchased);
        return this;
    }


    /**
     * Item is inventoried
     */
    public InvoiceItem withTracked(@Nullable Boolean tracked) {
        this.tracked = JsonNullable.of(tracked);
        return this;
    }


    /**
     * If true, transactions for this item are taxable
     */
    public InvoiceItem withTaxable(@Nullable Boolean taxable) {
        this.taxable = JsonNullable.of(taxable);
        return this;
    }


    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public InvoiceItem withInventoryDate(@Nullable LocalDate inventoryDate) {
        this.inventoryDate = JsonNullable.of(inventoryDate);
        return this;
    }


    /**
     * Item type
     */
    public InvoiceItem withType(@Nullable InvoiceItemTypeType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    public InvoiceItem withSalesDetails(@Nullable SalesDetails salesDetails) {
        this.salesDetails = salesDetails;
        return this;
    }


    public InvoiceItem withPurchaseDetails(@Nullable PurchaseDetails purchaseDetails) {
        this.purchaseDetails = purchaseDetails;
        return this;
    }


    public InvoiceItem withQuantity(@Nullable Double quantity) {
        this.quantity = JsonNullable.of(quantity);
        return this;
    }


    public InvoiceItem withUnitPrice(@Nullable Double unitPrice) {
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }


    public InvoiceItem withAssetAccount(@Nullable LinkedLedgerAccount assetAccount) {
        this.assetAccount = JsonNullable.of(assetAccount);
        return this;
    }


    public InvoiceItem withIncomeAccount(@Nullable LinkedLedgerAccount incomeAccount) {
        this.incomeAccount = JsonNullable.of(incomeAccount);
        return this;
    }


    public InvoiceItem withExpenseAccount(@Nullable LinkedLedgerAccount expenseAccount) {
        this.expenseAccount = JsonNullable.of(expenseAccount);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceItem withTrackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public InvoiceItem withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    public InvoiceItem withActive(@Nullable Boolean active) {
        this.active = JsonNullable.of(active);
        return this;
    }


    /**
     * The ID of the department
     */
    public InvoiceItem withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    /**
     * The ID of the location
     */
    public InvoiceItem withLocationId(@Nullable String locationId) {
        this.locationId = JsonNullable.of(locationId);
        return this;
    }


    /**
     * The ID of the subsidiary
     */
    public InvoiceItem withSubsidiaryId(@Nullable String subsidiaryId) {
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }


    /**
     * The ID of the tax schedule
     */
    public InvoiceItem withTaxScheduleId(@Nullable String taxScheduleId) {
        this.taxScheduleId = JsonNullable.of(taxScheduleId);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public InvoiceItem withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceItem withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public InvoiceItem withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public InvoiceItem withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public InvoiceItem withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public InvoiceItem withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceItem withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceItem other = (InvoiceItem) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.sold, other.sold) &&
            Utils.enhancedDeepEquals(this.purchased, other.purchased) &&
            Utils.enhancedDeepEquals(this.tracked, other.tracked) &&
            Utils.enhancedDeepEquals(this.taxable, other.taxable) &&
            Utils.enhancedDeepEquals(this.inventoryDate, other.inventoryDate) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.salesDetails, other.salesDetails) &&
            Utils.enhancedDeepEquals(this.purchaseDetails, other.purchaseDetails) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.assetAccount, other.assetAccount) &&
            Utils.enhancedDeepEquals(this.incomeAccount, other.incomeAccount) &&
            Utils.enhancedDeepEquals(this.expenseAccount, other.expenseAccount) &&
            Utils.enhancedDeepEquals(this.trackingCategory, other.trackingCategory) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.taxScheduleId, other.taxScheduleId) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, description,
            code, sold, purchased,
            tracked, taxable, inventoryDate,
            type, salesDetails, purchaseDetails,
            quantity, unitPrice, assetAccount,
            incomeAccount, expenseAccount, trackingCategory,
            trackingCategories, active, departmentId,
            locationId, subsidiaryId, taxScheduleId,
            customMappings, rowVersion, updatedBy,
            createdBy, updatedAt, createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceItem.class,
                "id", id,
                "name", name,
                "description", description,
                "code", code,
                "sold", sold,
                "purchased", purchased,
                "tracked", tracked,
                "taxable", taxable,
                "inventoryDate", inventoryDate,
                "type", type,
                "salesDetails", salesDetails,
                "purchaseDetails", purchaseDetails,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "assetAccount", assetAccount,
                "incomeAccount", incomeAccount,
                "expenseAccount", expenseAccount,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "active", active,
                "departmentId", departmentId,
                "locationId", locationId,
                "subsidiaryId", subsidiaryId,
                "taxScheduleId", taxScheduleId,
                "customMappings", customMappings,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> name;

        private JsonNullable<String> description;

        private JsonNullable<String> code;

        private JsonNullable<Boolean> sold;

        private JsonNullable<Boolean> purchased;

        private JsonNullable<Boolean> tracked;

        private JsonNullable<Boolean> taxable;

        private JsonNullable<LocalDate> inventoryDate;

        private JsonNullable<InvoiceItemTypeType> type;

        private SalesDetails salesDetails;

        private PurchaseDetails purchaseDetails;

        private JsonNullable<Double> quantity;

        private JsonNullable<Double> unitPrice;

        private JsonNullable<LinkedLedgerAccount> assetAccount;

        private JsonNullable<LinkedLedgerAccount> incomeAccount;

        private JsonNullable<LinkedLedgerAccount> expenseAccount;

        @Deprecated
        private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private JsonNullable<Boolean> active;

        private JsonNullable<String> departmentId;

        private JsonNullable<String> locationId;

        private JsonNullable<String> subsidiaryId;

        private JsonNullable<String> taxScheduleId;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> rowVersion;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the item.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Item name
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * A short description of the item
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(@Nullable String code) {
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * Item will be available on sales transactions
         */
        public Builder sold(@Nullable Boolean sold) {
            this.sold = JsonNullable.of(sold);
            return this;
        }

        /**
         * Item is available for purchase transactions
         */
        public Builder purchased(@Nullable Boolean purchased) {
            this.purchased = JsonNullable.of(purchased);
            return this;
        }

        /**
         * Item is inventoried
         */
        public Builder tracked(@Nullable Boolean tracked) {
            this.tracked = JsonNullable.of(tracked);
            return this;
        }

        /**
         * If true, transactions for this item are taxable
         */
        public Builder taxable(@Nullable Boolean taxable) {
            this.taxable = JsonNullable.of(taxable);
            return this;
        }

        /**
         * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
         */
        public Builder inventoryDate(@Nullable LocalDate inventoryDate) {
            this.inventoryDate = JsonNullable.of(inventoryDate);
            return this;
        }

        /**
         * Item type
         */
        public Builder type(@Nullable InvoiceItemTypeType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        public Builder salesDetails(@Nullable SalesDetails salesDetails) {
            this.salesDetails = salesDetails;
            return this;
        }

        public Builder purchaseDetails(@Nullable PurchaseDetails purchaseDetails) {
            this.purchaseDetails = purchaseDetails;
            return this;
        }

        public Builder quantity(@Nullable Double quantity) {
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder unitPrice(@Nullable Double unitPrice) {
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        public Builder assetAccount(@Nullable LinkedLedgerAccount assetAccount) {
            this.assetAccount = JsonNullable.of(assetAccount);
            return this;
        }

        public Builder incomeAccount(@Nullable LinkedLedgerAccount incomeAccount) {
            this.incomeAccount = JsonNullable.of(incomeAccount);
            return this;
        }

        public Builder expenseAccount(@Nullable LinkedLedgerAccount expenseAccount) {
            this.expenseAccount = JsonNullable.of(expenseAccount);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        public Builder active(@Nullable Boolean active) {
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(@Nullable String locationId) {
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(@Nullable String subsidiaryId) {
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The ID of the tax schedule
         */
        public Builder taxScheduleId(@Nullable String taxScheduleId) {
            this.taxScheduleId = JsonNullable.of(taxScheduleId);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public InvoiceItem build() {
            return new InvoiceItem(
                id, name, description,
                code, sold, purchased,
                tracked, taxable, inventoryDate,
                type, salesDetails, purchaseDetails,
                quantity, unitPrice, assetAccount,
                incomeAccount, expenseAccount, trackingCategory,
                trackingCategories, active, departmentId,
                locationId, subsidiaryId, taxScheduleId,
                customMappings, rowVersion, updatedBy,
                createdBy, updatedAt, createdAt,
                passThrough);
        }

    }
}
