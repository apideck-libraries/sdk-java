/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class InvoiceItem {

    /**
     * The ID of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Item name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A short description of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * User defined item code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Item will be available on sales transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sold")
    private JsonNullable<Boolean> sold;

    /**
     * Item is available for purchase transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchased")
    private JsonNullable<Boolean> purchased;

    /**
     * Item is inventoried
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracked")
    private JsonNullable<Boolean> tracked;

    /**
     * If true, transactions for this item are taxable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable")
    private JsonNullable<Boolean> taxable;

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_date")
    private JsonNullable<LocalDate> inventoryDate;

    /**
     * Item type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends InvoiceItemTypeType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_details")
    private Optional<? extends SalesDetails> salesDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchase_details")
    private Optional<? extends PurchaseDetails> purchaseDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Double> quantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_account")
    private JsonNullable<? extends LinkedLedgerAccount> assetAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("income_account")
    private JsonNullable<? extends LinkedLedgerAccount> incomeAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expense_account")
    private JsonNullable<? extends LinkedLedgerAccount> expenseAccount;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public InvoiceItem(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("sold") JsonNullable<Boolean> sold,
            @JsonProperty("purchased") JsonNullable<Boolean> purchased,
            @JsonProperty("tracked") JsonNullable<Boolean> tracked,
            @JsonProperty("taxable") JsonNullable<Boolean> taxable,
            @JsonProperty("inventory_date") JsonNullable<LocalDate> inventoryDate,
            @JsonProperty("type") JsonNullable<? extends InvoiceItemTypeType> type,
            @JsonProperty("sales_details") Optional<? extends SalesDetails> salesDetails,
            @JsonProperty("purchase_details") Optional<? extends PurchaseDetails> purchaseDetails,
            @JsonProperty("quantity") JsonNullable<Double> quantity,
            @JsonProperty("unit_price") JsonNullable<Double> unitPrice,
            @JsonProperty("asset_account") JsonNullable<? extends LinkedLedgerAccount> assetAccount,
            @JsonProperty("income_account") JsonNullable<? extends LinkedLedgerAccount> incomeAccount,
            @JsonProperty("expense_account") JsonNullable<? extends LinkedLedgerAccount> expenseAccount,
            @JsonProperty("tracking_category") JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(sold, "sold");
        Utils.checkNotNull(purchased, "purchased");
        Utils.checkNotNull(tracked, "tracked");
        Utils.checkNotNull(taxable, "taxable");
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(salesDetails, "salesDetails");
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(assetAccount, "assetAccount");
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.name = name;
        this.description = description;
        this.code = code;
        this.sold = sold;
        this.purchased = purchased;
        this.tracked = tracked;
        this.taxable = taxable;
        this.inventoryDate = inventoryDate;
        this.type = type;
        this.salesDetails = salesDetails;
        this.purchaseDetails = purchaseDetails;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.assetAccount = assetAccount;
        this.incomeAccount = incomeAccount;
        this.expenseAccount = expenseAccount;
        this.trackingCategory = trackingCategory;
        this.trackingCategories = trackingCategories;
        this.active = active;
        this.customMappings = customMappings;
        this.rowVersion = rowVersion;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public InvoiceItem() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the item.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Item name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * A short description of the item
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * User defined item code
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * Item will be available on sales transactions
     */
    @JsonIgnore
    public JsonNullable<Boolean> sold() {
        return sold;
    }

    /**
     * Item is available for purchase transactions
     */
    @JsonIgnore
    public JsonNullable<Boolean> purchased() {
        return purchased;
    }

    /**
     * Item is inventoried
     */
    @JsonIgnore
    public JsonNullable<Boolean> tracked() {
        return tracked;
    }

    /**
     * If true, transactions for this item are taxable
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxable() {
        return taxable;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> inventoryDate() {
        return inventoryDate;
    }

    /**
     * Item type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceItemTypeType> type() {
        return (JsonNullable<InvoiceItemTypeType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesDetails> salesDetails() {
        return (Optional<SalesDetails>) salesDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PurchaseDetails> purchaseDetails() {
        return (Optional<PurchaseDetails>) purchaseDetails;
    }

    @JsonIgnore
    public JsonNullable<Double> quantity() {
        return quantity;
    }

    @JsonIgnore
    public JsonNullable<Double> unitPrice() {
        return unitPrice;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> assetAccount() {
        return (JsonNullable<LinkedLedgerAccount>) assetAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> incomeAccount() {
        return (JsonNullable<LinkedLedgerAccount>) incomeAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> expenseAccount() {
        return (JsonNullable<LinkedLedgerAccount>) expenseAccount;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return (JsonNullable<DeprecatedLinkedTrackingCategory>) trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the item.
     */
    public InvoiceItem withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the item.
     */
    public InvoiceItem withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Item name
     */
    public InvoiceItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Item name
     */
    public InvoiceItem withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A short description of the item
     */
    public InvoiceItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A short description of the item
     */
    public InvoiceItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceItem withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceItem withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * Item will be available on sales transactions
     */
    public InvoiceItem withSold(boolean sold) {
        Utils.checkNotNull(sold, "sold");
        this.sold = JsonNullable.of(sold);
        return this;
    }

    /**
     * Item will be available on sales transactions
     */
    public InvoiceItem withSold(JsonNullable<Boolean> sold) {
        Utils.checkNotNull(sold, "sold");
        this.sold = sold;
        return this;
    }

    /**
     * Item is available for purchase transactions
     */
    public InvoiceItem withPurchased(boolean purchased) {
        Utils.checkNotNull(purchased, "purchased");
        this.purchased = JsonNullable.of(purchased);
        return this;
    }

    /**
     * Item is available for purchase transactions
     */
    public InvoiceItem withPurchased(JsonNullable<Boolean> purchased) {
        Utils.checkNotNull(purchased, "purchased");
        this.purchased = purchased;
        return this;
    }

    /**
     * Item is inventoried
     */
    public InvoiceItem withTracked(boolean tracked) {
        Utils.checkNotNull(tracked, "tracked");
        this.tracked = JsonNullable.of(tracked);
        return this;
    }

    /**
     * Item is inventoried
     */
    public InvoiceItem withTracked(JsonNullable<Boolean> tracked) {
        Utils.checkNotNull(tracked, "tracked");
        this.tracked = tracked;
        return this;
    }

    /**
     * If true, transactions for this item are taxable
     */
    public InvoiceItem withTaxable(boolean taxable) {
        Utils.checkNotNull(taxable, "taxable");
        this.taxable = JsonNullable.of(taxable);
        return this;
    }

    /**
     * If true, transactions for this item are taxable
     */
    public InvoiceItem withTaxable(JsonNullable<Boolean> taxable) {
        Utils.checkNotNull(taxable, "taxable");
        this.taxable = taxable;
        return this;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public InvoiceItem withInventoryDate(LocalDate inventoryDate) {
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        this.inventoryDate = JsonNullable.of(inventoryDate);
        return this;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public InvoiceItem withInventoryDate(JsonNullable<LocalDate> inventoryDate) {
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        this.inventoryDate = inventoryDate;
        return this;
    }

    /**
     * Item type
     */
    public InvoiceItem withType(InvoiceItemTypeType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Item type
     */
    public InvoiceItem withType(JsonNullable<? extends InvoiceItemTypeType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public InvoiceItem withSalesDetails(SalesDetails salesDetails) {
        Utils.checkNotNull(salesDetails, "salesDetails");
        this.salesDetails = Optional.ofNullable(salesDetails);
        return this;
    }

    public InvoiceItem withSalesDetails(Optional<? extends SalesDetails> salesDetails) {
        Utils.checkNotNull(salesDetails, "salesDetails");
        this.salesDetails = salesDetails;
        return this;
    }

    public InvoiceItem withPurchaseDetails(PurchaseDetails purchaseDetails) {
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        this.purchaseDetails = Optional.ofNullable(purchaseDetails);
        return this;
    }

    public InvoiceItem withPurchaseDetails(Optional<? extends PurchaseDetails> purchaseDetails) {
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        this.purchaseDetails = purchaseDetails;
        return this;
    }

    public InvoiceItem withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    public InvoiceItem withQuantity(JsonNullable<Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public InvoiceItem withUnitPrice(double unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }

    public InvoiceItem withUnitPrice(JsonNullable<Double> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    public InvoiceItem withAssetAccount(LinkedLedgerAccount assetAccount) {
        Utils.checkNotNull(assetAccount, "assetAccount");
        this.assetAccount = JsonNullable.of(assetAccount);
        return this;
    }

    public InvoiceItem withAssetAccount(JsonNullable<? extends LinkedLedgerAccount> assetAccount) {
        Utils.checkNotNull(assetAccount, "assetAccount");
        this.assetAccount = assetAccount;
        return this;
    }

    public InvoiceItem withIncomeAccount(LinkedLedgerAccount incomeAccount) {
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        this.incomeAccount = JsonNullable.of(incomeAccount);
        return this;
    }

    public InvoiceItem withIncomeAccount(JsonNullable<? extends LinkedLedgerAccount> incomeAccount) {
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        this.incomeAccount = incomeAccount;
        return this;
    }

    public InvoiceItem withExpenseAccount(LinkedLedgerAccount expenseAccount) {
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        this.expenseAccount = JsonNullable.of(expenseAccount);
        return this;
    }

    public InvoiceItem withExpenseAccount(JsonNullable<? extends LinkedLedgerAccount> expenseAccount) {
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        this.expenseAccount = expenseAccount;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceItem withTrackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceItem withTrackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = trackingCategory;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceItem withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceItem withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public InvoiceItem withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    public InvoiceItem withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public InvoiceItem withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public InvoiceItem withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceItem withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceItem withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public InvoiceItem withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public InvoiceItem withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public InvoiceItem withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public InvoiceItem withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public InvoiceItem withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public InvoiceItem withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public InvoiceItem withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public InvoiceItem withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceItem withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceItem withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceItem other = (InvoiceItem) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.sold, other.sold) &&
            Objects.deepEquals(this.purchased, other.purchased) &&
            Objects.deepEquals(this.tracked, other.tracked) &&
            Objects.deepEquals(this.taxable, other.taxable) &&
            Objects.deepEquals(this.inventoryDate, other.inventoryDate) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.salesDetails, other.salesDetails) &&
            Objects.deepEquals(this.purchaseDetails, other.purchaseDetails) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.assetAccount, other.assetAccount) &&
            Objects.deepEquals(this.incomeAccount, other.incomeAccount) &&
            Objects.deepEquals(this.expenseAccount, other.expenseAccount) &&
            Objects.deepEquals(this.trackingCategory, other.trackingCategory) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            description,
            code,
            sold,
            purchased,
            tracked,
            taxable,
            inventoryDate,
            type,
            salesDetails,
            purchaseDetails,
            quantity,
            unitPrice,
            assetAccount,
            incomeAccount,
            expenseAccount,
            trackingCategory,
            trackingCategories,
            active,
            customMappings,
            rowVersion,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceItem.class,
                "id", id,
                "name", name,
                "description", description,
                "code", code,
                "sold", sold,
                "purchased", purchased,
                "tracked", tracked,
                "taxable", taxable,
                "inventoryDate", inventoryDate,
                "type", type,
                "salesDetails", salesDetails,
                "purchaseDetails", purchaseDetails,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "assetAccount", assetAccount,
                "incomeAccount", incomeAccount,
                "expenseAccount", expenseAccount,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "active", active,
                "customMappings", customMappings,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> code = JsonNullable.undefined();
 
        private JsonNullable<Boolean> sold = JsonNullable.undefined();
 
        private JsonNullable<Boolean> purchased = JsonNullable.undefined();
 
        private JsonNullable<Boolean> tracked = JsonNullable.undefined();
 
        private JsonNullable<Boolean> taxable = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> inventoryDate = JsonNullable.undefined();
 
        private JsonNullable<? extends InvoiceItemTypeType> type = JsonNullable.undefined();
 
        private Optional<? extends SalesDetails> salesDetails = Optional.empty();
 
        private Optional<? extends PurchaseDetails> purchaseDetails = Optional.empty();
 
        private JsonNullable<Double> quantity = JsonNullable.undefined();
 
        private JsonNullable<Double> unitPrice = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccount> assetAccount = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccount> incomeAccount = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccount> expenseAccount = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the item.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the item.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Item name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Item name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A short description of the item
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A short description of the item
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * Item will be available on sales transactions
         */
        public Builder sold(boolean sold) {
            Utils.checkNotNull(sold, "sold");
            this.sold = JsonNullable.of(sold);
            return this;
        }

        /**
         * Item will be available on sales transactions
         */
        public Builder sold(JsonNullable<Boolean> sold) {
            Utils.checkNotNull(sold, "sold");
            this.sold = sold;
            return this;
        }

        /**
         * Item is available for purchase transactions
         */
        public Builder purchased(boolean purchased) {
            Utils.checkNotNull(purchased, "purchased");
            this.purchased = JsonNullable.of(purchased);
            return this;
        }

        /**
         * Item is available for purchase transactions
         */
        public Builder purchased(JsonNullable<Boolean> purchased) {
            Utils.checkNotNull(purchased, "purchased");
            this.purchased = purchased;
            return this;
        }

        /**
         * Item is inventoried
         */
        public Builder tracked(boolean tracked) {
            Utils.checkNotNull(tracked, "tracked");
            this.tracked = JsonNullable.of(tracked);
            return this;
        }

        /**
         * Item is inventoried
         */
        public Builder tracked(JsonNullable<Boolean> tracked) {
            Utils.checkNotNull(tracked, "tracked");
            this.tracked = tracked;
            return this;
        }

        /**
         * If true, transactions for this item are taxable
         */
        public Builder taxable(boolean taxable) {
            Utils.checkNotNull(taxable, "taxable");
            this.taxable = JsonNullable.of(taxable);
            return this;
        }

        /**
         * If true, transactions for this item are taxable
         */
        public Builder taxable(JsonNullable<Boolean> taxable) {
            Utils.checkNotNull(taxable, "taxable");
            this.taxable = taxable;
            return this;
        }

        /**
         * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
         */
        public Builder inventoryDate(LocalDate inventoryDate) {
            Utils.checkNotNull(inventoryDate, "inventoryDate");
            this.inventoryDate = JsonNullable.of(inventoryDate);
            return this;
        }

        /**
         * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
         */
        public Builder inventoryDate(JsonNullable<LocalDate> inventoryDate) {
            Utils.checkNotNull(inventoryDate, "inventoryDate");
            this.inventoryDate = inventoryDate;
            return this;
        }

        /**
         * Item type
         */
        public Builder type(InvoiceItemTypeType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Item type
         */
        public Builder type(JsonNullable<? extends InvoiceItemTypeType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder salesDetails(SalesDetails salesDetails) {
            Utils.checkNotNull(salesDetails, "salesDetails");
            this.salesDetails = Optional.ofNullable(salesDetails);
            return this;
        }

        public Builder salesDetails(Optional<? extends SalesDetails> salesDetails) {
            Utils.checkNotNull(salesDetails, "salesDetails");
            this.salesDetails = salesDetails;
            return this;
        }

        public Builder purchaseDetails(PurchaseDetails purchaseDetails) {
            Utils.checkNotNull(purchaseDetails, "purchaseDetails");
            this.purchaseDetails = Optional.ofNullable(purchaseDetails);
            return this;
        }

        public Builder purchaseDetails(Optional<? extends PurchaseDetails> purchaseDetails) {
            Utils.checkNotNull(purchaseDetails, "purchaseDetails");
            this.purchaseDetails = purchaseDetails;
            return this;
        }

        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder quantity(JsonNullable<Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        public Builder unitPrice(double unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        public Builder unitPrice(JsonNullable<Double> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        public Builder assetAccount(LinkedLedgerAccount assetAccount) {
            Utils.checkNotNull(assetAccount, "assetAccount");
            this.assetAccount = JsonNullable.of(assetAccount);
            return this;
        }

        public Builder assetAccount(JsonNullable<? extends LinkedLedgerAccount> assetAccount) {
            Utils.checkNotNull(assetAccount, "assetAccount");
            this.assetAccount = assetAccount;
            return this;
        }

        public Builder incomeAccount(LinkedLedgerAccount incomeAccount) {
            Utils.checkNotNull(incomeAccount, "incomeAccount");
            this.incomeAccount = JsonNullable.of(incomeAccount);
            return this;
        }

        public Builder incomeAccount(JsonNullable<? extends LinkedLedgerAccount> incomeAccount) {
            Utils.checkNotNull(incomeAccount, "incomeAccount");
            this.incomeAccount = incomeAccount;
            return this;
        }

        public Builder expenseAccount(LinkedLedgerAccount expenseAccount) {
            Utils.checkNotNull(expenseAccount, "expenseAccount");
            this.expenseAccount = JsonNullable.of(expenseAccount);
            return this;
        }

        public Builder expenseAccount(JsonNullable<? extends LinkedLedgerAccount> expenseAccount) {
            Utils.checkNotNull(expenseAccount, "expenseAccount");
            this.expenseAccount = expenseAccount;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = trackingCategory;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public InvoiceItem build() {
            return new InvoiceItem(
                id,
                name,
                description,
                code,
                sold,
                purchased,
                tracked,
                taxable,
                inventoryDate,
                type,
                salesDetails,
                purchaseDetails,
                quantity,
                unitPrice,
                assetAccount,
                incomeAccount,
                expenseAccount,
                trackingCategory,
                trackingCategories,
                active,
                customMappings,
                rowVersion,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                passThrough);
        }
    }
}

