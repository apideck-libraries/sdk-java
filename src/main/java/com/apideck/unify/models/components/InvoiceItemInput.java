/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceItemInput {
    /**
     * Item name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * A short description of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * User defined item code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Item will be available on sales transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sold")
    private JsonNullable<Boolean> sold;

    /**
     * Item is available for purchase transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchased")
    private JsonNullable<Boolean> purchased;

    /**
     * Item is inventoried
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracked")
    private JsonNullable<Boolean> tracked;

    /**
     * If true, transactions for this item are taxable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable")
    private JsonNullable<Boolean> taxable;

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_date")
    private JsonNullable<LocalDate> inventoryDate;

    /**
     * Item type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends InvoiceItemTypeType> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_details")
    private Optional<? extends InvoiceItemSalesDetails> salesDetails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchase_details")
    private Optional<? extends InvoiceItemPurchaseDetails> purchaseDetails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Double> quantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> assetAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("income_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> incomeAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expense_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> expenseAccount;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;

    /**
     * The ID of the tax schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_schedule_id")
    private JsonNullable<String> taxScheduleId;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public InvoiceItemInput(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("sold") JsonNullable<Boolean> sold,
            @JsonProperty("purchased") JsonNullable<Boolean> purchased,
            @JsonProperty("tracked") JsonNullable<Boolean> tracked,
            @JsonProperty("taxable") JsonNullable<Boolean> taxable,
            @JsonProperty("inventory_date") JsonNullable<LocalDate> inventoryDate,
            @JsonProperty("type") JsonNullable<? extends InvoiceItemTypeType> type,
            @JsonProperty("sales_details") Optional<? extends InvoiceItemSalesDetails> salesDetails,
            @JsonProperty("purchase_details") Optional<? extends InvoiceItemPurchaseDetails> purchaseDetails,
            @JsonProperty("quantity") JsonNullable<Double> quantity,
            @JsonProperty("unit_price") JsonNullable<Double> unitPrice,
            @JsonProperty("asset_account") JsonNullable<? extends LinkedLedgerAccountInput> assetAccount,
            @JsonProperty("income_account") JsonNullable<? extends LinkedLedgerAccountInput> incomeAccount,
            @JsonProperty("expense_account") JsonNullable<? extends LinkedLedgerAccountInput> expenseAccount,
            @JsonProperty("tracking_category") JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("location_id") JsonNullable<String> locationId,
            @JsonProperty("subsidiary_id") JsonNullable<String> subsidiaryId,
            @JsonProperty("tax_schedule_id") JsonNullable<String> taxScheduleId,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(sold, "sold");
        Utils.checkNotNull(purchased, "purchased");
        Utils.checkNotNull(tracked, "tracked");
        Utils.checkNotNull(taxable, "taxable");
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(salesDetails, "salesDetails");
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(assetAccount, "assetAccount");
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        Utils.checkNotNull(taxScheduleId, "taxScheduleId");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.description = description;
        this.code = code;
        this.sold = sold;
        this.purchased = purchased;
        this.tracked = tracked;
        this.taxable = taxable;
        this.inventoryDate = inventoryDate;
        this.type = type;
        this.salesDetails = salesDetails;
        this.purchaseDetails = purchaseDetails;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.assetAccount = assetAccount;
        this.incomeAccount = incomeAccount;
        this.expenseAccount = expenseAccount;
        this.trackingCategory = trackingCategory;
        this.trackingCategories = trackingCategories;
        this.active = active;
        this.departmentId = departmentId;
        this.locationId = locationId;
        this.subsidiaryId = subsidiaryId;
        this.taxScheduleId = taxScheduleId;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public InvoiceItemInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Item name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * A short description of the item
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * User defined item code
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * Item will be available on sales transactions
     */
    @JsonIgnore
    public JsonNullable<Boolean> sold() {
        return sold;
    }

    /**
     * Item is available for purchase transactions
     */
    @JsonIgnore
    public JsonNullable<Boolean> purchased() {
        return purchased;
    }

    /**
     * Item is inventoried
     */
    @JsonIgnore
    public JsonNullable<Boolean> tracked() {
        return tracked;
    }

    /**
     * If true, transactions for this item are taxable
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxable() {
        return taxable;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> inventoryDate() {
        return inventoryDate;
    }

    /**
     * Item type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceItemTypeType> type() {
        return (JsonNullable<InvoiceItemTypeType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceItemSalesDetails> salesDetails() {
        return (Optional<InvoiceItemSalesDetails>) salesDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceItemPurchaseDetails> purchaseDetails() {
        return (Optional<InvoiceItemPurchaseDetails>) purchaseDetails;
    }

    @JsonIgnore
    public JsonNullable<Double> quantity() {
        return quantity;
    }

    @JsonIgnore
    public JsonNullable<Double> unitPrice() {
        return unitPrice;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> assetAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) assetAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> incomeAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) incomeAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> expenseAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) expenseAccount;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return (JsonNullable<DeprecatedLinkedTrackingCategory>) trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The ID of the department
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The ID of the location
     */
    @JsonIgnore
    public JsonNullable<String> locationId() {
        return locationId;
    }

    /**
     * The ID of the subsidiary
     */
    @JsonIgnore
    public JsonNullable<String> subsidiaryId() {
        return subsidiaryId;
    }

    /**
     * The ID of the tax schedule
     */
    @JsonIgnore
    public JsonNullable<String> taxScheduleId() {
        return taxScheduleId;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Item name
     */
    public InvoiceItemInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Item name
     */
    public InvoiceItemInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A short description of the item
     */
    public InvoiceItemInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A short description of the item
     */
    public InvoiceItemInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceItemInput withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceItemInput withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * Item will be available on sales transactions
     */
    public InvoiceItemInput withSold(boolean sold) {
        Utils.checkNotNull(sold, "sold");
        this.sold = JsonNullable.of(sold);
        return this;
    }

    /**
     * Item will be available on sales transactions
     */
    public InvoiceItemInput withSold(JsonNullable<Boolean> sold) {
        Utils.checkNotNull(sold, "sold");
        this.sold = sold;
        return this;
    }

    /**
     * Item is available for purchase transactions
     */
    public InvoiceItemInput withPurchased(boolean purchased) {
        Utils.checkNotNull(purchased, "purchased");
        this.purchased = JsonNullable.of(purchased);
        return this;
    }

    /**
     * Item is available for purchase transactions
     */
    public InvoiceItemInput withPurchased(JsonNullable<Boolean> purchased) {
        Utils.checkNotNull(purchased, "purchased");
        this.purchased = purchased;
        return this;
    }

    /**
     * Item is inventoried
     */
    public InvoiceItemInput withTracked(boolean tracked) {
        Utils.checkNotNull(tracked, "tracked");
        this.tracked = JsonNullable.of(tracked);
        return this;
    }

    /**
     * Item is inventoried
     */
    public InvoiceItemInput withTracked(JsonNullable<Boolean> tracked) {
        Utils.checkNotNull(tracked, "tracked");
        this.tracked = tracked;
        return this;
    }

    /**
     * If true, transactions for this item are taxable
     */
    public InvoiceItemInput withTaxable(boolean taxable) {
        Utils.checkNotNull(taxable, "taxable");
        this.taxable = JsonNullable.of(taxable);
        return this;
    }

    /**
     * If true, transactions for this item are taxable
     */
    public InvoiceItemInput withTaxable(JsonNullable<Boolean> taxable) {
        Utils.checkNotNull(taxable, "taxable");
        this.taxable = taxable;
        return this;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public InvoiceItemInput withInventoryDate(LocalDate inventoryDate) {
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        this.inventoryDate = JsonNullable.of(inventoryDate);
        return this;
    }

    /**
     * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
     */
    public InvoiceItemInput withInventoryDate(JsonNullable<LocalDate> inventoryDate) {
        Utils.checkNotNull(inventoryDate, "inventoryDate");
        this.inventoryDate = inventoryDate;
        return this;
    }

    /**
     * Item type
     */
    public InvoiceItemInput withType(InvoiceItemTypeType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Item type
     */
    public InvoiceItemInput withType(JsonNullable<? extends InvoiceItemTypeType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public InvoiceItemInput withSalesDetails(InvoiceItemSalesDetails salesDetails) {
        Utils.checkNotNull(salesDetails, "salesDetails");
        this.salesDetails = Optional.ofNullable(salesDetails);
        return this;
    }


    public InvoiceItemInput withSalesDetails(Optional<? extends InvoiceItemSalesDetails> salesDetails) {
        Utils.checkNotNull(salesDetails, "salesDetails");
        this.salesDetails = salesDetails;
        return this;
    }

    public InvoiceItemInput withPurchaseDetails(InvoiceItemPurchaseDetails purchaseDetails) {
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        this.purchaseDetails = Optional.ofNullable(purchaseDetails);
        return this;
    }


    public InvoiceItemInput withPurchaseDetails(Optional<? extends InvoiceItemPurchaseDetails> purchaseDetails) {
        Utils.checkNotNull(purchaseDetails, "purchaseDetails");
        this.purchaseDetails = purchaseDetails;
        return this;
    }

    public InvoiceItemInput withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    public InvoiceItemInput withQuantity(JsonNullable<Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public InvoiceItemInput withUnitPrice(double unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }

    public InvoiceItemInput withUnitPrice(JsonNullable<Double> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    public InvoiceItemInput withAssetAccount(LinkedLedgerAccountInput assetAccount) {
        Utils.checkNotNull(assetAccount, "assetAccount");
        this.assetAccount = JsonNullable.of(assetAccount);
        return this;
    }

    public InvoiceItemInput withAssetAccount(JsonNullable<? extends LinkedLedgerAccountInput> assetAccount) {
        Utils.checkNotNull(assetAccount, "assetAccount");
        this.assetAccount = assetAccount;
        return this;
    }

    public InvoiceItemInput withIncomeAccount(LinkedLedgerAccountInput incomeAccount) {
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        this.incomeAccount = JsonNullable.of(incomeAccount);
        return this;
    }

    public InvoiceItemInput withIncomeAccount(JsonNullable<? extends LinkedLedgerAccountInput> incomeAccount) {
        Utils.checkNotNull(incomeAccount, "incomeAccount");
        this.incomeAccount = incomeAccount;
        return this;
    }

    public InvoiceItemInput withExpenseAccount(LinkedLedgerAccountInput expenseAccount) {
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        this.expenseAccount = JsonNullable.of(expenseAccount);
        return this;
    }

    public InvoiceItemInput withExpenseAccount(JsonNullable<? extends LinkedLedgerAccountInput> expenseAccount) {
        Utils.checkNotNull(expenseAccount, "expenseAccount");
        this.expenseAccount = expenseAccount;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceItemInput withTrackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public InvoiceItemInput withTrackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = trackingCategory;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceItemInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceItemInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public InvoiceItemInput withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    public InvoiceItemInput withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The ID of the department
     */
    public InvoiceItemInput withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The ID of the department
     */
    public InvoiceItemInput withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The ID of the location
     */
    public InvoiceItemInput withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = JsonNullable.of(locationId);
        return this;
    }

    /**
     * The ID of the location
     */
    public InvoiceItemInput withLocationId(JsonNullable<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public InvoiceItemInput withSubsidiaryId(String subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public InvoiceItemInput withSubsidiaryId(JsonNullable<String> subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = subsidiaryId;
        return this;
    }

    /**
     * The ID of the tax schedule
     */
    public InvoiceItemInput withTaxScheduleId(String taxScheduleId) {
        Utils.checkNotNull(taxScheduleId, "taxScheduleId");
        this.taxScheduleId = JsonNullable.of(taxScheduleId);
        return this;
    }

    /**
     * The ID of the tax schedule
     */
    public InvoiceItemInput withTaxScheduleId(JsonNullable<String> taxScheduleId) {
        Utils.checkNotNull(taxScheduleId, "taxScheduleId");
        this.taxScheduleId = taxScheduleId;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceItemInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceItemInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceItemInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public InvoiceItemInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceItemInput other = (InvoiceItemInput) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.sold, other.sold) &&
            Utils.enhancedDeepEquals(this.purchased, other.purchased) &&
            Utils.enhancedDeepEquals(this.tracked, other.tracked) &&
            Utils.enhancedDeepEquals(this.taxable, other.taxable) &&
            Utils.enhancedDeepEquals(this.inventoryDate, other.inventoryDate) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.salesDetails, other.salesDetails) &&
            Utils.enhancedDeepEquals(this.purchaseDetails, other.purchaseDetails) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.assetAccount, other.assetAccount) &&
            Utils.enhancedDeepEquals(this.incomeAccount, other.incomeAccount) &&
            Utils.enhancedDeepEquals(this.expenseAccount, other.expenseAccount) &&
            Utils.enhancedDeepEquals(this.trackingCategory, other.trackingCategory) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.taxScheduleId, other.taxScheduleId) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, code,
            sold, purchased, tracked,
            taxable, inventoryDate, type,
            salesDetails, purchaseDetails, quantity,
            unitPrice, assetAccount, incomeAccount,
            expenseAccount, trackingCategory, trackingCategories,
            active, departmentId, locationId,
            subsidiaryId, taxScheduleId, rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceItemInput.class,
                "name", name,
                "description", description,
                "code", code,
                "sold", sold,
                "purchased", purchased,
                "tracked", tracked,
                "taxable", taxable,
                "inventoryDate", inventoryDate,
                "type", type,
                "salesDetails", salesDetails,
                "purchaseDetails", purchaseDetails,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "assetAccount", assetAccount,
                "incomeAccount", incomeAccount,
                "expenseAccount", expenseAccount,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "active", active,
                "departmentId", departmentId,
                "locationId", locationId,
                "subsidiaryId", subsidiaryId,
                "taxScheduleId", taxScheduleId,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> code = JsonNullable.undefined();

        private JsonNullable<Boolean> sold = JsonNullable.undefined();

        private JsonNullable<Boolean> purchased = JsonNullable.undefined();

        private JsonNullable<Boolean> tracked = JsonNullable.undefined();

        private JsonNullable<Boolean> taxable = JsonNullable.undefined();

        private JsonNullable<LocalDate> inventoryDate = JsonNullable.undefined();

        private JsonNullable<? extends InvoiceItemTypeType> type = JsonNullable.undefined();

        private Optional<? extends InvoiceItemSalesDetails> salesDetails = Optional.empty();

        private Optional<? extends InvoiceItemPurchaseDetails> purchaseDetails = Optional.empty();

        private JsonNullable<Double> quantity = JsonNullable.undefined();

        private JsonNullable<Double> unitPrice = JsonNullable.undefined();

        private JsonNullable<? extends LinkedLedgerAccountInput> assetAccount = JsonNullable.undefined();

        private JsonNullable<? extends LinkedLedgerAccountInput> incomeAccount = JsonNullable.undefined();

        private JsonNullable<? extends LinkedLedgerAccountInput> expenseAccount = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory = JsonNullable.undefined();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private JsonNullable<Boolean> active = JsonNullable.undefined();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private JsonNullable<String> locationId = JsonNullable.undefined();

        private JsonNullable<String> subsidiaryId = JsonNullable.undefined();

        private JsonNullable<String> taxScheduleId = JsonNullable.undefined();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Item name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Item name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A short description of the item
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A short description of the item
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * User defined item code
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * Item will be available on sales transactions
         */
        public Builder sold(boolean sold) {
            Utils.checkNotNull(sold, "sold");
            this.sold = JsonNullable.of(sold);
            return this;
        }

        /**
         * Item will be available on sales transactions
         */
        public Builder sold(JsonNullable<Boolean> sold) {
            Utils.checkNotNull(sold, "sold");
            this.sold = sold;
            return this;
        }


        /**
         * Item is available for purchase transactions
         */
        public Builder purchased(boolean purchased) {
            Utils.checkNotNull(purchased, "purchased");
            this.purchased = JsonNullable.of(purchased);
            return this;
        }

        /**
         * Item is available for purchase transactions
         */
        public Builder purchased(JsonNullable<Boolean> purchased) {
            Utils.checkNotNull(purchased, "purchased");
            this.purchased = purchased;
            return this;
        }


        /**
         * Item is inventoried
         */
        public Builder tracked(boolean tracked) {
            Utils.checkNotNull(tracked, "tracked");
            this.tracked = JsonNullable.of(tracked);
            return this;
        }

        /**
         * Item is inventoried
         */
        public Builder tracked(JsonNullable<Boolean> tracked) {
            Utils.checkNotNull(tracked, "tracked");
            this.tracked = tracked;
            return this;
        }


        /**
         * If true, transactions for this item are taxable
         */
        public Builder taxable(boolean taxable) {
            Utils.checkNotNull(taxable, "taxable");
            this.taxable = JsonNullable.of(taxable);
            return this;
        }

        /**
         * If true, transactions for this item are taxable
         */
        public Builder taxable(JsonNullable<Boolean> taxable) {
            Utils.checkNotNull(taxable, "taxable");
            this.taxable = taxable;
            return this;
        }


        /**
         * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
         */
        public Builder inventoryDate(LocalDate inventoryDate) {
            Utils.checkNotNull(inventoryDate, "inventoryDate");
            this.inventoryDate = JsonNullable.of(inventoryDate);
            return this;
        }

        /**
         * The date of opening balance if inventory item is tracked - YYYY-MM-DD.
         */
        public Builder inventoryDate(JsonNullable<LocalDate> inventoryDate) {
            Utils.checkNotNull(inventoryDate, "inventoryDate");
            this.inventoryDate = inventoryDate;
            return this;
        }


        /**
         * Item type
         */
        public Builder type(InvoiceItemTypeType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Item type
         */
        public Builder type(JsonNullable<? extends InvoiceItemTypeType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder salesDetails(InvoiceItemSalesDetails salesDetails) {
            Utils.checkNotNull(salesDetails, "salesDetails");
            this.salesDetails = Optional.ofNullable(salesDetails);
            return this;
        }

        public Builder salesDetails(Optional<? extends InvoiceItemSalesDetails> salesDetails) {
            Utils.checkNotNull(salesDetails, "salesDetails");
            this.salesDetails = salesDetails;
            return this;
        }


        public Builder purchaseDetails(InvoiceItemPurchaseDetails purchaseDetails) {
            Utils.checkNotNull(purchaseDetails, "purchaseDetails");
            this.purchaseDetails = Optional.ofNullable(purchaseDetails);
            return this;
        }

        public Builder purchaseDetails(Optional<? extends InvoiceItemPurchaseDetails> purchaseDetails) {
            Utils.checkNotNull(purchaseDetails, "purchaseDetails");
            this.purchaseDetails = purchaseDetails;
            return this;
        }


        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder quantity(JsonNullable<Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        public Builder unitPrice(double unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        public Builder unitPrice(JsonNullable<Double> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }


        public Builder assetAccount(LinkedLedgerAccountInput assetAccount) {
            Utils.checkNotNull(assetAccount, "assetAccount");
            this.assetAccount = JsonNullable.of(assetAccount);
            return this;
        }

        public Builder assetAccount(JsonNullable<? extends LinkedLedgerAccountInput> assetAccount) {
            Utils.checkNotNull(assetAccount, "assetAccount");
            this.assetAccount = assetAccount;
            return this;
        }


        public Builder incomeAccount(LinkedLedgerAccountInput incomeAccount) {
            Utils.checkNotNull(incomeAccount, "incomeAccount");
            this.incomeAccount = JsonNullable.of(incomeAccount);
            return this;
        }

        public Builder incomeAccount(JsonNullable<? extends LinkedLedgerAccountInput> incomeAccount) {
            Utils.checkNotNull(incomeAccount, "incomeAccount");
            this.incomeAccount = incomeAccount;
            return this;
        }


        public Builder expenseAccount(LinkedLedgerAccountInput expenseAccount) {
            Utils.checkNotNull(expenseAccount, "expenseAccount");
            this.expenseAccount = JsonNullable.of(expenseAccount);
            return this;
        }

        public Builder expenseAccount(JsonNullable<? extends LinkedLedgerAccountInput> expenseAccount) {
            Utils.checkNotNull(expenseAccount, "expenseAccount");
            this.expenseAccount = expenseAccount;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = trackingCategory;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }


        /**
         * The ID of the department
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * The ID of the location
         */
        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(JsonNullable<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }


        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(String subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(JsonNullable<String> subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = subsidiaryId;
            return this;
        }


        /**
         * The ID of the tax schedule
         */
        public Builder taxScheduleId(String taxScheduleId) {
            Utils.checkNotNull(taxScheduleId, "taxScheduleId");
            this.taxScheduleId = JsonNullable.of(taxScheduleId);
            return this;
        }

        /**
         * The ID of the tax schedule
         */
        public Builder taxScheduleId(JsonNullable<String> taxScheduleId) {
            Utils.checkNotNull(taxScheduleId, "taxScheduleId");
            this.taxScheduleId = taxScheduleId;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public InvoiceItemInput build() {

            return new InvoiceItemInput(
                name, description, code,
                sold, purchased, tracked,
                taxable, inventoryDate, type,
                salesDetails, purchaseDetails, quantity,
                unitPrice, assetAccount, incomeAccount,
                expenseAccount, trackingCategory, trackingCategories,
                active, departmentId, locationId,
                subsidiaryId, taxScheduleId, rowVersion,
                passThrough);
        }

    }
}
