/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceItemsFilter {
    /**
     * Name of Invoice Items to search for
     */
    @SpeakeasyMetadata("queryParam:name=name")
    private Optional<String> name;

    /**
     * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
     */
    @SpeakeasyMetadata("queryParam:name=type")
    private JsonNullable<? extends InvoiceItemType> type;

    /**
     * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
     */
    @SpeakeasyMetadata("queryParam:name=transaction_type")
    private JsonNullable<? extends TransactionType> transactionType;

    @JsonCreator
    public InvoiceItemsFilter(
            Optional<String> name,
            JsonNullable<? extends InvoiceItemType> type,
            JsonNullable<? extends TransactionType> transactionType) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(transactionType, "transactionType");
        this.name = name;
        this.type = type;
        this.transactionType = transactionType;
    }
    
    public InvoiceItemsFilter() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Name of Invoice Items to search for
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceItemType> type() {
        return (JsonNullable<InvoiceItemType>) type;
    }

    /**
     * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransactionType> transactionType() {
        return (JsonNullable<TransactionType>) transactionType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of Invoice Items to search for
     */
    public InvoiceItemsFilter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * Name of Invoice Items to search for
     */
    public InvoiceItemsFilter withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
     */
    public InvoiceItemsFilter withType(InvoiceItemType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
     */
    public InvoiceItemsFilter withType(JsonNullable<? extends InvoiceItemType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
     */
    public InvoiceItemsFilter withTransactionType(TransactionType transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = JsonNullable.of(transactionType);
        return this;
    }

    /**
     * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
     */
    public InvoiceItemsFilter withTransactionType(JsonNullable<? extends TransactionType> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceItemsFilter other = (InvoiceItemsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, type, transactionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceItemsFilter.class,
                "name", name,
                "type", type,
                "transactionType", transactionType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private JsonNullable<? extends InvoiceItemType> type = JsonNullable.undefined();

        private JsonNullable<? extends TransactionType> transactionType = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of Invoice Items to search for
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of Invoice Items to search for
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
         */
        public Builder type(InvoiceItemType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
         */
        public Builder type(JsonNullable<? extends InvoiceItemType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
         */
        public Builder transactionType(TransactionType transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = JsonNullable.of(transactionType);
            return this;
        }

        /**
         * The kind of transaction, indicating whether it is a sales transaction or a purchase transaction.
         */
        public Builder transactionType(JsonNullable<? extends TransactionType> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }

        public InvoiceItemsFilter build() {

            return new InvoiceItemsFilter(
                name, type, transactionType);
        }

    }
}
