/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class InvoiceLineItem {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Row ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_id")
    private Optional<String> rowId;

    /**
     * User defined item code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Line number of the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    /**
     * User defined description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Item type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends InvoiceLineItemType> type;

    /**
     * Tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Double> taxAmount;

    /**
     * Total amount of the line item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Double> quantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_of_measure")
    private JsonNullable<String> unitOfMeasure;

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Double> discountAmount;

    /**
     * ID of the category of the line item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    private JsonNullable<String> categoryId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;

    /**
     * ID of the shipping of the line item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_id")
    private JsonNullable<String> shippingId;

    /**
     * Memo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * Whether the line item is prepaid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepaid")
    private JsonNullable<Boolean> prepaid;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item")
    private Optional<? extends LinkedInvoiceItem> item;

    /**
     * Tax applicable on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_applicable_on")
    private JsonNullable<String> taxApplicableOn;

    /**
     * Tax recoverability
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_recoverability")
    private JsonNullable<String> taxRecoverability;

    /**
     * Method of tax calculation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_method")
    private JsonNullable<String> taxMethod;

    /**
     * Worktags of the line item. This is currently only supported in Workday.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("worktags")
    private Optional<? extends List<LinkedWorktag>> worktags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRate> taxRate;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<? extends LinkedLedgerAccount> ledgerAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public InvoiceLineItem(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("row_id") Optional<String> rowId,
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("line_number") JsonNullable<Long> lineNumber,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("type") JsonNullable<? extends InvoiceLineItemType> type,
            @JsonProperty("tax_amount") JsonNullable<Double> taxAmount,
            @JsonProperty("total_amount") JsonNullable<Double> totalAmount,
            @JsonProperty("quantity") JsonNullable<Double> quantity,
            @JsonProperty("unit_price") JsonNullable<Double> unitPrice,
            @JsonProperty("unit_of_measure") JsonNullable<String> unitOfMeasure,
            @JsonProperty("discount_percentage") JsonNullable<Double> discountPercentage,
            @JsonProperty("discount_amount") JsonNullable<Double> discountAmount,
            @JsonProperty("category_id") JsonNullable<String> categoryId,
            @JsonProperty("location_id") JsonNullable<String> locationId,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("subsidiary_id") JsonNullable<String> subsidiaryId,
            @JsonProperty("shipping_id") JsonNullable<String> shippingId,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("prepaid") JsonNullable<Boolean> prepaid,
            @JsonProperty("item") Optional<? extends LinkedInvoiceItem> item,
            @JsonProperty("tax_applicable_on") JsonNullable<String> taxApplicableOn,
            @JsonProperty("tax_recoverability") JsonNullable<String> taxRecoverability,
            @JsonProperty("tax_method") JsonNullable<String> taxMethod,
            @JsonProperty("worktags") Optional<? extends List<LinkedWorktag>> worktags,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRate> taxRate,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("ledger_account") JsonNullable<? extends LinkedLedgerAccount> ledgerAccount,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(rowId, "rowId");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(lineNumber, "lineNumber");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(categoryId, "categoryId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        Utils.checkNotNull(shippingId, "shippingId");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(prepaid, "prepaid");
        Utils.checkNotNull(item, "item");
        Utils.checkNotNull(taxApplicableOn, "taxApplicableOn");
        Utils.checkNotNull(taxRecoverability, "taxRecoverability");
        Utils.checkNotNull(taxMethod, "taxMethod");
        Utils.checkNotNull(worktags, "worktags");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.rowId = rowId;
        this.code = code;
        this.lineNumber = lineNumber;
        this.description = description;
        this.type = type;
        this.taxAmount = taxAmount;
        this.totalAmount = totalAmount;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.unitOfMeasure = unitOfMeasure;
        this.discountPercentage = discountPercentage;
        this.discountAmount = discountAmount;
        this.categoryId = categoryId;
        this.locationId = locationId;
        this.departmentId = departmentId;
        this.subsidiaryId = subsidiaryId;
        this.shippingId = shippingId;
        this.memo = memo;
        this.prepaid = prepaid;
        this.item = item;
        this.taxApplicableOn = taxApplicableOn;
        this.taxRecoverability = taxRecoverability;
        this.taxMethod = taxMethod;
        this.worktags = worktags;
        this.taxRate = taxRate;
        this.trackingCategories = trackingCategories;
        this.ledgerAccount = ledgerAccount;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public InvoiceLineItem() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Row ID
     */
    @JsonIgnore
    public Optional<String> rowId() {
        return rowId;
    }

    /**
     * User defined item code
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * Line number of the resource
     */
    @JsonIgnore
    public JsonNullable<Long> lineNumber() {
        return lineNumber;
    }

    /**
     * User defined description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Item type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceLineItemType> type() {
        return (JsonNullable<InvoiceLineItemType>) type;
    }

    /**
     * Tax amount
     */
    @JsonIgnore
    public JsonNullable<Double> taxAmount() {
        return taxAmount;
    }

    /**
     * Total amount of the line item
     */
    @JsonIgnore
    public JsonNullable<Double> totalAmount() {
        return totalAmount;
    }

    @JsonIgnore
    public JsonNullable<Double> quantity() {
        return quantity;
    }

    @JsonIgnore
    public JsonNullable<Double> unitPrice() {
        return unitPrice;
    }

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    @JsonIgnore
    public JsonNullable<String> unitOfMeasure() {
        return unitOfMeasure;
    }

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    @JsonIgnore
    public JsonNullable<Double> discountPercentage() {
        return discountPercentage;
    }

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    @JsonIgnore
    public JsonNullable<Double> discountAmount() {
        return discountAmount;
    }

    /**
     * ID of the category of the line item
     */
    @JsonIgnore
    public JsonNullable<String> categoryId() {
        return categoryId;
    }

    /**
     * The ID of the location
     */
    @JsonIgnore
    public JsonNullable<String> locationId() {
        return locationId;
    }

    /**
     * The ID of the department
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The ID of the subsidiary
     */
    @JsonIgnore
    public JsonNullable<String> subsidiaryId() {
        return subsidiaryId;
    }

    /**
     * ID of the shipping of the line item
     */
    @JsonIgnore
    public JsonNullable<String> shippingId() {
        return shippingId;
    }

    /**
     * Memo
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * Whether the line item is prepaid
     */
    @JsonIgnore
    public JsonNullable<Boolean> prepaid() {
        return prepaid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedInvoiceItem> item() {
        return (Optional<LinkedInvoiceItem>) item;
    }

    /**
     * Tax applicable on
     */
    @JsonIgnore
    public JsonNullable<String> taxApplicableOn() {
        return taxApplicableOn;
    }

    /**
     * Tax recoverability
     */
    @JsonIgnore
    public JsonNullable<String> taxRecoverability() {
        return taxRecoverability;
    }

    /**
     * Method of tax calculation
     */
    @JsonIgnore
    public JsonNullable<String> taxMethod() {
        return taxMethod;
    }

    /**
     * Worktags of the line item. This is currently only supported in Workday.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LinkedWorktag>> worktags() {
        return (Optional<List<LinkedWorktag>>) worktags;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRate> taxRate() {
        return (Optional<LinkedTaxRate>) taxRate;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccount> ledgerAccount() {
        return (JsonNullable<LinkedLedgerAccount>) ledgerAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public InvoiceLineItem withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public InvoiceLineItem withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Row ID
     */
    public InvoiceLineItem withRowId(String rowId) {
        Utils.checkNotNull(rowId, "rowId");
        this.rowId = Optional.ofNullable(rowId);
        return this;
    }


    /**
     * Row ID
     */
    public InvoiceLineItem withRowId(Optional<String> rowId) {
        Utils.checkNotNull(rowId, "rowId");
        this.rowId = rowId;
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceLineItem withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * User defined item code
     */
    public InvoiceLineItem withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * Line number of the resource
     */
    public InvoiceLineItem withLineNumber(long lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * Line number of the resource
     */
    public InvoiceLineItem withLineNumber(JsonNullable<Long> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    /**
     * User defined description
     */
    public InvoiceLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * User defined description
     */
    public InvoiceLineItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Item type
     */
    public InvoiceLineItem withType(InvoiceLineItemType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Item type
     */
    public InvoiceLineItem withType(JsonNullable<? extends InvoiceLineItemType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Tax amount
     */
    public InvoiceLineItem withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * Tax amount
     */
    public InvoiceLineItem withTaxAmount(JsonNullable<Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Total amount of the line item
     */
    public InvoiceLineItem withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Total amount of the line item
     */
    public InvoiceLineItem withTotalAmount(JsonNullable<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public InvoiceLineItem withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    public InvoiceLineItem withQuantity(JsonNullable<Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public InvoiceLineItem withUnitPrice(double unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }

    public InvoiceLineItem withUnitPrice(JsonNullable<Double> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public InvoiceLineItem withUnitOfMeasure(String unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
        return this;
    }

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public InvoiceLineItem withUnitOfMeasure(JsonNullable<String> unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    public InvoiceLineItem withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Discount percentage applied to the line item when supported downstream.
     */
    public InvoiceLineItem withDiscountPercentage(JsonNullable<Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    public InvoiceLineItem withDiscountAmount(double discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * Discount amount applied to the line item when supported downstream.
     */
    public InvoiceLineItem withDiscountAmount(JsonNullable<Double> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * ID of the category of the line item
     */
    public InvoiceLineItem withCategoryId(String categoryId) {
        Utils.checkNotNull(categoryId, "categoryId");
        this.categoryId = JsonNullable.of(categoryId);
        return this;
    }

    /**
     * ID of the category of the line item
     */
    public InvoiceLineItem withCategoryId(JsonNullable<String> categoryId) {
        Utils.checkNotNull(categoryId, "categoryId");
        this.categoryId = categoryId;
        return this;
    }

    /**
     * The ID of the location
     */
    public InvoiceLineItem withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = JsonNullable.of(locationId);
        return this;
    }

    /**
     * The ID of the location
     */
    public InvoiceLineItem withLocationId(JsonNullable<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    /**
     * The ID of the department
     */
    public InvoiceLineItem withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The ID of the department
     */
    public InvoiceLineItem withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public InvoiceLineItem withSubsidiaryId(String subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public InvoiceLineItem withSubsidiaryId(JsonNullable<String> subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = subsidiaryId;
        return this;
    }

    /**
     * ID of the shipping of the line item
     */
    public InvoiceLineItem withShippingId(String shippingId) {
        Utils.checkNotNull(shippingId, "shippingId");
        this.shippingId = JsonNullable.of(shippingId);
        return this;
    }

    /**
     * ID of the shipping of the line item
     */
    public InvoiceLineItem withShippingId(JsonNullable<String> shippingId) {
        Utils.checkNotNull(shippingId, "shippingId");
        this.shippingId = shippingId;
        return this;
    }

    /**
     * Memo
     */
    public InvoiceLineItem withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * Memo
     */
    public InvoiceLineItem withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * Whether the line item is prepaid
     */
    public InvoiceLineItem withPrepaid(boolean prepaid) {
        Utils.checkNotNull(prepaid, "prepaid");
        this.prepaid = JsonNullable.of(prepaid);
        return this;
    }

    /**
     * Whether the line item is prepaid
     */
    public InvoiceLineItem withPrepaid(JsonNullable<Boolean> prepaid) {
        Utils.checkNotNull(prepaid, "prepaid");
        this.prepaid = prepaid;
        return this;
    }

    public InvoiceLineItem withItem(LinkedInvoiceItem item) {
        Utils.checkNotNull(item, "item");
        this.item = Optional.ofNullable(item);
        return this;
    }


    public InvoiceLineItem withItem(Optional<? extends LinkedInvoiceItem> item) {
        Utils.checkNotNull(item, "item");
        this.item = item;
        return this;
    }

    /**
     * Tax applicable on
     */
    public InvoiceLineItem withTaxApplicableOn(String taxApplicableOn) {
        Utils.checkNotNull(taxApplicableOn, "taxApplicableOn");
        this.taxApplicableOn = JsonNullable.of(taxApplicableOn);
        return this;
    }

    /**
     * Tax applicable on
     */
    public InvoiceLineItem withTaxApplicableOn(JsonNullable<String> taxApplicableOn) {
        Utils.checkNotNull(taxApplicableOn, "taxApplicableOn");
        this.taxApplicableOn = taxApplicableOn;
        return this;
    }

    /**
     * Tax recoverability
     */
    public InvoiceLineItem withTaxRecoverability(String taxRecoverability) {
        Utils.checkNotNull(taxRecoverability, "taxRecoverability");
        this.taxRecoverability = JsonNullable.of(taxRecoverability);
        return this;
    }

    /**
     * Tax recoverability
     */
    public InvoiceLineItem withTaxRecoverability(JsonNullable<String> taxRecoverability) {
        Utils.checkNotNull(taxRecoverability, "taxRecoverability");
        this.taxRecoverability = taxRecoverability;
        return this;
    }

    /**
     * Method of tax calculation
     */
    public InvoiceLineItem withTaxMethod(String taxMethod) {
        Utils.checkNotNull(taxMethod, "taxMethod");
        this.taxMethod = JsonNullable.of(taxMethod);
        return this;
    }

    /**
     * Method of tax calculation
     */
    public InvoiceLineItem withTaxMethod(JsonNullable<String> taxMethod) {
        Utils.checkNotNull(taxMethod, "taxMethod");
        this.taxMethod = taxMethod;
        return this;
    }

    /**
     * Worktags of the line item. This is currently only supported in Workday.
     */
    public InvoiceLineItem withWorktags(List<LinkedWorktag> worktags) {
        Utils.checkNotNull(worktags, "worktags");
        this.worktags = Optional.ofNullable(worktags);
        return this;
    }


    /**
     * Worktags of the line item. This is currently only supported in Workday.
     */
    public InvoiceLineItem withWorktags(Optional<? extends List<LinkedWorktag>> worktags) {
        Utils.checkNotNull(worktags, "worktags");
        this.worktags = worktags;
        return this;
    }

    public InvoiceLineItem withTaxRate(LinkedTaxRate taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }


    public InvoiceLineItem withTaxRate(Optional<? extends LinkedTaxRate> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceLineItem withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public InvoiceLineItem withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public InvoiceLineItem withLedgerAccount(LinkedLedgerAccount ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }

    public InvoiceLineItem withLedgerAccount(JsonNullable<? extends LinkedLedgerAccount> ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = ledgerAccount;
        return this;
    }

    public InvoiceLineItem withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public InvoiceLineItem withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceLineItem withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public InvoiceLineItem withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public InvoiceLineItem withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public InvoiceLineItem withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public InvoiceLineItem withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public InvoiceLineItem withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public InvoiceLineItem withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public InvoiceLineItem withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public InvoiceLineItem withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public InvoiceLineItem withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceLineItem other = (InvoiceLineItem) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.rowId, other.rowId) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.unitOfMeasure, other.unitOfMeasure) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.categoryId, other.categoryId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.shippingId, other.shippingId) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.prepaid, other.prepaid) &&
            Utils.enhancedDeepEquals(this.item, other.item) &&
            Utils.enhancedDeepEquals(this.taxApplicableOn, other.taxApplicableOn) &&
            Utils.enhancedDeepEquals(this.taxRecoverability, other.taxRecoverability) &&
            Utils.enhancedDeepEquals(this.taxMethod, other.taxMethod) &&
            Utils.enhancedDeepEquals(this.worktags, other.worktags) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, rowId, code,
            lineNumber, description, type,
            taxAmount, totalAmount, quantity,
            unitPrice, unitOfMeasure, discountPercentage,
            discountAmount, categoryId, locationId,
            departmentId, subsidiaryId, shippingId,
            memo, prepaid, item,
            taxApplicableOn, taxRecoverability, taxMethod,
            worktags, taxRate, trackingCategories,
            ledgerAccount, customFields, rowVersion,
            updatedBy, createdBy, createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceLineItem.class,
                "id", id,
                "rowId", rowId,
                "code", code,
                "lineNumber", lineNumber,
                "description", description,
                "type", type,
                "taxAmount", taxAmount,
                "totalAmount", totalAmount,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "unitOfMeasure", unitOfMeasure,
                "discountPercentage", discountPercentage,
                "discountAmount", discountAmount,
                "categoryId", categoryId,
                "locationId", locationId,
                "departmentId", departmentId,
                "subsidiaryId", subsidiaryId,
                "shippingId", shippingId,
                "memo", memo,
                "prepaid", prepaid,
                "item", item,
                "taxApplicableOn", taxApplicableOn,
                "taxRecoverability", taxRecoverability,
                "taxMethod", taxMethod,
                "worktags", worktags,
                "taxRate", taxRate,
                "trackingCategories", trackingCategories,
                "ledgerAccount", ledgerAccount,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private Optional<String> rowId = Optional.empty();

        private JsonNullable<String> code = JsonNullable.undefined();

        private JsonNullable<Long> lineNumber = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<? extends InvoiceLineItemType> type = JsonNullable.undefined();

        private JsonNullable<Double> taxAmount = JsonNullable.undefined();

        private JsonNullable<Double> totalAmount = JsonNullable.undefined();

        private JsonNullable<Double> quantity = JsonNullable.undefined();

        private JsonNullable<Double> unitPrice = JsonNullable.undefined();

        private JsonNullable<String> unitOfMeasure = JsonNullable.undefined();

        private JsonNullable<Double> discountPercentage = JsonNullable.undefined();

        private JsonNullable<Double> discountAmount = JsonNullable.undefined();

        private JsonNullable<String> categoryId = JsonNullable.undefined();

        private JsonNullable<String> locationId = JsonNullable.undefined();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private JsonNullable<String> subsidiaryId = JsonNullable.undefined();

        private JsonNullable<String> shippingId = JsonNullable.undefined();

        private JsonNullable<String> memo = JsonNullable.undefined();

        private JsonNullable<Boolean> prepaid = JsonNullable.undefined();

        private Optional<? extends LinkedInvoiceItem> item = Optional.empty();

        private JsonNullable<String> taxApplicableOn = JsonNullable.undefined();

        private JsonNullable<String> taxRecoverability = JsonNullable.undefined();

        private JsonNullable<String> taxMethod = JsonNullable.undefined();

        private Optional<? extends List<LinkedWorktag>> worktags = Optional.empty();

        private Optional<? extends LinkedTaxRate> taxRate = Optional.empty();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private JsonNullable<? extends LinkedLedgerAccount> ledgerAccount = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private JsonNullable<String> updatedBy = JsonNullable.undefined();

        private JsonNullable<String> createdBy = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Row ID
         */
        public Builder rowId(String rowId) {
            Utils.checkNotNull(rowId, "rowId");
            this.rowId = Optional.ofNullable(rowId);
            return this;
        }

        /**
         * Row ID
         */
        public Builder rowId(Optional<String> rowId) {
            Utils.checkNotNull(rowId, "rowId");
            this.rowId = rowId;
            return this;
        }


        /**
         * User defined item code
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * User defined item code
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * Line number of the resource
         */
        public Builder lineNumber(long lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(JsonNullable<Long> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }


        /**
         * User defined description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * User defined description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Item type
         */
        public Builder type(InvoiceLineItemType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Item type
         */
        public Builder type(JsonNullable<? extends InvoiceLineItemType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * Tax amount
         */
        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Tax amount
         */
        public Builder taxAmount(JsonNullable<Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        /**
         * Total amount of the line item
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount of the line item
         */
        public Builder totalAmount(JsonNullable<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder quantity(JsonNullable<Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        public Builder unitPrice(double unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        public Builder unitPrice(JsonNullable<Double> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }


        /**
         * Description of the unit type the item is sold as, ie: kg, hour.
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * Description of the unit type the item is sold as, ie: kg, hour.
         */
        public Builder unitOfMeasure(JsonNullable<String> unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }


        /**
         * Discount percentage applied to the line item when supported downstream.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount percentage applied to the line item when supported downstream.
         */
        public Builder discountPercentage(JsonNullable<Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }


        /**
         * Discount amount applied to the line item when supported downstream.
         */
        public Builder discountAmount(double discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Discount amount applied to the line item when supported downstream.
         */
        public Builder discountAmount(JsonNullable<Double> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }


        /**
         * ID of the category of the line item
         */
        public Builder categoryId(String categoryId) {
            Utils.checkNotNull(categoryId, "categoryId");
            this.categoryId = JsonNullable.of(categoryId);
            return this;
        }

        /**
         * ID of the category of the line item
         */
        public Builder categoryId(JsonNullable<String> categoryId) {
            Utils.checkNotNull(categoryId, "categoryId");
            this.categoryId = categoryId;
            return this;
        }


        /**
         * The ID of the location
         */
        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(JsonNullable<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }


        /**
         * The ID of the department
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(String subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(JsonNullable<String> subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = subsidiaryId;
            return this;
        }


        /**
         * ID of the shipping of the line item
         */
        public Builder shippingId(String shippingId) {
            Utils.checkNotNull(shippingId, "shippingId");
            this.shippingId = JsonNullable.of(shippingId);
            return this;
        }

        /**
         * ID of the shipping of the line item
         */
        public Builder shippingId(JsonNullable<String> shippingId) {
            Utils.checkNotNull(shippingId, "shippingId");
            this.shippingId = shippingId;
            return this;
        }


        /**
         * Memo
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * Memo
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }


        /**
         * Whether the line item is prepaid
         */
        public Builder prepaid(boolean prepaid) {
            Utils.checkNotNull(prepaid, "prepaid");
            this.prepaid = JsonNullable.of(prepaid);
            return this;
        }

        /**
         * Whether the line item is prepaid
         */
        public Builder prepaid(JsonNullable<Boolean> prepaid) {
            Utils.checkNotNull(prepaid, "prepaid");
            this.prepaid = prepaid;
            return this;
        }


        public Builder item(LinkedInvoiceItem item) {
            Utils.checkNotNull(item, "item");
            this.item = Optional.ofNullable(item);
            return this;
        }

        public Builder item(Optional<? extends LinkedInvoiceItem> item) {
            Utils.checkNotNull(item, "item");
            this.item = item;
            return this;
        }


        /**
         * Tax applicable on
         */
        public Builder taxApplicableOn(String taxApplicableOn) {
            Utils.checkNotNull(taxApplicableOn, "taxApplicableOn");
            this.taxApplicableOn = JsonNullable.of(taxApplicableOn);
            return this;
        }

        /**
         * Tax applicable on
         */
        public Builder taxApplicableOn(JsonNullable<String> taxApplicableOn) {
            Utils.checkNotNull(taxApplicableOn, "taxApplicableOn");
            this.taxApplicableOn = taxApplicableOn;
            return this;
        }


        /**
         * Tax recoverability
         */
        public Builder taxRecoverability(String taxRecoverability) {
            Utils.checkNotNull(taxRecoverability, "taxRecoverability");
            this.taxRecoverability = JsonNullable.of(taxRecoverability);
            return this;
        }

        /**
         * Tax recoverability
         */
        public Builder taxRecoverability(JsonNullable<String> taxRecoverability) {
            Utils.checkNotNull(taxRecoverability, "taxRecoverability");
            this.taxRecoverability = taxRecoverability;
            return this;
        }


        /**
         * Method of tax calculation
         */
        public Builder taxMethod(String taxMethod) {
            Utils.checkNotNull(taxMethod, "taxMethod");
            this.taxMethod = JsonNullable.of(taxMethod);
            return this;
        }

        /**
         * Method of tax calculation
         */
        public Builder taxMethod(JsonNullable<String> taxMethod) {
            Utils.checkNotNull(taxMethod, "taxMethod");
            this.taxMethod = taxMethod;
            return this;
        }


        /**
         * Worktags of the line item. This is currently only supported in Workday.
         */
        public Builder worktags(List<LinkedWorktag> worktags) {
            Utils.checkNotNull(worktags, "worktags");
            this.worktags = Optional.ofNullable(worktags);
            return this;
        }

        /**
         * Worktags of the line item. This is currently only supported in Workday.
         */
        public Builder worktags(Optional<? extends List<LinkedWorktag>> worktags) {
            Utils.checkNotNull(worktags, "worktags");
            this.worktags = worktags;
            return this;
        }


        public Builder taxRate(LinkedTaxRate taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRate> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        public Builder ledgerAccount(LinkedLedgerAccount ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        public Builder ledgerAccount(JsonNullable<? extends LinkedLedgerAccount> ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = ledgerAccount;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }


        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public InvoiceLineItem build() {

            return new InvoiceLineItem(
                id, rowId, code,
                lineNumber, description, type,
                taxAmount, totalAmount, quantity,
                unitPrice, unitOfMeasure, discountPercentage,
                discountAmount, categoryId, locationId,
                departmentId, subsidiaryId, shippingId,
                memo, prepaid, item,
                taxApplicableOn, taxRecoverability, taxMethod,
                worktags, taxRate, trackingCategories,
                ledgerAccount, customFields, rowVersion,
                updatedBy, createdBy, createdAt,
                updatedAt);
        }

    }
}
