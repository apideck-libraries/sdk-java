/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class InvoicesFilter {

    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<OffsetDateTime> updatedSince;


    @SpeakeasyMetadata("queryParam:name=created_since")
    private Optional<OffsetDateTime> createdSince;

    /**
     * Invoice number to search for
     */
    @SpeakeasyMetadata("queryParam:name=number")
    private Optional<String> number;

    @JsonCreator
    public InvoicesFilter(
            Optional<OffsetDateTime> updatedSince,
            Optional<OffsetDateTime> createdSince,
            Optional<String> number) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(createdSince, "createdSince");
        Utils.checkNotNull(number, "number");
        this.updatedSince = updatedSince;
        this.createdSince = createdSince;
        this.number = number;
    }
    
    public InvoicesFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdSince() {
        return createdSince;
    }

    /**
     * Invoice number to search for
     */
    @JsonIgnore
    public Optional<String> number() {
        return number;
    }

    public static Builder builder() {
        return new Builder();
    }


    public InvoicesFilter withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }


    public InvoicesFilter withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    public InvoicesFilter withCreatedSince(OffsetDateTime createdSince) {
        Utils.checkNotNull(createdSince, "createdSince");
        this.createdSince = Optional.ofNullable(createdSince);
        return this;
    }


    public InvoicesFilter withCreatedSince(Optional<OffsetDateTime> createdSince) {
        Utils.checkNotNull(createdSince, "createdSince");
        this.createdSince = createdSince;
        return this;
    }

    /**
     * Invoice number to search for
     */
    public InvoicesFilter withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = Optional.ofNullable(number);
        return this;
    }


    /**
     * Invoice number to search for
     */
    public InvoicesFilter withNumber(Optional<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoicesFilter other = (InvoicesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.createdSince, other.createdSince) &&
            Utils.enhancedDeepEquals(this.number, other.number);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            updatedSince, createdSince, number);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoicesFilter.class,
                "updatedSince", updatedSince,
                "createdSince", createdSince,
                "number", number);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> updatedSince = Optional.empty();

        private Optional<OffsetDateTime> createdSince = Optional.empty();

        private Optional<String> number = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }


        public Builder createdSince(OffsetDateTime createdSince) {
            Utils.checkNotNull(createdSince, "createdSince");
            this.createdSince = Optional.ofNullable(createdSince);
            return this;
        }

        public Builder createdSince(Optional<OffsetDateTime> createdSince) {
            Utils.checkNotNull(createdSince, "createdSince");
            this.createdSince = createdSince;
            return this;
        }


        /**
         * Invoice number to search for
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = Optional.ofNullable(number);
            return this;
        }

        /**
         * Invoice number to search for
         */
        public Builder number(Optional<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        public InvoicesFilter build() {

            return new InvoicesFilter(
                updatedSince, createdSince, number);
        }

    }
}
