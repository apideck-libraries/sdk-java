/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class IssuesFilter {
    /**
     * Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private List<String> status;

    /**
     * Only return tickets since a specific date
     */
    @SpeakeasyMetadata("queryParam:name=since")
    private OffsetDateTime since;

    /**
     * Only return tickets assigned to a specific user
     */
    @SpeakeasyMetadata("queryParam:name=assignee_id")
    private String assigneeId;

    @JsonCreator
    public IssuesFilter(
            @Nullable List<String> status,
            @Nullable OffsetDateTime since,
            @Nullable String assigneeId) {
        this.status = status;
        this.since = since;
        this.assigneeId = assigneeId;
    }
    
    public IssuesFilter() {
        this(null, null, null);
    }

    /**
     * Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
     */
    public Optional<List<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Only return tickets since a specific date
     */
    public Optional<OffsetDateTime> since() {
        return Optional.ofNullable(this.since);
    }

    /**
     * Only return tickets assigned to a specific user
     */
    public Optional<String> assigneeId() {
        return Optional.ofNullable(this.assigneeId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
     */
    public IssuesFilter withStatus(@Nullable List<String> status) {
        this.status = status;
        return this;
    }


    /**
     * Only return tickets since a specific date
     */
    public IssuesFilter withSince(@Nullable OffsetDateTime since) {
        this.since = since;
        return this;
    }


    /**
     * Only return tickets assigned to a specific user
     */
    public IssuesFilter withAssigneeId(@Nullable String assigneeId) {
        this.assigneeId = assigneeId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IssuesFilter other = (IssuesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.since, other.since) &&
            Utils.enhancedDeepEquals(this.assigneeId, other.assigneeId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, since, assigneeId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IssuesFilter.class,
                "status", status,
                "since", since,
                "assigneeId", assigneeId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<String> status;

        private OffsetDateTime since;

        private String assigneeId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
         */
        public Builder status(@Nullable List<String> status) {
            this.status = status;
            return this;
        }

        /**
         * Only return tickets since a specific date
         */
        public Builder since(@Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Only return tickets assigned to a specific user
         */
        public Builder assigneeId(@Nullable String assigneeId) {
            this.assigneeId = assigneeId;
            return this;
        }

        public IssuesFilter build() {
            return new IssuesFilter(
                status, since, assigneeId);
        }

    }
}
