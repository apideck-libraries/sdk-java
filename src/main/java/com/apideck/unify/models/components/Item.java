/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Item {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    private Optional<String> idempotencyKey;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abbreviation")
    private Optional<String> abbreviation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_type")
    private Optional<? extends ProductType> productType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_amount")
    private Optional<Double> priceAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    private Optional<? extends PricingType> pricingType;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_currency")
    private JsonNullable<? extends Currency> priceCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost")
    private Optional<Double> cost;

    /**
     * A list of Tax IDs for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_ids")
    private Optional<? extends List<String>> taxIds;

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_revenue")
    private Optional<Boolean> isRevenue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_default_tax_rates")
    private Optional<Boolean> useDefaultTaxRates;

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("absent_at_location_ids")
    private Optional<? extends List<String>> absentAtLocationIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    private Optional<Boolean> presentAtAllLocations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_for_pickup")
    private Optional<Boolean> availableForPickup;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_online")
    private Optional<Boolean> availableOnline;

    /**
     * SKU of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * Product code, e.g. UPC or EAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<ItemCategories>> categories;

    /**
     * List of options pertaining to this item's attribute variation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<ItemOptions>> options;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    private Optional<? extends List<Variations>> variations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifier_groups")
    private Optional<? extends List<ModifierGroups>> modifierGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private JsonNullable<Boolean> available;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private JsonNullable<Boolean> hidden;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private JsonNullable<String> version;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Item(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("idempotency_key") Optional<String> idempotencyKey,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("abbreviation") Optional<String> abbreviation,
            @JsonProperty("product_type") Optional<? extends ProductType> productType,
            @JsonProperty("price_amount") Optional<Double> priceAmount,
            @JsonProperty("pricing_type") Optional<? extends PricingType> pricingType,
            @JsonProperty("price_currency") JsonNullable<? extends Currency> priceCurrency,
            @JsonProperty("cost") Optional<Double> cost,
            @JsonProperty("tax_ids") Optional<? extends List<String>> taxIds,
            @JsonProperty("is_revenue") Optional<Boolean> isRevenue,
            @JsonProperty("use_default_tax_rates") Optional<Boolean> useDefaultTaxRates,
            @JsonProperty("absent_at_location_ids") Optional<? extends List<String>> absentAtLocationIds,
            @JsonProperty("present_at_all_locations") Optional<Boolean> presentAtAllLocations,
            @JsonProperty("available_for_pickup") Optional<Boolean> availableForPickup,
            @JsonProperty("available_online") Optional<Boolean> availableOnline,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("categories") Optional<? extends List<ItemCategories>> categories,
            @JsonProperty("options") Optional<? extends List<ItemOptions>> options,
            @JsonProperty("variations") Optional<? extends List<Variations>> variations,
            @JsonProperty("modifier_groups") Optional<? extends List<ModifierGroups>> modifierGroups,
            @JsonProperty("available") JsonNullable<Boolean> available,
            @JsonProperty("hidden") JsonNullable<Boolean> hidden,
            @JsonProperty("version") JsonNullable<String> version,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(abbreviation, "abbreviation");
        Utils.checkNotNull(productType, "productType");
        Utils.checkNotNull(priceAmount, "priceAmount");
        Utils.checkNotNull(pricingType, "pricingType");
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        Utils.checkNotNull(cost, "cost");
        Utils.checkNotNull(taxIds, "taxIds");
        Utils.checkNotNull(isRevenue, "isRevenue");
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        Utils.checkNotNull(availableOnline, "availableOnline");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(variations, "variations");
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(hidden, "hidden");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.idempotencyKey = idempotencyKey;
        this.name = name;
        this.description = description;
        this.abbreviation = abbreviation;
        this.productType = productType;
        this.priceAmount = priceAmount;
        this.pricingType = pricingType;
        this.priceCurrency = priceCurrency;
        this.cost = cost;
        this.taxIds = taxIds;
        this.isRevenue = isRevenue;
        this.useDefaultTaxRates = useDefaultTaxRates;
        this.absentAtLocationIds = absentAtLocationIds;
        this.presentAtAllLocations = presentAtAllLocations;
        this.availableForPickup = availableForPickup;
        this.availableOnline = availableOnline;
        this.sku = sku;
        this.code = code;
        this.categories = categories;
        this.options = options;
        this.variations = variations;
        this.modifierGroups = modifierGroups;
        this.available = available;
        this.hidden = hidden;
        this.version = version;
        this.customMappings = customMappings;
        this.deleted = deleted;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public Item(
            String name) {
        this(Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> abbreviation() {
        return abbreviation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductType> productType() {
        return (Optional<ProductType>) productType;
    }

    @JsonIgnore
    public Optional<Double> priceAmount() {
        return priceAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PricingType> pricingType() {
        return (Optional<PricingType>) pricingType;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> priceCurrency() {
        return (JsonNullable<Currency>) priceCurrency;
    }

    @JsonIgnore
    public Optional<Double> cost() {
        return cost;
    }

    /**
     * A list of Tax IDs for the product.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> taxIds() {
        return (Optional<List<String>>) taxIds;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    @JsonIgnore
    public Optional<Boolean> isRevenue() {
        return isRevenue;
    }

    @JsonIgnore
    public Optional<Boolean> useDefaultTaxRates() {
        return useDefaultTaxRates;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> absentAtLocationIds() {
        return (Optional<List<String>>) absentAtLocationIds;
    }

    @JsonIgnore
    public Optional<Boolean> presentAtAllLocations() {
        return presentAtAllLocations;
    }

    @JsonIgnore
    public Optional<Boolean> availableForPickup() {
        return availableForPickup;
    }

    @JsonIgnore
    public Optional<Boolean> availableOnline() {
        return availableOnline;
    }

    /**
     * SKU of the item
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemCategories>> categories() {
        return (Optional<List<ItemCategories>>) categories;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemOptions>> options() {
        return (Optional<List<ItemOptions>>) options;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Variations>> variations() {
        return (Optional<List<Variations>>) variations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ModifierGroups>> modifierGroups() {
        return (Optional<List<ModifierGroups>>) modifierGroups;
    }

    @JsonIgnore
    public JsonNullable<Boolean> available() {
        return available;
    }

    @JsonIgnore
    public JsonNullable<Boolean> hidden() {
        return hidden;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> version() {
        return version;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Item withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Item withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public Item withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public Item withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public Item withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Item withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public Item withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Item withAbbreviation(String abbreviation) {
        Utils.checkNotNull(abbreviation, "abbreviation");
        this.abbreviation = Optional.ofNullable(abbreviation);
        return this;
    }

    public Item withAbbreviation(Optional<String> abbreviation) {
        Utils.checkNotNull(abbreviation, "abbreviation");
        this.abbreviation = abbreviation;
        return this;
    }

    public Item withProductType(ProductType productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = Optional.ofNullable(productType);
        return this;
    }

    public Item withProductType(Optional<? extends ProductType> productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = productType;
        return this;
    }

    public Item withPriceAmount(double priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = Optional.ofNullable(priceAmount);
        return this;
    }

    public Item withPriceAmount(Optional<Double> priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = priceAmount;
        return this;
    }

    public Item withPricingType(PricingType pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = Optional.ofNullable(pricingType);
        return this;
    }

    public Item withPricingType(Optional<? extends PricingType> pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = pricingType;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Item withPriceCurrency(Currency priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = JsonNullable.of(priceCurrency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Item withPriceCurrency(JsonNullable<? extends Currency> priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = priceCurrency;
        return this;
    }

    public Item withCost(double cost) {
        Utils.checkNotNull(cost, "cost");
        this.cost = Optional.ofNullable(cost);
        return this;
    }

    public Item withCost(Optional<Double> cost) {
        Utils.checkNotNull(cost, "cost");
        this.cost = cost;
        return this;
    }

    /**
     * A list of Tax IDs for the product.
     */
    public Item withTaxIds(List<String> taxIds) {
        Utils.checkNotNull(taxIds, "taxIds");
        this.taxIds = Optional.ofNullable(taxIds);
        return this;
    }

    /**
     * A list of Tax IDs for the product.
     */
    public Item withTaxIds(Optional<? extends List<String>> taxIds) {
        Utils.checkNotNull(taxIds, "taxIds");
        this.taxIds = taxIds;
        return this;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    public Item withIsRevenue(boolean isRevenue) {
        Utils.checkNotNull(isRevenue, "isRevenue");
        this.isRevenue = Optional.ofNullable(isRevenue);
        return this;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    public Item withIsRevenue(Optional<Boolean> isRevenue) {
        Utils.checkNotNull(isRevenue, "isRevenue");
        this.isRevenue = isRevenue;
        return this;
    }

    public Item withUseDefaultTaxRates(boolean useDefaultTaxRates) {
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        this.useDefaultTaxRates = Optional.ofNullable(useDefaultTaxRates);
        return this;
    }

    public Item withUseDefaultTaxRates(Optional<Boolean> useDefaultTaxRates) {
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        this.useDefaultTaxRates = useDefaultTaxRates;
        return this;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    public Item withAbsentAtLocationIds(List<String> absentAtLocationIds) {
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        this.absentAtLocationIds = Optional.ofNullable(absentAtLocationIds);
        return this;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    public Item withAbsentAtLocationIds(Optional<? extends List<String>> absentAtLocationIds) {
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        this.absentAtLocationIds = absentAtLocationIds;
        return this;
    }

    public Item withPresentAtAllLocations(boolean presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
        return this;
    }

    public Item withPresentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }

    public Item withAvailableForPickup(boolean availableForPickup) {
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        this.availableForPickup = Optional.ofNullable(availableForPickup);
        return this;
    }

    public Item withAvailableForPickup(Optional<Boolean> availableForPickup) {
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        this.availableForPickup = availableForPickup;
        return this;
    }

    public Item withAvailableOnline(boolean availableOnline) {
        Utils.checkNotNull(availableOnline, "availableOnline");
        this.availableOnline = Optional.ofNullable(availableOnline);
        return this;
    }

    public Item withAvailableOnline(Optional<Boolean> availableOnline) {
        Utils.checkNotNull(availableOnline, "availableOnline");
        this.availableOnline = availableOnline;
        return this;
    }

    /**
     * SKU of the item
     */
    public Item withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * SKU of the item
     */
    public Item withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    public Item withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    public Item withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public Item withCategories(List<ItemCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    public Item withCategories(Optional<? extends List<ItemCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    public Item withOptions(List<ItemOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    public Item withOptions(Optional<? extends List<ItemOptions>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public Item withVariations(List<Variations> variations) {
        Utils.checkNotNull(variations, "variations");
        this.variations = Optional.ofNullable(variations);
        return this;
    }

    public Item withVariations(Optional<? extends List<Variations>> variations) {
        Utils.checkNotNull(variations, "variations");
        this.variations = variations;
        return this;
    }

    public Item withModifierGroups(List<ModifierGroups> modifierGroups) {
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        this.modifierGroups = Optional.ofNullable(modifierGroups);
        return this;
    }

    public Item withModifierGroups(Optional<? extends List<ModifierGroups>> modifierGroups) {
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        this.modifierGroups = modifierGroups;
        return this;
    }

    public Item withAvailable(boolean available) {
        Utils.checkNotNull(available, "available");
        this.available = JsonNullable.of(available);
        return this;
    }

    public Item withAvailable(JsonNullable<Boolean> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    public Item withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = JsonNullable.of(hidden);
        return this;
    }

    public Item withHidden(JsonNullable<Boolean> hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Item withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = JsonNullable.of(version);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Item withVersion(JsonNullable<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Item withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Item withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Item withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Item withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Item withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Item withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Item withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Item withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Item withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Item withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Item withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Item withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Item withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Item withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Item other = (Item) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.abbreviation, other.abbreviation) &&
            Objects.deepEquals(this.productType, other.productType) &&
            Objects.deepEquals(this.priceAmount, other.priceAmount) &&
            Objects.deepEquals(this.pricingType, other.pricingType) &&
            Objects.deepEquals(this.priceCurrency, other.priceCurrency) &&
            Objects.deepEquals(this.cost, other.cost) &&
            Objects.deepEquals(this.taxIds, other.taxIds) &&
            Objects.deepEquals(this.isRevenue, other.isRevenue) &&
            Objects.deepEquals(this.useDefaultTaxRates, other.useDefaultTaxRates) &&
            Objects.deepEquals(this.absentAtLocationIds, other.absentAtLocationIds) &&
            Objects.deepEquals(this.presentAtAllLocations, other.presentAtAllLocations) &&
            Objects.deepEquals(this.availableForPickup, other.availableForPickup) &&
            Objects.deepEquals(this.availableOnline, other.availableOnline) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.variations, other.variations) &&
            Objects.deepEquals(this.modifierGroups, other.modifierGroups) &&
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.hidden, other.hidden) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            idempotencyKey,
            name,
            description,
            abbreviation,
            productType,
            priceAmount,
            pricingType,
            priceCurrency,
            cost,
            taxIds,
            isRevenue,
            useDefaultTaxRates,
            absentAtLocationIds,
            presentAtAllLocations,
            availableForPickup,
            availableOnline,
            sku,
            code,
            categories,
            options,
            variations,
            modifierGroups,
            available,
            hidden,
            version,
            customMappings,
            deleted,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Item.class,
                "id", id,
                "idempotencyKey", idempotencyKey,
                "name", name,
                "description", description,
                "abbreviation", abbreviation,
                "productType", productType,
                "priceAmount", priceAmount,
                "pricingType", pricingType,
                "priceCurrency", priceCurrency,
                "cost", cost,
                "taxIds", taxIds,
                "isRevenue", isRevenue,
                "useDefaultTaxRates", useDefaultTaxRates,
                "absentAtLocationIds", absentAtLocationIds,
                "presentAtAllLocations", presentAtAllLocations,
                "availableForPickup", availableForPickup,
                "availableOnline", availableOnline,
                "sku", sku,
                "code", code,
                "categories", categories,
                "options", options,
                "variations", variations,
                "modifierGroups", modifierGroups,
                "available", available,
                "hidden", hidden,
                "version", version,
                "customMappings", customMappings,
                "deleted", deleted,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> abbreviation = Optional.empty();
 
        private Optional<? extends ProductType> productType = Optional.empty();
 
        private Optional<Double> priceAmount = Optional.empty();
 
        private Optional<? extends PricingType> pricingType = Optional.empty();
 
        private JsonNullable<? extends Currency> priceCurrency = JsonNullable.undefined();
 
        private Optional<Double> cost = Optional.empty();
 
        private Optional<? extends List<String>> taxIds = Optional.empty();
 
        private Optional<Boolean> isRevenue = Optional.empty();
 
        private Optional<Boolean> useDefaultTaxRates = Optional.empty();
 
        private Optional<? extends List<String>> absentAtLocationIds = Optional.empty();
 
        private Optional<Boolean> presentAtAllLocations = Optional.empty();
 
        private Optional<Boolean> availableForPickup = Optional.empty();
 
        private Optional<Boolean> availableOnline = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<String> code = Optional.empty();
 
        private Optional<? extends List<ItemCategories>> categories = Optional.empty();
 
        private Optional<? extends List<ItemOptions>> options = Optional.empty();
 
        private Optional<? extends List<Variations>> variations = Optional.empty();
 
        private Optional<? extends List<ModifierGroups>> modifierGroups = Optional.empty();
 
        private JsonNullable<Boolean> available = JsonNullable.undefined();
 
        private JsonNullable<Boolean> hidden = JsonNullable.undefined();
 
        private JsonNullable<String> version = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<Boolean> deleted = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder abbreviation(String abbreviation) {
            Utils.checkNotNull(abbreviation, "abbreviation");
            this.abbreviation = Optional.ofNullable(abbreviation);
            return this;
        }

        public Builder abbreviation(Optional<String> abbreviation) {
            Utils.checkNotNull(abbreviation, "abbreviation");
            this.abbreviation = abbreviation;
            return this;
        }

        public Builder productType(ProductType productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        public Builder productType(Optional<? extends ProductType> productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = productType;
            return this;
        }

        public Builder priceAmount(double priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = Optional.ofNullable(priceAmount);
            return this;
        }

        public Builder priceAmount(Optional<Double> priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = priceAmount;
            return this;
        }

        public Builder pricingType(PricingType pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        public Builder pricingType(Optional<? extends PricingType> pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = pricingType;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(Currency priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = JsonNullable.of(priceCurrency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(JsonNullable<? extends Currency> priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = priceCurrency;
            return this;
        }

        public Builder cost(double cost) {
            Utils.checkNotNull(cost, "cost");
            this.cost = Optional.ofNullable(cost);
            return this;
        }

        public Builder cost(Optional<Double> cost) {
            Utils.checkNotNull(cost, "cost");
            this.cost = cost;
            return this;
        }

        /**
         * A list of Tax IDs for the product.
         */
        public Builder taxIds(List<String> taxIds) {
            Utils.checkNotNull(taxIds, "taxIds");
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        /**
         * A list of Tax IDs for the product.
         */
        public Builder taxIds(Optional<? extends List<String>> taxIds) {
            Utils.checkNotNull(taxIds, "taxIds");
            this.taxIds = taxIds;
            return this;
        }

        /**
         * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
         */
        public Builder isRevenue(boolean isRevenue) {
            Utils.checkNotNull(isRevenue, "isRevenue");
            this.isRevenue = Optional.ofNullable(isRevenue);
            return this;
        }

        /**
         * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
         */
        public Builder isRevenue(Optional<Boolean> isRevenue) {
            Utils.checkNotNull(isRevenue, "isRevenue");
            this.isRevenue = isRevenue;
            return this;
        }

        public Builder useDefaultTaxRates(boolean useDefaultTaxRates) {
            Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
            this.useDefaultTaxRates = Optional.ofNullable(useDefaultTaxRates);
            return this;
        }

        public Builder useDefaultTaxRates(Optional<Boolean> useDefaultTaxRates) {
            Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
            this.useDefaultTaxRates = useDefaultTaxRates;
            return this;
        }

        /**
         * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
         */
        public Builder absentAtLocationIds(List<String> absentAtLocationIds) {
            Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
            this.absentAtLocationIds = Optional.ofNullable(absentAtLocationIds);
            return this;
        }

        /**
         * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
         */
        public Builder absentAtLocationIds(Optional<? extends List<String>> absentAtLocationIds) {
            Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
            this.absentAtLocationIds = absentAtLocationIds;
            return this;
        }

        public Builder presentAtAllLocations(boolean presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
            return this;
        }

        public Builder presentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = presentAtAllLocations;
            return this;
        }

        public Builder availableForPickup(boolean availableForPickup) {
            Utils.checkNotNull(availableForPickup, "availableForPickup");
            this.availableForPickup = Optional.ofNullable(availableForPickup);
            return this;
        }

        public Builder availableForPickup(Optional<Boolean> availableForPickup) {
            Utils.checkNotNull(availableForPickup, "availableForPickup");
            this.availableForPickup = availableForPickup;
            return this;
        }

        public Builder availableOnline(boolean availableOnline) {
            Utils.checkNotNull(availableOnline, "availableOnline");
            this.availableOnline = Optional.ofNullable(availableOnline);
            return this;
        }

        public Builder availableOnline(Optional<Boolean> availableOnline) {
            Utils.checkNotNull(availableOnline, "availableOnline");
            this.availableOnline = availableOnline;
            return this;
        }

        /**
         * SKU of the item
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * SKU of the item
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * Product code, e.g. UPC or EAN
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * Product code, e.g. UPC or EAN
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder categories(List<ItemCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        public Builder categories(Optional<? extends List<ItemCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * List of options pertaining to this item's attribute variation
         */
        public Builder options(List<ItemOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * List of options pertaining to this item's attribute variation
         */
        public Builder options(Optional<? extends List<ItemOptions>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder variations(List<Variations> variations) {
            Utils.checkNotNull(variations, "variations");
            this.variations = Optional.ofNullable(variations);
            return this;
        }

        public Builder variations(Optional<? extends List<Variations>> variations) {
            Utils.checkNotNull(variations, "variations");
            this.variations = variations;
            return this;
        }

        public Builder modifierGroups(List<ModifierGroups> modifierGroups) {
            Utils.checkNotNull(modifierGroups, "modifierGroups");
            this.modifierGroups = Optional.ofNullable(modifierGroups);
            return this;
        }

        public Builder modifierGroups(Optional<? extends List<ModifierGroups>> modifierGroups) {
            Utils.checkNotNull(modifierGroups, "modifierGroups");
            this.modifierGroups = modifierGroups;
            return this;
        }

        public Builder available(boolean available) {
            Utils.checkNotNull(available, "available");
            this.available = JsonNullable.of(available);
            return this;
        }

        public Builder available(JsonNullable<Boolean> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = JsonNullable.of(hidden);
            return this;
        }

        public Builder hidden(JsonNullable<Boolean> hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = JsonNullable.of(version);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder version(JsonNullable<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public Item build() {
            return new Item(
                id,
                idempotencyKey,
                name,
                description,
                abbreviation,
                productType,
                priceAmount,
                pricingType,
                priceCurrency,
                cost,
                taxIds,
                isRevenue,
                useDefaultTaxRates,
                absentAtLocationIds,
                presentAtAllLocations,
                availableForPickup,
                availableOnline,
                sku,
                code,
                categories,
                options,
                variations,
                modifierGroups,
                available,
                hidden,
                version,
                customMappings,
                deleted,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                passThrough);
        }
    }
}

