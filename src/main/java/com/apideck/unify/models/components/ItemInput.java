/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ItemInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    private Optional<String> idempotencyKey;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abbreviation")
    private Optional<String> abbreviation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_type")
    private Optional<? extends ProductType> productType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_amount")
    private Optional<Double> priceAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    private Optional<? extends PricingType> pricingType;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_currency")
    private JsonNullable<? extends Currency> priceCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost")
    private Optional<Double> cost;

    /**
     * A list of Tax IDs for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_ids")
    private Optional<? extends List<String>> taxIds;

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_revenue")
    private Optional<Boolean> isRevenue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_default_tax_rates")
    private Optional<Boolean> useDefaultTaxRates;

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("absent_at_location_ids")
    private Optional<? extends List<String>> absentAtLocationIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    private Optional<Boolean> presentAtAllLocations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_for_pickup")
    private Optional<Boolean> availableForPickup;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_online")
    private Optional<Boolean> availableOnline;

    /**
     * SKU of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * Product code, e.g. UPC or EAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<ItemCategoriesInput>> categories;

    /**
     * List of options pertaining to this item's attribute variation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<ItemOptions>> options;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    private Optional<? extends List<ItemVariations>> variations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifier_groups")
    private Optional<? extends List<ItemModifierGroups>> modifierGroups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private JsonNullable<Boolean> available;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private JsonNullable<Boolean> hidden;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public ItemInput(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("idempotency_key") Optional<String> idempotencyKey,
            @JsonProperty("name") String name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("abbreviation") Optional<String> abbreviation,
            @JsonProperty("product_type") Optional<? extends ProductType> productType,
            @JsonProperty("price_amount") Optional<Double> priceAmount,
            @JsonProperty("pricing_type") Optional<? extends PricingType> pricingType,
            @JsonProperty("price_currency") JsonNullable<? extends Currency> priceCurrency,
            @JsonProperty("cost") Optional<Double> cost,
            @JsonProperty("tax_ids") Optional<? extends List<String>> taxIds,
            @JsonProperty("is_revenue") Optional<Boolean> isRevenue,
            @JsonProperty("use_default_tax_rates") Optional<Boolean> useDefaultTaxRates,
            @JsonProperty("absent_at_location_ids") Optional<? extends List<String>> absentAtLocationIds,
            @JsonProperty("present_at_all_locations") Optional<Boolean> presentAtAllLocations,
            @JsonProperty("available_for_pickup") Optional<Boolean> availableForPickup,
            @JsonProperty("available_online") Optional<Boolean> availableOnline,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("categories") Optional<? extends List<ItemCategoriesInput>> categories,
            @JsonProperty("options") Optional<? extends List<ItemOptions>> options,
            @JsonProperty("variations") Optional<? extends List<ItemVariations>> variations,
            @JsonProperty("modifier_groups") Optional<? extends List<ItemModifierGroups>> modifierGroups,
            @JsonProperty("available") JsonNullable<Boolean> available,
            @JsonProperty("hidden") JsonNullable<Boolean> hidden,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(abbreviation, "abbreviation");
        Utils.checkNotNull(productType, "productType");
        Utils.checkNotNull(priceAmount, "priceAmount");
        Utils.checkNotNull(pricingType, "pricingType");
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        Utils.checkNotNull(cost, "cost");
        Utils.checkNotNull(taxIds, "taxIds");
        Utils.checkNotNull(isRevenue, "isRevenue");
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        Utils.checkNotNull(availableOnline, "availableOnline");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(variations, "variations");
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(hidden, "hidden");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.idempotencyKey = idempotencyKey;
        this.name = name;
        this.description = description;
        this.abbreviation = abbreviation;
        this.productType = productType;
        this.priceAmount = priceAmount;
        this.pricingType = pricingType;
        this.priceCurrency = priceCurrency;
        this.cost = cost;
        this.taxIds = taxIds;
        this.isRevenue = isRevenue;
        this.useDefaultTaxRates = useDefaultTaxRates;
        this.absentAtLocationIds = absentAtLocationIds;
        this.presentAtAllLocations = presentAtAllLocations;
        this.availableForPickup = availableForPickup;
        this.availableOnline = availableOnline;
        this.sku = sku;
        this.code = code;
        this.categories = categories;
        this.options = options;
        this.variations = variations;
        this.modifierGroups = modifierGroups;
        this.available = available;
        this.hidden = hidden;
        this.deleted = deleted;
        this.passThrough = passThrough;
    }
    
    public ItemInput(
            String name) {
        this(Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> abbreviation() {
        return abbreviation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductType> productType() {
        return (Optional<ProductType>) productType;
    }

    @JsonIgnore
    public Optional<Double> priceAmount() {
        return priceAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PricingType> pricingType() {
        return (Optional<PricingType>) pricingType;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> priceCurrency() {
        return (JsonNullable<Currency>) priceCurrency;
    }

    @JsonIgnore
    public Optional<Double> cost() {
        return cost;
    }

    /**
     * A list of Tax IDs for the product.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> taxIds() {
        return (Optional<List<String>>) taxIds;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    @JsonIgnore
    public Optional<Boolean> isRevenue() {
        return isRevenue;
    }

    @JsonIgnore
    public Optional<Boolean> useDefaultTaxRates() {
        return useDefaultTaxRates;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> absentAtLocationIds() {
        return (Optional<List<String>>) absentAtLocationIds;
    }

    @JsonIgnore
    public Optional<Boolean> presentAtAllLocations() {
        return presentAtAllLocations;
    }

    @JsonIgnore
    public Optional<Boolean> availableForPickup() {
        return availableForPickup;
    }

    @JsonIgnore
    public Optional<Boolean> availableOnline() {
        return availableOnline;
    }

    /**
     * SKU of the item
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemCategoriesInput>> categories() {
        return (Optional<List<ItemCategoriesInput>>) categories;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemOptions>> options() {
        return (Optional<List<ItemOptions>>) options;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemVariations>> variations() {
        return (Optional<List<ItemVariations>>) variations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ItemModifierGroups>> modifierGroups() {
        return (Optional<List<ItemModifierGroups>>) modifierGroups;
    }

    @JsonIgnore
    public JsonNullable<Boolean> available() {
        return available;
    }

    @JsonIgnore
    public JsonNullable<Boolean> hidden() {
        return hidden;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ItemInput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ItemInput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public ItemInput withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public ItemInput withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public ItemInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ItemInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public ItemInput withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ItemInput withAbbreviation(String abbreviation) {
        Utils.checkNotNull(abbreviation, "abbreviation");
        this.abbreviation = Optional.ofNullable(abbreviation);
        return this;
    }

    public ItemInput withAbbreviation(Optional<String> abbreviation) {
        Utils.checkNotNull(abbreviation, "abbreviation");
        this.abbreviation = abbreviation;
        return this;
    }

    public ItemInput withProductType(ProductType productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = Optional.ofNullable(productType);
        return this;
    }

    public ItemInput withProductType(Optional<? extends ProductType> productType) {
        Utils.checkNotNull(productType, "productType");
        this.productType = productType;
        return this;
    }

    public ItemInput withPriceAmount(double priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = Optional.ofNullable(priceAmount);
        return this;
    }

    public ItemInput withPriceAmount(Optional<Double> priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = priceAmount;
        return this;
    }

    public ItemInput withPricingType(PricingType pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = Optional.ofNullable(pricingType);
        return this;
    }

    public ItemInput withPricingType(Optional<? extends PricingType> pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = pricingType;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ItemInput withPriceCurrency(Currency priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = JsonNullable.of(priceCurrency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ItemInput withPriceCurrency(JsonNullable<? extends Currency> priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = priceCurrency;
        return this;
    }

    public ItemInput withCost(double cost) {
        Utils.checkNotNull(cost, "cost");
        this.cost = Optional.ofNullable(cost);
        return this;
    }

    public ItemInput withCost(Optional<Double> cost) {
        Utils.checkNotNull(cost, "cost");
        this.cost = cost;
        return this;
    }

    /**
     * A list of Tax IDs for the product.
     */
    public ItemInput withTaxIds(List<String> taxIds) {
        Utils.checkNotNull(taxIds, "taxIds");
        this.taxIds = Optional.ofNullable(taxIds);
        return this;
    }

    /**
     * A list of Tax IDs for the product.
     */
    public ItemInput withTaxIds(Optional<? extends List<String>> taxIds) {
        Utils.checkNotNull(taxIds, "taxIds");
        this.taxIds = taxIds;
        return this;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    public ItemInput withIsRevenue(boolean isRevenue) {
        Utils.checkNotNull(isRevenue, "isRevenue");
        this.isRevenue = Optional.ofNullable(isRevenue);
        return this;
    }

    /**
     * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
     */
    public ItemInput withIsRevenue(Optional<Boolean> isRevenue) {
        Utils.checkNotNull(isRevenue, "isRevenue");
        this.isRevenue = isRevenue;
        return this;
    }

    public ItemInput withUseDefaultTaxRates(boolean useDefaultTaxRates) {
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        this.useDefaultTaxRates = Optional.ofNullable(useDefaultTaxRates);
        return this;
    }

    public ItemInput withUseDefaultTaxRates(Optional<Boolean> useDefaultTaxRates) {
        Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
        this.useDefaultTaxRates = useDefaultTaxRates;
        return this;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    public ItemInput withAbsentAtLocationIds(List<String> absentAtLocationIds) {
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        this.absentAtLocationIds = Optional.ofNullable(absentAtLocationIds);
        return this;
    }

    /**
     * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
     */
    public ItemInput withAbsentAtLocationIds(Optional<? extends List<String>> absentAtLocationIds) {
        Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
        this.absentAtLocationIds = absentAtLocationIds;
        return this;
    }

    public ItemInput withPresentAtAllLocations(boolean presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
        return this;
    }

    public ItemInput withPresentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }

    public ItemInput withAvailableForPickup(boolean availableForPickup) {
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        this.availableForPickup = Optional.ofNullable(availableForPickup);
        return this;
    }

    public ItemInput withAvailableForPickup(Optional<Boolean> availableForPickup) {
        Utils.checkNotNull(availableForPickup, "availableForPickup");
        this.availableForPickup = availableForPickup;
        return this;
    }

    public ItemInput withAvailableOnline(boolean availableOnline) {
        Utils.checkNotNull(availableOnline, "availableOnline");
        this.availableOnline = Optional.ofNullable(availableOnline);
        return this;
    }

    public ItemInput withAvailableOnline(Optional<Boolean> availableOnline) {
        Utils.checkNotNull(availableOnline, "availableOnline");
        this.availableOnline = availableOnline;
        return this;
    }

    /**
     * SKU of the item
     */
    public ItemInput withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * SKU of the item
     */
    public ItemInput withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    public ItemInput withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * Product code, e.g. UPC or EAN
     */
    public ItemInput withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public ItemInput withCategories(List<ItemCategoriesInput> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    public ItemInput withCategories(Optional<? extends List<ItemCategoriesInput>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    public ItemInput withOptions(List<ItemOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * List of options pertaining to this item's attribute variation
     */
    public ItemInput withOptions(Optional<? extends List<ItemOptions>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public ItemInput withVariations(List<ItemVariations> variations) {
        Utils.checkNotNull(variations, "variations");
        this.variations = Optional.ofNullable(variations);
        return this;
    }

    public ItemInput withVariations(Optional<? extends List<ItemVariations>> variations) {
        Utils.checkNotNull(variations, "variations");
        this.variations = variations;
        return this;
    }

    public ItemInput withModifierGroups(List<ItemModifierGroups> modifierGroups) {
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        this.modifierGroups = Optional.ofNullable(modifierGroups);
        return this;
    }

    public ItemInput withModifierGroups(Optional<? extends List<ItemModifierGroups>> modifierGroups) {
        Utils.checkNotNull(modifierGroups, "modifierGroups");
        this.modifierGroups = modifierGroups;
        return this;
    }

    public ItemInput withAvailable(boolean available) {
        Utils.checkNotNull(available, "available");
        this.available = JsonNullable.of(available);
        return this;
    }

    public ItemInput withAvailable(JsonNullable<Boolean> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    public ItemInput withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = JsonNullable.of(hidden);
        return this;
    }

    public ItemInput withHidden(JsonNullable<Boolean> hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ItemInput withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ItemInput withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ItemInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ItemInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ItemInput other = (ItemInput) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.abbreviation, other.abbreviation) &&
            Objects.deepEquals(this.productType, other.productType) &&
            Objects.deepEquals(this.priceAmount, other.priceAmount) &&
            Objects.deepEquals(this.pricingType, other.pricingType) &&
            Objects.deepEquals(this.priceCurrency, other.priceCurrency) &&
            Objects.deepEquals(this.cost, other.cost) &&
            Objects.deepEquals(this.taxIds, other.taxIds) &&
            Objects.deepEquals(this.isRevenue, other.isRevenue) &&
            Objects.deepEquals(this.useDefaultTaxRates, other.useDefaultTaxRates) &&
            Objects.deepEquals(this.absentAtLocationIds, other.absentAtLocationIds) &&
            Objects.deepEquals(this.presentAtAllLocations, other.presentAtAllLocations) &&
            Objects.deepEquals(this.availableForPickup, other.availableForPickup) &&
            Objects.deepEquals(this.availableOnline, other.availableOnline) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.variations, other.variations) &&
            Objects.deepEquals(this.modifierGroups, other.modifierGroups) &&
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.hidden, other.hidden) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            idempotencyKey,
            name,
            description,
            abbreviation,
            productType,
            priceAmount,
            pricingType,
            priceCurrency,
            cost,
            taxIds,
            isRevenue,
            useDefaultTaxRates,
            absentAtLocationIds,
            presentAtAllLocations,
            availableForPickup,
            availableOnline,
            sku,
            code,
            categories,
            options,
            variations,
            modifierGroups,
            available,
            hidden,
            deleted,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ItemInput.class,
                "id", id,
                "idempotencyKey", idempotencyKey,
                "name", name,
                "description", description,
                "abbreviation", abbreviation,
                "productType", productType,
                "priceAmount", priceAmount,
                "pricingType", pricingType,
                "priceCurrency", priceCurrency,
                "cost", cost,
                "taxIds", taxIds,
                "isRevenue", isRevenue,
                "useDefaultTaxRates", useDefaultTaxRates,
                "absentAtLocationIds", absentAtLocationIds,
                "presentAtAllLocations", presentAtAllLocations,
                "availableForPickup", availableForPickup,
                "availableOnline", availableOnline,
                "sku", sku,
                "code", code,
                "categories", categories,
                "options", options,
                "variations", variations,
                "modifierGroups", modifierGroups,
                "available", available,
                "hidden", hidden,
                "deleted", deleted,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private String name;
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> abbreviation = Optional.empty();
 
        private Optional<? extends ProductType> productType = Optional.empty();
 
        private Optional<Double> priceAmount = Optional.empty();
 
        private Optional<? extends PricingType> pricingType = Optional.empty();
 
        private JsonNullable<? extends Currency> priceCurrency = JsonNullable.undefined();
 
        private Optional<Double> cost = Optional.empty();
 
        private Optional<? extends List<String>> taxIds = Optional.empty();
 
        private Optional<Boolean> isRevenue = Optional.empty();
 
        private Optional<Boolean> useDefaultTaxRates = Optional.empty();
 
        private Optional<? extends List<String>> absentAtLocationIds = Optional.empty();
 
        private Optional<Boolean> presentAtAllLocations = Optional.empty();
 
        private Optional<Boolean> availableForPickup = Optional.empty();
 
        private Optional<Boolean> availableOnline = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<String> code = Optional.empty();
 
        private Optional<? extends List<ItemCategoriesInput>> categories = Optional.empty();
 
        private Optional<? extends List<ItemOptions>> options = Optional.empty();
 
        private Optional<? extends List<ItemVariations>> variations = Optional.empty();
 
        private Optional<? extends List<ItemModifierGroups>> modifierGroups = Optional.empty();
 
        private JsonNullable<Boolean> available = JsonNullable.undefined();
 
        private JsonNullable<Boolean> hidden = JsonNullable.undefined();
 
        private JsonNullable<Boolean> deleted = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder abbreviation(String abbreviation) {
            Utils.checkNotNull(abbreviation, "abbreviation");
            this.abbreviation = Optional.ofNullable(abbreviation);
            return this;
        }

        public Builder abbreviation(Optional<String> abbreviation) {
            Utils.checkNotNull(abbreviation, "abbreviation");
            this.abbreviation = abbreviation;
            return this;
        }

        public Builder productType(ProductType productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        public Builder productType(Optional<? extends ProductType> productType) {
            Utils.checkNotNull(productType, "productType");
            this.productType = productType;
            return this;
        }

        public Builder priceAmount(double priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = Optional.ofNullable(priceAmount);
            return this;
        }

        public Builder priceAmount(Optional<Double> priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = priceAmount;
            return this;
        }

        public Builder pricingType(PricingType pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        public Builder pricingType(Optional<? extends PricingType> pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = pricingType;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(Currency priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = JsonNullable.of(priceCurrency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(JsonNullable<? extends Currency> priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = priceCurrency;
            return this;
        }

        public Builder cost(double cost) {
            Utils.checkNotNull(cost, "cost");
            this.cost = Optional.ofNullable(cost);
            return this;
        }

        public Builder cost(Optional<Double> cost) {
            Utils.checkNotNull(cost, "cost");
            this.cost = cost;
            return this;
        }

        /**
         * A list of Tax IDs for the product.
         */
        public Builder taxIds(List<String> taxIds) {
            Utils.checkNotNull(taxIds, "taxIds");
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        /**
         * A list of Tax IDs for the product.
         */
        public Builder taxIds(Optional<? extends List<String>> taxIds) {
            Utils.checkNotNull(taxIds, "taxIds");
            this.taxIds = taxIds;
            return this;
        }

        /**
         * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
         */
        public Builder isRevenue(boolean isRevenue) {
            Utils.checkNotNull(isRevenue, "isRevenue");
            this.isRevenue = Optional.ofNullable(isRevenue);
            return this;
        }

        /**
         * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
         */
        public Builder isRevenue(Optional<Boolean> isRevenue) {
            Utils.checkNotNull(isRevenue, "isRevenue");
            this.isRevenue = isRevenue;
            return this;
        }

        public Builder useDefaultTaxRates(boolean useDefaultTaxRates) {
            Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
            this.useDefaultTaxRates = Optional.ofNullable(useDefaultTaxRates);
            return this;
        }

        public Builder useDefaultTaxRates(Optional<Boolean> useDefaultTaxRates) {
            Utils.checkNotNull(useDefaultTaxRates, "useDefaultTaxRates");
            this.useDefaultTaxRates = useDefaultTaxRates;
            return this;
        }

        /**
         * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
         */
        public Builder absentAtLocationIds(List<String> absentAtLocationIds) {
            Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
            this.absentAtLocationIds = Optional.ofNullable(absentAtLocationIds);
            return this;
        }

        /**
         * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
         */
        public Builder absentAtLocationIds(Optional<? extends List<String>> absentAtLocationIds) {
            Utils.checkNotNull(absentAtLocationIds, "absentAtLocationIds");
            this.absentAtLocationIds = absentAtLocationIds;
            return this;
        }

        public Builder presentAtAllLocations(boolean presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
            return this;
        }

        public Builder presentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = presentAtAllLocations;
            return this;
        }

        public Builder availableForPickup(boolean availableForPickup) {
            Utils.checkNotNull(availableForPickup, "availableForPickup");
            this.availableForPickup = Optional.ofNullable(availableForPickup);
            return this;
        }

        public Builder availableForPickup(Optional<Boolean> availableForPickup) {
            Utils.checkNotNull(availableForPickup, "availableForPickup");
            this.availableForPickup = availableForPickup;
            return this;
        }

        public Builder availableOnline(boolean availableOnline) {
            Utils.checkNotNull(availableOnline, "availableOnline");
            this.availableOnline = Optional.ofNullable(availableOnline);
            return this;
        }

        public Builder availableOnline(Optional<Boolean> availableOnline) {
            Utils.checkNotNull(availableOnline, "availableOnline");
            this.availableOnline = availableOnline;
            return this;
        }

        /**
         * SKU of the item
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * SKU of the item
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * Product code, e.g. UPC or EAN
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * Product code, e.g. UPC or EAN
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder categories(List<ItemCategoriesInput> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        public Builder categories(Optional<? extends List<ItemCategoriesInput>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * List of options pertaining to this item's attribute variation
         */
        public Builder options(List<ItemOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * List of options pertaining to this item's attribute variation
         */
        public Builder options(Optional<? extends List<ItemOptions>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder variations(List<ItemVariations> variations) {
            Utils.checkNotNull(variations, "variations");
            this.variations = Optional.ofNullable(variations);
            return this;
        }

        public Builder variations(Optional<? extends List<ItemVariations>> variations) {
            Utils.checkNotNull(variations, "variations");
            this.variations = variations;
            return this;
        }

        public Builder modifierGroups(List<ItemModifierGroups> modifierGroups) {
            Utils.checkNotNull(modifierGroups, "modifierGroups");
            this.modifierGroups = Optional.ofNullable(modifierGroups);
            return this;
        }

        public Builder modifierGroups(Optional<? extends List<ItemModifierGroups>> modifierGroups) {
            Utils.checkNotNull(modifierGroups, "modifierGroups");
            this.modifierGroups = modifierGroups;
            return this;
        }

        public Builder available(boolean available) {
            Utils.checkNotNull(available, "available");
            this.available = JsonNullable.of(available);
            return this;
        }

        public Builder available(JsonNullable<Boolean> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = JsonNullable.of(hidden);
            return this;
        }

        public Builder hidden(JsonNullable<Boolean> hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public ItemInput build() {
            return new ItemInput(
                id,
                idempotencyKey,
                name,
                description,
                abbreviation,
                productType,
                priceAmount,
                pricingType,
                priceCurrency,
                cost,
                taxIds,
                isRevenue,
                useDefaultTaxRates,
                absentAtLocationIds,
                presentAtAllLocations,
                availableForPickup,
                availableOnline,
                sku,
                code,
                categories,
                options,
                variations,
                modifierGroups,
                available,
                hidden,
                deleted,
                passThrough);
        }
    }
}

