/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ItemVariations {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private JsonNullable<Double> sequence;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    private Optional<? extends ItemPricingType> pricingType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_amount")
    private Optional<Double> priceAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_currency")
    private JsonNullable<? extends Currency> priceCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockable")
    private Optional<Boolean> stockable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    private Optional<Boolean> presentAtAllLocations;

    @JsonCreator
    public ItemVariations(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("sequence") JsonNullable<Double> sequence,
            @JsonProperty("pricing_type") Optional<? extends ItemPricingType> pricingType,
            @JsonProperty("price_amount") Optional<Double> priceAmount,
            @JsonProperty("price_currency") JsonNullable<? extends Currency> priceCurrency,
            @JsonProperty("stockable") Optional<Boolean> stockable,
            @JsonProperty("present_at_all_locations") Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(sequence, "sequence");
        Utils.checkNotNull(pricingType, "pricingType");
        Utils.checkNotNull(priceAmount, "priceAmount");
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        Utils.checkNotNull(stockable, "stockable");
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.name = name;
        this.sku = sku;
        this.sequence = sequence;
        this.pricingType = pricingType;
        this.priceAmount = priceAmount;
        this.priceCurrency = priceCurrency;
        this.stockable = stockable;
        this.presentAtAllLocations = presentAtAllLocations;
    }
    
    public ItemVariations() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    @JsonIgnore
    public JsonNullable<Double> sequence() {
        return sequence;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ItemPricingType> pricingType() {
        return (Optional<ItemPricingType>) pricingType;
    }

    @JsonIgnore
    public Optional<Double> priceAmount() {
        return priceAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> priceCurrency() {
        return (JsonNullable<Currency>) priceCurrency;
    }

    @JsonIgnore
    public Optional<Boolean> stockable() {
        return stockable;
    }

    @JsonIgnore
    public Optional<Boolean> presentAtAllLocations() {
        return presentAtAllLocations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ItemVariations withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ItemVariations withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ItemVariations withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    public ItemVariations withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public ItemVariations withSequence(double sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = JsonNullable.of(sequence);
        return this;
    }

    public ItemVariations withSequence(JsonNullable<Double> sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = sequence;
        return this;
    }

    public ItemVariations withPricingType(ItemPricingType pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = Optional.ofNullable(pricingType);
        return this;
    }

    public ItemVariations withPricingType(Optional<? extends ItemPricingType> pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = pricingType;
        return this;
    }

    public ItemVariations withPriceAmount(double priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = Optional.ofNullable(priceAmount);
        return this;
    }

    public ItemVariations withPriceAmount(Optional<Double> priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = priceAmount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ItemVariations withPriceCurrency(Currency priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = JsonNullable.of(priceCurrency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ItemVariations withPriceCurrency(JsonNullable<? extends Currency> priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = priceCurrency;
        return this;
    }

    public ItemVariations withStockable(boolean stockable) {
        Utils.checkNotNull(stockable, "stockable");
        this.stockable = Optional.ofNullable(stockable);
        return this;
    }

    public ItemVariations withStockable(Optional<Boolean> stockable) {
        Utils.checkNotNull(stockable, "stockable");
        this.stockable = stockable;
        return this;
    }

    public ItemVariations withPresentAtAllLocations(boolean presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
        return this;
    }

    public ItemVariations withPresentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ItemVariations other = (ItemVariations) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.sequence, other.sequence) &&
            Objects.deepEquals(this.pricingType, other.pricingType) &&
            Objects.deepEquals(this.priceAmount, other.priceAmount) &&
            Objects.deepEquals(this.priceCurrency, other.priceCurrency) &&
            Objects.deepEquals(this.stockable, other.stockable) &&
            Objects.deepEquals(this.presentAtAllLocations, other.presentAtAllLocations);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            sku,
            sequence,
            pricingType,
            priceAmount,
            priceCurrency,
            stockable,
            presentAtAllLocations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ItemVariations.class,
                "name", name,
                "sku", sku,
                "sequence", sequence,
                "pricingType", pricingType,
                "priceAmount", priceAmount,
                "priceCurrency", priceCurrency,
                "stockable", stockable,
                "presentAtAllLocations", presentAtAllLocations);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private JsonNullable<Double> sequence = JsonNullable.undefined();
 
        private Optional<? extends ItemPricingType> pricingType = Optional.empty();
 
        private Optional<Double> priceAmount = Optional.empty();
 
        private JsonNullable<? extends Currency> priceCurrency = JsonNullable.undefined();
 
        private Optional<Boolean> stockable = Optional.empty();
 
        private Optional<Boolean> presentAtAllLocations = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder sequence(double sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = JsonNullable.of(sequence);
            return this;
        }

        public Builder sequence(JsonNullable<Double> sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = sequence;
            return this;
        }

        public Builder pricingType(ItemPricingType pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        public Builder pricingType(Optional<? extends ItemPricingType> pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = pricingType;
            return this;
        }

        public Builder priceAmount(double priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = Optional.ofNullable(priceAmount);
            return this;
        }

        public Builder priceAmount(Optional<Double> priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = priceAmount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(Currency priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = JsonNullable.of(priceCurrency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(JsonNullable<? extends Currency> priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = priceCurrency;
            return this;
        }

        public Builder stockable(boolean stockable) {
            Utils.checkNotNull(stockable, "stockable");
            this.stockable = Optional.ofNullable(stockable);
            return this;
        }

        public Builder stockable(Optional<Boolean> stockable) {
            Utils.checkNotNull(stockable, "stockable");
            this.stockable = stockable;
            return this;
        }

        public Builder presentAtAllLocations(boolean presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
            return this;
        }

        public Builder presentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = presentAtAllLocations;
            return this;
        }
        
        public ItemVariations build() {
            return new ItemVariations(
                name,
                sku,
                sequence,
                pricingType,
                priceAmount,
                priceCurrency,
                stockable,
                presentAtAllLocations);
        }
    }
}

