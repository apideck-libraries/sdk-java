/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Job {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private JsonNullable<String> slug;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * Sequence in relation to other jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private Long sequence;

    /**
     * The visibility of the job
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    private Visibility visibility;

    /**
     * The status of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JobStatus status;

    /**
     * The code of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private String code;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_terms")
    private JsonNullable<EmploymentTerms> employmentTerms;

    /**
     * Level of experience required for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experience")
    private String experience;

    /**
     * Specifies the location for the job posting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private JsonNullable<String> location;

    /**
     * Specifies whether the posting is for a remote job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote")
    private JsonNullable<Boolean> remote;

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requisition_id")
    private String requisitionId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Department department;

    /**
     * Details of the branch for which the job is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Branch branch;

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiters")
    private JsonNullable<List<String>> recruiters;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiring_managers")
    private List<String> hiringManagers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<List<String>> followers;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_html")
    private JsonNullable<String> descriptionHtml;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    private List<Blocks> blocks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing")
    private JsonNullable<String> closing;

    /**
     * The closing section of the job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_html")
    private JsonNullable<String> closingHtml;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_date")
    private JsonNullable<LocalDate> closingDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salary")
    private Salary salary;

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    @Deprecated
    private JsonNullable<String> url;

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_portal_url")
    @Deprecated
    private JsonNullable<String> jobPortalUrl;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    @Deprecated
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    private List<JobLinks> links;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Boolean confidential;

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_to_employees")
    private Boolean availableToEmployees;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published_at")
    private JsonNullable<OffsetDateTime> publishedAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Job(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("slug") @Nullable JsonNullable<String> slug,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("sequence") @Nullable Long sequence,
            @JsonProperty("visibility") @Nullable Visibility visibility,
            @JsonProperty("status") @Nullable JobStatus status,
            @JsonProperty("code") @Nullable String code,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("employment_terms") @Nullable JsonNullable<EmploymentTerms> employmentTerms,
            @JsonProperty("experience") @Nullable String experience,
            @JsonProperty("location") @Nullable JsonNullable<String> location,
            @JsonProperty("remote") @Nullable JsonNullable<Boolean> remote,
            @JsonProperty("requisition_id") @Nullable String requisitionId,
            @JsonProperty("department") @Nullable Department department,
            @JsonProperty("branch") @Nullable Branch branch,
            @JsonProperty("recruiters") @Nullable JsonNullable<List<String>> recruiters,
            @JsonProperty("hiring_managers") @Nullable List<String> hiringManagers,
            @JsonProperty("followers") @Nullable JsonNullable<List<String>> followers,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("description_html") @Nullable JsonNullable<String> descriptionHtml,
            @JsonProperty("blocks") @Nullable List<Blocks> blocks,
            @JsonProperty("closing") @Nullable JsonNullable<String> closing,
            @JsonProperty("closing_html") @Nullable JsonNullable<String> closingHtml,
            @JsonProperty("closing_date") @Nullable JsonNullable<LocalDate> closingDate,
            @JsonProperty("salary") @Nullable Salary salary,
            @JsonProperty("url") @Nullable JsonNullable<String> url,
            @JsonProperty("job_portal_url") @Nullable JsonNullable<String> jobPortalUrl,
            @JsonProperty("record_url") @Nullable JsonNullable<String> recordUrl,
            @JsonProperty("links") @Nullable List<JobLinks> links,
            @JsonProperty("confidential") @Nullable Boolean confidential,
            @JsonProperty("available_to_employees") @Nullable Boolean availableToEmployees,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("deleted") @Nullable JsonNullable<Boolean> deleted,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("published_at") @Nullable JsonNullable<OffsetDateTime> publishedAt,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt) {
        this.id = id;
        this.slug = Optional.ofNullable(slug)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.sequence = sequence;
        this.visibility = visibility;
        this.status = status;
        this.code = code;
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.employmentTerms = Optional.ofNullable(employmentTerms)
            .orElse(JsonNullable.undefined());
        this.experience = experience;
        this.location = Optional.ofNullable(location)
            .orElse(JsonNullable.undefined());
        this.remote = Optional.ofNullable(remote)
            .orElse(JsonNullable.undefined());
        this.requisitionId = requisitionId;
        this.department = department;
        this.branch = branch;
        this.recruiters = Optional.ofNullable(recruiters)
            .orElse(JsonNullable.undefined());
        this.hiringManagers = hiringManagers;
        this.followers = Optional.ofNullable(followers)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.descriptionHtml = Optional.ofNullable(descriptionHtml)
            .orElse(JsonNullable.undefined());
        this.blocks = blocks;
        this.closing = Optional.ofNullable(closing)
            .orElse(JsonNullable.undefined());
        this.closingHtml = Optional.ofNullable(closingHtml)
            .orElse(JsonNullable.undefined());
        this.closingDate = Optional.ofNullable(closingDate)
            .orElse(JsonNullable.undefined());
        this.salary = salary;
        this.url = Optional.ofNullable(url)
            .orElse(JsonNullable.undefined());
        this.jobPortalUrl = Optional.ofNullable(jobPortalUrl)
            .orElse(JsonNullable.undefined());
        this.recordUrl = Optional.ofNullable(recordUrl)
            .orElse(JsonNullable.undefined());
        this.links = links;
        this.confidential = confidential;
        this.availableToEmployees = availableToEmployees;
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.customFields = customFields;
        this.deleted = Optional.ofNullable(deleted)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.publishedAt = Optional.ofNullable(publishedAt)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
    }
    
    public Job() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    public JsonNullable<String> slug() {
        return this.slug;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * Sequence in relation to other jobs.
     */
    public Optional<Long> sequence() {
        return Optional.ofNullable(this.sequence);
    }

    /**
     * The visibility of the job
     */
    public Optional<Visibility> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    /**
     * The status of the job.
     */
    public Optional<JobStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The code of the job.
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    public JsonNullable<EmploymentTerms> employmentTerms() {
        return this.employmentTerms;
    }

    /**
     * Level of experience required for the job role.
     */
    public Optional<String> experience() {
        return Optional.ofNullable(this.experience);
    }

    /**
     * Specifies the location for the job posting.
     */
    public JsonNullable<String> location() {
        return this.location;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public JsonNullable<Boolean> remote() {
        return this.remote;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    public Optional<String> requisitionId() {
        return Optional.ofNullable(this.requisitionId);
    }

    public Optional<Department> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * Details of the branch for which the job is created.
     */
    public Optional<Branch> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    public JsonNullable<List<String>> recruiters() {
        return this.recruiters;
    }

    public Optional<List<String>> hiringManagers() {
        return Optional.ofNullable(this.hiringManagers);
    }

    public JsonNullable<List<String>> followers() {
        return this.followers;
    }

    /**
     * A description of the object.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The job description in HTML format
     */
    public JsonNullable<String> descriptionHtml() {
        return this.descriptionHtml;
    }

    public Optional<List<Blocks>> blocks() {
        return Optional.ofNullable(this.blocks);
    }

    public JsonNullable<String> closing() {
        return this.closing;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public JsonNullable<String> closingHtml() {
        return this.closingHtml;
    }

    public JsonNullable<LocalDate> closingDate() {
        return this.closingDate;
    }

    public Optional<Salary> salary() {
        return Optional.ofNullable(this.salary);
    }

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> url() {
        return this.url;
    }

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> jobPortalUrl() {
        return this.jobPortalUrl;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> recordUrl() {
        return this.recordUrl;
    }

    public Optional<List<JobLinks>> links() {
        return Optional.ofNullable(this.links);
    }

    public Optional<Boolean> confidential() {
        return Optional.ofNullable(this.confidential);
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Optional<Boolean> availableToEmployees() {
        return Optional.ofNullable(this.availableToEmployees);
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<Boolean> deleted() {
        return this.deleted;
    }

    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    public JsonNullable<OffsetDateTime> publishedAt() {
        return this.publishedAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Job withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    public Job withSlug(@Nullable String slug) {
        this.slug = JsonNullable.of(slug);
        return this;
    }


    /**
     * The job title of the person.
     */
    public Job withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * Sequence in relation to other jobs.
     */
    public Job withSequence(@Nullable Long sequence) {
        this.sequence = sequence;
        return this;
    }


    /**
     * The visibility of the job
     */
    public Job withVisibility(@Nullable Visibility visibility) {
        this.visibility = visibility;
        return this;
    }


    /**
     * The status of the job.
     */
    public Job withStatus(@Nullable JobStatus status) {
        this.status = status;
        return this;
    }


    /**
     * The code of the job.
     */
    public Job withCode(@Nullable String code) {
        this.code = code;
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Job withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    public Job withEmploymentTerms(@Nullable EmploymentTerms employmentTerms) {
        this.employmentTerms = JsonNullable.of(employmentTerms);
        return this;
    }


    /**
     * Level of experience required for the job role.
     */
    public Job withExperience(@Nullable String experience) {
        this.experience = experience;
        return this;
    }


    /**
     * Specifies the location for the job posting.
     */
    public Job withLocation(@Nullable String location) {
        this.location = JsonNullable.of(location);
        return this;
    }


    /**
     * Specifies whether the posting is for a remote job.
     */
    public Job withRemote(@Nullable Boolean remote) {
        this.remote = JsonNullable.of(remote);
        return this;
    }


    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    public Job withRequisitionId(@Nullable String requisitionId) {
        this.requisitionId = requisitionId;
        return this;
    }


    public Job withDepartment(@Nullable Department department) {
        this.department = department;
        return this;
    }


    /**
     * Details of the branch for which the job is created.
     */
    public Job withBranch(@Nullable Branch branch) {
        this.branch = branch;
        return this;
    }


    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    public Job withRecruiters(@Nullable List<String> recruiters) {
        this.recruiters = JsonNullable.of(recruiters);
        return this;
    }


    public Job withHiringManagers(@Nullable List<String> hiringManagers) {
        this.hiringManagers = hiringManagers;
        return this;
    }


    public Job withFollowers(@Nullable List<String> followers) {
        this.followers = JsonNullable.of(followers);
        return this;
    }


    /**
     * A description of the object.
     */
    public Job withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The job description in HTML format
     */
    public Job withDescriptionHtml(@Nullable String descriptionHtml) {
        this.descriptionHtml = JsonNullable.of(descriptionHtml);
        return this;
    }


    public Job withBlocks(@Nullable List<Blocks> blocks) {
        this.blocks = blocks;
        return this;
    }


    public Job withClosing(@Nullable String closing) {
        this.closing = JsonNullable.of(closing);
        return this;
    }


    /**
     * The closing section of the job description in HTML format
     */
    public Job withClosingHtml(@Nullable String closingHtml) {
        this.closingHtml = JsonNullable.of(closingHtml);
        return this;
    }


    public Job withClosingDate(@Nullable LocalDate closingDate) {
        this.closingDate = JsonNullable.of(closingDate);
        return this;
    }


    public Job withSalary(@Nullable Salary salary) {
        this.salary = salary;
        return this;
    }


    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withUrl(@Nullable String url) {
        this.url = JsonNullable.of(url);
        return this;
    }


    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withJobPortalUrl(@Nullable String jobPortalUrl) {
        this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withRecordUrl(@Nullable String recordUrl) {
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }


    public Job withLinks(@Nullable List<JobLinks> links) {
        this.links = links;
        return this;
    }


    public Job withConfidential(@Nullable Boolean confidential) {
        this.confidential = confidential;
        return this;
    }


    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Job withAvailableToEmployees(@Nullable Boolean availableToEmployees) {
        this.availableToEmployees = availableToEmployees;
        return this;
    }


    public Job withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    public Job withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Job withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * Flag to indicate if the object is deleted.
     */
    public Job withDeleted(@Nullable Boolean deleted) {
        this.deleted = JsonNullable.of(deleted);
        return this;
    }


    public Job withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    public Job withPublishedAt(@Nullable OffsetDateTime publishedAt) {
        this.publishedAt = JsonNullable.of(publishedAt);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Job withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Job withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Job withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Job withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Job withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Job other = (Job) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.sequence, other.sequence) &&
            Utils.enhancedDeepEquals(this.visibility, other.visibility) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.employmentTerms, other.employmentTerms) &&
            Utils.enhancedDeepEquals(this.experience, other.experience) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.remote, other.remote) &&
            Utils.enhancedDeepEquals(this.requisitionId, other.requisitionId) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.branch, other.branch) &&
            Utils.enhancedDeepEquals(this.recruiters, other.recruiters) &&
            Utils.enhancedDeepEquals(this.hiringManagers, other.hiringManagers) &&
            Utils.enhancedDeepEquals(this.followers, other.followers) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.descriptionHtml, other.descriptionHtml) &&
            Utils.enhancedDeepEquals(this.blocks, other.blocks) &&
            Utils.enhancedDeepEquals(this.closing, other.closing) &&
            Utils.enhancedDeepEquals(this.closingHtml, other.closingHtml) &&
            Utils.enhancedDeepEquals(this.closingDate, other.closingDate) &&
            Utils.enhancedDeepEquals(this.salary, other.salary) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.jobPortalUrl, other.jobPortalUrl) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.links, other.links) &&
            Utils.enhancedDeepEquals(this.confidential, other.confidential) &&
            Utils.enhancedDeepEquals(this.availableToEmployees, other.availableToEmployees) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.publishedAt, other.publishedAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, slug, title,
            sequence, visibility, status,
            code, language, employmentTerms,
            experience, location, remote,
            requisitionId, department, branch,
            recruiters, hiringManagers, followers,
            description, descriptionHtml, blocks,
            closing, closingHtml, closingDate,
            salary, url, jobPortalUrl,
            recordUrl, links, confidential,
            availableToEmployees, tags, addresses,
            customFields, deleted, ownerId,
            publishedAt, customMappings, updatedBy,
            createdBy, updatedAt, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Job.class,
                "id", id,
                "slug", slug,
                "title", title,
                "sequence", sequence,
                "visibility", visibility,
                "status", status,
                "code", code,
                "language", language,
                "employmentTerms", employmentTerms,
                "experience", experience,
                "location", location,
                "remote", remote,
                "requisitionId", requisitionId,
                "department", department,
                "branch", branch,
                "recruiters", recruiters,
                "hiringManagers", hiringManagers,
                "followers", followers,
                "description", description,
                "descriptionHtml", descriptionHtml,
                "blocks", blocks,
                "closing", closing,
                "closingHtml", closingHtml,
                "closingDate", closingDate,
                "salary", salary,
                "url", url,
                "jobPortalUrl", jobPortalUrl,
                "recordUrl", recordUrl,
                "links", links,
                "confidential", confidential,
                "availableToEmployees", availableToEmployees,
                "tags", tags,
                "addresses", addresses,
                "customFields", customFields,
                "deleted", deleted,
                "ownerId", ownerId,
                "publishedAt", publishedAt,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> slug;

        private JsonNullable<String> title;

        private Long sequence;

        private Visibility visibility;

        private JobStatus status;

        private String code;

        private JsonNullable<String> language;

        private JsonNullable<EmploymentTerms> employmentTerms;

        private String experience;

        private JsonNullable<String> location;

        private JsonNullable<Boolean> remote;

        private String requisitionId;

        private Department department;

        private Branch branch;

        private JsonNullable<List<String>> recruiters;

        private List<String> hiringManagers;

        private JsonNullable<List<String>> followers;

        private JsonNullable<String> description;

        private JsonNullable<String> descriptionHtml;

        private List<Blocks> blocks;

        private JsonNullable<String> closing;

        private JsonNullable<String> closingHtml;

        private JsonNullable<LocalDate> closingDate;

        private Salary salary;

        @Deprecated
        private JsonNullable<String> url;

        @Deprecated
        private JsonNullable<String> jobPortalUrl;

        @Deprecated
        private JsonNullable<String> recordUrl;

        private List<JobLinks> links;

        private Boolean confidential;

        private Boolean availableToEmployees;

        private JsonNullable<List<String>> tags;

        private List<Address> addresses;

        private List<CustomField> customFields;

        private JsonNullable<Boolean> deleted;

        private JsonNullable<String> ownerId;

        private JsonNullable<OffsetDateTime> publishedAt;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder slug(@Nullable String slug) {
            this.slug = JsonNullable.of(slug);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Sequence in relation to other jobs.
         */
        public Builder sequence(@Nullable Long sequence) {
            this.sequence = sequence;
            return this;
        }

        /**
         * The visibility of the job
         */
        public Builder visibility(@Nullable Visibility visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * The status of the job.
         */
        public Builder status(@Nullable JobStatus status) {
            this.status = status;
            return this;
        }

        /**
         * The code of the job.
         */
        public Builder code(@Nullable String code) {
            this.code = code;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        public Builder employmentTerms(@Nullable EmploymentTerms employmentTerms) {
            this.employmentTerms = JsonNullable.of(employmentTerms);
            return this;
        }

        /**
         * Level of experience required for the job role.
         */
        public Builder experience(@Nullable String experience) {
            this.experience = experience;
            return this;
        }

        /**
         * Specifies the location for the job posting.
         */
        public Builder location(@Nullable String location) {
            this.location = JsonNullable.of(location);
            return this;
        }

        /**
         * Specifies whether the posting is for a remote job.
         */
        public Builder remote(@Nullable Boolean remote) {
            this.remote = JsonNullable.of(remote);
            return this;
        }

        /**
         * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
         */
        public Builder requisitionId(@Nullable String requisitionId) {
            this.requisitionId = requisitionId;
            return this;
        }

        public Builder department(@Nullable Department department) {
            this.department = department;
            return this;
        }

        /**
         * Details of the branch for which the job is created.
         */
        public Builder branch(@Nullable Branch branch) {
            this.branch = branch;
            return this;
        }

        /**
         * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
         */
        public Builder recruiters(@Nullable List<String> recruiters) {
            this.recruiters = JsonNullable.of(recruiters);
            return this;
        }

        public Builder hiringManagers(@Nullable List<String> hiringManagers) {
            this.hiringManagers = hiringManagers;
            return this;
        }

        public Builder followers(@Nullable List<String> followers) {
            this.followers = JsonNullable.of(followers);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The job description in HTML format
         */
        public Builder descriptionHtml(@Nullable String descriptionHtml) {
            this.descriptionHtml = JsonNullable.of(descriptionHtml);
            return this;
        }

        public Builder blocks(@Nullable List<Blocks> blocks) {
            this.blocks = blocks;
            return this;
        }

        public Builder closing(@Nullable String closing) {
            this.closing = JsonNullable.of(closing);
            return this;
        }

        /**
         * The closing section of the job description in HTML format
         */
        public Builder closingHtml(@Nullable String closingHtml) {
            this.closingHtml = JsonNullable.of(closingHtml);
            return this;
        }

        public Builder closingDate(@Nullable LocalDate closingDate) {
            this.closingDate = JsonNullable.of(closingDate);
            return this;
        }

        public Builder salary(@Nullable Salary salary) {
            this.salary = salary;
            return this;
        }

        /**
         * URL of the job description
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder url(@Nullable String url) {
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * URL of the job portal
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobPortalUrl(@Nullable String jobPortalUrl) {
            this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder recordUrl(@Nullable String recordUrl) {
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder links(@Nullable List<JobLinks> links) {
            this.links = links;
            return this;
        }

        public Builder confidential(@Nullable Boolean confidential) {
            this.confidential = confidential;
            return this;
        }

        /**
         * Specifies whether an employee of the organization can apply for the job.
         */
        public Builder availableToEmployees(@Nullable Boolean availableToEmployees) {
            this.availableToEmployees = availableToEmployees;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder publishedAt(@Nullable OffsetDateTime publishedAt) {
            this.publishedAt = JsonNullable.of(publishedAt);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        public Job build() {
            return new Job(
                id, slug, title,
                sequence, visibility, status,
                code, language, employmentTerms,
                experience, location, remote,
                requisitionId, department, branch,
                recruiters, hiringManagers, followers,
                description, descriptionHtml, blocks,
                closing, closingHtml, closingDate,
                salary, url, jobPortalUrl,
                recordUrl, links, confidential,
                availableToEmployees, tags, addresses,
                customFields, deleted, ownerId,
                publishedAt, customMappings, updatedBy,
                createdBy, updatedAt, createdAt);
        }

    }
}
