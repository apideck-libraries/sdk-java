/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Job {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private JsonNullable<String> slug;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * Sequence in relation to other jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private Optional<Long> sequence;

    /**
     * The visibility of the job
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    private Optional<? extends Visibility> visibility;

    /**
     * The status of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends JobStatus> status;

    /**
     * The code of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_terms")
    private JsonNullable<? extends EmploymentTerms> employmentTerms;

    /**
     * Level of experience required for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experience")
    private Optional<String> experience;

    /**
     * Specifies the location for the job posting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private JsonNullable<String> location;

    /**
     * Specifies whether the posting is for a remote job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote")
    private JsonNullable<Boolean> remote;

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
     * alphanumeric naming conventions unique to your company's internal processes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requisition_id")
    private Optional<String> requisitionId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<? extends Department> department;

    /**
     * Details of the branch for which the job is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends Branch> branch;

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen
     * qualified applicant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiters")
    private JsonNullable<? extends List<String>> recruiters;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiring_managers")
    private Optional<? extends List<String>> hiringManagers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends List<String>> followers;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_html")
    private JsonNullable<String> descriptionHtml;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    private Optional<? extends List<Blocks>> blocks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing")
    private JsonNullable<String> closing;

    /**
     * The closing section of the job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_html")
    private JsonNullable<String> closingHtml;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_date")
    private JsonNullable<LocalDate> closingDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salary")
    private Optional<? extends Salary> salary;

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    @Deprecated
    private JsonNullable<String> url;

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_portal_url")
    @Deprecated
    private JsonNullable<String> jobPortalUrl;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    @Deprecated
    private JsonNullable<String> recordUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    private Optional<? extends List<JobLinks>> links;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<Boolean> confidential;

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_to_employees")
    private Optional<Boolean> availableToEmployees;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published_at")
    private JsonNullable<OffsetDateTime> publishedAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Job(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("slug") JsonNullable<String> slug,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("sequence") Optional<Long> sequence,
            @JsonProperty("visibility") Optional<? extends Visibility> visibility,
            @JsonProperty("status") Optional<? extends JobStatus> status,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("employment_terms") JsonNullable<? extends EmploymentTerms> employmentTerms,
            @JsonProperty("experience") Optional<String> experience,
            @JsonProperty("location") JsonNullable<String> location,
            @JsonProperty("remote") JsonNullable<Boolean> remote,
            @JsonProperty("requisition_id") Optional<String> requisitionId,
            @JsonProperty("department") Optional<? extends Department> department,
            @JsonProperty("branch") Optional<? extends Branch> branch,
            @JsonProperty("recruiters") JsonNullable<? extends List<String>> recruiters,
            @JsonProperty("hiring_managers") Optional<? extends List<String>> hiringManagers,
            @JsonProperty("followers") JsonNullable<? extends List<String>> followers,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("description_html") JsonNullable<String> descriptionHtml,
            @JsonProperty("blocks") Optional<? extends List<Blocks>> blocks,
            @JsonProperty("closing") JsonNullable<String> closing,
            @JsonProperty("closing_html") JsonNullable<String> closingHtml,
            @JsonProperty("closing_date") JsonNullable<LocalDate> closingDate,
            @JsonProperty("salary") Optional<? extends Salary> salary,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("job_portal_url") JsonNullable<String> jobPortalUrl,
            @JsonProperty("record_url") JsonNullable<String> recordUrl,
            @JsonProperty("links") Optional<? extends List<JobLinks>> links,
            @JsonProperty("confidential") Optional<Boolean> confidential,
            @JsonProperty("available_to_employees") Optional<Boolean> availableToEmployees,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("published_at") JsonNullable<OffsetDateTime> publishedAt,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(sequence, "sequence");
        Utils.checkNotNull(visibility, "visibility");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        Utils.checkNotNull(experience, "experience");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(remote, "remote");
        Utils.checkNotNull(requisitionId, "requisitionId");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(recruiters, "recruiters");
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        Utils.checkNotNull(blocks, "blocks");
        Utils.checkNotNull(closing, "closing");
        Utils.checkNotNull(closingHtml, "closingHtml");
        Utils.checkNotNull(closingDate, "closingDate");
        Utils.checkNotNull(salary, "salary");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(publishedAt, "publishedAt");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.slug = slug;
        this.title = title;
        this.sequence = sequence;
        this.visibility = visibility;
        this.status = status;
        this.code = code;
        this.language = language;
        this.employmentTerms = employmentTerms;
        this.experience = experience;
        this.location = location;
        this.remote = remote;
        this.requisitionId = requisitionId;
        this.department = department;
        this.branch = branch;
        this.recruiters = recruiters;
        this.hiringManagers = hiringManagers;
        this.followers = followers;
        this.description = description;
        this.descriptionHtml = descriptionHtml;
        this.blocks = blocks;
        this.closing = closing;
        this.closingHtml = closingHtml;
        this.closingDate = closingDate;
        this.salary = salary;
        this.url = url;
        this.jobPortalUrl = jobPortalUrl;
        this.recordUrl = recordUrl;
        this.links = links;
        this.confidential = confidential;
        this.availableToEmployees = availableToEmployees;
        this.tags = tags;
        this.addresses = addresses;
        this.customFields = customFields;
        this.deleted = deleted;
        this.ownerId = ownerId;
        this.publishedAt = publishedAt;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Job() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public JsonNullable<String> slug() {
        return slug;
    }

    /**
     * The job title of the person.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * Sequence in relation to other jobs.
     */
    @JsonIgnore
    public Optional<Long> sequence() {
        return sequence;
    }

    /**
     * The visibility of the job
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Visibility> visibility() {
        return (Optional<Visibility>) visibility;
    }

    /**
     * The status of the job.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<JobStatus> status() {
        return (Optional<JobStatus>) status;
    }

    /**
     * The code of the job.
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentTerms> employmentTerms() {
        return (JsonNullable<EmploymentTerms>) employmentTerms;
    }

    /**
     * Level of experience required for the job role.
     */
    @JsonIgnore
    public Optional<String> experience() {
        return experience;
    }

    /**
     * Specifies the location for the job posting.
     */
    @JsonIgnore
    public JsonNullable<String> location() {
        return location;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    @JsonIgnore
    public JsonNullable<Boolean> remote() {
        return remote;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
     * alphanumeric naming conventions unique to your company's internal processes.
     */
    @JsonIgnore
    public Optional<String> requisitionId() {
        return requisitionId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Department> department() {
        return (Optional<Department>) department;
    }

    /**
     * Details of the branch for which the job is created.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Branch> branch() {
        return (Optional<Branch>) branch;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen
     * qualified applicant
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> recruiters() {
        return (JsonNullable<List<String>>) recruiters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> hiringManagers() {
        return (Optional<List<String>>) hiringManagers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> followers() {
        return (JsonNullable<List<String>>) followers;
    }

    /**
     * A description of the object.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The job description in HTML format
     */
    @JsonIgnore
    public JsonNullable<String> descriptionHtml() {
        return descriptionHtml;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Blocks>> blocks() {
        return (Optional<List<Blocks>>) blocks;
    }

    @JsonIgnore
    public JsonNullable<String> closing() {
        return closing;
    }

    /**
     * The closing section of the job description in HTML format
     */
    @JsonIgnore
    public JsonNullable<String> closingHtml() {
        return closingHtml;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> closingDate() {
        return closingDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Salary> salary() {
        return (Optional<Salary>) salary;
    }

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> jobPortalUrl() {
        return jobPortalUrl;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> recordUrl() {
        return recordUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<JobLinks>> links() {
        return (Optional<List<JobLinks>>) links;
    }

    @JsonIgnore
    public Optional<Boolean> confidential() {
        return confidential;
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    @JsonIgnore
    public Optional<Boolean> availableToEmployees() {
        return availableToEmployees;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> publishedAt() {
        return publishedAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Job withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * A unique identifier for an object.
     */
    public Job withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Job withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = JsonNullable.of(slug);
        return this;
    }

    public Job withSlug(JsonNullable<String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The job title of the person.
     */
    public Job withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public Job withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Sequence in relation to other jobs.
     */
    public Job withSequence(long sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = Optional.ofNullable(sequence);
        return this;
    }


    /**
     * Sequence in relation to other jobs.
     */
    public Job withSequence(Optional<Long> sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = sequence;
        return this;
    }

    /**
     * The visibility of the job
     */
    public Job withVisibility(Visibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = Optional.ofNullable(visibility);
        return this;
    }


    /**
     * The visibility of the job
     */
    public Job withVisibility(Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }

    /**
     * The status of the job.
     */
    public Job withStatus(JobStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status of the job.
     */
    public Job withStatus(Optional<? extends JobStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The code of the job.
     */
    public Job withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }


    /**
     * The code of the job.
     */
    public Job withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Job withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Job withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public Job withEmploymentTerms(EmploymentTerms employmentTerms) {
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        this.employmentTerms = JsonNullable.of(employmentTerms);
        return this;
    }

    public Job withEmploymentTerms(JsonNullable<? extends EmploymentTerms> employmentTerms) {
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        this.employmentTerms = employmentTerms;
        return this;
    }

    /**
     * Level of experience required for the job role.
     */
    public Job withExperience(String experience) {
        Utils.checkNotNull(experience, "experience");
        this.experience = Optional.ofNullable(experience);
        return this;
    }


    /**
     * Level of experience required for the job role.
     */
    public Job withExperience(Optional<String> experience) {
        Utils.checkNotNull(experience, "experience");
        this.experience = experience;
        return this;
    }

    /**
     * Specifies the location for the job posting.
     */
    public Job withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = JsonNullable.of(location);
        return this;
    }

    /**
     * Specifies the location for the job posting.
     */
    public Job withLocation(JsonNullable<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public Job withRemote(boolean remote) {
        Utils.checkNotNull(remote, "remote");
        this.remote = JsonNullable.of(remote);
        return this;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public Job withRemote(JsonNullable<Boolean> remote) {
        Utils.checkNotNull(remote, "remote");
        this.remote = remote;
        return this;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
     * alphanumeric naming conventions unique to your company's internal processes.
     */
    public Job withRequisitionId(String requisitionId) {
        Utils.checkNotNull(requisitionId, "requisitionId");
        this.requisitionId = Optional.ofNullable(requisitionId);
        return this;
    }


    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
     * alphanumeric naming conventions unique to your company's internal processes.
     */
    public Job withRequisitionId(Optional<String> requisitionId) {
        Utils.checkNotNull(requisitionId, "requisitionId");
        this.requisitionId = requisitionId;
        return this;
    }

    public Job withDepartment(Department department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }


    public Job withDepartment(Optional<? extends Department> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * Details of the branch for which the job is created.
     */
    public Job withBranch(Branch branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }


    /**
     * Details of the branch for which the job is created.
     */
    public Job withBranch(Optional<? extends Branch> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen
     * qualified applicant
     */
    public Job withRecruiters(List<String> recruiters) {
        Utils.checkNotNull(recruiters, "recruiters");
        this.recruiters = JsonNullable.of(recruiters);
        return this;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen
     * qualified applicant
     */
    public Job withRecruiters(JsonNullable<? extends List<String>> recruiters) {
        Utils.checkNotNull(recruiters, "recruiters");
        this.recruiters = recruiters;
        return this;
    }

    public Job withHiringManagers(List<String> hiringManagers) {
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        this.hiringManagers = Optional.ofNullable(hiringManagers);
        return this;
    }


    public Job withHiringManagers(Optional<? extends List<String>> hiringManagers) {
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        this.hiringManagers = hiringManagers;
        return this;
    }

    public Job withFollowers(List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public Job withFollowers(JsonNullable<? extends List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    /**
     * A description of the object.
     */
    public Job withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public Job withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The job description in HTML format
     */
    public Job withDescriptionHtml(String descriptionHtml) {
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        this.descriptionHtml = JsonNullable.of(descriptionHtml);
        return this;
    }

    /**
     * The job description in HTML format
     */
    public Job withDescriptionHtml(JsonNullable<String> descriptionHtml) {
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        this.descriptionHtml = descriptionHtml;
        return this;
    }

    public Job withBlocks(List<Blocks> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = Optional.ofNullable(blocks);
        return this;
    }


    public Job withBlocks(Optional<? extends List<Blocks>> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = blocks;
        return this;
    }

    public Job withClosing(String closing) {
        Utils.checkNotNull(closing, "closing");
        this.closing = JsonNullable.of(closing);
        return this;
    }

    public Job withClosing(JsonNullable<String> closing) {
        Utils.checkNotNull(closing, "closing");
        this.closing = closing;
        return this;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public Job withClosingHtml(String closingHtml) {
        Utils.checkNotNull(closingHtml, "closingHtml");
        this.closingHtml = JsonNullable.of(closingHtml);
        return this;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public Job withClosingHtml(JsonNullable<String> closingHtml) {
        Utils.checkNotNull(closingHtml, "closingHtml");
        this.closingHtml = closingHtml;
        return this;
    }

    public Job withClosingDate(LocalDate closingDate) {
        Utils.checkNotNull(closingDate, "closingDate");
        this.closingDate = JsonNullable.of(closingDate);
        return this;
    }

    public Job withClosingDate(JsonNullable<LocalDate> closingDate) {
        Utils.checkNotNull(closingDate, "closingDate");
        this.closingDate = closingDate;
        return this;
    }

    public Job withSalary(Salary salary) {
        Utils.checkNotNull(salary, "salary");
        this.salary = Optional.ofNullable(salary);
        return this;
    }


    public Job withSalary(Optional<? extends Salary> salary) {
        Utils.checkNotNull(salary, "salary");
        this.salary = salary;
        return this;
    }

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * URL of the job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withJobPortalUrl(String jobPortalUrl) {
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
        return this;
    }

    /**
     * URL of the job portal
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withJobPortalUrl(JsonNullable<String> jobPortalUrl) {
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        this.jobPortalUrl = jobPortalUrl;
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withRecordUrl(JsonNullable<String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    public Job withLinks(List<JobLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    public Job withLinks(Optional<? extends List<JobLinks>> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    public Job withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }


    public Job withConfidential(Optional<Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Job withAvailableToEmployees(boolean availableToEmployees) {
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        this.availableToEmployees = Optional.ofNullable(availableToEmployees);
        return this;
    }


    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Job withAvailableToEmployees(Optional<Boolean> availableToEmployees) {
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        this.availableToEmployees = availableToEmployees;
        return this;
    }

    public Job withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Job withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public Job withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }


    public Job withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Job withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public Job withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Job withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Job withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public Job withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public Job withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public Job withPublishedAt(OffsetDateTime publishedAt) {
        Utils.checkNotNull(publishedAt, "publishedAt");
        this.publishedAt = JsonNullable.of(publishedAt);
        return this;
    }

    public Job withPublishedAt(JsonNullable<OffsetDateTime> publishedAt) {
        Utils.checkNotNull(publishedAt, "publishedAt");
        this.publishedAt = publishedAt;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Job withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Job withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Job withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Job withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Job withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Job withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Job withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Job withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Job withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Job withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Job other = (Job) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.sequence, other.sequence) &&
            Utils.enhancedDeepEquals(this.visibility, other.visibility) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.employmentTerms, other.employmentTerms) &&
            Utils.enhancedDeepEquals(this.experience, other.experience) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.remote, other.remote) &&
            Utils.enhancedDeepEquals(this.requisitionId, other.requisitionId) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.branch, other.branch) &&
            Utils.enhancedDeepEquals(this.recruiters, other.recruiters) &&
            Utils.enhancedDeepEquals(this.hiringManagers, other.hiringManagers) &&
            Utils.enhancedDeepEquals(this.followers, other.followers) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.descriptionHtml, other.descriptionHtml) &&
            Utils.enhancedDeepEquals(this.blocks, other.blocks) &&
            Utils.enhancedDeepEquals(this.closing, other.closing) &&
            Utils.enhancedDeepEquals(this.closingHtml, other.closingHtml) &&
            Utils.enhancedDeepEquals(this.closingDate, other.closingDate) &&
            Utils.enhancedDeepEquals(this.salary, other.salary) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.jobPortalUrl, other.jobPortalUrl) &&
            Utils.enhancedDeepEquals(this.recordUrl, other.recordUrl) &&
            Utils.enhancedDeepEquals(this.links, other.links) &&
            Utils.enhancedDeepEquals(this.confidential, other.confidential) &&
            Utils.enhancedDeepEquals(this.availableToEmployees, other.availableToEmployees) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.publishedAt, other.publishedAt) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, slug, title,
            sequence, visibility, status,
            code, language, employmentTerms,
            experience, location, remote,
            requisitionId, department, branch,
            recruiters, hiringManagers, followers,
            description, descriptionHtml, blocks,
            closing, closingHtml, closingDate,
            salary, url, jobPortalUrl,
            recordUrl, links, confidential,
            availableToEmployees, tags, addresses,
            customFields, deleted, ownerId,
            publishedAt, customMappings, updatedBy,
            createdBy, updatedAt, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Job.class,
                "id", id,
                "slug", slug,
                "title", title,
                "sequence", sequence,
                "visibility", visibility,
                "status", status,
                "code", code,
                "language", language,
                "employmentTerms", employmentTerms,
                "experience", experience,
                "location", location,
                "remote", remote,
                "requisitionId", requisitionId,
                "department", department,
                "branch", branch,
                "recruiters", recruiters,
                "hiringManagers", hiringManagers,
                "followers", followers,
                "description", description,
                "descriptionHtml", descriptionHtml,
                "blocks", blocks,
                "closing", closing,
                "closingHtml", closingHtml,
                "closingDate", closingDate,
                "salary", salary,
                "url", url,
                "jobPortalUrl", jobPortalUrl,
                "recordUrl", recordUrl,
                "links", links,
                "confidential", confidential,
                "availableToEmployees", availableToEmployees,
                "tags", tags,
                "addresses", addresses,
                "customFields", customFields,
                "deleted", deleted,
                "ownerId", ownerId,
                "publishedAt", publishedAt,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> slug = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private Optional<Long> sequence = Optional.empty();

        private Optional<? extends Visibility> visibility = Optional.empty();

        private Optional<? extends JobStatus> status = Optional.empty();

        private Optional<String> code = Optional.empty();

        private JsonNullable<String> language = JsonNullable.undefined();

        private JsonNullable<? extends EmploymentTerms> employmentTerms = JsonNullable.undefined();

        private Optional<String> experience = Optional.empty();

        private JsonNullable<String> location = JsonNullable.undefined();

        private JsonNullable<Boolean> remote = JsonNullable.undefined();

        private Optional<String> requisitionId = Optional.empty();

        private Optional<? extends Department> department = Optional.empty();

        private Optional<? extends Branch> branch = Optional.empty();

        private JsonNullable<? extends List<String>> recruiters = JsonNullable.undefined();

        private Optional<? extends List<String>> hiringManagers = Optional.empty();

        private JsonNullable<? extends List<String>> followers = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> descriptionHtml = JsonNullable.undefined();

        private Optional<? extends List<Blocks>> blocks = Optional.empty();

        private JsonNullable<String> closing = JsonNullable.undefined();

        private JsonNullable<String> closingHtml = JsonNullable.undefined();

        private JsonNullable<LocalDate> closingDate = JsonNullable.undefined();

        private Optional<? extends Salary> salary = Optional.empty();

        @Deprecated
        private JsonNullable<String> url = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> jobPortalUrl = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> recordUrl = JsonNullable.undefined();

        private Optional<? extends List<JobLinks>> links = Optional.empty();

        private Optional<Boolean> confidential = Optional.empty();

        private Optional<Boolean> availableToEmployees = Optional.empty();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private Optional<? extends List<Address>> addresses = Optional.empty();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<Boolean> deleted = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> publishedAt = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();

        private JsonNullable<String> updatedBy = JsonNullable.undefined();

        private JsonNullable<String> createdBy = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = JsonNullable.of(slug);
            return this;
        }

        public Builder slug(JsonNullable<String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * Sequence in relation to other jobs.
         */
        public Builder sequence(long sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = Optional.ofNullable(sequence);
            return this;
        }

        /**
         * Sequence in relation to other jobs.
         */
        public Builder sequence(Optional<Long> sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = sequence;
            return this;
        }


        /**
         * The visibility of the job
         */
        public Builder visibility(Visibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * The visibility of the job
         */
        public Builder visibility(Optional<? extends Visibility> visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }


        /**
         * The status of the job.
         */
        public Builder status(JobStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the job.
         */
        public Builder status(Optional<? extends JobStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The code of the job.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * The code of the job.
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }


        public Builder employmentTerms(EmploymentTerms employmentTerms) {
            Utils.checkNotNull(employmentTerms, "employmentTerms");
            this.employmentTerms = JsonNullable.of(employmentTerms);
            return this;
        }

        public Builder employmentTerms(JsonNullable<? extends EmploymentTerms> employmentTerms) {
            Utils.checkNotNull(employmentTerms, "employmentTerms");
            this.employmentTerms = employmentTerms;
            return this;
        }


        /**
         * Level of experience required for the job role.
         */
        public Builder experience(String experience) {
            Utils.checkNotNull(experience, "experience");
            this.experience = Optional.ofNullable(experience);
            return this;
        }

        /**
         * Level of experience required for the job role.
         */
        public Builder experience(Optional<String> experience) {
            Utils.checkNotNull(experience, "experience");
            this.experience = experience;
            return this;
        }


        /**
         * Specifies the location for the job posting.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = JsonNullable.of(location);
            return this;
        }

        /**
         * Specifies the location for the job posting.
         */
        public Builder location(JsonNullable<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }


        /**
         * Specifies whether the posting is for a remote job.
         */
        public Builder remote(boolean remote) {
            Utils.checkNotNull(remote, "remote");
            this.remote = JsonNullable.of(remote);
            return this;
        }

        /**
         * Specifies whether the posting is for a remote job.
         */
        public Builder remote(JsonNullable<Boolean> remote) {
            Utils.checkNotNull(remote, "remote");
            this.remote = remote;
            return this;
        }


        /**
         * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
         * alphanumeric naming conventions unique to your company's internal processes.
         */
        public Builder requisitionId(String requisitionId) {
            Utils.checkNotNull(requisitionId, "requisitionId");
            this.requisitionId = Optional.ofNullable(requisitionId);
            return this;
        }

        /**
         * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on
         * alphanumeric naming conventions unique to your company's internal processes.
         */
        public Builder requisitionId(Optional<String> requisitionId) {
            Utils.checkNotNull(requisitionId, "requisitionId");
            this.requisitionId = requisitionId;
            return this;
        }


        public Builder department(Department department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        public Builder department(Optional<? extends Department> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }


        /**
         * Details of the branch for which the job is created.
         */
        public Builder branch(Branch branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Details of the branch for which the job is created.
         */
        public Builder branch(Optional<? extends Branch> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }


        /**
         * The recruiter is generally someone who is tasked to help the hiring manager find and screen
         * qualified applicant
         */
        public Builder recruiters(List<String> recruiters) {
            Utils.checkNotNull(recruiters, "recruiters");
            this.recruiters = JsonNullable.of(recruiters);
            return this;
        }

        /**
         * The recruiter is generally someone who is tasked to help the hiring manager find and screen
         * qualified applicant
         */
        public Builder recruiters(JsonNullable<? extends List<String>> recruiters) {
            Utils.checkNotNull(recruiters, "recruiters");
            this.recruiters = recruiters;
            return this;
        }


        public Builder hiringManagers(List<String> hiringManagers) {
            Utils.checkNotNull(hiringManagers, "hiringManagers");
            this.hiringManagers = Optional.ofNullable(hiringManagers);
            return this;
        }

        public Builder hiringManagers(Optional<? extends List<String>> hiringManagers) {
            Utils.checkNotNull(hiringManagers, "hiringManagers");
            this.hiringManagers = hiringManagers;
            return this;
        }


        public Builder followers(List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }


        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The job description in HTML format
         */
        public Builder descriptionHtml(String descriptionHtml) {
            Utils.checkNotNull(descriptionHtml, "descriptionHtml");
            this.descriptionHtml = JsonNullable.of(descriptionHtml);
            return this;
        }

        /**
         * The job description in HTML format
         */
        public Builder descriptionHtml(JsonNullable<String> descriptionHtml) {
            Utils.checkNotNull(descriptionHtml, "descriptionHtml");
            this.descriptionHtml = descriptionHtml;
            return this;
        }


        public Builder blocks(List<Blocks> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = Optional.ofNullable(blocks);
            return this;
        }

        public Builder blocks(Optional<? extends List<Blocks>> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = blocks;
            return this;
        }


        public Builder closing(String closing) {
            Utils.checkNotNull(closing, "closing");
            this.closing = JsonNullable.of(closing);
            return this;
        }

        public Builder closing(JsonNullable<String> closing) {
            Utils.checkNotNull(closing, "closing");
            this.closing = closing;
            return this;
        }


        /**
         * The closing section of the job description in HTML format
         */
        public Builder closingHtml(String closingHtml) {
            Utils.checkNotNull(closingHtml, "closingHtml");
            this.closingHtml = JsonNullable.of(closingHtml);
            return this;
        }

        /**
         * The closing section of the job description in HTML format
         */
        public Builder closingHtml(JsonNullable<String> closingHtml) {
            Utils.checkNotNull(closingHtml, "closingHtml");
            this.closingHtml = closingHtml;
            return this;
        }


        public Builder closingDate(LocalDate closingDate) {
            Utils.checkNotNull(closingDate, "closingDate");
            this.closingDate = JsonNullable.of(closingDate);
            return this;
        }

        public Builder closingDate(JsonNullable<LocalDate> closingDate) {
            Utils.checkNotNull(closingDate, "closingDate");
            this.closingDate = closingDate;
            return this;
        }


        public Builder salary(Salary salary) {
            Utils.checkNotNull(salary, "salary");
            this.salary = Optional.ofNullable(salary);
            return this;
        }

        public Builder salary(Optional<? extends Salary> salary) {
            Utils.checkNotNull(salary, "salary");
            this.salary = salary;
            return this;
        }


        /**
         * URL of the job description
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * URL of the job description
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * URL of the job portal
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobPortalUrl(String jobPortalUrl) {
            Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
            this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
            return this;
        }

        /**
         * URL of the job portal
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobPortalUrl(JsonNullable<String> jobPortalUrl) {
            Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
            this.jobPortalUrl = jobPortalUrl;
            return this;
        }


        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder recordUrl(JsonNullable<String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }


        public Builder links(List<JobLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        public Builder links(Optional<? extends List<JobLinks>> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }


        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }


        /**
         * Specifies whether an employee of the organization can apply for the job.
         */
        public Builder availableToEmployees(boolean availableToEmployees) {
            Utils.checkNotNull(availableToEmployees, "availableToEmployees");
            this.availableToEmployees = Optional.ofNullable(availableToEmployees);
            return this;
        }

        /**
         * Specifies whether an employee of the organization can apply for the job.
         */
        public Builder availableToEmployees(Optional<Boolean> availableToEmployees) {
            Utils.checkNotNull(availableToEmployees, "availableToEmployees");
            this.availableToEmployees = availableToEmployees;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }


        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        public Builder publishedAt(OffsetDateTime publishedAt) {
            Utils.checkNotNull(publishedAt, "publishedAt");
            this.publishedAt = JsonNullable.of(publishedAt);
            return this;
        }

        public Builder publishedAt(JsonNullable<OffsetDateTime> publishedAt) {
            Utils.checkNotNull(publishedAt, "publishedAt");
            this.publishedAt = publishedAt;
            return this;
        }


        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }


        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }


        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Job build() {

            return new Job(
                id, slug, title,
                sequence, visibility, status,
                code, language, employmentTerms,
                experience, location, remote,
                requisitionId, department, branch,
                recruiters, hiringManagers, followers,
                description, descriptionHtml, blocks,
                closing, closingHtml, closingDate,
                salary, url, jobPortalUrl,
                recordUrl, links, confidential,
                availableToEmployees, tags, addresses,
                customFields, deleted, ownerId,
                publishedAt, customMappings, updatedBy,
                createdBy, updatedAt, createdAt);
        }

    }
}
