/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class JobLinks {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JobType type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private String url;

    @JsonCreator
    public JobLinks(
            @JsonProperty("type") @Nullable JobType type,
            @JsonProperty("url") @Nullable String url) {
        this.type = type;
        this.url = url;
    }
    
    public JobLinks() {
        this(null, null);
    }

    public Optional<JobType> type() {
        return Optional.ofNullable(this.type);
    }

    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }


    public JobLinks withType(@Nullable JobType type) {
        this.type = type;
        return this;
    }


    public JobLinks withUrl(@Nullable String url) {
        this.url = url;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobLinks other = (JobLinks) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JobLinks.class,
                "type", type,
                "url", url);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JobType type;

        private String url;

        private Builder() {
          // force use of static builder() method
        }

        public Builder type(@Nullable JobType type) {
            this.type = type;
            return this;
        }

        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }

        public JobLinks build() {
            return new JobLinks(
                type, url);
        }

    }
}
