/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;


public class JournalEntriesFilter {

    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<OffsetDateTime> updatedSince;


    @SpeakeasyMetadata("queryParam:name=status")
    private Optional<? extends JournalEntriesFilterStatus> status;

    @JsonCreator
    public JournalEntriesFilter(
            Optional<OffsetDateTime> updatedSince,
            Optional<? extends JournalEntriesFilterStatus> status) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(status, "status");
        this.updatedSince = updatedSince;
        this.status = status;
    }
    
    public JournalEntriesFilter() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<JournalEntriesFilterStatus> status() {
        return (Optional<JournalEntriesFilterStatus>) status;
    }

    public static Builder builder() {
        return new Builder();
    }


    public JournalEntriesFilter withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }


    public JournalEntriesFilter withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    public JournalEntriesFilter withStatus(JournalEntriesFilterStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public JournalEntriesFilter withStatus(Optional<? extends JournalEntriesFilterStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalEntriesFilter other = (JournalEntriesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            updatedSince, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalEntriesFilter.class,
                "updatedSince", updatedSince,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> updatedSince = Optional.empty();

        private Optional<? extends JournalEntriesFilterStatus> status = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }


        public Builder status(JournalEntriesFilterStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends JournalEntriesFilterStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public JournalEntriesFilter build() {

            return new JournalEntriesFilter(
                updatedSince, status);
        }

    }
}
