/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class JournalEntry {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Journal entry title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private List<JournalEntryLineItem> lineItems;

    /**
     * Journal entry status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<JournalEntryStatus> status;

    /**
     * Reference for the journal entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posted_at")
    private OffsetDateTime postedAt;

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("journal_symbol")
    private JsonNullable<String> journalSymbol;

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_type")
    private JsonNullable<String> taxType;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Journal entry number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

    /**
     * Accounting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_period")
    private JsonNullable<String> accountingPeriod;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public JournalEntry(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("line_items") @Nullable List<JournalEntryLineItem> lineItems,
            @JsonProperty("status") @Nullable JsonNullable<JournalEntryStatus> status,
            @JsonProperty("memo") @Nullable JsonNullable<String> memo,
            @JsonProperty("posted_at") @Nullable OffsetDateTime postedAt,
            @JsonProperty("journal_symbol") @Nullable JsonNullable<String> journalSymbol,
            @JsonProperty("tax_type") @Nullable JsonNullable<String> taxType,
            @JsonProperty("tax_code") @Nullable JsonNullable<String> taxCode,
            @JsonProperty("number") @Nullable JsonNullable<String> number,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("accounting_period") @Nullable JsonNullable<String> accountingPeriod,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.lineItems = lineItems;
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.memo = Optional.ofNullable(memo)
            .orElse(JsonNullable.undefined());
        this.postedAt = postedAt;
        this.journalSymbol = Optional.ofNullable(journalSymbol)
            .orElse(JsonNullable.undefined());
        this.taxType = Optional.ofNullable(taxType)
            .orElse(JsonNullable.undefined());
        this.taxCode = Optional.ofNullable(taxCode)
            .orElse(JsonNullable.undefined());
        this.number = Optional.ofNullable(number)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.accountingPeriod = Optional.ofNullable(accountingPeriod)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.passThrough = passThrough;
    }
    
    public JournalEntry() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Journal entry title
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    public Optional<List<JournalEntryLineItem>> lineItems() {
        return Optional.ofNullable(this.lineItems);
    }

    /**
     * Journal entry status
     */
    public JsonNullable<JournalEntryStatus> status() {
        return this.status;
    }

    /**
     * Reference for the journal entry.
     */
    public JsonNullable<String> memo() {
        return this.memo;
    }

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    public Optional<OffsetDateTime> postedAt() {
        return Optional.ofNullable(this.postedAt);
    }

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    public JsonNullable<String> journalSymbol() {
        return this.journalSymbol;
    }

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    public JsonNullable<String> taxType() {
        return this.taxType;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JsonNullable<String> taxCode() {
        return this.taxCode;
    }

    /**
     * Journal entry number.
     */
    public JsonNullable<String> number() {
        return this.number;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    /**
     * Accounting period
     */
    public JsonNullable<String> accountingPeriod() {
        return this.accountingPeriod;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public JournalEntry withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Journal entry title
     */
    public JournalEntry withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JournalEntry withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JournalEntry withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JournalEntry withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    public JournalEntry withLineItems(@Nullable List<JournalEntryLineItem> lineItems) {
        this.lineItems = lineItems;
        return this;
    }


    /**
     * Journal entry status
     */
    public JournalEntry withStatus(@Nullable JournalEntryStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Reference for the journal entry.
     */
    public JournalEntry withMemo(@Nullable String memo) {
        this.memo = JsonNullable.of(memo);
        return this;
    }


    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    public JournalEntry withPostedAt(@Nullable OffsetDateTime postedAt) {
        this.postedAt = postedAt;
        return this;
    }


    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    public JournalEntry withJournalSymbol(@Nullable String journalSymbol) {
        this.journalSymbol = JsonNullable.of(journalSymbol);
        return this;
    }


    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    public JournalEntry withTaxType(@Nullable String taxType) {
        this.taxType = JsonNullable.of(taxType);
        return this;
    }


    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JournalEntry withTaxCode(@Nullable String taxCode) {
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }


    /**
     * Journal entry number.
     */
    public JournalEntry withNumber(@Nullable String number) {
        this.number = JsonNullable.of(number);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public JournalEntry withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    /**
     * Accounting period
     */
    public JournalEntry withAccountingPeriod(@Nullable String accountingPeriod) {
        this.accountingPeriod = JsonNullable.of(accountingPeriod);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JournalEntry withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public JournalEntry withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public JournalEntry withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public JournalEntry withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public JournalEntry withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JournalEntry withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    public JournalEntry withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public JournalEntry withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalEntry other = (JournalEntry) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.postedAt, other.postedAt) &&
            Utils.enhancedDeepEquals(this.journalSymbol, other.journalSymbol) &&
            Utils.enhancedDeepEquals(this.taxType, other.taxType) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.accountingPeriod, other.accountingPeriod) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, title, currencyRate,
            currency, companyId, lineItems,
            status, memo, postedAt,
            journalSymbol, taxType, taxCode,
            number, trackingCategories, accountingPeriod,
            customMappings, updatedBy, createdBy,
            updatedAt, createdAt, rowVersion,
            customFields, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalEntry.class,
                "id", id,
                "title", title,
                "currencyRate", currencyRate,
                "currency", currency,
                "companyId", companyId,
                "lineItems", lineItems,
                "status", status,
                "memo", memo,
                "postedAt", postedAt,
                "journalSymbol", journalSymbol,
                "taxType", taxType,
                "taxCode", taxCode,
                "number", number,
                "trackingCategories", trackingCategories,
                "accountingPeriod", accountingPeriod,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "rowVersion", rowVersion,
                "customFields", customFields,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> title;

        private JsonNullable<Double> currencyRate;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> companyId;

        private List<JournalEntryLineItem> lineItems;

        private JsonNullable<JournalEntryStatus> status;

        private JsonNullable<String> memo;

        private OffsetDateTime postedAt;

        private JsonNullable<String> journalSymbol;

        private JsonNullable<String> taxType;

        private JsonNullable<String> taxCode;

        private JsonNullable<String> number;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private JsonNullable<String> accountingPeriod;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<String> rowVersion;

        private List<CustomField> customFields;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Journal entry title
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Requires a minimum of 2 line items that sum to 0
         */
        public Builder lineItems(@Nullable List<JournalEntryLineItem> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Journal entry status
         */
        public Builder status(@Nullable JournalEntryStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Reference for the journal entry.
         */
        public Builder memo(@Nullable String memo) {
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
         */
        public Builder postedAt(@Nullable OffsetDateTime postedAt) {
            this.postedAt = postedAt;
            return this;
        }

        /**
         * Journal symbol of the entry. For example IND for indirect costs
         */
        public Builder journalSymbol(@Nullable String journalSymbol) {
            this.journalSymbol = JsonNullable.of(journalSymbol);
            return this;
        }

        /**
         * The specific category of tax associated with a transaction like sales or purchase
         */
        public Builder taxType(@Nullable String taxType) {
            this.taxType = JsonNullable.of(taxType);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(@Nullable String taxCode) {
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Journal entry number.
         */
        public Builder number(@Nullable String number) {
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(@Nullable String accountingPeriod) {
            this.accountingPeriod = JsonNullable.of(accountingPeriod);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public JournalEntry build() {
            return new JournalEntry(
                id, title, currencyRate,
                currency, companyId, lineItems,
                status, memo, postedAt,
                journalSymbol, taxType, taxCode,
                number, trackingCategories, accountingPeriod,
                customMappings, updatedBy, createdBy,
                updatedAt, createdAt, rowVersion,
                customFields, passThrough);
        }

    }
}
