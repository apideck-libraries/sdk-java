/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class JournalEntryInput {

    /**
     * Journal entry title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<JournalEntryLineItemInput>> lineItems;

    /**
     * Reference for the journal entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posted_at")
    private Optional<OffsetDateTime> postedAt;

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("journal_symbol")
    private JsonNullable<String> journalSymbol;

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_type")
    private JsonNullable<String> taxType;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Journal entry number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    /**
     * Accounting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_period")
    private JsonNullable<String> accountingPeriod;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public JournalEntryInput(
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("line_items") Optional<? extends List<JournalEntryLineItemInput>> lineItems,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("posted_at") Optional<OffsetDateTime> postedAt,
            @JsonProperty("journal_symbol") JsonNullable<String> journalSymbol,
            @JsonProperty("tax_type") JsonNullable<String> taxType,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("accounting_period") JsonNullable<String> accountingPeriod,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(postedAt, "postedAt");
        Utils.checkNotNull(journalSymbol, "journalSymbol");
        Utils.checkNotNull(taxType, "taxType");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(passThrough, "passThrough");
        this.title = title;
        this.currencyRate = currencyRate;
        this.currency = currency;
        this.companyId = companyId;
        this.lineItems = lineItems;
        this.memo = memo;
        this.postedAt = postedAt;
        this.journalSymbol = journalSymbol;
        this.taxType = taxType;
        this.taxCode = taxCode;
        this.number = number;
        this.trackingCategories = trackingCategories;
        this.accountingPeriod = accountingPeriod;
        this.rowVersion = rowVersion;
        this.customFields = customFields;
        this.passThrough = passThrough;
    }
    
    public JournalEntryInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Journal entry title
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<JournalEntryLineItemInput>> lineItems() {
        return (Optional<List<JournalEntryLineItemInput>>) lineItems;
    }

    /**
     * Reference for the journal entry.
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> postedAt() {
        return postedAt;
    }

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    @JsonIgnore
    public JsonNullable<String> journalSymbol() {
        return journalSymbol;
    }

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    @JsonIgnore
    public JsonNullable<String> taxType() {
        return taxType;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    /**
     * Journal entry number.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    /**
     * Accounting period
     */
    @JsonIgnore
    public JsonNullable<String> accountingPeriod() {
        return accountingPeriod;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Journal entry title
     */
    public JournalEntryInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * Journal entry title
     */
    public JournalEntryInput withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JournalEntryInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JournalEntryInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JournalEntryInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JournalEntryInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JournalEntryInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JournalEntryInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    public JournalEntryInput withLineItems(List<JournalEntryLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    /**
     * Requires a minimum of 2 line items that sum to 0
     */
    public JournalEntryInput withLineItems(Optional<? extends List<JournalEntryLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    /**
     * Reference for the journal entry.
     */
    public JournalEntryInput withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * Reference for the journal entry.
     */
    public JournalEntryInput withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    public JournalEntryInput withPostedAt(OffsetDateTime postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = Optional.ofNullable(postedAt);
        return this;
    }

    /**
     * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
     */
    public JournalEntryInput withPostedAt(Optional<OffsetDateTime> postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = postedAt;
        return this;
    }

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    public JournalEntryInput withJournalSymbol(String journalSymbol) {
        Utils.checkNotNull(journalSymbol, "journalSymbol");
        this.journalSymbol = JsonNullable.of(journalSymbol);
        return this;
    }

    /**
     * Journal symbol of the entry. For example IND for indirect costs
     */
    public JournalEntryInput withJournalSymbol(JsonNullable<String> journalSymbol) {
        Utils.checkNotNull(journalSymbol, "journalSymbol");
        this.journalSymbol = journalSymbol;
        return this;
    }

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    public JournalEntryInput withTaxType(String taxType) {
        Utils.checkNotNull(taxType, "taxType");
        this.taxType = JsonNullable.of(taxType);
        return this;
    }

    /**
     * The specific category of tax associated with a transaction like sales or purchase
     */
    public JournalEntryInput withTaxType(JsonNullable<String> taxType) {
        Utils.checkNotNull(taxType, "taxType");
        this.taxType = taxType;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JournalEntryInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JournalEntryInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    /**
     * Journal entry number.
     */
    public JournalEntryInput withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Journal entry number.
     */
    public JournalEntryInput withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public JournalEntryInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public JournalEntryInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * Accounting period
     */
    public JournalEntryInput withAccountingPeriod(String accountingPeriod) {
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        this.accountingPeriod = JsonNullable.of(accountingPeriod);
        return this;
    }

    /**
     * Accounting period
     */
    public JournalEntryInput withAccountingPeriod(JsonNullable<String> accountingPeriod) {
        Utils.checkNotNull(accountingPeriod, "accountingPeriod");
        this.accountingPeriod = accountingPeriod;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JournalEntryInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JournalEntryInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    public JournalEntryInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public JournalEntryInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public JournalEntryInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public JournalEntryInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalEntryInput other = (JournalEntryInput) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.memo, other.memo) &&
            Objects.deepEquals(this.postedAt, other.postedAt) &&
            Objects.deepEquals(this.journalSymbol, other.journalSymbol) &&
            Objects.deepEquals(this.taxType, other.taxType) &&
            Objects.deepEquals(this.taxCode, other.taxCode) &&
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.accountingPeriod, other.accountingPeriod) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            currencyRate,
            currency,
            companyId,
            lineItems,
            memo,
            postedAt,
            journalSymbol,
            taxType,
            taxCode,
            number,
            trackingCategories,
            accountingPeriod,
            rowVersion,
            customFields,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalEntryInput.class,
                "title", title,
                "currencyRate", currencyRate,
                "currency", currency,
                "companyId", companyId,
                "lineItems", lineItems,
                "memo", memo,
                "postedAt", postedAt,
                "journalSymbol", journalSymbol,
                "taxType", taxType,
                "taxCode", taxCode,
                "number", number,
                "trackingCategories", trackingCategories,
                "accountingPeriod", accountingPeriod,
                "rowVersion", rowVersion,
                "customFields", customFields,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<Double> currencyRate = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private Optional<? extends List<JournalEntryLineItemInput>> lineItems = Optional.empty();
 
        private JsonNullable<String> memo = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> postedAt = Optional.empty();
 
        private JsonNullable<String> journalSymbol = JsonNullable.undefined();
 
        private JsonNullable<String> taxType = JsonNullable.undefined();
 
        private JsonNullable<String> taxCode = JsonNullable.undefined();
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private JsonNullable<String> accountingPeriod = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Journal entry title
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Journal entry title
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Requires a minimum of 2 line items that sum to 0
         */
        public Builder lineItems(List<JournalEntryLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        /**
         * Requires a minimum of 2 line items that sum to 0
         */
        public Builder lineItems(Optional<? extends List<JournalEntryLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        /**
         * Reference for the journal entry.
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * Reference for the journal entry.
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }

        /**
         * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
         */
        public Builder postedAt(OffsetDateTime postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = Optional.ofNullable(postedAt);
            return this;
        }

        /**
         * This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
         */
        public Builder postedAt(Optional<OffsetDateTime> postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = postedAt;
            return this;
        }

        /**
         * Journal symbol of the entry. For example IND for indirect costs
         */
        public Builder journalSymbol(String journalSymbol) {
            Utils.checkNotNull(journalSymbol, "journalSymbol");
            this.journalSymbol = JsonNullable.of(journalSymbol);
            return this;
        }

        /**
         * Journal symbol of the entry. For example IND for indirect costs
         */
        public Builder journalSymbol(JsonNullable<String> journalSymbol) {
            Utils.checkNotNull(journalSymbol, "journalSymbol");
            this.journalSymbol = journalSymbol;
            return this;
        }

        /**
         * The specific category of tax associated with a transaction like sales or purchase
         */
        public Builder taxType(String taxType) {
            Utils.checkNotNull(taxType, "taxType");
            this.taxType = JsonNullable.of(taxType);
            return this;
        }

        /**
         * The specific category of tax associated with a transaction like sales or purchase
         */
        public Builder taxType(JsonNullable<String> taxType) {
            Utils.checkNotNull(taxType, "taxType");
            this.taxType = taxType;
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }

        /**
         * Journal entry number.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Journal entry number.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(String accountingPeriod) {
            Utils.checkNotNull(accountingPeriod, "accountingPeriod");
            this.accountingPeriod = JsonNullable.of(accountingPeriod);
            return this;
        }

        /**
         * Accounting period
         */
        public Builder accountingPeriod(JsonNullable<String> accountingPeriod) {
            Utils.checkNotNull(accountingPeriod, "accountingPeriod");
            this.accountingPeriod = accountingPeriod;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public JournalEntryInput build() {
            return new JournalEntryInput(
                title,
                currencyRate,
                currency,
                companyId,
                lineItems,
                memo,
                postedAt,
                journalSymbol,
                taxType,
                taxCode,
                number,
                trackingCategories,
                accountingPeriod,
                rowVersion,
                customFields,
                passThrough);
        }
    }
}

