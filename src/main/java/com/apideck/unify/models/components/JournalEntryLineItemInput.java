/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class JournalEntryLineItemInput {

    /**
     * User defined description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Double> taxAmount;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonProperty("type")
    private JournalEntryLineItemType type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRateInput> taxRate;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("ledger_account")
    private Optional<? extends LinkedLedgerAccountInput> ledgerAccount;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<? extends LinkedSupplierInput> supplier;

    /**
     * Line number of the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    @JsonCreator
    public JournalEntryLineItemInput(
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("tax_amount") JsonNullable<Double> taxAmount,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_amount") JsonNullable<Double> totalAmount,
            @JsonProperty("type") JournalEntryLineItemType type,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRateInput> taxRate,
            @JsonProperty("tracking_category") JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("ledger_account") Optional<? extends LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("supplier") JsonNullable<? extends LinkedSupplierInput> supplier,
            @JsonProperty("line_number") JsonNullable<Long> lineNumber) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(supplier, "supplier");
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.description = description;
        this.taxAmount = taxAmount;
        this.subTotal = subTotal;
        this.totalAmount = totalAmount;
        this.type = type;
        this.taxRate = taxRate;
        this.trackingCategory = trackingCategory;
        this.trackingCategories = trackingCategories;
        this.ledgerAccount = ledgerAccount;
        this.customer = customer;
        this.supplier = supplier;
        this.lineNumber = lineNumber;
    }
    
    public JournalEntryLineItemInput(
            JournalEntryLineItemType type) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), type, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * User defined description
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Tax amount
     */
    @JsonIgnore
    public JsonNullable<Double> taxAmount() {
        return taxAmount;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonIgnore
    public JsonNullable<Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonIgnore
    public JournalEntryLineItemType type() {
        return type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRateInput> taxRate() {
        return (Optional<LinkedTaxRateInput>) taxRate;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return (JsonNullable<DeprecatedLinkedTrackingCategory>) trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedLedgerAccountInput> ledgerAccount() {
        return (Optional<LinkedLedgerAccountInput>) ledgerAccount;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * The supplier this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedSupplierInput> supplier() {
        return (JsonNullable<LinkedSupplierInput>) supplier;
    }

    /**
     * Line number of the resource
     */
    @JsonIgnore
    public JsonNullable<Long> lineNumber() {
        return lineNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * User defined description
     */
    public JournalEntryLineItemInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * User defined description
     */
    public JournalEntryLineItemInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Tax amount
     */
    public JournalEntryLineItemInput withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * Tax amount
     */
    public JournalEntryLineItemInput withTaxAmount(JsonNullable<Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JournalEntryLineItemInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JournalEntryLineItemInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemInput withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemInput withTotalAmount(JsonNullable<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemInput withType(JournalEntryLineItemType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public JournalEntryLineItemInput withTaxRate(LinkedTaxRateInput taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }

    public JournalEntryLineItemInput withTaxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JournalEntryLineItemInput withTrackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JournalEntryLineItemInput withTrackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
        Utils.checkNotNull(trackingCategory, "trackingCategory");
        this.trackingCategory = trackingCategory;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public JournalEntryLineItemInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public JournalEntryLineItemInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public JournalEntryLineItemInput withLedgerAccount(LinkedLedgerAccountInput ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = Optional.ofNullable(ledgerAccount);
        return this;
    }

    public JournalEntryLineItemInput withLedgerAccount(Optional<? extends LinkedLedgerAccountInput> ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = ledgerAccount;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public JournalEntryLineItemInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public JournalEntryLineItemInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JournalEntryLineItemInput withSupplier(LinkedSupplierInput supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = JsonNullable.of(supplier);
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JournalEntryLineItemInput withSupplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = supplier;
        return this;
    }

    /**
     * Line number of the resource
     */
    public JournalEntryLineItemInput withLineNumber(long lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * Line number of the resource
     */
    public JournalEntryLineItemInput withLineNumber(JsonNullable<Long> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalEntryLineItemInput other = (JournalEntryLineItemInput) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.taxRate, other.taxRate) &&
            Objects.deepEquals(this.trackingCategory, other.trackingCategory) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.supplier, other.supplier) &&
            Objects.deepEquals(this.lineNumber, other.lineNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            taxAmount,
            subTotal,
            totalAmount,
            type,
            taxRate,
            trackingCategory,
            trackingCategories,
            ledgerAccount,
            customer,
            supplier,
            lineNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalEntryLineItemInput.class,
                "description", description,
                "taxAmount", taxAmount,
                "subTotal", subTotal,
                "totalAmount", totalAmount,
                "type", type,
                "taxRate", taxRate,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "ledgerAccount", ledgerAccount,
                "customer", customer,
                "supplier", supplier,
                "lineNumber", lineNumber);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<Double> taxAmount = JsonNullable.undefined();
 
        private JsonNullable<Double> subTotal = JsonNullable.undefined();
 
        private JsonNullable<Double> totalAmount = JsonNullable.undefined();
 
        private JournalEntryLineItemType type;
 
        private Optional<? extends LinkedTaxRateInput> taxRate = Optional.empty();
 
        @Deprecated
        private JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private Optional<? extends LinkedLedgerAccountInput> ledgerAccount = Optional.empty();
 
        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedSupplierInput> supplier = JsonNullable.undefined();
 
        private JsonNullable<Long> lineNumber = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User defined description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * User defined description
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Tax amount
         */
        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Tax amount
         */
        public Builder taxAmount(JsonNullable<Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Debit entries are considered positive, and credit entries are considered negative.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Debit entries are considered positive, and credit entries are considered negative.
         */
        public Builder totalAmount(JsonNullable<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Debit entries are considered positive, and credit entries are considered negative.
         */
        public Builder type(JournalEntryLineItemType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder taxRate(LinkedTaxRateInput taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(DeprecatedLinkedTrackingCategory trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(JsonNullable<? extends DeprecatedLinkedTrackingCategory> trackingCategory) {
            Utils.checkNotNull(trackingCategory, "trackingCategory");
            this.trackingCategory = trackingCategory;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder ledgerAccount(LinkedLedgerAccountInput ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = Optional.ofNullable(ledgerAccount);
            return this;
        }

        public Builder ledgerAccount(Optional<? extends LinkedLedgerAccountInput> ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = ledgerAccount;
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(LinkedSupplierInput supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = supplier;
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(long lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(JsonNullable<Long> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }
        
        public JournalEntryLineItemInput build() {
            return new JournalEntryLineItemInput(
                description,
                taxAmount,
                subTotal,
                totalAmount,
                type,
                taxRate,
                trackingCategory,
                trackingCategories,
                ledgerAccount,
                customer,
                supplier,
                lineNumber);
        }
    }
}

