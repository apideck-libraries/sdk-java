/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class JournalEntryLineItemInput {
    /**
     * User defined description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Tax amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private JsonNullable<Double> taxAmount;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Double> totalAmount;

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    @JsonProperty("type")
    private JournalEntryLineItemType type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRateInput taxRate;

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_category")
    @Deprecated
    private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("ledger_account")
    private JsonNullable<LinkedLedgerAccountInput> ledgerAccount;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<LinkedCustomerInput> customer;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<LinkedSupplierInput> supplier;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The ID of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private JsonNullable<String> locationId;

    /**
     * Line number of the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<Long> lineNumber;

    @JsonCreator
    public JournalEntryLineItemInput(
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("tax_amount") @Nullable JsonNullable<Double> taxAmount,
            @JsonProperty("sub_total") @Nullable JsonNullable<Double> subTotal,
            @JsonProperty("total_amount") @Nullable JsonNullable<Double> totalAmount,
            @JsonProperty("type") @Nonnull JournalEntryLineItemType type,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRateInput taxRate,
            @JsonProperty("tracking_category") @Nullable JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("ledger_account") @Nullable LinkedLedgerAccountInput ledgerAccount,
            @JsonProperty("customer") @Nullable JsonNullable<LinkedCustomerInput> customer,
            @JsonProperty("supplier") @Nullable JsonNullable<LinkedSupplierInput> supplier,
            @JsonProperty("department_id") @Nullable JsonNullable<String> departmentId,
            @JsonProperty("location_id") @Nullable JsonNullable<String> locationId,
            @JsonProperty("line_number") @Nullable JsonNullable<Long> lineNumber) {
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.taxAmount = Optional.ofNullable(taxAmount)
            .orElse(JsonNullable.undefined());
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.totalAmount = Optional.ofNullable(totalAmount)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElseThrow(() -> new IllegalArgumentException("type cannot be null"));
        this.taxRate = taxRate;
        this.trackingCategory = Optional.ofNullable(trackingCategory)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        this.customer = Optional.ofNullable(customer)
            .orElse(JsonNullable.undefined());
        this.supplier = Optional.ofNullable(supplier)
            .orElse(JsonNullable.undefined());
        this.departmentId = Optional.ofNullable(departmentId)
            .orElse(JsonNullable.undefined());
        this.locationId = Optional.ofNullable(locationId)
            .orElse(JsonNullable.undefined());
        this.lineNumber = Optional.ofNullable(lineNumber)
            .orElse(JsonNullable.undefined());
    }
    
    public JournalEntryLineItemInput(
            @Nonnull JournalEntryLineItemType type) {
        this(null, null, null,
            null, type, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * User defined description
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Tax amount
     */
    public JsonNullable<Double> taxAmount() {
        return this.taxAmount;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JsonNullable<Double> subTotal() {
        return this.subTotal;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JsonNullable<Double> totalAmount() {
        return this.totalAmount;
    }

    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemType type() {
        return this.type;
    }

    public Optional<LinkedTaxRateInput> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory() {
        return this.trackingCategory;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return this.ledgerAccount;
    }

    /**
     * The customer this entity is linked to.
     */
    public JsonNullable<LinkedCustomerInput> customer() {
        return this.customer;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JsonNullable<LinkedSupplierInput> supplier() {
        return this.supplier;
    }

    /**
     * The ID of the department
     */
    public JsonNullable<String> departmentId() {
        return this.departmentId;
    }

    /**
     * The ID of the location
     */
    public JsonNullable<String> locationId() {
        return this.locationId;
    }

    /**
     * Line number of the resource
     */
    public JsonNullable<Long> lineNumber() {
        return this.lineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * User defined description
     */
    public JournalEntryLineItemInput withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Tax amount
     */
    public JournalEntryLineItemInput withTaxAmount(@Nullable Double taxAmount) {
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }


    /**
     * Sub-total amount, normally before tax.
     */
    public JournalEntryLineItemInput withSubTotal(@Nullable Double subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemInput withTotalAmount(@Nullable Double totalAmount) {
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }


    /**
     * Debit entries are considered positive, and credit entries are considered negative.
     */
    public JournalEntryLineItemInput withType(@Nonnull JournalEntryLineItemType type) {
        this.type = Utils.checkNotNull(type, "type");
        return this;
    }


    public JournalEntryLineItemInput withTaxRate(@Nullable LinkedTaxRateInput taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    /**
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JournalEntryLineItemInput withTrackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
        this.trackingCategory = JsonNullable.of(trackingCategory);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public JournalEntryLineItemInput withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    public JournalEntryLineItemInput withLedgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }


    /**
     * The customer this entity is linked to.
     */
    public JournalEntryLineItemInput withCustomer(@Nullable LinkedCustomerInput customer) {
        this.customer = JsonNullable.of(customer);
        return this;
    }


    /**
     * The supplier this entity is linked to.
     */
    public JournalEntryLineItemInput withSupplier(@Nullable LinkedSupplierInput supplier) {
        this.supplier = JsonNullable.of(supplier);
        return this;
    }


    /**
     * The ID of the department
     */
    public JournalEntryLineItemInput withDepartmentId(@Nullable String departmentId) {
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }


    /**
     * The ID of the location
     */
    public JournalEntryLineItemInput withLocationId(@Nullable String locationId) {
        this.locationId = JsonNullable.of(locationId);
        return this;
    }


    /**
     * Line number of the resource
     */
    public JournalEntryLineItemInput withLineNumber(@Nullable Long lineNumber) {
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalEntryLineItemInput other = (JournalEntryLineItemInput) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.trackingCategory, other.trackingCategory) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.supplier, other.supplier) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, taxAmount, subTotal,
            totalAmount, type, taxRate,
            trackingCategory, trackingCategories, ledgerAccount,
            customer, supplier, departmentId,
            locationId, lineNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalEntryLineItemInput.class,
                "description", description,
                "taxAmount", taxAmount,
                "subTotal", subTotal,
                "totalAmount", totalAmount,
                "type", type,
                "taxRate", taxRate,
                "trackingCategory", trackingCategory,
                "trackingCategories", trackingCategories,
                "ledgerAccount", ledgerAccount,
                "customer", customer,
                "supplier", supplier,
                "departmentId", departmentId,
                "locationId", locationId,
                "lineNumber", lineNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> description;

        private JsonNullable<Double> taxAmount;

        private JsonNullable<Double> subTotal;

        private JsonNullable<Double> totalAmount;

        private JournalEntryLineItemType type;

        private LinkedTaxRateInput taxRate;

        @Deprecated
        private JsonNullable<DeprecatedLinkedTrackingCategory> trackingCategory;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private LinkedLedgerAccountInput ledgerAccount;

        private JsonNullable<LinkedCustomerInput> customer;

        private JsonNullable<LinkedSupplierInput> supplier;

        private JsonNullable<String> departmentId;

        private JsonNullable<String> locationId;

        private JsonNullable<Long> lineNumber;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * User defined description
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Tax amount
         */
        public Builder taxAmount(@Nullable Double taxAmount) {
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(@Nullable Double subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Debit entries are considered positive, and credit entries are considered negative.
         */
        public Builder totalAmount(@Nullable Double totalAmount) {
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Debit entries are considered positive, and credit entries are considered negative.
         */
        public Builder type(@Nonnull JournalEntryLineItemType type) {
            this.type = Utils.checkNotNull(type, "type");
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRateInput taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        /**
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder trackingCategory(@Nullable DeprecatedLinkedTrackingCategory trackingCategory) {
            this.trackingCategory = JsonNullable.of(trackingCategory);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        public Builder ledgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
            this.ledgerAccount = ledgerAccount;
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(@Nullable LinkedCustomerInput customer) {
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(@Nullable LinkedSupplierInput supplier) {
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(@Nullable String departmentId) {
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the location
         */
        public Builder locationId(@Nullable String locationId) {
            this.locationId = JsonNullable.of(locationId);
            return this;
        }

        /**
         * Line number of the resource
         */
        public Builder lineNumber(@Nullable Long lineNumber) {
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        public JournalEntryLineItemInput build() {
            return new JournalEntryLineItemInput(
                description, taxAmount, subTotal,
                totalAmount, type, taxRate,
                trackingCategory, trackingCategories, ledgerAccount,
                customer, supplier, departmentId,
                locationId, lineNumber);
        }

    }
}
