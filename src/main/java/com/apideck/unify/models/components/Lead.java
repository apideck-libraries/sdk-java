/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Lead {
    /**
     * Unique identifier for the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Full name of the lead.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The name of the company the lead is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The owner of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The name of the owner of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_name")
    private JsonNullable<String> ownerName;

    /**
     * The company the lead is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The identifier of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The source of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The first name of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The description of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The prefix of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * The job title of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The monetary amount of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monetary_amount")
    private JsonNullable<Double> monetaryAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The fax number of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private List<SocialLink> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<List<CustomField>> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * Date updated in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<String> updatedAt;

    /**
     * Date created in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<String> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Lead(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("owner_name") @Nullable JsonNullable<String> ownerName,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("lead_id") @Nullable JsonNullable<String> leadId,
            @JsonProperty("lead_source") @Nullable JsonNullable<String> leadSource,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("prefix") @Nullable JsonNullable<String> prefix,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("monetary_amount") @Nullable JsonNullable<Double> monetaryAmount,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("fax") @Nullable JsonNullable<String> fax,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("social_links") @Nullable List<SocialLink> socialLinks,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("custom_fields") @Nullable JsonNullable<List<CustomField>> customFields,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_at") @Nullable JsonNullable<String> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<String> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.ownerName = Optional.ofNullable(ownerName)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.leadId = Optional.ofNullable(leadId)
            .orElse(JsonNullable.undefined());
        this.leadSource = Optional.ofNullable(leadSource)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.prefix = Optional.ofNullable(prefix)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.monetaryAmount = Optional.ofNullable(monetaryAmount)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.fax = Optional.ofNullable(fax)
            .orElse(JsonNullable.undefined());
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customFields = Optional.ofNullable(customFields)
            .orElse(JsonNullable.undefined());
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Lead(
            @Nonnull String name) {
        this(null, name, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Unique identifier for the contact.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Full name of the lead.
     */
    public String name() {
        return this.name;
    }

    /**
     * The name of the company the lead is associated with.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The owner of the lead.
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The name of the owner of the lead.
     */
    public JsonNullable<String> ownerName() {
        return this.ownerName;
    }

    /**
     * The company the lead is associated with.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The identifier of the lead.
     */
    public JsonNullable<String> leadId() {
        return this.leadId;
    }

    /**
     * The source of the lead.
     */
    public JsonNullable<String> leadSource() {
        return this.leadSource;
    }

    /**
     * The first name of the lead.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the lead.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * The description of the lead.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The prefix of the lead.
     */
    public JsonNullable<String> prefix() {
        return this.prefix;
    }

    /**
     * The job title of the lead.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * The monetary amount of the lead.
     */
    public JsonNullable<Double> monetaryAmount() {
        return this.monetaryAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The fax number of the lead.
     */
    public JsonNullable<String> fax() {
        return this.fax;
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<SocialLink>> socialLinks() {
        return Optional.ofNullable(this.socialLinks);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public JsonNullable<List<CustomField>> customFields() {
        return this.customFields;
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * Date updated in ISO 8601 format
     */
    public JsonNullable<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     * Date created in ISO 8601 format
     */
    public JsonNullable<String> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the contact.
     */
    public Lead withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Full name of the lead.
     */
    public Lead withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    /**
     * The name of the company the lead is associated with.
     */
    public Lead withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The owner of the lead.
     */
    public Lead withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The name of the owner of the lead.
     */
    public Lead withOwnerName(@Nullable String ownerName) {
        this.ownerName = JsonNullable.of(ownerName);
        return this;
    }


    /**
     * The company the lead is associated with.
     */
    public Lead withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The identifier of the lead.
     */
    public Lead withLeadId(@Nullable String leadId) {
        this.leadId = JsonNullable.of(leadId);
        return this;
    }


    /**
     * The source of the lead.
     */
    public Lead withLeadSource(@Nullable String leadSource) {
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }


    /**
     * The first name of the lead.
     */
    public Lead withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the lead.
     */
    public Lead withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * The description of the lead.
     */
    public Lead withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The prefix of the lead.
     */
    public Lead withPrefix(@Nullable String prefix) {
        this.prefix = JsonNullable.of(prefix);
        return this;
    }


    /**
     * The job title of the lead.
     */
    public Lead withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Lead withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    public Lead withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * The monetary amount of the lead.
     */
    public Lead withMonetaryAmount(@Nullable Double monetaryAmount) {
        this.monetaryAmount = JsonNullable.of(monetaryAmount);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Lead withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The fax number of the lead.
     */
    public Lead withFax(@Nullable String fax) {
        this.fax = JsonNullable.of(fax);
        return this;
    }


    public Lead withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public Lead withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public Lead withSocialLinks(@Nullable List<SocialLink> socialLinks) {
        this.socialLinks = socialLinks;
        return this;
    }


    public Lead withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public Lead withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public Lead withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = JsonNullable.of(customFields);
        return this;
    }


    public Lead withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Lead withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * Date updated in ISO 8601 format
     */
    public Lead withUpdatedAt(@Nullable String updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * Date created in ISO 8601 format
     */
    public Lead withCreatedAt(@Nullable String createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Lead withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Lead other = (Lead) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.ownerName, other.ownerName) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.leadSource, other.leadSource) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.prefix, other.prefix) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.fax, other.fax) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, companyName,
            ownerId, ownerName, companyId,
            leadId, leadSource, firstName,
            lastName, description, prefix,
            title, language, status,
            monetaryAmount, currency, fax,
            websites, addresses, socialLinks,
            phoneNumbers, emails, customFields,
            tags, customMappings, updatedAt,
            createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Lead.class,
                "id", id,
                "name", name,
                "companyName", companyName,
                "ownerId", ownerId,
                "ownerName", ownerName,
                "companyId", companyId,
                "leadId", leadId,
                "leadSource", leadSource,
                "firstName", firstName,
                "lastName", lastName,
                "description", description,
                "prefix", prefix,
                "title", title,
                "language", language,
                "status", status,
                "monetaryAmount", monetaryAmount,
                "currency", currency,
                "fax", fax,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customFields", customFields,
                "tags", tags,
                "customMappings", customMappings,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private JsonNullable<String> companyName;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> ownerName;

        private JsonNullable<String> companyId;

        private JsonNullable<String> leadId;

        private JsonNullable<String> leadSource;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> description;

        private JsonNullable<String> prefix;

        private JsonNullable<String> title;

        private JsonNullable<String> language;

        private JsonNullable<String> status;

        private JsonNullable<Double> monetaryAmount;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> fax;

        private List<Website> websites;

        private List<Address> addresses;

        private List<SocialLink> socialLinks;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private JsonNullable<List<CustomField>> customFields;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedAt;

        private JsonNullable<String> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the contact.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Full name of the lead.
         */
        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        /**
         * The name of the company the lead is associated with.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The owner of the lead.
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The name of the owner of the lead.
         */
        public Builder ownerName(@Nullable String ownerName) {
            this.ownerName = JsonNullable.of(ownerName);
            return this;
        }

        /**
         * The company the lead is associated with.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The identifier of the lead.
         */
        public Builder leadId(@Nullable String leadId) {
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The source of the lead.
         */
        public Builder leadSource(@Nullable String leadSource) {
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The first name of the lead.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the lead.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The description of the lead.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The prefix of the lead.
         */
        public Builder prefix(@Nullable String prefix) {
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * The job title of the lead.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The monetary amount of the lead.
         */
        public Builder monetaryAmount(@Nullable Double monetaryAmount) {
            this.monetaryAmount = JsonNullable.of(monetaryAmount);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The fax number of the lead.
         */
        public Builder fax(@Nullable String fax) {
            this.fax = JsonNullable.of(fax);
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder socialLinks(@Nullable List<SocialLink> socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * Date updated in ISO 8601 format
         */
        public Builder updatedAt(@Nullable String updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * Date created in ISO 8601 format
         */
        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Lead build() {
            return new Lead(
                id, name, companyName,
                ownerId, ownerName, companyId,
                leadId, leadSource, firstName,
                lastName, description, prefix,
                title, language, status,
                monetaryAmount, currency, fax,
                websites, addresses, socialLinks,
                phoneNumbers, emails, customFields,
                tags, customMappings, updatedAt,
                createdAt, passThrough);
        }

    }
}
