/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Lead {
    /**
     * Unique identifier for the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Full name of the lead.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The name of the company the lead is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The owner of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The name of the owner of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_name")
    private JsonNullable<String> ownerName;

    /**
     * The company the lead is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The identifier of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The source of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The first name of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The description of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The prefix of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private JsonNullable<String> prefix;

    /**
     * The job title of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The monetary amount of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monetary_amount")
    private JsonNullable<Double> monetaryAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The fax number of the lead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<String> fax;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<Website>> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends List<SocialLink>> socialLinks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Email>> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomField>> customFields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends Map<String, Object>> customMappings;

    /**
     * Date updated in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<String> updatedAt;

    /**
     * Date created in ISO 8601 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<String> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Lead(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") String name,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("owner_name") JsonNullable<String> ownerName,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("lead_id") JsonNullable<String> leadId,
            @JsonProperty("lead_source") JsonNullable<String> leadSource,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("prefix") JsonNullable<String> prefix,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("monetary_amount") JsonNullable<Double> monetaryAmount,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("fax") JsonNullable<String> fax,
            @JsonProperty("websites") Optional<? extends List<Website>> websites,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("social_links") Optional<? extends List<SocialLink>> socialLinks,
            @JsonProperty("phone_numbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") Optional<? extends List<Email>> emails,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomField>> customFields,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("custom_mappings") JsonNullable<? extends Map<String, Object>> customMappings,
            @JsonProperty("updated_at") JsonNullable<String> updatedAt,
            @JsonProperty("created_at") JsonNullable<String> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(ownerName, "ownerName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(leadId, "leadId");
        Utils.checkNotNull(leadSource, "leadSource");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(fax, "fax");
        Utils.checkNotNull(websites, "websites");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.name = name;
        this.companyName = companyName;
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.companyId = companyId;
        this.leadId = leadId;
        this.leadSource = leadSource;
        this.firstName = firstName;
        this.lastName = lastName;
        this.description = description;
        this.prefix = prefix;
        this.title = title;
        this.language = language;
        this.status = status;
        this.monetaryAmount = monetaryAmount;
        this.currency = currency;
        this.fax = fax;
        this.websites = websites;
        this.addresses = addresses;
        this.socialLinks = socialLinks;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.customFields = customFields;
        this.tags = tags;
        this.customMappings = customMappings;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public Lead(
            String name) {
        this(Optional.empty(), name, JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Unique identifier for the contact.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Full name of the lead.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The name of the company the lead is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The owner of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The name of the owner of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> ownerName() {
        return ownerName;
    }

    /**
     * The company the lead is associated with.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The identifier of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> leadId() {
        return leadId;
    }

    /**
     * The source of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> leadSource() {
        return leadSource;
    }

    /**
     * The first name of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The description of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The prefix of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> prefix() {
        return prefix;
    }

    /**
     * The job title of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * The monetary amount of the lead.
     */
    @JsonIgnore
    public JsonNullable<Double> monetaryAmount() {
        return monetaryAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The fax number of the lead.
     */
    @JsonIgnore
    public JsonNullable<String> fax() {
        return fax;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Website>> websites() {
        return (Optional<List<Website>>) websites;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SocialLink>> socialLinks() {
        return (Optional<List<SocialLink>>) socialLinks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Email>> emails() {
        return (Optional<List<Email>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomField>> customFields() {
        return (JsonNullable<List<CustomField>>) customFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> customMappings() {
        return (JsonNullable<Map<String, Object>>) customMappings;
    }

    /**
     * Date updated in ISO 8601 format
     */
    @JsonIgnore
    public JsonNullable<String> updatedAt() {
        return updatedAt;
    }

    /**
     * Date created in ISO 8601 format
     */
    @JsonIgnore
    public JsonNullable<String> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the contact.
     */
    public Lead withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * Unique identifier for the contact.
     */
    public Lead withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Full name of the lead.
     */
    public Lead withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The name of the company the lead is associated with.
     */
    public Lead withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company the lead is associated with.
     */
    public Lead withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The owner of the lead.
     */
    public Lead withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * The owner of the lead.
     */
    public Lead withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The name of the owner of the lead.
     */
    public Lead withOwnerName(String ownerName) {
        Utils.checkNotNull(ownerName, "ownerName");
        this.ownerName = JsonNullable.of(ownerName);
        return this;
    }

    /**
     * The name of the owner of the lead.
     */
    public Lead withOwnerName(JsonNullable<String> ownerName) {
        Utils.checkNotNull(ownerName, "ownerName");
        this.ownerName = ownerName;
        return this;
    }

    /**
     * The company the lead is associated with.
     */
    public Lead withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company the lead is associated with.
     */
    public Lead withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The identifier of the lead.
     */
    public Lead withLeadId(String leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = JsonNullable.of(leadId);
        return this;
    }

    /**
     * The identifier of the lead.
     */
    public Lead withLeadId(JsonNullable<String> leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = leadId;
        return this;
    }

    /**
     * The source of the lead.
     */
    public Lead withLeadSource(String leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }

    /**
     * The source of the lead.
     */
    public Lead withLeadSource(JsonNullable<String> leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = leadSource;
        return this;
    }

    /**
     * The first name of the lead.
     */
    public Lead withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the lead.
     */
    public Lead withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the lead.
     */
    public Lead withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the lead.
     */
    public Lead withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The description of the lead.
     */
    public Lead withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the lead.
     */
    public Lead withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The prefix of the lead.
     */
    public Lead withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = JsonNullable.of(prefix);
        return this;
    }

    /**
     * The prefix of the lead.
     */
    public Lead withPrefix(JsonNullable<String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * The job title of the lead.
     */
    public Lead withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the lead.
     */
    public Lead withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Lead withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Lead withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public Lead withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public Lead withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The monetary amount of the lead.
     */
    public Lead withMonetaryAmount(double monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = JsonNullable.of(monetaryAmount);
        return this;
    }

    /**
     * The monetary amount of the lead.
     */
    public Lead withMonetaryAmount(JsonNullable<Double> monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = monetaryAmount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Lead withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Lead withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The fax number of the lead.
     */
    public Lead withFax(String fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = JsonNullable.of(fax);
        return this;
    }

    /**
     * The fax number of the lead.
     */
    public Lead withFax(JsonNullable<String> fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = fax;
        return this;
    }

    public Lead withWebsites(List<Website> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }


    public Lead withWebsites(Optional<? extends List<Website>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    public Lead withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }


    public Lead withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Lead withSocialLinks(List<SocialLink> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }


    public Lead withSocialLinks(Optional<? extends List<SocialLink>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public Lead withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }


    public Lead withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public Lead withEmails(List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }


    public Lead withEmails(Optional<? extends List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public Lead withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    public Lead withCustomFields(JsonNullable<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public Lead withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Lead withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Lead withCustomMappings(Map<String, Object> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Lead withCustomMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * Date updated in ISO 8601 format
     */
    public Lead withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * Date updated in ISO 8601 format
     */
    public Lead withUpdatedAt(JsonNullable<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Date created in ISO 8601 format
     */
    public Lead withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * Date created in ISO 8601 format
     */
    public Lead withCreatedAt(JsonNullable<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public Lead withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public Lead withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Lead other = (Lead) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.ownerName, other.ownerName) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.leadSource, other.leadSource) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.prefix, other.prefix) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.fax, other.fax) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.socialLinks, other.socialLinks) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, companyName,
            ownerId, ownerName, companyId,
            leadId, leadSource, firstName,
            lastName, description, prefix,
            title, language, status,
            monetaryAmount, currency, fax,
            websites, addresses, socialLinks,
            phoneNumbers, emails, customFields,
            tags, customMappings, updatedAt,
            createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Lead.class,
                "id", id,
                "name", name,
                "companyName", companyName,
                "ownerId", ownerId,
                "ownerName", ownerName,
                "companyId", companyId,
                "leadId", leadId,
                "leadSource", leadSource,
                "firstName", firstName,
                "lastName", lastName,
                "description", description,
                "prefix", prefix,
                "title", title,
                "language", language,
                "status", status,
                "monetaryAmount", monetaryAmount,
                "currency", currency,
                "fax", fax,
                "websites", websites,
                "addresses", addresses,
                "socialLinks", socialLinks,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customFields", customFields,
                "tags", tags,
                "customMappings", customMappings,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private String name;

        private JsonNullable<String> companyName = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<String> ownerName = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> leadId = JsonNullable.undefined();

        private JsonNullable<String> leadSource = JsonNullable.undefined();

        private JsonNullable<String> firstName = JsonNullable.undefined();

        private JsonNullable<String> lastName = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> prefix = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<String> language = JsonNullable.undefined();

        private JsonNullable<String> status = JsonNullable.undefined();

        private JsonNullable<Double> monetaryAmount = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<String> fax = JsonNullable.undefined();

        private Optional<? extends List<Website>> websites = Optional.empty();

        private Optional<? extends List<Address>> addresses = Optional.empty();

        private Optional<? extends List<SocialLink>> socialLinks = Optional.empty();

        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();

        private Optional<? extends List<Email>> emails = Optional.empty();

        private JsonNullable<? extends List<CustomField>> customFields = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> customMappings = JsonNullable.undefined();

        private JsonNullable<String> updatedAt = JsonNullable.undefined();

        private JsonNullable<String> createdAt = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the contact.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the contact.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Full name of the lead.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The name of the company the lead is associated with.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company the lead is associated with.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }


        /**
         * The owner of the lead.
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The owner of the lead.
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        /**
         * The name of the owner of the lead.
         */
        public Builder ownerName(String ownerName) {
            Utils.checkNotNull(ownerName, "ownerName");
            this.ownerName = JsonNullable.of(ownerName);
            return this;
        }

        /**
         * The name of the owner of the lead.
         */
        public Builder ownerName(JsonNullable<String> ownerName) {
            Utils.checkNotNull(ownerName, "ownerName");
            this.ownerName = ownerName;
            return this;
        }


        /**
         * The company the lead is associated with.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company the lead is associated with.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The identifier of the lead.
         */
        public Builder leadId(String leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The identifier of the lead.
         */
        public Builder leadId(JsonNullable<String> leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = leadId;
            return this;
        }


        /**
         * The source of the lead.
         */
        public Builder leadSource(String leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The source of the lead.
         */
        public Builder leadSource(JsonNullable<String> leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = leadSource;
            return this;
        }


        /**
         * The first name of the lead.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the lead.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the lead.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the lead.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * The description of the lead.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the lead.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The prefix of the lead.
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = JsonNullable.of(prefix);
            return this;
        }

        /**
         * The prefix of the lead.
         */
        public Builder prefix(JsonNullable<String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }


        /**
         * The job title of the lead.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the lead.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }


        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The monetary amount of the lead.
         */
        public Builder monetaryAmount(double monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = JsonNullable.of(monetaryAmount);
            return this;
        }

        /**
         * The monetary amount of the lead.
         */
        public Builder monetaryAmount(JsonNullable<Double> monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = monetaryAmount;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The fax number of the lead.
         */
        public Builder fax(String fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * The fax number of the lead.
         */
        public Builder fax(JsonNullable<String> fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = fax;
            return this;
        }


        public Builder websites(List<Website> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<Website>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }


        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        public Builder socialLinks(List<SocialLink> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends List<SocialLink>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }


        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }


        public Builder emails(List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        public Builder customFields(JsonNullable<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(Map<String, Object> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends Map<String, Object>> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }


        /**
         * Date updated in ISO 8601 format
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * Date updated in ISO 8601 format
         */
        public Builder updatedAt(JsonNullable<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * Date created in ISO 8601 format
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * Date created in ISO 8601 format
         */
        public Builder createdAt(JsonNullable<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public Lead build() {

            return new Lead(
                id, name, companyName,
                ownerId, ownerName, companyId,
                leadId, leadSource, firstName,
                lastName, description, prefix,
                title, language, status,
                monetaryAmount, currency, fax,
                websites, addresses, socialLinks,
                phoneNumbers, emails, customFields,
                tags, customMappings, updatedAt,
                createdAt, passThrough);
        }

    }
}
