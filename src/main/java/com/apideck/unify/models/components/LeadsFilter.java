/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class LeadsFilter {
    /**
     * Name of the lead to filter on
     */
    @SpeakeasyMetadata("queryParam:name=name")
    private String name;

    /**
     * First name of the lead to filter on
     */
    @SpeakeasyMetadata("queryParam:name=first_name")
    private String firstName;

    /**
     * Last name of the lead to filter on
     */
    @SpeakeasyMetadata("queryParam:name=last_name")
    private String lastName;

    /**
     * E-mail of the lead to filter on
     */
    @SpeakeasyMetadata("queryParam:name=email")
    private String email;

    /**
     * Phone number of the lead to filter on
     */
    @SpeakeasyMetadata("queryParam:name=phone_number")
    private String phoneNumber;

    @JsonCreator
    public LeadsFilter(
            @Nullable String name,
            @Nullable String firstName,
            @Nullable String lastName,
            @Nullable String email,
            @Nullable String phoneNumber) {
        this.name = name;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }
    
    public LeadsFilter() {
        this(null, null, null,
            null, null);
    }

    /**
     * Name of the lead to filter on
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * First name of the lead to filter on
     */
    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Last name of the lead to filter on
     */
    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * E-mail of the lead to filter on
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Phone number of the lead to filter on
     */
    public Optional<String> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of the lead to filter on
     */
    public LeadsFilter withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * First name of the lead to filter on
     */
    public LeadsFilter withFirstName(@Nullable String firstName) {
        this.firstName = firstName;
        return this;
    }


    /**
     * Last name of the lead to filter on
     */
    public LeadsFilter withLastName(@Nullable String lastName) {
        this.lastName = lastName;
        return this;
    }


    /**
     * E-mail of the lead to filter on
     */
    public LeadsFilter withEmail(@Nullable String email) {
        this.email = email;
        return this;
    }


    /**
     * Phone number of the lead to filter on
     */
    public LeadsFilter withPhoneNumber(@Nullable String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LeadsFilter other = (LeadsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, firstName, lastName,
            email, phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LeadsFilter.class,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "phoneNumber", phoneNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String firstName;

        private String lastName;

        private String email;

        private String phoneNumber;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the lead to filter on
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * First name of the lead to filter on
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = firstName;
            return this;
        }

        /**
         * Last name of the lead to filter on
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * E-mail of the lead to filter on
         */
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }

        /**
         * Phone number of the lead to filter on
         */
        public Builder phoneNumber(@Nullable String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public LeadsFilter build() {
            return new LeadsFilter(
                name, firstName, lastName,
                email, phoneNumber);
        }

    }
}
