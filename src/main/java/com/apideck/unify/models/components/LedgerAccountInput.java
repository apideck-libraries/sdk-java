/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LedgerAccountInput {
    /**
     * The human readable display ID used when displaying the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private String displayId;

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominal_code")
    @Deprecated
    private JsonNullable<String> nominalCode;

    /**
     * The code assigned to the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * The classification of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    private JsonNullable<LedgerAccountClassification> classification;

    /**
     * The type of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private LedgerAccountType type;

    /**
     * The sub type of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_type")
    private JsonNullable<String> subType;

    /**
     * The name of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The fully qualified name of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fully_qualified_name")
    private JsonNullable<String> fullyQualifiedName;

    /**
     * The description of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The opening balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opening_balance")
    private JsonNullable<Double> openingBalance;

    /**
     * The current balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    private JsonNullable<Double> currentBalance;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The tax type of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_type")
    private JsonNullable<String> taxType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRateInput taxRate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private JsonNullable<Double> level;

    /**
     * Whether the account is active or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The status of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<AccountStatus> status;

    /**
     * Whether the account is a header or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    private JsonNullable<Boolean> header;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private BankAccount bankAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_account")
    private ParentAccount parentAccount;

    /**
     * Whether the account is a sub account or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_account")
    private JsonNullable<Boolean> subAccount;

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_reconciliation_date")
    private JsonNullable<LocalDate> lastReconciliationDate;

    /**
     * The subsidiaries the account belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiaries")
    private List<LedgerAccountSubsidiaries> subsidiaries;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public LedgerAccountInput(
            @JsonProperty("display_id") @Nullable String displayId,
            @JsonProperty("nominal_code") @Nullable JsonNullable<String> nominalCode,
            @JsonProperty("code") @Nullable JsonNullable<String> code,
            @JsonProperty("classification") @Nullable JsonNullable<LedgerAccountClassification> classification,
            @JsonProperty("type") @Nullable LedgerAccountType type,
            @JsonProperty("sub_type") @Nullable JsonNullable<String> subType,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("fully_qualified_name") @Nullable JsonNullable<String> fullyQualifiedName,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("opening_balance") @Nullable JsonNullable<Double> openingBalance,
            @JsonProperty("current_balance") @Nullable JsonNullable<Double> currentBalance,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("tax_type") @Nullable JsonNullable<String> taxType,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRateInput taxRate,
            @JsonProperty("level") @Nullable JsonNullable<Double> level,
            @JsonProperty("active") @Nullable JsonNullable<Boolean> active,
            @JsonProperty("status") @Nullable JsonNullable<AccountStatus> status,
            @JsonProperty("header") @Nullable JsonNullable<Boolean> header,
            @JsonProperty("bank_account") @Nullable BankAccount bankAccount,
            @JsonProperty("parent_account") @Nullable ParentAccount parentAccount,
            @JsonProperty("sub_account") @Nullable JsonNullable<Boolean> subAccount,
            @JsonProperty("last_reconciliation_date") @Nullable JsonNullable<LocalDate> lastReconciliationDate,
            @JsonProperty("subsidiaries") @Nullable List<LedgerAccountSubsidiaries> subsidiaries,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.displayId = displayId;
        this.nominalCode = Optional.ofNullable(nominalCode)
            .orElse(JsonNullable.undefined());
        this.code = Optional.ofNullable(code)
            .orElse(JsonNullable.undefined());
        this.classification = Optional.ofNullable(classification)
            .orElse(JsonNullable.undefined());
        this.type = type;
        this.subType = Optional.ofNullable(subType)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.fullyQualifiedName = Optional.ofNullable(fullyQualifiedName)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.openingBalance = Optional.ofNullable(openingBalance)
            .orElse(JsonNullable.undefined());
        this.currentBalance = Optional.ofNullable(currentBalance)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.taxType = Optional.ofNullable(taxType)
            .orElse(JsonNullable.undefined());
        this.taxRate = taxRate;
        this.level = Optional.ofNullable(level)
            .orElse(JsonNullable.undefined());
        this.active = Optional.ofNullable(active)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.header = Optional.ofNullable(header)
            .orElse(JsonNullable.undefined());
        this.bankAccount = bankAccount;
        this.parentAccount = parentAccount;
        this.subAccount = Optional.ofNullable(subAccount)
            .orElse(JsonNullable.undefined());
        this.lastReconciliationDate = Optional.ofNullable(lastReconciliationDate)
            .orElse(JsonNullable.undefined());
        this.subsidiaries = subsidiaries;
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public LedgerAccountInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The human readable display ID used when displaying the account
     */
    public Optional<String> displayId() {
        return Optional.ofNullable(this.displayId);
    }

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> nominalCode() {
        return this.nominalCode;
    }

    /**
     * The code assigned to the account.
     */
    public JsonNullable<String> code() {
        return this.code;
    }

    /**
     * The classification of account.
     */
    public JsonNullable<LedgerAccountClassification> classification() {
        return this.classification;
    }

    /**
     * The type of account.
     */
    public Optional<LedgerAccountType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The sub type of account.
     */
    public JsonNullable<String> subType() {
        return this.subType;
    }

    /**
     * The name of the account.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The fully qualified name of the account.
     */
    public JsonNullable<String> fullyQualifiedName() {
        return this.fullyQualifiedName;
    }

    /**
     * The description of the account.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The opening balance of the account.
     */
    public JsonNullable<Double> openingBalance() {
        return this.openingBalance;
    }

    /**
     * The current balance of the account.
     */
    public JsonNullable<Double> currentBalance() {
        return this.currentBalance;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The tax type of the account.
     */
    public JsonNullable<String> taxType() {
        return this.taxType;
    }

    public Optional<LinkedTaxRateInput> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    public JsonNullable<Double> level() {
        return this.level;
    }

    /**
     * Whether the account is active or not.
     */
    public JsonNullable<Boolean> active() {
        return this.active;
    }

    /**
     * The status of the account.
     */
    public JsonNullable<AccountStatus> status() {
        return this.status;
    }

    /**
     * Whether the account is a header or not.
     */
    public JsonNullable<Boolean> header() {
        return this.header;
    }

    public Optional<BankAccount> bankAccount() {
        return Optional.ofNullable(this.bankAccount);
    }

    public Optional<ParentAccount> parentAccount() {
        return Optional.ofNullable(this.parentAccount);
    }

    /**
     * Whether the account is a sub account or not.
     */
    public JsonNullable<Boolean> subAccount() {
        return this.subAccount;
    }

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    public JsonNullable<LocalDate> lastReconciliationDate() {
        return this.lastReconciliationDate;
    }

    /**
     * The subsidiaries the account belongs to.
     */
    public Optional<List<LedgerAccountSubsidiaries>> subsidiaries() {
        return Optional.ofNullable(this.subsidiaries);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The human readable display ID used when displaying the account
     */
    public LedgerAccountInput withDisplayId(@Nullable String displayId) {
        this.displayId = displayId;
        return this;
    }


    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public LedgerAccountInput withNominalCode(@Nullable String nominalCode) {
        this.nominalCode = JsonNullable.of(nominalCode);
        return this;
    }


    /**
     * The code assigned to the account.
     */
    public LedgerAccountInput withCode(@Nullable String code) {
        this.code = JsonNullable.of(code);
        return this;
    }


    /**
     * The classification of account.
     */
    public LedgerAccountInput withClassification(@Nullable LedgerAccountClassification classification) {
        this.classification = JsonNullable.of(classification);
        return this;
    }


    /**
     * The type of account.
     */
    public LedgerAccountInput withType(@Nullable LedgerAccountType type) {
        this.type = type;
        return this;
    }


    /**
     * The sub type of account.
     */
    public LedgerAccountInput withSubType(@Nullable String subType) {
        this.subType = JsonNullable.of(subType);
        return this;
    }


    /**
     * The name of the account.
     */
    public LedgerAccountInput withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The fully qualified name of the account.
     */
    public LedgerAccountInput withFullyQualifiedName(@Nullable String fullyQualifiedName) {
        this.fullyQualifiedName = JsonNullable.of(fullyQualifiedName);
        return this;
    }


    /**
     * The description of the account.
     */
    public LedgerAccountInput withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The opening balance of the account.
     */
    public LedgerAccountInput withOpeningBalance(@Nullable Double openingBalance) {
        this.openingBalance = JsonNullable.of(openingBalance);
        return this;
    }


    /**
     * The current balance of the account.
     */
    public LedgerAccountInput withCurrentBalance(@Nullable Double currentBalance) {
        this.currentBalance = JsonNullable.of(currentBalance);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public LedgerAccountInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The tax type of the account.
     */
    public LedgerAccountInput withTaxType(@Nullable String taxType) {
        this.taxType = JsonNullable.of(taxType);
        return this;
    }


    public LedgerAccountInput withTaxRate(@Nullable LinkedTaxRateInput taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    public LedgerAccountInput withLevel(@Nullable Double level) {
        this.level = JsonNullable.of(level);
        return this;
    }


    /**
     * Whether the account is active or not.
     */
    public LedgerAccountInput withActive(@Nullable Boolean active) {
        this.active = JsonNullable.of(active);
        return this;
    }


    /**
     * The status of the account.
     */
    public LedgerAccountInput withStatus(@Nullable AccountStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Whether the account is a header or not.
     */
    public LedgerAccountInput withHeader(@Nullable Boolean header) {
        this.header = JsonNullable.of(header);
        return this;
    }


    public LedgerAccountInput withBankAccount(@Nullable BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }


    public LedgerAccountInput withParentAccount(@Nullable ParentAccount parentAccount) {
        this.parentAccount = parentAccount;
        return this;
    }


    /**
     * Whether the account is a sub account or not.
     */
    public LedgerAccountInput withSubAccount(@Nullable Boolean subAccount) {
        this.subAccount = JsonNullable.of(subAccount);
        return this;
    }


    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    public LedgerAccountInput withLastReconciliationDate(@Nullable LocalDate lastReconciliationDate) {
        this.lastReconciliationDate = JsonNullable.of(lastReconciliationDate);
        return this;
    }


    /**
     * The subsidiaries the account belongs to.
     */
    public LedgerAccountInput withSubsidiaries(@Nullable List<LedgerAccountSubsidiaries> subsidiaries) {
        this.subsidiaries = subsidiaries;
        return this;
    }


    public LedgerAccountInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public LedgerAccountInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public LedgerAccountInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LedgerAccountInput other = (LedgerAccountInput) o;
        return 
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.nominalCode, other.nominalCode) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.classification, other.classification) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.subType, other.subType) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.fullyQualifiedName, other.fullyQualifiedName) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.openingBalance, other.openingBalance) &&
            Utils.enhancedDeepEquals(this.currentBalance, other.currentBalance) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.taxType, other.taxType) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.level, other.level) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.header, other.header) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.parentAccount, other.parentAccount) &&
            Utils.enhancedDeepEquals(this.subAccount, other.subAccount) &&
            Utils.enhancedDeepEquals(this.lastReconciliationDate, other.lastReconciliationDate) &&
            Utils.enhancedDeepEquals(this.subsidiaries, other.subsidiaries) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            displayId, nominalCode, code,
            classification, type, subType,
            name, fullyQualifiedName, description,
            openingBalance, currentBalance, currency,
            taxType, taxRate, level,
            active, status, header,
            bankAccount, parentAccount, subAccount,
            lastReconciliationDate, subsidiaries, customFields,
            rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LedgerAccountInput.class,
                "displayId", displayId,
                "nominalCode", nominalCode,
                "code", code,
                "classification", classification,
                "type", type,
                "subType", subType,
                "name", name,
                "fullyQualifiedName", fullyQualifiedName,
                "description", description,
                "openingBalance", openingBalance,
                "currentBalance", currentBalance,
                "currency", currency,
                "taxType", taxType,
                "taxRate", taxRate,
                "level", level,
                "active", active,
                "status", status,
                "header", header,
                "bankAccount", bankAccount,
                "parentAccount", parentAccount,
                "subAccount", subAccount,
                "lastReconciliationDate", lastReconciliationDate,
                "subsidiaries", subsidiaries,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String displayId;

        @Deprecated
        private JsonNullable<String> nominalCode;

        private JsonNullable<String> code;

        private JsonNullable<LedgerAccountClassification> classification;

        private LedgerAccountType type;

        private JsonNullable<String> subType;

        private JsonNullable<String> name;

        private JsonNullable<String> fullyQualifiedName;

        private JsonNullable<String> description;

        private JsonNullable<Double> openingBalance;

        private JsonNullable<Double> currentBalance;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> taxType;

        private LinkedTaxRateInput taxRate;

        private JsonNullable<Double> level;

        private JsonNullable<Boolean> active;

        private JsonNullable<AccountStatus> status;

        private JsonNullable<Boolean> header;

        private BankAccount bankAccount;

        private ParentAccount parentAccount;

        private JsonNullable<Boolean> subAccount;

        private JsonNullable<LocalDate> lastReconciliationDate;

        private List<LedgerAccountSubsidiaries> subsidiaries;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The human readable display ID used when displaying the account
         */
        public Builder displayId(@Nullable String displayId) {
            this.displayId = displayId;
            return this;
        }

        /**
         * The nominal code of the ledger account.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nominalCode(@Nullable String nominalCode) {
            this.nominalCode = JsonNullable.of(nominalCode);
            return this;
        }

        /**
         * The code assigned to the account.
         */
        public Builder code(@Nullable String code) {
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * The classification of account.
         */
        public Builder classification(@Nullable LedgerAccountClassification classification) {
            this.classification = JsonNullable.of(classification);
            return this;
        }

        /**
         * The type of account.
         */
        public Builder type(@Nullable LedgerAccountType type) {
            this.type = type;
            return this;
        }

        /**
         * The sub type of account.
         */
        public Builder subType(@Nullable String subType) {
            this.subType = JsonNullable.of(subType);
            return this;
        }

        /**
         * The name of the account.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The fully qualified name of the account.
         */
        public Builder fullyQualifiedName(@Nullable String fullyQualifiedName) {
            this.fullyQualifiedName = JsonNullable.of(fullyQualifiedName);
            return this;
        }

        /**
         * The description of the account.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The opening balance of the account.
         */
        public Builder openingBalance(@Nullable Double openingBalance) {
            this.openingBalance = JsonNullable.of(openingBalance);
            return this;
        }

        /**
         * The current balance of the account.
         */
        public Builder currentBalance(@Nullable Double currentBalance) {
            this.currentBalance = JsonNullable.of(currentBalance);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The tax type of the account.
         */
        public Builder taxType(@Nullable String taxType) {
            this.taxType = JsonNullable.of(taxType);
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRateInput taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        public Builder level(@Nullable Double level) {
            this.level = JsonNullable.of(level);
            return this;
        }

        /**
         * Whether the account is active or not.
         */
        public Builder active(@Nullable Boolean active) {
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * The status of the account.
         */
        public Builder status(@Nullable AccountStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Whether the account is a header or not.
         */
        public Builder header(@Nullable Boolean header) {
            this.header = JsonNullable.of(header);
            return this;
        }

        public Builder bankAccount(@Nullable BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        public Builder parentAccount(@Nullable ParentAccount parentAccount) {
            this.parentAccount = parentAccount;
            return this;
        }

        /**
         * Whether the account is a sub account or not.
         */
        public Builder subAccount(@Nullable Boolean subAccount) {
            this.subAccount = JsonNullable.of(subAccount);
            return this;
        }

        /**
         * Reconciliation Date means the last calendar day of each Reconciliation Period.
         */
        public Builder lastReconciliationDate(@Nullable LocalDate lastReconciliationDate) {
            this.lastReconciliationDate = JsonNullable.of(lastReconciliationDate);
            return this;
        }

        /**
         * The subsidiaries the account belongs to.
         */
        public Builder subsidiaries(@Nullable List<LedgerAccountSubsidiaries> subsidiaries) {
            this.subsidiaries = subsidiaries;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public LedgerAccountInput build() {
            return new LedgerAccountInput(
                displayId, nominalCode, code,
                classification, type, subType,
                name, fullyQualifiedName, description,
                openingBalance, currentBalance, currency,
                taxType, taxRate, level,
                active, status, header,
                bankAccount, parentAccount, subAccount,
                lastReconciliationDate, subsidiaries, customFields,
                rowVersion, passThrough);
        }

    }
}
