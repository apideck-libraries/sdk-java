/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LedgerAccountInput {
    /**
     * The human readable display ID used when displaying the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private Optional<String> displayId;

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominal_code")
    @Deprecated
    private JsonNullable<String> nominalCode;

    /**
     * The code assigned to the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * The classification of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    private JsonNullable<? extends LedgerAccountClassification> classification;

    /**
     * The type of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends LedgerAccountType> type;

    /**
     * The sub type of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_type")
    private JsonNullable<String> subType;

    /**
     * The name of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The fully qualified name of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fully_qualified_name")
    private JsonNullable<String> fullyQualifiedName;

    /**
     * The description of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The opening balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opening_balance")
    private JsonNullable<Double> openingBalance;

    /**
     * The current balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    private JsonNullable<Double> currentBalance;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The tax type of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_type")
    private JsonNullable<String> taxType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRateInput> taxRate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private JsonNullable<Double> level;

    /**
     * Whether the account is active or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The status of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends AccountStatus> status;

    /**
     * Whether the account is a header or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    private JsonNullable<Boolean> header;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private Optional<? extends BankAccount> bankAccount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_account")
    private Optional<? extends ParentAccount> parentAccount;

    /**
     * Whether the account is a sub account or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_account")
    private JsonNullable<Boolean> subAccount;

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_reconciliation_date")
    private JsonNullable<LocalDate> lastReconciliationDate;

    /**
     * The subsidiaries the account belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiaries")
    private Optional<? extends List<LedgerAccountSubsidiaries>> subsidiaries;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public LedgerAccountInput(
            @JsonProperty("display_id") Optional<String> displayId,
            @JsonProperty("nominal_code") JsonNullable<String> nominalCode,
            @JsonProperty("code") JsonNullable<String> code,
            @JsonProperty("classification") JsonNullable<? extends LedgerAccountClassification> classification,
            @JsonProperty("type") Optional<? extends LedgerAccountType> type,
            @JsonProperty("sub_type") JsonNullable<String> subType,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("fully_qualified_name") JsonNullable<String> fullyQualifiedName,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("opening_balance") JsonNullable<Double> openingBalance,
            @JsonProperty("current_balance") JsonNullable<Double> currentBalance,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("tax_type") JsonNullable<String> taxType,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRateInput> taxRate,
            @JsonProperty("level") JsonNullable<Double> level,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("status") JsonNullable<? extends AccountStatus> status,
            @JsonProperty("header") JsonNullable<Boolean> header,
            @JsonProperty("bank_account") Optional<? extends BankAccount> bankAccount,
            @JsonProperty("parent_account") Optional<? extends ParentAccount> parentAccount,
            @JsonProperty("sub_account") JsonNullable<Boolean> subAccount,
            @JsonProperty("last_reconciliation_date") JsonNullable<LocalDate> lastReconciliationDate,
            @JsonProperty("subsidiaries") Optional<? extends List<LedgerAccountSubsidiaries>> subsidiaries,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(nominalCode, "nominalCode");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(classification, "classification");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(subType, "subType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(fullyQualifiedName, "fullyQualifiedName");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(openingBalance, "openingBalance");
        Utils.checkNotNull(currentBalance, "currentBalance");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(taxType, "taxType");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(header, "header");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(parentAccount, "parentAccount");
        Utils.checkNotNull(subAccount, "subAccount");
        Utils.checkNotNull(lastReconciliationDate, "lastReconciliationDate");
        Utils.checkNotNull(subsidiaries, "subsidiaries");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.displayId = displayId;
        this.nominalCode = nominalCode;
        this.code = code;
        this.classification = classification;
        this.type = type;
        this.subType = subType;
        this.name = name;
        this.fullyQualifiedName = fullyQualifiedName;
        this.description = description;
        this.openingBalance = openingBalance;
        this.currentBalance = currentBalance;
        this.currency = currency;
        this.taxType = taxType;
        this.taxRate = taxRate;
        this.level = level;
        this.active = active;
        this.status = status;
        this.header = header;
        this.bankAccount = bankAccount;
        this.parentAccount = parentAccount;
        this.subAccount = subAccount;
        this.lastReconciliationDate = lastReconciliationDate;
        this.subsidiaries = subsidiaries;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public LedgerAccountInput() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The human readable display ID used when displaying the account
     */
    @JsonIgnore
    public Optional<String> displayId() {
        return displayId;
    }

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> nominalCode() {
        return nominalCode;
    }

    /**
     * The code assigned to the account.
     */
    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    /**
     * The classification of account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LedgerAccountClassification> classification() {
        return (JsonNullable<LedgerAccountClassification>) classification;
    }

    /**
     * The type of account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LedgerAccountType> type() {
        return (Optional<LedgerAccountType>) type;
    }

    /**
     * The sub type of account.
     */
    @JsonIgnore
    public JsonNullable<String> subType() {
        return subType;
    }

    /**
     * The name of the account.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The fully qualified name of the account.
     */
    @JsonIgnore
    public JsonNullable<String> fullyQualifiedName() {
        return fullyQualifiedName;
    }

    /**
     * The description of the account.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The opening balance of the account.
     */
    @JsonIgnore
    public JsonNullable<Double> openingBalance() {
        return openingBalance;
    }

    /**
     * The current balance of the account.
     */
    @JsonIgnore
    public JsonNullable<Double> currentBalance() {
        return currentBalance;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The tax type of the account.
     */
    @JsonIgnore
    public JsonNullable<String> taxType() {
        return taxType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRateInput> taxRate() {
        return (Optional<LinkedTaxRateInput>) taxRate;
    }

    @JsonIgnore
    public JsonNullable<Double> level() {
        return level;
    }

    /**
     * Whether the account is active or not.
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The status of the account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AccountStatus> status() {
        return (JsonNullable<AccountStatus>) status;
    }

    /**
     * Whether the account is a header or not.
     */
    @JsonIgnore
    public JsonNullable<Boolean> header() {
        return header;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccount> bankAccount() {
        return (Optional<BankAccount>) bankAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParentAccount> parentAccount() {
        return (Optional<ParentAccount>) parentAccount;
    }

    /**
     * Whether the account is a sub account or not.
     */
    @JsonIgnore
    public JsonNullable<Boolean> subAccount() {
        return subAccount;
    }

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> lastReconciliationDate() {
        return lastReconciliationDate;
    }

    /**
     * The subsidiaries the account belongs to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LedgerAccountSubsidiaries>> subsidiaries() {
        return (Optional<List<LedgerAccountSubsidiaries>>) subsidiaries;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The human readable display ID used when displaying the account
     */
    public LedgerAccountInput withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = Optional.ofNullable(displayId);
        return this;
    }


    /**
     * The human readable display ID used when displaying the account
     */
    public LedgerAccountInput withDisplayId(Optional<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public LedgerAccountInput withNominalCode(String nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = JsonNullable.of(nominalCode);
        return this;
    }

    /**
     * The nominal code of the ledger account.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public LedgerAccountInput withNominalCode(JsonNullable<String> nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = nominalCode;
        return this;
    }

    /**
     * The code assigned to the account.
     */
    public LedgerAccountInput withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * The code assigned to the account.
     */
    public LedgerAccountInput withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The classification of account.
     */
    public LedgerAccountInput withClassification(LedgerAccountClassification classification) {
        Utils.checkNotNull(classification, "classification");
        this.classification = JsonNullable.of(classification);
        return this;
    }

    /**
     * The classification of account.
     */
    public LedgerAccountInput withClassification(JsonNullable<? extends LedgerAccountClassification> classification) {
        Utils.checkNotNull(classification, "classification");
        this.classification = classification;
        return this;
    }

    /**
     * The type of account.
     */
    public LedgerAccountInput withType(LedgerAccountType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    /**
     * The type of account.
     */
    public LedgerAccountInput withType(Optional<? extends LedgerAccountType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The sub type of account.
     */
    public LedgerAccountInput withSubType(String subType) {
        Utils.checkNotNull(subType, "subType");
        this.subType = JsonNullable.of(subType);
        return this;
    }

    /**
     * The sub type of account.
     */
    public LedgerAccountInput withSubType(JsonNullable<String> subType) {
        Utils.checkNotNull(subType, "subType");
        this.subType = subType;
        return this;
    }

    /**
     * The name of the account.
     */
    public LedgerAccountInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the account.
     */
    public LedgerAccountInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The fully qualified name of the account.
     */
    public LedgerAccountInput withFullyQualifiedName(String fullyQualifiedName) {
        Utils.checkNotNull(fullyQualifiedName, "fullyQualifiedName");
        this.fullyQualifiedName = JsonNullable.of(fullyQualifiedName);
        return this;
    }

    /**
     * The fully qualified name of the account.
     */
    public LedgerAccountInput withFullyQualifiedName(JsonNullable<String> fullyQualifiedName) {
        Utils.checkNotNull(fullyQualifiedName, "fullyQualifiedName");
        this.fullyQualifiedName = fullyQualifiedName;
        return this;
    }

    /**
     * The description of the account.
     */
    public LedgerAccountInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the account.
     */
    public LedgerAccountInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The opening balance of the account.
     */
    public LedgerAccountInput withOpeningBalance(double openingBalance) {
        Utils.checkNotNull(openingBalance, "openingBalance");
        this.openingBalance = JsonNullable.of(openingBalance);
        return this;
    }

    /**
     * The opening balance of the account.
     */
    public LedgerAccountInput withOpeningBalance(JsonNullable<Double> openingBalance) {
        Utils.checkNotNull(openingBalance, "openingBalance");
        this.openingBalance = openingBalance;
        return this;
    }

    /**
     * The current balance of the account.
     */
    public LedgerAccountInput withCurrentBalance(double currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = JsonNullable.of(currentBalance);
        return this;
    }

    /**
     * The current balance of the account.
     */
    public LedgerAccountInput withCurrentBalance(JsonNullable<Double> currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = currentBalance;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public LedgerAccountInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public LedgerAccountInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The tax type of the account.
     */
    public LedgerAccountInput withTaxType(String taxType) {
        Utils.checkNotNull(taxType, "taxType");
        this.taxType = JsonNullable.of(taxType);
        return this;
    }

    /**
     * The tax type of the account.
     */
    public LedgerAccountInput withTaxType(JsonNullable<String> taxType) {
        Utils.checkNotNull(taxType, "taxType");
        this.taxType = taxType;
        return this;
    }

    public LedgerAccountInput withTaxRate(LinkedTaxRateInput taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }


    public LedgerAccountInput withTaxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    public LedgerAccountInput withLevel(double level) {
        Utils.checkNotNull(level, "level");
        this.level = JsonNullable.of(level);
        return this;
    }

    public LedgerAccountInput withLevel(JsonNullable<Double> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    /**
     * Whether the account is active or not.
     */
    public LedgerAccountInput withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * Whether the account is active or not.
     */
    public LedgerAccountInput withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The status of the account.
     */
    public LedgerAccountInput withStatus(AccountStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the account.
     */
    public LedgerAccountInput withStatus(JsonNullable<? extends AccountStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Whether the account is a header or not.
     */
    public LedgerAccountInput withHeader(boolean header) {
        Utils.checkNotNull(header, "header");
        this.header = JsonNullable.of(header);
        return this;
    }

    /**
     * Whether the account is a header or not.
     */
    public LedgerAccountInput withHeader(JsonNullable<Boolean> header) {
        Utils.checkNotNull(header, "header");
        this.header = header;
        return this;
    }

    public LedgerAccountInput withBankAccount(BankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }


    public LedgerAccountInput withBankAccount(Optional<? extends BankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    public LedgerAccountInput withParentAccount(ParentAccount parentAccount) {
        Utils.checkNotNull(parentAccount, "parentAccount");
        this.parentAccount = Optional.ofNullable(parentAccount);
        return this;
    }


    public LedgerAccountInput withParentAccount(Optional<? extends ParentAccount> parentAccount) {
        Utils.checkNotNull(parentAccount, "parentAccount");
        this.parentAccount = parentAccount;
        return this;
    }

    /**
     * Whether the account is a sub account or not.
     */
    public LedgerAccountInput withSubAccount(boolean subAccount) {
        Utils.checkNotNull(subAccount, "subAccount");
        this.subAccount = JsonNullable.of(subAccount);
        return this;
    }

    /**
     * Whether the account is a sub account or not.
     */
    public LedgerAccountInput withSubAccount(JsonNullable<Boolean> subAccount) {
        Utils.checkNotNull(subAccount, "subAccount");
        this.subAccount = subAccount;
        return this;
    }

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    public LedgerAccountInput withLastReconciliationDate(LocalDate lastReconciliationDate) {
        Utils.checkNotNull(lastReconciliationDate, "lastReconciliationDate");
        this.lastReconciliationDate = JsonNullable.of(lastReconciliationDate);
        return this;
    }

    /**
     * Reconciliation Date means the last calendar day of each Reconciliation Period.
     */
    public LedgerAccountInput withLastReconciliationDate(JsonNullable<LocalDate> lastReconciliationDate) {
        Utils.checkNotNull(lastReconciliationDate, "lastReconciliationDate");
        this.lastReconciliationDate = lastReconciliationDate;
        return this;
    }

    /**
     * The subsidiaries the account belongs to.
     */
    public LedgerAccountInput withSubsidiaries(List<LedgerAccountSubsidiaries> subsidiaries) {
        Utils.checkNotNull(subsidiaries, "subsidiaries");
        this.subsidiaries = Optional.ofNullable(subsidiaries);
        return this;
    }


    /**
     * The subsidiaries the account belongs to.
     */
    public LedgerAccountInput withSubsidiaries(Optional<? extends List<LedgerAccountSubsidiaries>> subsidiaries) {
        Utils.checkNotNull(subsidiaries, "subsidiaries");
        this.subsidiaries = subsidiaries;
        return this;
    }

    public LedgerAccountInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public LedgerAccountInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public LedgerAccountInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public LedgerAccountInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public LedgerAccountInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public LedgerAccountInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LedgerAccountInput other = (LedgerAccountInput) o;
        return 
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.nominalCode, other.nominalCode) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.classification, other.classification) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.subType, other.subType) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.fullyQualifiedName, other.fullyQualifiedName) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.openingBalance, other.openingBalance) &&
            Utils.enhancedDeepEquals(this.currentBalance, other.currentBalance) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.taxType, other.taxType) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.level, other.level) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.header, other.header) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.parentAccount, other.parentAccount) &&
            Utils.enhancedDeepEquals(this.subAccount, other.subAccount) &&
            Utils.enhancedDeepEquals(this.lastReconciliationDate, other.lastReconciliationDate) &&
            Utils.enhancedDeepEquals(this.subsidiaries, other.subsidiaries) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            displayId, nominalCode, code,
            classification, type, subType,
            name, fullyQualifiedName, description,
            openingBalance, currentBalance, currency,
            taxType, taxRate, level,
            active, status, header,
            bankAccount, parentAccount, subAccount,
            lastReconciliationDate, subsidiaries, customFields,
            rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LedgerAccountInput.class,
                "displayId", displayId,
                "nominalCode", nominalCode,
                "code", code,
                "classification", classification,
                "type", type,
                "subType", subType,
                "name", name,
                "fullyQualifiedName", fullyQualifiedName,
                "description", description,
                "openingBalance", openingBalance,
                "currentBalance", currentBalance,
                "currency", currency,
                "taxType", taxType,
                "taxRate", taxRate,
                "level", level,
                "active", active,
                "status", status,
                "header", header,
                "bankAccount", bankAccount,
                "parentAccount", parentAccount,
                "subAccount", subAccount,
                "lastReconciliationDate", lastReconciliationDate,
                "subsidiaries", subsidiaries,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> displayId = Optional.empty();

        @Deprecated
        private JsonNullable<String> nominalCode = JsonNullable.undefined();

        private JsonNullable<String> code = JsonNullable.undefined();

        private JsonNullable<? extends LedgerAccountClassification> classification = JsonNullable.undefined();

        private Optional<? extends LedgerAccountType> type = Optional.empty();

        private JsonNullable<String> subType = JsonNullable.undefined();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> fullyQualifiedName = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<Double> openingBalance = JsonNullable.undefined();

        private JsonNullable<Double> currentBalance = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<String> taxType = JsonNullable.undefined();

        private Optional<? extends LinkedTaxRateInput> taxRate = Optional.empty();

        private JsonNullable<Double> level = JsonNullable.undefined();

        private JsonNullable<Boolean> active = JsonNullable.undefined();

        private JsonNullable<? extends AccountStatus> status = JsonNullable.undefined();

        private JsonNullable<Boolean> header = JsonNullable.undefined();

        private Optional<? extends BankAccount> bankAccount = Optional.empty();

        private Optional<? extends ParentAccount> parentAccount = Optional.empty();

        private JsonNullable<Boolean> subAccount = JsonNullable.undefined();

        private JsonNullable<LocalDate> lastReconciliationDate = JsonNullable.undefined();

        private Optional<? extends List<LedgerAccountSubsidiaries>> subsidiaries = Optional.empty();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The human readable display ID used when displaying the account
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = Optional.ofNullable(displayId);
            return this;
        }

        /**
         * The human readable display ID used when displaying the account
         */
        public Builder displayId(Optional<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }


        /**
         * The nominal code of the ledger account.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nominalCode(String nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = JsonNullable.of(nominalCode);
            return this;
        }

        /**
         * The nominal code of the ledger account.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nominalCode(JsonNullable<String> nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = nominalCode;
            return this;
        }


        /**
         * The code assigned to the account.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * The code assigned to the account.
         */
        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * The classification of account.
         */
        public Builder classification(LedgerAccountClassification classification) {
            Utils.checkNotNull(classification, "classification");
            this.classification = JsonNullable.of(classification);
            return this;
        }

        /**
         * The classification of account.
         */
        public Builder classification(JsonNullable<? extends LedgerAccountClassification> classification) {
            Utils.checkNotNull(classification, "classification");
            this.classification = classification;
            return this;
        }


        /**
         * The type of account.
         */
        public Builder type(LedgerAccountType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of account.
         */
        public Builder type(Optional<? extends LedgerAccountType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The sub type of account.
         */
        public Builder subType(String subType) {
            Utils.checkNotNull(subType, "subType");
            this.subType = JsonNullable.of(subType);
            return this;
        }

        /**
         * The sub type of account.
         */
        public Builder subType(JsonNullable<String> subType) {
            Utils.checkNotNull(subType, "subType");
            this.subType = subType;
            return this;
        }


        /**
         * The name of the account.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the account.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The fully qualified name of the account.
         */
        public Builder fullyQualifiedName(String fullyQualifiedName) {
            Utils.checkNotNull(fullyQualifiedName, "fullyQualifiedName");
            this.fullyQualifiedName = JsonNullable.of(fullyQualifiedName);
            return this;
        }

        /**
         * The fully qualified name of the account.
         */
        public Builder fullyQualifiedName(JsonNullable<String> fullyQualifiedName) {
            Utils.checkNotNull(fullyQualifiedName, "fullyQualifiedName");
            this.fullyQualifiedName = fullyQualifiedName;
            return this;
        }


        /**
         * The description of the account.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the account.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The opening balance of the account.
         */
        public Builder openingBalance(double openingBalance) {
            Utils.checkNotNull(openingBalance, "openingBalance");
            this.openingBalance = JsonNullable.of(openingBalance);
            return this;
        }

        /**
         * The opening balance of the account.
         */
        public Builder openingBalance(JsonNullable<Double> openingBalance) {
            Utils.checkNotNull(openingBalance, "openingBalance");
            this.openingBalance = openingBalance;
            return this;
        }


        /**
         * The current balance of the account.
         */
        public Builder currentBalance(double currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = JsonNullable.of(currentBalance);
            return this;
        }

        /**
         * The current balance of the account.
         */
        public Builder currentBalance(JsonNullable<Double> currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = currentBalance;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The tax type of the account.
         */
        public Builder taxType(String taxType) {
            Utils.checkNotNull(taxType, "taxType");
            this.taxType = JsonNullable.of(taxType);
            return this;
        }

        /**
         * The tax type of the account.
         */
        public Builder taxType(JsonNullable<String> taxType) {
            Utils.checkNotNull(taxType, "taxType");
            this.taxType = taxType;
            return this;
        }


        public Builder taxRate(LinkedTaxRateInput taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        public Builder level(double level) {
            Utils.checkNotNull(level, "level");
            this.level = JsonNullable.of(level);
            return this;
        }

        public Builder level(JsonNullable<Double> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }


        /**
         * Whether the account is active or not.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * Whether the account is active or not.
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }


        /**
         * The status of the account.
         */
        public Builder status(AccountStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the account.
         */
        public Builder status(JsonNullable<? extends AccountStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Whether the account is a header or not.
         */
        public Builder header(boolean header) {
            Utils.checkNotNull(header, "header");
            this.header = JsonNullable.of(header);
            return this;
        }

        /**
         * Whether the account is a header or not.
         */
        public Builder header(JsonNullable<Boolean> header) {
            Utils.checkNotNull(header, "header");
            this.header = header;
            return this;
        }


        public Builder bankAccount(BankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        public Builder bankAccount(Optional<? extends BankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }


        public Builder parentAccount(ParentAccount parentAccount) {
            Utils.checkNotNull(parentAccount, "parentAccount");
            this.parentAccount = Optional.ofNullable(parentAccount);
            return this;
        }

        public Builder parentAccount(Optional<? extends ParentAccount> parentAccount) {
            Utils.checkNotNull(parentAccount, "parentAccount");
            this.parentAccount = parentAccount;
            return this;
        }


        /**
         * Whether the account is a sub account or not.
         */
        public Builder subAccount(boolean subAccount) {
            Utils.checkNotNull(subAccount, "subAccount");
            this.subAccount = JsonNullable.of(subAccount);
            return this;
        }

        /**
         * Whether the account is a sub account or not.
         */
        public Builder subAccount(JsonNullable<Boolean> subAccount) {
            Utils.checkNotNull(subAccount, "subAccount");
            this.subAccount = subAccount;
            return this;
        }


        /**
         * Reconciliation Date means the last calendar day of each Reconciliation Period.
         */
        public Builder lastReconciliationDate(LocalDate lastReconciliationDate) {
            Utils.checkNotNull(lastReconciliationDate, "lastReconciliationDate");
            this.lastReconciliationDate = JsonNullable.of(lastReconciliationDate);
            return this;
        }

        /**
         * Reconciliation Date means the last calendar day of each Reconciliation Period.
         */
        public Builder lastReconciliationDate(JsonNullable<LocalDate> lastReconciliationDate) {
            Utils.checkNotNull(lastReconciliationDate, "lastReconciliationDate");
            this.lastReconciliationDate = lastReconciliationDate;
            return this;
        }


        /**
         * The subsidiaries the account belongs to.
         */
        public Builder subsidiaries(List<LedgerAccountSubsidiaries> subsidiaries) {
            Utils.checkNotNull(subsidiaries, "subsidiaries");
            this.subsidiaries = Optional.ofNullable(subsidiaries);
            return this;
        }

        /**
         * The subsidiaries the account belongs to.
         */
        public Builder subsidiaries(Optional<? extends List<LedgerAccountSubsidiaries>> subsidiaries) {
            Utils.checkNotNull(subsidiaries, "subsidiaries");
            this.subsidiaries = subsidiaries;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public LedgerAccountInput build() {

            return new LedgerAccountInput(
                displayId, nominalCode, code,
                classification, type, subType,
                name, fullyQualifiedName, description,
                openingBalance, currentBalance, currency,
                taxType, taxRate, level,
                active, status, header,
                bankAccount, parentAccount, subAccount,
                lastReconciliationDate, subsidiaries, customFields,
                rowVersion, passThrough);
        }

    }
}
