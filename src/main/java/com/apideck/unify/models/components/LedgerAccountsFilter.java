/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class LedgerAccountsFilter {

    @SpeakeasyMetadata("queryParam:name=updated_since")
    private OffsetDateTime updatedSince;

    /**
     * Filter by account classification.
     */
    @SpeakeasyMetadata("queryParam:name=classification")
    private Classification classification;

    @JsonCreator
    public LedgerAccountsFilter(
            @Nullable OffsetDateTime updatedSince,
            @Nullable Classification classification) {
        this.updatedSince = updatedSince;
        this.classification = classification;
    }
    
    public LedgerAccountsFilter() {
        this(null, null);
    }

    public Optional<OffsetDateTime> updatedSince() {
        return Optional.ofNullable(this.updatedSince);
    }

    /**
     * Filter by account classification.
     */
    public Optional<Classification> classification() {
        return Optional.ofNullable(this.classification);
    }

    public static Builder builder() {
        return new Builder();
    }


    public LedgerAccountsFilter withUpdatedSince(@Nullable OffsetDateTime updatedSince) {
        this.updatedSince = updatedSince;
        return this;
    }


    /**
     * Filter by account classification.
     */
    public LedgerAccountsFilter withClassification(@Nullable Classification classification) {
        this.classification = classification;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LedgerAccountsFilter other = (LedgerAccountsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.classification, other.classification);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            updatedSince, classification);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LedgerAccountsFilter.class,
                "updatedSince", updatedSince,
                "classification", classification);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime updatedSince;

        private Classification classification;

        private Builder() {
          // force use of static builder() method
        }

        public Builder updatedSince(@Nullable OffsetDateTime updatedSince) {
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Filter by account classification.
         */
        public Builder classification(@Nullable Classification classification) {
            this.classification = classification;
            return this;
        }

        public LedgerAccountsFilter build() {
            return new LedgerAccountsFilter(
                updatedSince, classification);
        }

    }
}
