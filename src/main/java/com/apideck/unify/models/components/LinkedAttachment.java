/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedAttachment {
    /**
     * The name of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    private JsonNullable<String> mimeType;

    /**
     * Whether the file is c ompressed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_compressed")
    private JsonNullable<Boolean> isCompressed;

    /**
     * The encoding of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoding")
    private JsonNullable<String> encoding;

    /**
     * The content of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<String> content;

    /**
     * The notes of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    @JsonCreator
    public LinkedAttachment(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("mime_type") JsonNullable<String> mimeType,
            @JsonProperty("is_compressed") JsonNullable<Boolean> isCompressed,
            @JsonProperty("encoding") JsonNullable<String> encoding,
            @JsonProperty("content") JsonNullable<String> content,
            @JsonProperty("notes") JsonNullable<String> notes) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(mimeType, "mimeType");
        Utils.checkNotNull(isCompressed, "isCompressed");
        Utils.checkNotNull(encoding, "encoding");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(notes, "notes");
        this.name = name;
        this.mimeType = mimeType;
        this.isCompressed = isCompressed;
        this.encoding = encoding;
        this.content = content;
        this.notes = notes;
    }
    
    public LinkedAttachment() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the file
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The MIME type of the file.
     */
    @JsonIgnore
    public JsonNullable<String> mimeType() {
        return mimeType;
    }

    /**
     * Whether the file is c ompressed.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isCompressed() {
        return isCompressed;
    }

    /**
     * The encoding of the file.
     */
    @JsonIgnore
    public JsonNullable<String> encoding() {
        return encoding;
    }

    /**
     * The content of the file.
     */
    @JsonIgnore
    public JsonNullable<String> content() {
        return content;
    }

    /**
     * The notes of the file.
     */
    @JsonIgnore
    public JsonNullable<String> notes() {
        return notes;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the file
     */
    public LinkedAttachment withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the file
     */
    public LinkedAttachment withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The MIME type of the file.
     */
    public LinkedAttachment withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = JsonNullable.of(mimeType);
        return this;
    }

    /**
     * The MIME type of the file.
     */
    public LinkedAttachment withMimeType(JsonNullable<String> mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    /**
     * Whether the file is c ompressed.
     */
    public LinkedAttachment withIsCompressed(boolean isCompressed) {
        Utils.checkNotNull(isCompressed, "isCompressed");
        this.isCompressed = JsonNullable.of(isCompressed);
        return this;
    }

    /**
     * Whether the file is c ompressed.
     */
    public LinkedAttachment withIsCompressed(JsonNullable<Boolean> isCompressed) {
        Utils.checkNotNull(isCompressed, "isCompressed");
        this.isCompressed = isCompressed;
        return this;
    }

    /**
     * The encoding of the file.
     */
    public LinkedAttachment withEncoding(String encoding) {
        Utils.checkNotNull(encoding, "encoding");
        this.encoding = JsonNullable.of(encoding);
        return this;
    }

    /**
     * The encoding of the file.
     */
    public LinkedAttachment withEncoding(JsonNullable<String> encoding) {
        Utils.checkNotNull(encoding, "encoding");
        this.encoding = encoding;
        return this;
    }

    /**
     * The content of the file.
     */
    public LinkedAttachment withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = JsonNullable.of(content);
        return this;
    }

    /**
     * The content of the file.
     */
    public LinkedAttachment withContent(JsonNullable<String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * The notes of the file.
     */
    public LinkedAttachment withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    /**
     * The notes of the file.
     */
    public LinkedAttachment withNotes(JsonNullable<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedAttachment other = (LinkedAttachment) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.mimeType, other.mimeType) &&
            Utils.enhancedDeepEquals(this.isCompressed, other.isCompressed) &&
            Utils.enhancedDeepEquals(this.encoding, other.encoding) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.notes, other.notes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, mimeType, isCompressed,
            encoding, content, notes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedAttachment.class,
                "name", name,
                "mimeType", mimeType,
                "isCompressed", isCompressed,
                "encoding", encoding,
                "content", content,
                "notes", notes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> mimeType = JsonNullable.undefined();

        private JsonNullable<Boolean> isCompressed = JsonNullable.undefined();

        private JsonNullable<String> encoding = JsonNullable.undefined();

        private JsonNullable<String> content = JsonNullable.undefined();

        private JsonNullable<String> notes = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the file
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the file
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The MIME type of the file.
         */
        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = JsonNullable.of(mimeType);
            return this;
        }

        /**
         * The MIME type of the file.
         */
        public Builder mimeType(JsonNullable<String> mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }


        /**
         * Whether the file is c ompressed.
         */
        public Builder isCompressed(boolean isCompressed) {
            Utils.checkNotNull(isCompressed, "isCompressed");
            this.isCompressed = JsonNullable.of(isCompressed);
            return this;
        }

        /**
         * Whether the file is c ompressed.
         */
        public Builder isCompressed(JsonNullable<Boolean> isCompressed) {
            Utils.checkNotNull(isCompressed, "isCompressed");
            this.isCompressed = isCompressed;
            return this;
        }


        /**
         * The encoding of the file.
         */
        public Builder encoding(String encoding) {
            Utils.checkNotNull(encoding, "encoding");
            this.encoding = JsonNullable.of(encoding);
            return this;
        }

        /**
         * The encoding of the file.
         */
        public Builder encoding(JsonNullable<String> encoding) {
            Utils.checkNotNull(encoding, "encoding");
            this.encoding = encoding;
            return this;
        }


        /**
         * The content of the file.
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = JsonNullable.of(content);
            return this;
        }

        /**
         * The content of the file.
         */
        public Builder content(JsonNullable<String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }


        /**
         * The notes of the file.
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * The notes of the file.
         */
        public Builder notes(JsonNullable<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        public LinkedAttachment build() {

            return new LinkedAttachment(
                name, mimeType, isCompressed,
                encoding, content, notes);
        }

    }
}
