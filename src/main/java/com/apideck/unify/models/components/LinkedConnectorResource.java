/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class LinkedConnectorResource {
    /**
     * ID of the resource, typically a lowercased version of name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Name of the resource (plural)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private ResourceStatus status;

    /**
     * ID of the resource in the Connector's API (downstream)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private String downstreamId;

    /**
     * Name of the resource in the Connector's API (downstream)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_name")
    private String downstreamName;

    @JsonCreator
    public LinkedConnectorResource(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("status") @Nullable ResourceStatus status,
            @JsonProperty("downstream_id") @Nullable String downstreamId,
            @JsonProperty("downstream_name") @Nullable String downstreamName) {
        this.id = id;
        this.name = name;
        this.status = status;
        this.downstreamId = downstreamId;
        this.downstreamName = downstreamName;
    }
    
    public LinkedConnectorResource() {
        this(null, null, null,
            null, null);
    }

    /**
     * ID of the resource, typically a lowercased version of name.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the resource (plural)
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    public Optional<ResourceStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * ID of the resource in the Connector's API (downstream)
     */
    public Optional<String> downstreamId() {
        return Optional.ofNullable(this.downstreamId);
    }

    /**
     * Name of the resource in the Connector's API (downstream)
     */
    public Optional<String> downstreamName() {
        return Optional.ofNullable(this.downstreamName);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the resource, typically a lowercased version of name.
     */
    public LinkedConnectorResource withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Name of the resource (plural)
     */
    public LinkedConnectorResource withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    public LinkedConnectorResource withStatus(@Nullable ResourceStatus status) {
        this.status = status;
        return this;
    }


    /**
     * ID of the resource in the Connector's API (downstream)
     */
    public LinkedConnectorResource withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = downstreamId;
        return this;
    }


    /**
     * Name of the resource in the Connector's API (downstream)
     */
    public LinkedConnectorResource withDownstreamName(@Nullable String downstreamName) {
        this.downstreamName = downstreamName;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedConnectorResource other = (LinkedConnectorResource) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.downstreamName, other.downstreamName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, status,
            downstreamId, downstreamName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedConnectorResource.class,
                "id", id,
                "name", name,
                "status", status,
                "downstreamId", downstreamId,
                "downstreamName", downstreamName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private ResourceStatus status;

        private String downstreamId;

        private String downstreamName;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the resource, typically a lowercased version of name.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Name of the resource (plural)
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Status of the resource. Resources with status live or beta are callable.
         */
        public Builder status(@Nullable ResourceStatus status) {
            this.status = status;
            return this;
        }

        /**
         * ID of the resource in the Connector's API (downstream)
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = downstreamId;
            return this;
        }

        /**
         * Name of the resource in the Connector's API (downstream)
         */
        public Builder downstreamName(@Nullable String downstreamName) {
            this.downstreamName = downstreamName;
            return this;
        }

        public LinkedConnectorResource build() {
            return new LinkedConnectorResource(
                id, name, status,
                downstreamId, downstreamName);
        }

    }
}
