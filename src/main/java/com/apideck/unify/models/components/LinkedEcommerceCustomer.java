/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * LinkedEcommerceCustomer
 * 
 * <p>The customer this entity is linked to.
 */
public class LinkedEcommerceCustomer {
    /**
     * The ID of the customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Full name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * First name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Last name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Company name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private JsonNullable<List<PhoneNumber>> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private JsonNullable<List<Email>> emails;

    @JsonCreator
    public LinkedEcommerceCustomer(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("phone_numbers") @Nullable JsonNullable<List<PhoneNumber>> phoneNumbers,
            @JsonProperty("emails") @Nullable JsonNullable<List<Email>> emails) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.phoneNumbers = Optional.ofNullable(phoneNumbers)
            .orElse(JsonNullable.undefined());
        this.emails = Optional.ofNullable(emails)
            .orElse(JsonNullable.undefined());
    }
    
    public LinkedEcommerceCustomer() {
        this(null, null, null,
            null, null, null,
            null);
    }

    /**
     * The ID of the customer this entity is linked to.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Full name of the customer
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * First name of the customer
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * Last name of the customer
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Company name of the customer
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    public JsonNullable<List<PhoneNumber>> phoneNumbers() {
        return this.phoneNumbers;
    }

    public JsonNullable<List<Email>> emails() {
        return this.emails;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the customer this entity is linked to.
     */
    public LinkedEcommerceCustomer withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Full name of the customer
     */
    public LinkedEcommerceCustomer withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * First name of the customer
     */
    public LinkedEcommerceCustomer withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * Last name of the customer
     */
    public LinkedEcommerceCustomer withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Company name of the customer
     */
    public LinkedEcommerceCustomer withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    public LinkedEcommerceCustomer withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = JsonNullable.of(phoneNumbers);
        return this;
    }


    public LinkedEcommerceCustomer withEmails(@Nullable List<Email> emails) {
        this.emails = JsonNullable.of(emails);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedEcommerceCustomer other = (LinkedEcommerceCustomer) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, firstName,
            lastName, companyName, phoneNumbers,
            emails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedEcommerceCustomer.class,
                "id", id,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "companyName", companyName,
                "phoneNumbers", phoneNumbers,
                "emails", emails);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> companyName;

        private JsonNullable<List<PhoneNumber>> phoneNumbers;

        private JsonNullable<List<Email>> emails;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the customer this entity is linked to.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Full name of the customer
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * First name of the customer
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * Last name of the customer
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Company name of the customer
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = JsonNullable.of(phoneNumbers);
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = JsonNullable.of(emails);
            return this;
        }

        public LinkedEcommerceCustomer build() {
            return new LinkedEcommerceCustomer(
                id, name, firstName,
                lastName, companyName, phoneNumbers,
                emails);
        }

    }
}
