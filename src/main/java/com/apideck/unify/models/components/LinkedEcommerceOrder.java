/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * LinkedEcommerceOrder
 * 
 * <p>The order this entity is linked to.
 */
public class LinkedEcommerceOrder {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The total amount of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<String> total;

    /**
     * Current status of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<EcommerceOrderStatus> status;

    @JsonCreator
    public LinkedEcommerceOrder(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("total") @Nullable JsonNullable<String> total,
            @JsonProperty("status") @Nullable JsonNullable<EcommerceOrderStatus> status) {
        this.id = id;
        this.total = Optional.ofNullable(total)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
    }
    
    public LinkedEcommerceOrder() {
        this(null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The total amount of the order.
     */
    public JsonNullable<String> total() {
        return this.total;
    }

    /**
     * Current status of the order.
     */
    public JsonNullable<EcommerceOrderStatus> status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public LinkedEcommerceOrder withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The total amount of the order.
     */
    public LinkedEcommerceOrder withTotal(@Nullable String total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    /**
     * Current status of the order.
     */
    public LinkedEcommerceOrder withStatus(@Nullable EcommerceOrderStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedEcommerceOrder other = (LinkedEcommerceOrder) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, total, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedEcommerceOrder.class,
                "id", id,
                "total", total,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> total;

        private JsonNullable<EcommerceOrderStatus> status;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The total amount of the order.
         */
        public Builder total(@Nullable String total) {
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Current status of the order.
         */
        public Builder status(@Nullable EcommerceOrderStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public LinkedEcommerceOrder build() {
            return new LinkedEcommerceOrder(
                id, total, status);
        }

    }
}
