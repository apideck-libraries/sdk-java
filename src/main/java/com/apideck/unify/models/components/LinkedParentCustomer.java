/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * LinkedParentCustomer
 * 
 * <p>The parent customer this entity is linked to.
 */
public class LinkedParentCustomer {
    /**
     * The parent ID of the customer this entity is linked to.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the parent customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    @JsonCreator
    public LinkedParentCustomer(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("name") @Nullable String name) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.name = name;
    }
    
    public LinkedParentCustomer(
            @Nonnull String id) {
        this(id, null);
    }

    /**
     * The parent ID of the customer this entity is linked to.
     */
    public String id() {
        return this.id;
    }

    /**
     * The name of the parent customer.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The parent ID of the customer this entity is linked to.
     */
    public LinkedParentCustomer withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The name of the parent customer.
     */
    public LinkedParentCustomer withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedParentCustomer other = (LinkedParentCustomer) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedParentCustomer.class,
                "id", id,
                "name", name);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The parent ID of the customer this entity is linked to.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The name of the parent customer.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public LinkedParentCustomer build() {
            return new LinkedParentCustomer(
                id, name);
        }

    }
}
