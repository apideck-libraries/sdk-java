/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedPurchaseOrder {
    /**
     * The unique identifier for the purchase order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The unique identifier for the purchase order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_id")
    private JsonNullable<String> lineId;

    /**
     * The line number of the purchase order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_number")
    private JsonNullable<String> lineNumber;

    @JsonCreator
    public LinkedPurchaseOrder(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("line_id") JsonNullable<String> lineId,
            @JsonProperty("line_number") JsonNullable<String> lineNumber) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lineId, "lineId");
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.id = id;
        this.lineId = lineId;
        this.lineNumber = lineNumber;
    }
    
    public LinkedPurchaseOrder() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The unique identifier for the purchase order.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The unique identifier for the purchase order line.
     */
    @JsonIgnore
    public JsonNullable<String> lineId() {
        return lineId;
    }

    /**
     * The line number of the purchase order line.
     */
    @JsonIgnore
    public JsonNullable<String> lineNumber() {
        return lineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the purchase order.
     */
    public LinkedPurchaseOrder withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The unique identifier for the purchase order.
     */
    public LinkedPurchaseOrder withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The unique identifier for the purchase order line.
     */
    public LinkedPurchaseOrder withLineId(String lineId) {
        Utils.checkNotNull(lineId, "lineId");
        this.lineId = JsonNullable.of(lineId);
        return this;
    }

    /**
     * The unique identifier for the purchase order line.
     */
    public LinkedPurchaseOrder withLineId(JsonNullable<String> lineId) {
        Utils.checkNotNull(lineId, "lineId");
        this.lineId = lineId;
        return this;
    }

    /**
     * The line number of the purchase order line.
     */
    public LinkedPurchaseOrder withLineNumber(String lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * The line number of the purchase order line.
     */
    public LinkedPurchaseOrder withLineNumber(JsonNullable<String> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedPurchaseOrder other = (LinkedPurchaseOrder) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.lineId, other.lineId) &&
            Utils.enhancedDeepEquals(this.lineNumber, other.lineNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, lineId, lineNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedPurchaseOrder.class,
                "id", id,
                "lineId", lineId,
                "lineNumber", lineNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> lineId = JsonNullable.undefined();

        private JsonNullable<String> lineNumber = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the purchase order.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier for the purchase order.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The unique identifier for the purchase order line.
         */
        public Builder lineId(String lineId) {
            Utils.checkNotNull(lineId, "lineId");
            this.lineId = JsonNullable.of(lineId);
            return this;
        }

        /**
         * The unique identifier for the purchase order line.
         */
        public Builder lineId(JsonNullable<String> lineId) {
            Utils.checkNotNull(lineId, "lineId");
            this.lineId = lineId;
            return this;
        }


        /**
         * The line number of the purchase order line.
         */
        public Builder lineNumber(String lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * The line number of the purchase order line.
         */
        public Builder lineNumber(JsonNullable<String> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }

        public LinkedPurchaseOrder build() {

            return new LinkedPurchaseOrder(
                id, lineId, lineNumber);
        }

    }
}
