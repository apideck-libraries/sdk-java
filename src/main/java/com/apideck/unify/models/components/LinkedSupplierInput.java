/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * LinkedSupplierInput
 * 
 * <p>The supplier this entity is linked to.
 */
public class LinkedSupplierInput {
    /**
     * The ID of the supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The display name of the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends Address> address;

    @JsonCreator
    public LinkedSupplierInput(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("address") Optional<? extends Address> address) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(address, "address");
        this.id = id;
        this.displayName = displayName;
        this.address = address;
    }
    
    public LinkedSupplierInput() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the supplier this entity is linked to.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The display name of the supplier.
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> address() {
        return (Optional<Address>) address;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the supplier this entity is linked to.
     */
    public LinkedSupplierInput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The ID of the supplier this entity is linked to.
     */
    public LinkedSupplierInput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The display name of the supplier.
     */
    public LinkedSupplierInput withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The display name of the supplier.
     */
    public LinkedSupplierInput withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public LinkedSupplierInput withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }


    public LinkedSupplierInput withAddress(Optional<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedSupplierInput other = (LinkedSupplierInput) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.address, other.address);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, displayName, address);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedSupplierInput.class,
                "id", id,
                "displayName", displayName,
                "address", address);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> displayName = JsonNullable.undefined();

        private Optional<? extends Address> address = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the supplier this entity is linked to.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the supplier this entity is linked to.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The display name of the supplier.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The display name of the supplier.
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public LinkedSupplierInput build() {

            return new LinkedSupplierInput(
                id, displayName, address);
        }

    }
}
