/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedTaxDetail {
    /**
     * The type of tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The number of the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * Whether the tax is a transaction tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_transaction_tax")
    private Optional<Boolean> isTransactionTax;

    /**
     * Whether the tax is a primary tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_primary_tax")
    private Optional<Boolean> isPrimaryTax;

    @JsonCreator
    public LinkedTaxDetail(
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("is_transaction_tax") Optional<Boolean> isTransactionTax,
            @JsonProperty("is_primary_tax") Optional<Boolean> isPrimaryTax) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(isTransactionTax, "isTransactionTax");
        Utils.checkNotNull(isPrimaryTax, "isPrimaryTax");
        this.type = type;
        this.number = number;
        this.isTransactionTax = isTransactionTax;
        this.isPrimaryTax = isPrimaryTax;
    }
    
    public LinkedTaxDetail() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The type of tax.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The number of the tax.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * Whether the tax is a transaction tax.
     */
    @JsonIgnore
    public Optional<Boolean> isTransactionTax() {
        return isTransactionTax;
    }

    /**
     * Whether the tax is a primary tax.
     */
    @JsonIgnore
    public Optional<Boolean> isPrimaryTax() {
        return isPrimaryTax;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of tax.
     */
    public LinkedTaxDetail withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    /**
     * The type of tax.
     */
    public LinkedTaxDetail withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The number of the tax.
     */
    public LinkedTaxDetail withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * The number of the tax.
     */
    public LinkedTaxDetail withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * Whether the tax is a transaction tax.
     */
    public LinkedTaxDetail withIsTransactionTax(boolean isTransactionTax) {
        Utils.checkNotNull(isTransactionTax, "isTransactionTax");
        this.isTransactionTax = Optional.ofNullable(isTransactionTax);
        return this;
    }


    /**
     * Whether the tax is a transaction tax.
     */
    public LinkedTaxDetail withIsTransactionTax(Optional<Boolean> isTransactionTax) {
        Utils.checkNotNull(isTransactionTax, "isTransactionTax");
        this.isTransactionTax = isTransactionTax;
        return this;
    }

    /**
     * Whether the tax is a primary tax.
     */
    public LinkedTaxDetail withIsPrimaryTax(boolean isPrimaryTax) {
        Utils.checkNotNull(isPrimaryTax, "isPrimaryTax");
        this.isPrimaryTax = Optional.ofNullable(isPrimaryTax);
        return this;
    }


    /**
     * Whether the tax is a primary tax.
     */
    public LinkedTaxDetail withIsPrimaryTax(Optional<Boolean> isPrimaryTax) {
        Utils.checkNotNull(isPrimaryTax, "isPrimaryTax");
        this.isPrimaryTax = isPrimaryTax;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedTaxDetail other = (LinkedTaxDetail) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.isTransactionTax, other.isTransactionTax) &&
            Utils.enhancedDeepEquals(this.isPrimaryTax, other.isPrimaryTax);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, number, isTransactionTax,
            isPrimaryTax);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedTaxDetail.class,
                "type", type,
                "number", number,
                "isTransactionTax", isTransactionTax,
                "isPrimaryTax", isPrimaryTax);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> type = Optional.empty();

        private JsonNullable<String> number = JsonNullable.undefined();

        private Optional<Boolean> isTransactionTax = Optional.empty();

        private Optional<Boolean> isPrimaryTax = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of tax.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of tax.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The number of the tax.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * The number of the tax.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }


        /**
         * Whether the tax is a transaction tax.
         */
        public Builder isTransactionTax(boolean isTransactionTax) {
            Utils.checkNotNull(isTransactionTax, "isTransactionTax");
            this.isTransactionTax = Optional.ofNullable(isTransactionTax);
            return this;
        }

        /**
         * Whether the tax is a transaction tax.
         */
        public Builder isTransactionTax(Optional<Boolean> isTransactionTax) {
            Utils.checkNotNull(isTransactionTax, "isTransactionTax");
            this.isTransactionTax = isTransactionTax;
            return this;
        }


        /**
         * Whether the tax is a primary tax.
         */
        public Builder isPrimaryTax(boolean isPrimaryTax) {
            Utils.checkNotNull(isPrimaryTax, "isPrimaryTax");
            this.isPrimaryTax = Optional.ofNullable(isPrimaryTax);
            return this;
        }

        /**
         * Whether the tax is a primary tax.
         */
        public Builder isPrimaryTax(Optional<Boolean> isPrimaryTax) {
            Utils.checkNotNull(isPrimaryTax, "isPrimaryTax");
            this.isPrimaryTax = isPrimaryTax;
            return this;
        }

        public LinkedTaxDetail build() {

            return new LinkedTaxDetail(
                type, number, isTransactionTax,
                isPrimaryTax);
        }

    }
}
