/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedTaxRateInput {
    /**
     * The ID of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Rate of the tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private JsonNullable<Double> rate;

    @JsonCreator
    public LinkedTaxRateInput(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("rate") @Nullable JsonNullable<Double> rate) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.rate = Optional.ofNullable(rate)
            .orElse(JsonNullable.undefined());
    }
    
    public LinkedTaxRateInput() {
        this(null, null);
    }

    /**
     * The ID of the object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Rate of the tax rate
     */
    public JsonNullable<Double> rate() {
        return this.rate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the object.
     */
    public LinkedTaxRateInput withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Rate of the tax rate
     */
    public LinkedTaxRateInput withRate(@Nullable Double rate) {
        this.rate = JsonNullable.of(rate);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedTaxRateInput other = (LinkedTaxRateInput) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.rate, other.rate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, rate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedTaxRateInput.class,
                "id", id,
                "rate", rate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<Double> rate;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Rate of the tax rate
         */
        public Builder rate(@Nullable Double rate) {
            this.rate = JsonNullable.of(rate);
            return this;
        }

        public LinkedTaxRateInput build() {
            return new LinkedTaxRateInput(
                id, rate);
        }

    }
}
