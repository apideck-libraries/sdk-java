/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedTaxStatusDetail {
    /**
     * The country of the tax status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * The transaction tax status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_tax_status")
    private JsonNullable<String> transactionTaxStatus;

    @JsonCreator
    public LinkedTaxStatusDetail(
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("transaction_tax_status") JsonNullable<String> transactionTaxStatus) {
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(transactionTaxStatus, "transactionTaxStatus");
        this.country = country;
        this.transactionTaxStatus = transactionTaxStatus;
    }
    
    public LinkedTaxStatusDetail() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The country of the tax status.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * The transaction tax status.
     */
    @JsonIgnore
    public JsonNullable<String> transactionTaxStatus() {
        return transactionTaxStatus;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The country of the tax status.
     */
    public LinkedTaxStatusDetail withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    /**
     * The country of the tax status.
     */
    public LinkedTaxStatusDetail withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The transaction tax status.
     */
    public LinkedTaxStatusDetail withTransactionTaxStatus(String transactionTaxStatus) {
        Utils.checkNotNull(transactionTaxStatus, "transactionTaxStatus");
        this.transactionTaxStatus = JsonNullable.of(transactionTaxStatus);
        return this;
    }

    /**
     * The transaction tax status.
     */
    public LinkedTaxStatusDetail withTransactionTaxStatus(JsonNullable<String> transactionTaxStatus) {
        Utils.checkNotNull(transactionTaxStatus, "transactionTaxStatus");
        this.transactionTaxStatus = transactionTaxStatus;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedTaxStatusDetail other = (LinkedTaxStatusDetail) o;
        return 
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.transactionTaxStatus, other.transactionTaxStatus);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            country, transactionTaxStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedTaxStatusDetail.class,
                "country", country,
                "transactionTaxStatus", transactionTaxStatus);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> country = Optional.empty();

        private JsonNullable<String> transactionTaxStatus = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The country of the tax status.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * The country of the tax status.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        /**
         * The transaction tax status.
         */
        public Builder transactionTaxStatus(String transactionTaxStatus) {
            Utils.checkNotNull(transactionTaxStatus, "transactionTaxStatus");
            this.transactionTaxStatus = JsonNullable.of(transactionTaxStatus);
            return this;
        }

        /**
         * The transaction tax status.
         */
        public Builder transactionTaxStatus(JsonNullable<String> transactionTaxStatus) {
            Utils.checkNotNull(transactionTaxStatus, "transactionTaxStatus");
            this.transactionTaxStatus = transactionTaxStatus;
            return this;
        }

        public LinkedTaxStatusDetail build() {

            return new LinkedTaxStatusDetail(
                country, transactionTaxStatus);
        }

    }
}
