/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LinkedWorktag {
    /**
     * The unique identifier for the worktag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The value of the worktag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    @JsonCreator
    public LinkedWorktag(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("value") JsonNullable<String> value) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(value, "value");
        this.id = id;
        this.value = value;
    }
    
    public LinkedWorktag() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The unique identifier for the worktag.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The value of the worktag.
     */
    @JsonIgnore
    public JsonNullable<String> value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the worktag.
     */
    public LinkedWorktag withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The unique identifier for the worktag.
     */
    public LinkedWorktag withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The value of the worktag.
     */
    public LinkedWorktag withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    /**
     * The value of the worktag.
     */
    public LinkedWorktag withValue(JsonNullable<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedWorktag other = (LinkedWorktag) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LinkedWorktag.class,
                "id", id,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> value = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier for the worktag.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier for the worktag.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The value of the worktag.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * The value of the worktag.
         */
        public Builder value(JsonNullable<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public LinkedWorktag build() {

            return new LinkedWorktag(
                id, value);
        }

    }
}
