/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Links
 * 
 * <p>Links to navigate to previous or next pages through the API
 */
public class Links {

    /**
     * Link to navigate to the previous page through the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous")
    private JsonNullable<String> previous;

    /**
     * Link to navigate to the current page through the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    private Optional<String> current;

    /**
     * Link to navigate to the previous page through the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    private JsonNullable<String> next;

    @JsonCreator
    public Links(
            @JsonProperty("previous") JsonNullable<String> previous,
            @JsonProperty("current") Optional<String> current,
            @JsonProperty("next") JsonNullable<String> next) {
        Utils.checkNotNull(previous, "previous");
        Utils.checkNotNull(current, "current");
        Utils.checkNotNull(next, "next");
        this.previous = previous;
        this.current = current;
        this.next = next;
    }
    
    public Links() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Link to navigate to the previous page through the API
     */
    @JsonIgnore
    public JsonNullable<String> previous() {
        return previous;
    }

    /**
     * Link to navigate to the current page through the API
     */
    @JsonIgnore
    public Optional<String> current() {
        return current;
    }

    /**
     * Link to navigate to the previous page through the API
     */
    @JsonIgnore
    public JsonNullable<String> next() {
        return next;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Link to navigate to the previous page through the API
     */
    public Links withPrevious(String previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = JsonNullable.of(previous);
        return this;
    }

    /**
     * Link to navigate to the previous page through the API
     */
    public Links withPrevious(JsonNullable<String> previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = previous;
        return this;
    }

    /**
     * Link to navigate to the current page through the API
     */
    public Links withCurrent(String current) {
        Utils.checkNotNull(current, "current");
        this.current = Optional.ofNullable(current);
        return this;
    }

    /**
     * Link to navigate to the current page through the API
     */
    public Links withCurrent(Optional<String> current) {
        Utils.checkNotNull(current, "current");
        this.current = current;
        return this;
    }

    /**
     * Link to navigate to the previous page through the API
     */
    public Links withNext(String next) {
        Utils.checkNotNull(next, "next");
        this.next = JsonNullable.of(next);
        return this;
    }

    /**
     * Link to navigate to the previous page through the API
     */
    public Links withNext(JsonNullable<String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Links other = (Links) o;
        return 
            Objects.deepEquals(this.previous, other.previous) &&
            Objects.deepEquals(this.current, other.current) &&
            Objects.deepEquals(this.next, other.next);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            previous,
            current,
            next);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Links.class,
                "previous", previous,
                "current", current,
                "next", next);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> previous = JsonNullable.undefined();
 
        private Optional<String> current = Optional.empty();
 
        private JsonNullable<String> next = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Link to navigate to the previous page through the API
         */
        public Builder previous(String previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = JsonNullable.of(previous);
            return this;
        }

        /**
         * Link to navigate to the previous page through the API
         */
        public Builder previous(JsonNullable<String> previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = previous;
            return this;
        }

        /**
         * Link to navigate to the current page through the API
         */
        public Builder current(String current) {
            Utils.checkNotNull(current, "current");
            this.current = Optional.ofNullable(current);
            return this;
        }

        /**
         * Link to navigate to the current page through the API
         */
        public Builder current(Optional<String> current) {
            Utils.checkNotNull(current, "current");
            this.current = current;
            return this;
        }

        /**
         * Link to navigate to the previous page through the API
         */
        public Builder next(String next) {
            Utils.checkNotNull(next, "next");
            this.next = JsonNullable.of(next);
            return this;
        }

        /**
         * Link to navigate to the previous page through the API
         */
        public Builder next(JsonNullable<String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }
        
        public Links build() {
            return new Links(
                previous,
                current,
                next);
        }
    }
}
