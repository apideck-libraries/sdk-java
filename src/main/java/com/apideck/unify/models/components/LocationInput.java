/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LocationInput {

    /**
     * The name of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The business name of the location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_name")
    private JsonNullable<String> businessName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends Address> address;

    /**
     * Status of this location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends LocationStatusStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_id")
    private Optional<String> merchantId;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public LocationInput(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("business_name") JsonNullable<String> businessName,
            @JsonProperty("address") Optional<? extends Address> address,
            @JsonProperty("status") JsonNullable<? extends LocationStatusStatus> status,
            @JsonProperty("merchant_id") Optional<String> merchantId,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(businessName, "businessName");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(merchantId, "merchantId");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.businessName = businessName;
        this.address = address;
        this.status = status;
        this.merchantId = merchantId;
        this.currency = currency;
        this.passThrough = passThrough;
    }
    
    public LocationInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of the location
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The business name of the location
     */
    @JsonIgnore
    public JsonNullable<String> businessName() {
        return businessName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> address() {
        return (Optional<Address>) address;
    }

    /**
     * Status of this location.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LocationStatusStatus> status() {
        return (JsonNullable<LocationStatusStatus>) status;
    }

    @JsonIgnore
    public Optional<String> merchantId() {
        return merchantId;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the location
     */
    public LocationInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the location
     */
    public LocationInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The business name of the location
     */
    public LocationInput withBusinessName(String businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = JsonNullable.of(businessName);
        return this;
    }

    /**
     * The business name of the location
     */
    public LocationInput withBusinessName(JsonNullable<String> businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = businessName;
        return this;
    }

    public LocationInput withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public LocationInput withAddress(Optional<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * Status of this location.
     */
    public LocationInput withStatus(LocationStatusStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of this location.
     */
    public LocationInput withStatus(JsonNullable<? extends LocationStatusStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public LocationInput withMerchantId(String merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = Optional.ofNullable(merchantId);
        return this;
    }

    public LocationInput withMerchantId(Optional<String> merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = merchantId;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public LocationInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public LocationInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public LocationInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public LocationInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LocationInput other = (LocationInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.businessName, other.businessName) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.merchantId, other.merchantId) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            businessName,
            address,
            status,
            merchantId,
            currency,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LocationInput.class,
                "name", name,
                "businessName", businessName,
                "address", address,
                "status", status,
                "merchantId", merchantId,
                "currency", currency,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> businessName = JsonNullable.undefined();
 
        private Optional<? extends Address> address = Optional.empty();
 
        private JsonNullable<? extends LocationStatusStatus> status = JsonNullable.undefined();
 
        private Optional<String> merchantId = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the location
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the location
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The business name of the location
         */
        public Builder businessName(String businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = JsonNullable.of(businessName);
            return this;
        }

        /**
         * The business name of the location
         */
        public Builder businessName(JsonNullable<String> businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = businessName;
            return this;
        }

        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * Status of this location.
         */
        public Builder status(LocationStatusStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of this location.
         */
        public Builder status(JsonNullable<? extends LocationStatusStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder merchantId(String merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Optional<String> merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = merchantId;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public LocationInput build() {
            return new LocationInput(
                name,
                businessName,
                address,
                status,
                merchantId,
                currency,
                passThrough);
        }
    }
}

