/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Log {

    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    @JsonProperty("api_style")
    private String apiStyle;

    /**
     * The Apideck base URL the request was made to.
     */
    @JsonProperty("base_url")
    private String baseUrl;

    /**
     * Indicates whether or not this is a child or parent request.
     */
    @JsonProperty("child_request")
    private boolean childRequest;

    /**
     * The consumer Id associated with the request.
     */
    @JsonProperty("consumer_id")
    private String consumerId;

    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    @JsonProperty("duration")
    private double duration;

    /**
     * If error occurred, this is brief explanation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_message")
    private JsonNullable<String> errorMessage;

    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    @JsonProperty("execution")
    private long execution;

    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    @JsonProperty("has_children")
    private boolean hasChildren;

    /**
     * HTTP Method of request.
     */
    @JsonProperty("http_method")
    private String httpMethod;

    /**
     * UUID acting as Request Identifier.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Latency added by making this request via Unified Api.
     */
    @JsonProperty("latency")
    private double latency;

    /**
     * The request as defined in OpenApi Spec.
     */
    @JsonProperty("operation")
    private Operation operation;

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("parent_id")
    private Optional<String> parentId;

    /**
     * The path component of the URI the request was made to.
     */
    @JsonProperty("path")
    private String path;

    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    @JsonProperty("sandbox")
    private boolean sandbox;

    /**
     * Apideck service provider associated with request.
     */
    @JsonProperty("service")
    private Service service;

    /**
     * The IP address of the source of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_ip")
    private JsonNullable<String> sourceIp;

    /**
     * HTTP Status code that was returned.
     */
    @JsonProperty("status_code")
    private long statusCode;

    /**
     * Whether or not the request was successful.
     */
    @JsonProperty("success")
    private boolean success;

    /**
     * ISO Date and time when the request was made.
     */
    @JsonProperty("timestamp")
    private String timestamp;

    /**
     * Which Unified Api request was made to.
     */
    @JsonProperty("unified_api")
    private UnifiedApi unifiedApi;

    @JsonCreator
    public Log(
            @JsonProperty("api_style") String apiStyle,
            @JsonProperty("base_url") String baseUrl,
            @JsonProperty("child_request") boolean childRequest,
            @JsonProperty("consumer_id") String consumerId,
            @JsonProperty("duration") double duration,
            @JsonProperty("error_message") JsonNullable<String> errorMessage,
            @JsonProperty("execution") long execution,
            @JsonProperty("has_children") boolean hasChildren,
            @JsonProperty("http_method") String httpMethod,
            @JsonProperty("id") String id,
            @JsonProperty("latency") double latency,
            @JsonProperty("operation") Operation operation,
            @JsonProperty("parent_id") Optional<String> parentId,
            @JsonProperty("path") String path,
            @JsonProperty("sandbox") boolean sandbox,
            @JsonProperty("service") Service service,
            @JsonProperty("source_ip") JsonNullable<String> sourceIp,
            @JsonProperty("status_code") long statusCode,
            @JsonProperty("success") boolean success,
            @JsonProperty("timestamp") String timestamp,
            @JsonProperty("unified_api") UnifiedApi unifiedApi) {
        Utils.checkNotNull(apiStyle, "apiStyle");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(childRequest, "childRequest");
        Utils.checkNotNull(consumerId, "consumerId");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(errorMessage, "errorMessage");
        Utils.checkNotNull(execution, "execution");
        Utils.checkNotNull(hasChildren, "hasChildren");
        Utils.checkNotNull(httpMethod, "httpMethod");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(latency, "latency");
        Utils.checkNotNull(operation, "operation");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(sandbox, "sandbox");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(sourceIp, "sourceIp");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.apiStyle = apiStyle;
        this.baseUrl = baseUrl;
        this.childRequest = childRequest;
        this.consumerId = consumerId;
        this.duration = duration;
        this.errorMessage = errorMessage;
        this.execution = execution;
        this.hasChildren = hasChildren;
        this.httpMethod = httpMethod;
        this.id = id;
        this.latency = latency;
        this.operation = operation;
        this.parentId = parentId;
        this.path = path;
        this.sandbox = sandbox;
        this.service = service;
        this.sourceIp = sourceIp;
        this.statusCode = statusCode;
        this.success = success;
        this.timestamp = timestamp;
        this.unifiedApi = unifiedApi;
    }
    
    public Log(
            String apiStyle,
            String baseUrl,
            boolean childRequest,
            String consumerId,
            double duration,
            long execution,
            boolean hasChildren,
            String httpMethod,
            String id,
            double latency,
            Operation operation,
            String path,
            boolean sandbox,
            Service service,
            long statusCode,
            boolean success,
            String timestamp,
            UnifiedApi unifiedApi) {
        this(apiStyle, baseUrl, childRequest, consumerId, duration, JsonNullable.undefined(), execution, hasChildren, httpMethod, id, latency, operation, Optional.empty(), path, sandbox, service, JsonNullable.undefined(), statusCode, success, timestamp, unifiedApi);
    }

    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    @JsonIgnore
    public String apiStyle() {
        return apiStyle;
    }

    /**
     * The Apideck base URL the request was made to.
     */
    @JsonIgnore
    public String baseUrl() {
        return baseUrl;
    }

    /**
     * Indicates whether or not this is a child or parent request.
     */
    @JsonIgnore
    public boolean childRequest() {
        return childRequest;
    }

    /**
     * The consumer Id associated with the request.
     */
    @JsonIgnore
    public String consumerId() {
        return consumerId;
    }

    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    @JsonIgnore
    public double duration() {
        return duration;
    }

    /**
     * If error occurred, this is brief explanation
     */
    @JsonIgnore
    public JsonNullable<String> errorMessage() {
        return errorMessage;
    }

    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    @JsonIgnore
    public long execution() {
        return execution;
    }

    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    @JsonIgnore
    public boolean hasChildren() {
        return hasChildren;
    }

    /**
     * HTTP Method of request.
     */
    @JsonIgnore
    public String httpMethod() {
        return httpMethod;
    }

    /**
     * UUID acting as Request Identifier.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Latency added by making this request via Unified Api.
     */
    @JsonIgnore
    public double latency() {
        return latency;
    }

    /**
     * The request as defined in OpenApi Spec.
     */
    @JsonIgnore
    public Operation operation() {
        return operation;
    }

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    @JsonIgnore
    public Optional<String> parentId() {
        return parentId;
    }

    /**
     * The path component of the URI the request was made to.
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    @JsonIgnore
    public boolean sandbox() {
        return sandbox;
    }

    /**
     * Apideck service provider associated with request.
     */
    @JsonIgnore
    public Service service() {
        return service;
    }

    /**
     * The IP address of the source of the request.
     */
    @JsonIgnore
    public JsonNullable<String> sourceIp() {
        return sourceIp;
    }

    /**
     * HTTP Status code that was returned.
     */
    @JsonIgnore
    public long statusCode() {
        return statusCode;
    }

    /**
     * Whether or not the request was successful.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    /**
     * ISO Date and time when the request was made.
     */
    @JsonIgnore
    public String timestamp() {
        return timestamp;
    }

    /**
     * Which Unified Api request was made to.
     */
    @JsonIgnore
    public UnifiedApi unifiedApi() {
        return unifiedApi;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    public Log withApiStyle(String apiStyle) {
        Utils.checkNotNull(apiStyle, "apiStyle");
        this.apiStyle = apiStyle;
        return this;
    }

    /**
     * The Apideck base URL the request was made to.
     */
    public Log withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    /**
     * Indicates whether or not this is a child or parent request.
     */
    public Log withChildRequest(boolean childRequest) {
        Utils.checkNotNull(childRequest, "childRequest");
        this.childRequest = childRequest;
        return this;
    }

    /**
     * The consumer Id associated with the request.
     */
    public Log withConsumerId(String consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = consumerId;
        return this;
    }

    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    public Log withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * If error occurred, this is brief explanation
     */
    public Log withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }

    /**
     * If error occurred, this is brief explanation
     */
    public Log withErrorMessage(JsonNullable<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    public Log withExecution(long execution) {
        Utils.checkNotNull(execution, "execution");
        this.execution = execution;
        return this;
    }

    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    public Log withHasChildren(boolean hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = hasChildren;
        return this;
    }

    /**
     * HTTP Method of request.
     */
    public Log withHttpMethod(String httpMethod) {
        Utils.checkNotNull(httpMethod, "httpMethod");
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * UUID acting as Request Identifier.
     */
    public Log withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Latency added by making this request via Unified Api.
     */
    public Log withLatency(double latency) {
        Utils.checkNotNull(latency, "latency");
        this.latency = latency;
        return this;
    }

    /**
     * The request as defined in OpenApi Spec.
     */
    public Log withOperation(Operation operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = operation;
        return this;
    }

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    public Log withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    public Log withParentId(Optional<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    /**
     * The path component of the URI the request was made to.
     */
    public Log withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    public Log withSandbox(boolean sandbox) {
        Utils.checkNotNull(sandbox, "sandbox");
        this.sandbox = sandbox;
        return this;
    }

    /**
     * Apideck service provider associated with request.
     */
    public Log withService(Service service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    /**
     * The IP address of the source of the request.
     */
    public Log withSourceIp(String sourceIp) {
        Utils.checkNotNull(sourceIp, "sourceIp");
        this.sourceIp = JsonNullable.of(sourceIp);
        return this;
    }

    /**
     * The IP address of the source of the request.
     */
    public Log withSourceIp(JsonNullable<String> sourceIp) {
        Utils.checkNotNull(sourceIp, "sourceIp");
        this.sourceIp = sourceIp;
        return this;
    }

    /**
     * HTTP Status code that was returned.
     */
    public Log withStatusCode(long statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Whether or not the request was successful.
     */
    public Log withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * ISO Date and time when the request was made.
     */
    public Log withTimestamp(String timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Which Unified Api request was made to.
     */
    public Log withUnifiedApi(UnifiedApi unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Log other = (Log) o;
        return 
            Objects.deepEquals(this.apiStyle, other.apiStyle) &&
            Objects.deepEquals(this.baseUrl, other.baseUrl) &&
            Objects.deepEquals(this.childRequest, other.childRequest) &&
            Objects.deepEquals(this.consumerId, other.consumerId) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.errorMessage, other.errorMessage) &&
            Objects.deepEquals(this.execution, other.execution) &&
            Objects.deepEquals(this.hasChildren, other.hasChildren) &&
            Objects.deepEquals(this.httpMethod, other.httpMethod) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.latency, other.latency) &&
            Objects.deepEquals(this.operation, other.operation) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.sandbox, other.sandbox) &&
            Objects.deepEquals(this.service, other.service) &&
            Objects.deepEquals(this.sourceIp, other.sourceIp) &&
            Objects.deepEquals(this.statusCode, other.statusCode) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.unifiedApi, other.unifiedApi);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiStyle,
            baseUrl,
            childRequest,
            consumerId,
            duration,
            errorMessage,
            execution,
            hasChildren,
            httpMethod,
            id,
            latency,
            operation,
            parentId,
            path,
            sandbox,
            service,
            sourceIp,
            statusCode,
            success,
            timestamp,
            unifiedApi);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Log.class,
                "apiStyle", apiStyle,
                "baseUrl", baseUrl,
                "childRequest", childRequest,
                "consumerId", consumerId,
                "duration", duration,
                "errorMessage", errorMessage,
                "execution", execution,
                "hasChildren", hasChildren,
                "httpMethod", httpMethod,
                "id", id,
                "latency", latency,
                "operation", operation,
                "parentId", parentId,
                "path", path,
                "sandbox", sandbox,
                "service", service,
                "sourceIp", sourceIp,
                "statusCode", statusCode,
                "success", success,
                "timestamp", timestamp,
                "unifiedApi", unifiedApi);
    }
    
    public final static class Builder {
 
        private String apiStyle;
 
        private String baseUrl;
 
        private Boolean childRequest;
 
        private String consumerId;
 
        private Double duration;
 
        private JsonNullable<String> errorMessage = JsonNullable.undefined();
 
        private Long execution;
 
        private Boolean hasChildren;
 
        private String httpMethod;
 
        private String id;
 
        private Double latency;
 
        private Operation operation;
 
        private Optional<String> parentId = Optional.empty();
 
        private String path;
 
        private Boolean sandbox;
 
        private Service service;
 
        private JsonNullable<String> sourceIp = JsonNullable.undefined();
 
        private Long statusCode;
 
        private Boolean success;
 
        private String timestamp;
 
        private UnifiedApi unifiedApi;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates if the request was made via REST or Graphql endpoint.
         */
        public Builder apiStyle(String apiStyle) {
            Utils.checkNotNull(apiStyle, "apiStyle");
            this.apiStyle = apiStyle;
            return this;
        }

        /**
         * The Apideck base URL the request was made to.
         */
        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }

        /**
         * Indicates whether or not this is a child or parent request.
         */
        public Builder childRequest(boolean childRequest) {
            Utils.checkNotNull(childRequest, "childRequest");
            this.childRequest = childRequest;
            return this;
        }

        /**
         * The consumer Id associated with the request.
         */
        public Builder consumerId(String consumerId) {
            Utils.checkNotNull(consumerId, "consumerId");
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The entire execution time in milliseconds it took to call the Apideck service provider.
         */
        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * If error occurred, this is brief explanation
         */
        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * If error occurred, this is brief explanation
         */
        public Builder errorMessage(JsonNullable<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        /**
         * The entire execution time in milliseconds it took to make the request.
         */
        public Builder execution(long execution) {
            Utils.checkNotNull(execution, "execution");
            this.execution = execution;
            return this;
        }

        /**
         * When request is a parent request, this indicates if there are child requests associated.
         */
        public Builder hasChildren(boolean hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = hasChildren;
            return this;
        }

        /**
         * HTTP Method of request.
         */
        public Builder httpMethod(String httpMethod) {
            Utils.checkNotNull(httpMethod, "httpMethod");
            this.httpMethod = httpMethod;
            return this;
        }

        /**
         * UUID acting as Request Identifier.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Latency added by making this request via Unified Api.
         */
        public Builder latency(double latency) {
            Utils.checkNotNull(latency, "latency");
            this.latency = latency;
            return this;
        }

        /**
         * The request as defined in OpenApi Spec.
         */
        public Builder operation(Operation operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = operation;
            return this;
        }

        /**
         * When request is a child request, this UUID indicates it's parent request.
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        /**
         * When request is a child request, this UUID indicates it's parent request.
         */
        public Builder parentId(Optional<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        /**
         * The path component of the URI the request was made to.
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * Indicates whether the request was made using Apidecks sandbox credentials or not.
         */
        public Builder sandbox(boolean sandbox) {
            Utils.checkNotNull(sandbox, "sandbox");
            this.sandbox = sandbox;
            return this;
        }

        /**
         * Apideck service provider associated with request.
         */
        public Builder service(Service service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }

        /**
         * The IP address of the source of the request.
         */
        public Builder sourceIp(String sourceIp) {
            Utils.checkNotNull(sourceIp, "sourceIp");
            this.sourceIp = JsonNullable.of(sourceIp);
            return this;
        }

        /**
         * The IP address of the source of the request.
         */
        public Builder sourceIp(JsonNullable<String> sourceIp) {
            Utils.checkNotNull(sourceIp, "sourceIp");
            this.sourceIp = sourceIp;
            return this;
        }

        /**
         * HTTP Status code that was returned.
         */
        public Builder statusCode(long statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Whether or not the request was successful.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * ISO Date and time when the request was made.
         */
        public Builder timestamp(String timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Which Unified Api request was made to.
         */
        public Builder unifiedApi(UnifiedApi unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = unifiedApi;
            return this;
        }
        
        public Log build() {
            return new Log(
                apiStyle,
                baseUrl,
                childRequest,
                consumerId,
                duration,
                errorMessage,
                execution,
                hasChildren,
                httpMethod,
                id,
                latency,
                operation,
                parentId,
                path,
                sandbox,
                service,
                sourceIp,
                statusCode,
                success,
                timestamp,
                unifiedApi);
        }
    }
}

