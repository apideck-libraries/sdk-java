/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Log {
    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    @JsonProperty("api_style")
    private String apiStyle;

    /**
     * The Apideck base URL the request was made to.
     */
    @JsonProperty("base_url")
    private String baseUrl;

    /**
     * Indicates whether or not this is a child or parent request.
     */
    @JsonProperty("child_request")
    private boolean childRequest;

    /**
     * The consumer Id associated with the request.
     */
    @JsonProperty("consumer_id")
    private String consumerId;

    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    @JsonProperty("duration")
    private double duration;

    /**
     * If error occurred, this is brief explanation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_message")
    private JsonNullable<String> errorMessage;

    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    @JsonProperty("execution")
    private long execution;

    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    @JsonProperty("has_children")
    private boolean hasChildren;

    /**
     * HTTP Method of request.
     */
    @JsonProperty("http_method")
    private String httpMethod;

    /**
     * UUID acting as Request Identifier.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Latency added by making this request via Unified Api.
     */
    @JsonProperty("latency")
    private double latency;

    /**
     * The request as defined in OpenApi Spec.
     */
    @JsonProperty("operation")
    private Operation operation;

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The path component of the URI the request was made to.
     */
    @JsonProperty("path")
    private String path;

    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    @JsonProperty("sandbox")
    private boolean sandbox;

    /**
     * Apideck service provider associated with request.
     */
    @JsonProperty("service")
    private Service service;

    /**
     * The IP address of the source of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_ip")
    private JsonNullable<String> sourceIp;

    /**
     * HTTP Status code that was returned.
     */
    @JsonProperty("status_code")
    private long statusCode;

    /**
     * Whether or not the request was successful.
     */
    @JsonProperty("success")
    private boolean success;

    /**
     * ISO Date and time when the request was made.
     */
    @JsonProperty("timestamp")
    private String timestamp;

    /**
     * Which Unified Api request was made to.
     */
    @JsonProperty("unified_api")
    private UnifiedApi unifiedApi;

    @JsonCreator
    public Log(
            @JsonProperty("api_style") @Nonnull String apiStyle,
            @JsonProperty("base_url") @Nonnull String baseUrl,
            @JsonProperty("child_request") boolean childRequest,
            @JsonProperty("consumer_id") @Nonnull String consumerId,
            @JsonProperty("duration") double duration,
            @JsonProperty("error_message") @Nullable JsonNullable<String> errorMessage,
            @JsonProperty("execution") long execution,
            @JsonProperty("has_children") boolean hasChildren,
            @JsonProperty("http_method") @Nonnull String httpMethod,
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("latency") double latency,
            @JsonProperty("operation") @Nonnull Operation operation,
            @JsonProperty("parent_id") @Nullable String parentId,
            @JsonProperty("path") @Nonnull String path,
            @JsonProperty("sandbox") boolean sandbox,
            @JsonProperty("service") @Nonnull Service service,
            @JsonProperty("source_ip") @Nullable JsonNullable<String> sourceIp,
            @JsonProperty("status_code") long statusCode,
            @JsonProperty("success") boolean success,
            @JsonProperty("timestamp") @Nonnull String timestamp,
            @JsonProperty("unified_api") @Nonnull UnifiedApi unifiedApi) {
        this.apiStyle = Optional.ofNullable(apiStyle)
            .orElseThrow(() -> new IllegalArgumentException("apiStyle cannot be null"));
        this.baseUrl = Optional.ofNullable(baseUrl)
            .orElseThrow(() -> new IllegalArgumentException("baseUrl cannot be null"));
        this.childRequest = childRequest;
        this.consumerId = Optional.ofNullable(consumerId)
            .orElseThrow(() -> new IllegalArgumentException("consumerId cannot be null"));
        this.duration = duration;
        this.errorMessage = Optional.ofNullable(errorMessage)
            .orElse(JsonNullable.undefined());
        this.execution = execution;
        this.hasChildren = hasChildren;
        this.httpMethod = Optional.ofNullable(httpMethod)
            .orElseThrow(() -> new IllegalArgumentException("httpMethod cannot be null"));
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.latency = latency;
        this.operation = Optional.ofNullable(operation)
            .orElseThrow(() -> new IllegalArgumentException("operation cannot be null"));
        this.parentId = JsonNullable.of(parentId);
        this.path = Optional.ofNullable(path)
            .orElseThrow(() -> new IllegalArgumentException("path cannot be null"));
        this.sandbox = sandbox;
        this.service = Optional.ofNullable(service)
            .orElseThrow(() -> new IllegalArgumentException("service cannot be null"));
        this.sourceIp = Optional.ofNullable(sourceIp)
            .orElse(JsonNullable.undefined());
        this.statusCode = statusCode;
        this.success = success;
        this.timestamp = Optional.ofNullable(timestamp)
            .orElseThrow(() -> new IllegalArgumentException("timestamp cannot be null"));
        this.unifiedApi = Optional.ofNullable(unifiedApi)
            .orElseThrow(() -> new IllegalArgumentException("unifiedApi cannot be null"));
    }
    
    public Log(
            @Nonnull String apiStyle,
            @Nonnull String baseUrl,
            boolean childRequest,
            @Nonnull String consumerId,
            double duration,
            long execution,
            boolean hasChildren,
            @Nonnull String httpMethod,
            @Nonnull String id,
            double latency,
            @Nonnull Operation operation,
            @Nonnull String path,
            boolean sandbox,
            @Nonnull Service service,
            long statusCode,
            boolean success,
            @Nonnull String timestamp,
            @Nonnull UnifiedApi unifiedApi) {
        this(apiStyle, baseUrl, childRequest,
            consumerId, duration, null,
            execution, hasChildren, httpMethod,
            id, latency, operation,
            null, path, sandbox,
            service, null, statusCode,
            success, timestamp, unifiedApi);
    }

    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    public String apiStyle() {
        return this.apiStyle;
    }

    /**
     * The Apideck base URL the request was made to.
     */
    public String baseUrl() {
        return this.baseUrl;
    }

    /**
     * Indicates whether or not this is a child or parent request.
     */
    public boolean childRequest() {
        return this.childRequest;
    }

    /**
     * The consumer Id associated with the request.
     */
    public String consumerId() {
        return this.consumerId;
    }

    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    public double duration() {
        return this.duration;
    }

    /**
     * If error occurred, this is brief explanation
     */
    public JsonNullable<String> errorMessage() {
        return this.errorMessage;
    }

    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    public long execution() {
        return this.execution;
    }

    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    public boolean hasChildren() {
        return this.hasChildren;
    }

    /**
     * HTTP Method of request.
     */
    public String httpMethod() {
        return this.httpMethod;
    }

    /**
     * UUID acting as Request Identifier.
     */
    public String id() {
        return this.id;
    }

    /**
     * Latency added by making this request via Unified Api.
     */
    public double latency() {
        return this.latency;
    }

    /**
     * The request as defined in OpenApi Spec.
     */
    public Operation operation() {
        return this.operation;
    }

    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The path component of the URI the request was made to.
     */
    public String path() {
        return this.path;
    }

    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    public boolean sandbox() {
        return this.sandbox;
    }

    /**
     * Apideck service provider associated with request.
     */
    public Service service() {
        return this.service;
    }

    /**
     * The IP address of the source of the request.
     */
    public JsonNullable<String> sourceIp() {
        return this.sourceIp;
    }

    /**
     * HTTP Status code that was returned.
     */
    public long statusCode() {
        return this.statusCode;
    }

    /**
     * Whether or not the request was successful.
     */
    public boolean success() {
        return this.success;
    }

    /**
     * ISO Date and time when the request was made.
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Which Unified Api request was made to.
     */
    public UnifiedApi unifiedApi() {
        return this.unifiedApi;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates if the request was made via REST or Graphql endpoint.
     */
    public Log withApiStyle(@Nonnull String apiStyle) {
        this.apiStyle = Utils.checkNotNull(apiStyle, "apiStyle");
        return this;
    }


    /**
     * The Apideck base URL the request was made to.
     */
    public Log withBaseUrl(@Nonnull String baseUrl) {
        this.baseUrl = Utils.checkNotNull(baseUrl, "baseUrl");
        return this;
    }


    /**
     * Indicates whether or not this is a child or parent request.
     */
    public Log withChildRequest(boolean childRequest) {
        this.childRequest = childRequest;
        return this;
    }


    /**
     * The consumer Id associated with the request.
     */
    public Log withConsumerId(@Nonnull String consumerId) {
        this.consumerId = Utils.checkNotNull(consumerId, "consumerId");
        return this;
    }


    /**
     * The entire execution time in milliseconds it took to call the Apideck service provider.
     */
    public Log withDuration(double duration) {
        this.duration = duration;
        return this;
    }


    /**
     * If error occurred, this is brief explanation
     */
    public Log withErrorMessage(@Nullable String errorMessage) {
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }


    /**
     * The entire execution time in milliseconds it took to make the request.
     */
    public Log withExecution(long execution) {
        this.execution = execution;
        return this;
    }


    /**
     * When request is a parent request, this indicates if there are child requests associated.
     */
    public Log withHasChildren(boolean hasChildren) {
        this.hasChildren = hasChildren;
        return this;
    }


    /**
     * HTTP Method of request.
     */
    public Log withHttpMethod(@Nonnull String httpMethod) {
        this.httpMethod = Utils.checkNotNull(httpMethod, "httpMethod");
        return this;
    }


    /**
     * UUID acting as Request Identifier.
     */
    public Log withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * Latency added by making this request via Unified Api.
     */
    public Log withLatency(double latency) {
        this.latency = latency;
        return this;
    }


    /**
     * The request as defined in OpenApi Spec.
     */
    public Log withOperation(@Nonnull Operation operation) {
        this.operation = Utils.checkNotNull(operation, "operation");
        return this;
    }


    /**
     * When request is a child request, this UUID indicates it's parent request.
     */
    public Log withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The path component of the URI the request was made to.
     */
    public Log withPath(@Nonnull String path) {
        this.path = Utils.checkNotNull(path, "path");
        return this;
    }


    /**
     * Indicates whether the request was made using Apidecks sandbox credentials or not.
     */
    public Log withSandbox(boolean sandbox) {
        this.sandbox = sandbox;
        return this;
    }


    /**
     * Apideck service provider associated with request.
     */
    public Log withService(@Nonnull Service service) {
        this.service = Utils.checkNotNull(service, "service");
        return this;
    }


    /**
     * The IP address of the source of the request.
     */
    public Log withSourceIp(@Nullable String sourceIp) {
        this.sourceIp = JsonNullable.of(sourceIp);
        return this;
    }


    /**
     * HTTP Status code that was returned.
     */
    public Log withStatusCode(long statusCode) {
        this.statusCode = statusCode;
        return this;
    }


    /**
     * Whether or not the request was successful.
     */
    public Log withSuccess(boolean success) {
        this.success = success;
        return this;
    }


    /**
     * ISO Date and time when the request was made.
     */
    public Log withTimestamp(@Nonnull String timestamp) {
        this.timestamp = Utils.checkNotNull(timestamp, "timestamp");
        return this;
    }


    /**
     * Which Unified Api request was made to.
     */
    public Log withUnifiedApi(@Nonnull UnifiedApi unifiedApi) {
        this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Log other = (Log) o;
        return 
            Utils.enhancedDeepEquals(this.apiStyle, other.apiStyle) &&
            Utils.enhancedDeepEquals(this.baseUrl, other.baseUrl) &&
            Utils.enhancedDeepEquals(this.childRequest, other.childRequest) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.duration, other.duration) &&
            Utils.enhancedDeepEquals(this.errorMessage, other.errorMessage) &&
            Utils.enhancedDeepEquals(this.execution, other.execution) &&
            Utils.enhancedDeepEquals(this.hasChildren, other.hasChildren) &&
            Utils.enhancedDeepEquals(this.httpMethod, other.httpMethod) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.latency, other.latency) &&
            Utils.enhancedDeepEquals(this.operation, other.operation) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.sandbox, other.sandbox) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.sourceIp, other.sourceIp) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            apiStyle, baseUrl, childRequest,
            consumerId, duration, errorMessage,
            execution, hasChildren, httpMethod,
            id, latency, operation,
            parentId, path, sandbox,
            service, sourceIp, statusCode,
            success, timestamp, unifiedApi);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Log.class,
                "apiStyle", apiStyle,
                "baseUrl", baseUrl,
                "childRequest", childRequest,
                "consumerId", consumerId,
                "duration", duration,
                "errorMessage", errorMessage,
                "execution", execution,
                "hasChildren", hasChildren,
                "httpMethod", httpMethod,
                "id", id,
                "latency", latency,
                "operation", operation,
                "parentId", parentId,
                "path", path,
                "sandbox", sandbox,
                "service", service,
                "sourceIp", sourceIp,
                "statusCode", statusCode,
                "success", success,
                "timestamp", timestamp,
                "unifiedApi", unifiedApi);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String apiStyle;

        private String baseUrl;

        private boolean childRequest;

        private String consumerId;

        private double duration;

        private JsonNullable<String> errorMessage;

        private long execution;

        private boolean hasChildren;

        private String httpMethod;

        private String id;

        private double latency;

        private Operation operation;

        private String parentId;

        private String path;

        private boolean sandbox;

        private Service service;

        private JsonNullable<String> sourceIp;

        private long statusCode;

        private boolean success;

        private String timestamp;

        private UnifiedApi unifiedApi;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates if the request was made via REST or Graphql endpoint.
         */
        public Builder apiStyle(@Nonnull String apiStyle) {
            this.apiStyle = Utils.checkNotNull(apiStyle, "apiStyle");
            return this;
        }

        /**
         * The Apideck base URL the request was made to.
         */
        public Builder baseUrl(@Nonnull String baseUrl) {
            this.baseUrl = Utils.checkNotNull(baseUrl, "baseUrl");
            return this;
        }

        /**
         * Indicates whether or not this is a child or parent request.
         */
        public Builder childRequest(boolean childRequest) {
            this.childRequest = childRequest;
            return this;
        }

        /**
         * The consumer Id associated with the request.
         */
        public Builder consumerId(@Nonnull String consumerId) {
            this.consumerId = Utils.checkNotNull(consumerId, "consumerId");
            return this;
        }

        /**
         * The entire execution time in milliseconds it took to call the Apideck service provider.
         */
        public Builder duration(double duration) {
            this.duration = duration;
            return this;
        }

        /**
         * If error occurred, this is brief explanation
         */
        public Builder errorMessage(@Nullable String errorMessage) {
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * The entire execution time in milliseconds it took to make the request.
         */
        public Builder execution(long execution) {
            this.execution = execution;
            return this;
        }

        /**
         * When request is a parent request, this indicates if there are child requests associated.
         */
        public Builder hasChildren(boolean hasChildren) {
            this.hasChildren = hasChildren;
            return this;
        }

        /**
         * HTTP Method of request.
         */
        public Builder httpMethod(@Nonnull String httpMethod) {
            this.httpMethod = Utils.checkNotNull(httpMethod, "httpMethod");
            return this;
        }

        /**
         * UUID acting as Request Identifier.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * Latency added by making this request via Unified Api.
         */
        public Builder latency(double latency) {
            this.latency = latency;
            return this;
        }

        /**
         * The request as defined in OpenApi Spec.
         */
        public Builder operation(@Nonnull Operation operation) {
            this.operation = Utils.checkNotNull(operation, "operation");
            return this;
        }

        /**
         * When request is a child request, this UUID indicates it's parent request.
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * The path component of the URI the request was made to.
         */
        public Builder path(@Nonnull String path) {
            this.path = Utils.checkNotNull(path, "path");
            return this;
        }

        /**
         * Indicates whether the request was made using Apidecks sandbox credentials or not.
         */
        public Builder sandbox(boolean sandbox) {
            this.sandbox = sandbox;
            return this;
        }

        /**
         * Apideck service provider associated with request.
         */
        public Builder service(@Nonnull Service service) {
            this.service = Utils.checkNotNull(service, "service");
            return this;
        }

        /**
         * The IP address of the source of the request.
         */
        public Builder sourceIp(@Nullable String sourceIp) {
            this.sourceIp = JsonNullable.of(sourceIp);
            return this;
        }

        /**
         * HTTP Status code that was returned.
         */
        public Builder statusCode(long statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Whether or not the request was successful.
         */
        public Builder success(boolean success) {
            this.success = success;
            return this;
        }

        /**
         * ISO Date and time when the request was made.
         */
        public Builder timestamp(@Nonnull String timestamp) {
            this.timestamp = Utils.checkNotNull(timestamp, "timestamp");
            return this;
        }

        /**
         * Which Unified Api request was made to.
         */
        public Builder unifiedApi(@Nonnull UnifiedApi unifiedApi) {
            this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
            return this;
        }

        public Log build() {
            return new Log(
                apiStyle, baseUrl, childRequest,
                consumerId, duration, errorMessage,
                execution, hasChildren, httpMethod,
                id, latency, operation,
                parentId, path, sandbox,
                service, sourceIp, statusCode,
                success, timestamp, unifiedApi);
        }

    }
}
