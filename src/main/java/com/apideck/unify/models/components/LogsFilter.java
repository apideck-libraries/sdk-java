/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class LogsFilter {

    @SpeakeasyMetadata("queryParam:name=connector_id")
    private JsonNullable<String> connectorId;

    /**
     * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
     */
    @SpeakeasyMetadata("queryParam:name=status_code")
    private JsonNullable<Double> statusCode;

    /**
     * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
     */
    @SpeakeasyMetadata("queryParam:name=status_codes")
    private JsonNullable<? extends List<Double>> statusCodes;


    @SpeakeasyMetadata("queryParam:name=exclude_unified_apis")
    private JsonNullable<String> excludeUnifiedApis;

    @JsonCreator
    public LogsFilter(
            JsonNullable<String> connectorId,
            JsonNullable<Double> statusCode,
            JsonNullable<? extends List<Double>> statusCodes,
            JsonNullable<String> excludeUnifiedApis) {
        Utils.checkNotNull(connectorId, "connectorId");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(statusCodes, "statusCodes");
        Utils.checkNotNull(excludeUnifiedApis, "excludeUnifiedApis");
        this.connectorId = connectorId;
        this.statusCode = statusCode;
        this.statusCodes = statusCodes;
        this.excludeUnifiedApis = excludeUnifiedApis;
    }
    
    public LogsFilter() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> connectorId() {
        return connectorId;
    }

    /**
     * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
     */
    @JsonIgnore
    public JsonNullable<Double> statusCode() {
        return statusCode;
    }

    /**
     * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Double>> statusCodes() {
        return (JsonNullable<List<Double>>) statusCodes;
    }

    @JsonIgnore
    public JsonNullable<String> excludeUnifiedApis() {
        return excludeUnifiedApis;
    }

    public static Builder builder() {
        return new Builder();
    }


    public LogsFilter withConnectorId(String connectorId) {
        Utils.checkNotNull(connectorId, "connectorId");
        this.connectorId = JsonNullable.of(connectorId);
        return this;
    }

    public LogsFilter withConnectorId(JsonNullable<String> connectorId) {
        Utils.checkNotNull(connectorId, "connectorId");
        this.connectorId = connectorId;
        return this;
    }

    /**
     * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
     */
    public LogsFilter withStatusCode(double statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = JsonNullable.of(statusCode);
        return this;
    }

    /**
     * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
     */
    public LogsFilter withStatusCode(JsonNullable<Double> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
     */
    public LogsFilter withStatusCodes(List<Double> statusCodes) {
        Utils.checkNotNull(statusCodes, "statusCodes");
        this.statusCodes = JsonNullable.of(statusCodes);
        return this;
    }

    /**
     * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
     */
    public LogsFilter withStatusCodes(JsonNullable<? extends List<Double>> statusCodes) {
        Utils.checkNotNull(statusCodes, "statusCodes");
        this.statusCodes = statusCodes;
        return this;
    }

    public LogsFilter withExcludeUnifiedApis(String excludeUnifiedApis) {
        Utils.checkNotNull(excludeUnifiedApis, "excludeUnifiedApis");
        this.excludeUnifiedApis = JsonNullable.of(excludeUnifiedApis);
        return this;
    }

    public LogsFilter withExcludeUnifiedApis(JsonNullable<String> excludeUnifiedApis) {
        Utils.checkNotNull(excludeUnifiedApis, "excludeUnifiedApis");
        this.excludeUnifiedApis = excludeUnifiedApis;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LogsFilter other = (LogsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.connectorId, other.connectorId) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.statusCodes, other.statusCodes) &&
            Utils.enhancedDeepEquals(this.excludeUnifiedApis, other.excludeUnifiedApis);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            connectorId, statusCode, statusCodes,
            excludeUnifiedApis);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LogsFilter.class,
                "connectorId", connectorId,
                "statusCode", statusCode,
                "statusCodes", statusCodes,
                "excludeUnifiedApis", excludeUnifiedApis);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> connectorId = JsonNullable.undefined();

        private JsonNullable<Double> statusCode = JsonNullable.undefined();

        private JsonNullable<? extends List<Double>> statusCodes = JsonNullable.undefined();

        private JsonNullable<String> excludeUnifiedApis = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder connectorId(String connectorId) {
            Utils.checkNotNull(connectorId, "connectorId");
            this.connectorId = JsonNullable.of(connectorId);
            return this;
        }

        public Builder connectorId(JsonNullable<String> connectorId) {
            Utils.checkNotNull(connectorId, "connectorId");
            this.connectorId = connectorId;
            return this;
        }


        /**
         * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
         */
        public Builder statusCode(double statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = JsonNullable.of(statusCode);
            return this;
        }

        /**
         * Filter by a single HTTP status code. For backward compatibility - use status_codes for multiple values.
         */
        public Builder statusCode(JsonNullable<Double> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }


        /**
         * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
         */
        public Builder statusCodes(List<Double> statusCodes) {
            Utils.checkNotNull(statusCodes, "statusCodes");
            this.statusCodes = JsonNullable.of(statusCodes);
            return this;
        }

        /**
         * Filter by multiple HTTP status codes. Values must be between 100-599. Maximum 50 status codes allowed.
         */
        public Builder statusCodes(JsonNullable<? extends List<Double>> statusCodes) {
            Utils.checkNotNull(statusCodes, "statusCodes");
            this.statusCodes = statusCodes;
            return this;
        }


        public Builder excludeUnifiedApis(String excludeUnifiedApis) {
            Utils.checkNotNull(excludeUnifiedApis, "excludeUnifiedApis");
            this.excludeUnifiedApis = JsonNullable.of(excludeUnifiedApis);
            return this;
        }

        public Builder excludeUnifiedApis(JsonNullable<String> excludeUnifiedApis) {
            Utils.checkNotNull(excludeUnifiedApis, "excludeUnifiedApis");
            this.excludeUnifiedApis = excludeUnifiedApis;
            return this;
        }

        public LogsFilter build() {

            return new LogsFilter(
                connectorId, statusCode, statusCodes,
                excludeUnifiedApis);
        }

    }
}
