/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LogsFilter {

    @SpeakeasyMetadata("queryParam:name=connector_id")
    private JsonNullable<String> connectorId;


    @SpeakeasyMetadata("queryParam:name=status_code")
    private JsonNullable<Double> statusCode;


    @SpeakeasyMetadata("queryParam:name=exclude_unified_apis")
    private JsonNullable<String> excludeUnifiedApis;

    @JsonCreator
    public LogsFilter(
            @Nullable JsonNullable<String> connectorId,
            @Nullable JsonNullable<Double> statusCode,
            @Nullable JsonNullable<String> excludeUnifiedApis) {
        this.connectorId = Optional.ofNullable(connectorId)
            .orElse(JsonNullable.undefined());
        this.statusCode = Optional.ofNullable(statusCode)
            .orElse(JsonNullable.undefined());
        this.excludeUnifiedApis = Optional.ofNullable(excludeUnifiedApis)
            .orElse(JsonNullable.undefined());
    }
    
    public LogsFilter() {
        this(null, null, null);
    }

    public JsonNullable<String> connectorId() {
        return this.connectorId;
    }

    public JsonNullable<Double> statusCode() {
        return this.statusCode;
    }

    public JsonNullable<String> excludeUnifiedApis() {
        return this.excludeUnifiedApis;
    }

    public static Builder builder() {
        return new Builder();
    }


    public LogsFilter withConnectorId(@Nullable String connectorId) {
        this.connectorId = JsonNullable.of(connectorId);
        return this;
    }


    public LogsFilter withStatusCode(@Nullable Double statusCode) {
        this.statusCode = JsonNullable.of(statusCode);
        return this;
    }


    public LogsFilter withExcludeUnifiedApis(@Nullable String excludeUnifiedApis) {
        this.excludeUnifiedApis = JsonNullable.of(excludeUnifiedApis);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LogsFilter other = (LogsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.connectorId, other.connectorId) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.excludeUnifiedApis, other.excludeUnifiedApis);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            connectorId, statusCode, excludeUnifiedApis);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LogsFilter.class,
                "connectorId", connectorId,
                "statusCode", statusCode,
                "excludeUnifiedApis", excludeUnifiedApis);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> connectorId;

        private JsonNullable<Double> statusCode;

        private JsonNullable<String> excludeUnifiedApis;

        private Builder() {
          // force use of static builder() method
        }

        public Builder connectorId(@Nullable String connectorId) {
            this.connectorId = JsonNullable.of(connectorId);
            return this;
        }

        public Builder statusCode(@Nullable Double statusCode) {
            this.statusCode = JsonNullable.of(statusCode);
            return this;
        }

        public Builder excludeUnifiedApis(@Nullable String excludeUnifiedApis) {
            this.excludeUnifiedApis = JsonNullable.of(excludeUnifiedApis);
            return this;
        }

        public LogsFilter build() {
            return new LogsFilter(
                connectorId, statusCode, excludeUnifiedApis);
        }

    }
}
