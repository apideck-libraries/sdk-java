/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Manager {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The name of the manager, often a combination of their first and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The email address of the manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<EmploymentStatus> employmentStatus;

    @JsonCreator
    public Manager(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("email") @Nullable JsonNullable<String> email,
            @JsonProperty("employment_status") @Nullable JsonNullable<EmploymentStatus> employmentStatus) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.email = Optional.ofNullable(email)
            .orElse(JsonNullable.undefined());
        this.employmentStatus = Optional.ofNullable(employmentStatus)
            .orElse(JsonNullable.undefined());
    }
    
    public Manager() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The name of the manager, often a combination of their first and last names.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * The email address of the manager.
     */
    public JsonNullable<String> email() {
        return this.email;
    }

    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public JsonNullable<EmploymentStatus> employmentStatus() {
        return this.employmentStatus;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Manager withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The name of the manager, often a combination of their first and last names.
     */
    public Manager withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The first name of the person.
     */
    public Manager withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public Manager withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * The email address of the manager.
     */
    public Manager withEmail(@Nullable String email) {
        this.email = JsonNullable.of(email);
        return this;
    }


    /**
     * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
     */
    public Manager withEmploymentStatus(@Nullable EmploymentStatus employmentStatus) {
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Manager other = (Manager) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.employmentStatus, other.employmentStatus);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, firstName,
            lastName, email, employmentStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Manager.class,
                "id", id,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "employmentStatus", employmentStatus);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> name;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> email;

        private JsonNullable<EmploymentStatus> employmentStatus;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The name of the manager, often a combination of their first and last names.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The email address of the manager.
         */
        public Builder email(@Nullable String email) {
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
         */
        public Builder employmentStatus(@Nullable EmploymentStatus employmentStatus) {
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        public Manager build() {
            return new Manager(
                id, name, firstName,
                lastName, email, employmentStatus);
        }

    }
}
