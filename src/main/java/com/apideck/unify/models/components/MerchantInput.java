/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class MerchantInput {

    /**
     * The name of the merchant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends Address> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private Optional<String> ownerId;

    /**
     * The main location ID of the merchant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("main_location_id")
    private JsonNullable<String> mainLocationId;

    /**
     * Status of this merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends MerchantStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charges")
    private Optional<? extends List<ServiceChargeInput>> serviceCharges;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public MerchantInput(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("address") Optional<? extends Address> address,
            @JsonProperty("owner_id") Optional<String> ownerId,
            @JsonProperty("main_location_id") JsonNullable<String> mainLocationId,
            @JsonProperty("status") JsonNullable<? extends MerchantStatus> status,
            @JsonProperty("service_charges") Optional<? extends List<ServiceChargeInput>> serviceCharges,
            @JsonProperty("language") JsonNullable<String> language,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(mainLocationId, "mainLocationId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.address = address;
        this.ownerId = ownerId;
        this.mainLocationId = mainLocationId;
        this.status = status;
        this.serviceCharges = serviceCharges;
        this.language = language;
        this.currency = currency;
        this.passThrough = passThrough;
    }
    
    public MerchantInput() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of the merchant
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> address() {
        return (Optional<Address>) address;
    }

    @JsonIgnore
    public Optional<String> ownerId() {
        return ownerId;
    }

    /**
     * The main location ID of the merchant
     */
    @JsonIgnore
    public JsonNullable<String> mainLocationId() {
        return mainLocationId;
    }

    /**
     * Status of this merchant.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MerchantStatus> status() {
        return (JsonNullable<MerchantStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ServiceChargeInput>> serviceCharges() {
        return (Optional<List<ServiceChargeInput>>) serviceCharges;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonIgnore
    public JsonNullable<String> language() {
        return language;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the merchant
     */
    public MerchantInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the merchant
     */
    public MerchantInput withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public MerchantInput withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public MerchantInput withAddress(Optional<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public MerchantInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = Optional.ofNullable(ownerId);
        return this;
    }

    public MerchantInput withOwnerId(Optional<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The main location ID of the merchant
     */
    public MerchantInput withMainLocationId(String mainLocationId) {
        Utils.checkNotNull(mainLocationId, "mainLocationId");
        this.mainLocationId = JsonNullable.of(mainLocationId);
        return this;
    }

    /**
     * The main location ID of the merchant
     */
    public MerchantInput withMainLocationId(JsonNullable<String> mainLocationId) {
        Utils.checkNotNull(mainLocationId, "mainLocationId");
        this.mainLocationId = mainLocationId;
        return this;
    }

    /**
     * Status of this merchant.
     */
    public MerchantInput withStatus(MerchantStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of this merchant.
     */
    public MerchantInput withStatus(JsonNullable<? extends MerchantStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public MerchantInput withServiceCharges(List<ServiceChargeInput> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = Optional.ofNullable(serviceCharges);
        return this;
    }

    public MerchantInput withServiceCharges(Optional<? extends List<ServiceChargeInput>> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = serviceCharges;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public MerchantInput withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public MerchantInput withLanguage(JsonNullable<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public MerchantInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public MerchantInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public MerchantInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public MerchantInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MerchantInput other = (MerchantInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.mainLocationId, other.mainLocationId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.serviceCharges, other.serviceCharges) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            address,
            ownerId,
            mainLocationId,
            status,
            serviceCharges,
            language,
            currency,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MerchantInput.class,
                "name", name,
                "address", address,
                "ownerId", ownerId,
                "mainLocationId", mainLocationId,
                "status", status,
                "serviceCharges", serviceCharges,
                "language", language,
                "currency", currency,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private Optional<? extends Address> address = Optional.empty();
 
        private Optional<String> ownerId = Optional.empty();
 
        private JsonNullable<String> mainLocationId = JsonNullable.undefined();
 
        private JsonNullable<? extends MerchantStatus> status = JsonNullable.undefined();
 
        private Optional<? extends List<ServiceChargeInput>> serviceCharges = Optional.empty();
 
        private JsonNullable<String> language = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the merchant
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the merchant
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        public Builder ownerId(Optional<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        /**
         * The main location ID of the merchant
         */
        public Builder mainLocationId(String mainLocationId) {
            Utils.checkNotNull(mainLocationId, "mainLocationId");
            this.mainLocationId = JsonNullable.of(mainLocationId);
            return this;
        }

        /**
         * The main location ID of the merchant
         */
        public Builder mainLocationId(JsonNullable<String> mainLocationId) {
            Utils.checkNotNull(mainLocationId, "mainLocationId");
            this.mainLocationId = mainLocationId;
            return this;
        }

        /**
         * Status of this merchant.
         */
        public Builder status(MerchantStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of this merchant.
         */
        public Builder status(JsonNullable<? extends MerchantStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder serviceCharges(List<ServiceChargeInput> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }

        public Builder serviceCharges(Optional<? extends List<ServiceChargeInput>> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = serviceCharges;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public MerchantInput build() {
            return new MerchantInput(
                name,
                address,
                ownerId,
                mainLocationId,
                status,
                serviceCharges,
                language,
                currency,
                passThrough);
        }
    }
}

