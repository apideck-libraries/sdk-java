/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Message {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The phone number that initiated the message.
     */
    @JsonProperty("from")
    private String from;

    /**
     * The phone number that received the message.
     */
    @JsonProperty("to")
    private String to;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The message text.
     */
    @JsonProperty("body")
    private String body;

    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private MessageType type;

    /**
     * The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_of_units")
    private Long numberOfUnits;

    /**
     * The number of media files associated with the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_of_media_files")
    private Long numberOfMediaFiles;

    /**
     * The direction of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    private Direction direction;

    /**
     * Status of the delivery of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private MessageStatus status;

    /**
     * The scheduled date and time of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduled_at")
    private OffsetDateTime scheduledAt;

    /**
     * The date and time that the message was sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sent_at")
    private OffsetDateTime sentAt;

    /**
     * Define a webhook to receive delivery notifications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_url")
    private String webhookUrl;

    /**
     * A client reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private String reference;

    /**
     * Price of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private Price price;

    /**
     * The error returned if your message status is failed or undelivered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Error error;

    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messaging_service_id")
    private String messagingServiceId;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Message(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("from") @Nonnull String from,
            @JsonProperty("to") @Nonnull String to,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("body") @Nonnull String body,
            @JsonProperty("type") @Nullable MessageType type,
            @JsonProperty("number_of_units") @Nullable Long numberOfUnits,
            @JsonProperty("number_of_media_files") @Nullable Long numberOfMediaFiles,
            @JsonProperty("direction") @Nullable Direction direction,
            @JsonProperty("status") @Nullable MessageStatus status,
            @JsonProperty("scheduled_at") @Nullable OffsetDateTime scheduledAt,
            @JsonProperty("sent_at") @Nullable OffsetDateTime sentAt,
            @JsonProperty("webhook_url") @Nullable String webhookUrl,
            @JsonProperty("reference") @Nullable String reference,
            @JsonProperty("price") @Nullable Price price,
            @JsonProperty("error") @Nullable Error error,
            @JsonProperty("messaging_service_id") @Nullable String messagingServiceId,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.from = Optional.ofNullable(from)
            .orElseThrow(() -> new IllegalArgumentException("from cannot be null"));
        this.to = Optional.ofNullable(to)
            .orElseThrow(() -> new IllegalArgumentException("to cannot be null"));
        this.subject = subject;
        this.body = Optional.ofNullable(body)
            .orElseThrow(() -> new IllegalArgumentException("body cannot be null"));
        this.type = type;
        this.numberOfUnits = numberOfUnits;
        this.numberOfMediaFiles = numberOfMediaFiles;
        this.direction = direction;
        this.status = status;
        this.scheduledAt = scheduledAt;
        this.sentAt = sentAt;
        this.webhookUrl = webhookUrl;
        this.reference = reference;
        this.price = price;
        this.error = error;
        this.messagingServiceId = messagingServiceId;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Message(
            @Nonnull String from,
            @Nonnull String to,
            @Nonnull String body) {
        this(null, from, to,
            null, body, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The phone number that initiated the message.
     */
    public String from() {
        return this.from;
    }

    /**
     * The phone number that received the message.
     */
    public String to() {
        return this.to;
    }

    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The message text.
     */
    public String body() {
        return this.body;
    }

    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    public Optional<MessageType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
     */
    public Optional<Long> numberOfUnits() {
        return Optional.ofNullable(this.numberOfUnits);
    }

    /**
     * The number of media files associated with the message.
     */
    public Optional<Long> numberOfMediaFiles() {
        return Optional.ofNullable(this.numberOfMediaFiles);
    }

    /**
     * The direction of the message.
     */
    public Optional<Direction> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Status of the delivery of the message.
     */
    public Optional<MessageStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The scheduled date and time of the message.
     */
    public Optional<OffsetDateTime> scheduledAt() {
        return Optional.ofNullable(this.scheduledAt);
    }

    /**
     * The date and time that the message was sent
     */
    public Optional<OffsetDateTime> sentAt() {
        return Optional.ofNullable(this.sentAt);
    }

    /**
     * Define a webhook to receive delivery notifications.
     */
    public Optional<String> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }

    /**
     * A client reference.
     */
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }

    /**
     * Price of the message.
     */
    public Optional<Price> price() {
        return Optional.ofNullable(this.price);
    }

    /**
     * The error returned if your message status is failed or undelivered.
     */
    public Optional<Error> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    public Optional<String> messagingServiceId() {
        return Optional.ofNullable(this.messagingServiceId);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Message withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The phone number that initiated the message.
     */
    public Message withFrom(@Nonnull String from) {
        this.from = Utils.checkNotNull(from, "from");
        return this;
    }


    /**
     * The phone number that received the message.
     */
    public Message withTo(@Nonnull String to) {
        this.to = Utils.checkNotNull(to, "to");
        return this;
    }


    public Message withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The message text.
     */
    public Message withBody(@Nonnull String body) {
        this.body = Utils.checkNotNull(body, "body");
        return this;
    }


    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    public Message withType(@Nullable MessageType type) {
        this.type = type;
        return this;
    }


    /**
     * The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
     */
    public Message withNumberOfUnits(@Nullable Long numberOfUnits) {
        this.numberOfUnits = numberOfUnits;
        return this;
    }


    /**
     * The number of media files associated with the message.
     */
    public Message withNumberOfMediaFiles(@Nullable Long numberOfMediaFiles) {
        this.numberOfMediaFiles = numberOfMediaFiles;
        return this;
    }


    /**
     * The direction of the message.
     */
    public Message withDirection(@Nullable Direction direction) {
        this.direction = direction;
        return this;
    }


    /**
     * Status of the delivery of the message.
     */
    public Message withStatus(@Nullable MessageStatus status) {
        this.status = status;
        return this;
    }


    /**
     * The scheduled date and time of the message.
     */
    public Message withScheduledAt(@Nullable OffsetDateTime scheduledAt) {
        this.scheduledAt = scheduledAt;
        return this;
    }


    /**
     * The date and time that the message was sent
     */
    public Message withSentAt(@Nullable OffsetDateTime sentAt) {
        this.sentAt = sentAt;
        return this;
    }


    /**
     * Define a webhook to receive delivery notifications.
     */
    public Message withWebhookUrl(@Nullable String webhookUrl) {
        this.webhookUrl = webhookUrl;
        return this;
    }


    /**
     * A client reference.
     */
    public Message withReference(@Nullable String reference) {
        this.reference = reference;
        return this;
    }


    /**
     * Price of the message.
     */
    public Message withPrice(@Nullable Price price) {
        this.price = price;
        return this;
    }


    /**
     * The error returned if your message status is failed or undelivered.
     */
    public Message withError(@Nullable Error error) {
        this.error = error;
        return this;
    }


    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    public Message withMessagingServiceId(@Nullable String messagingServiceId) {
        this.messagingServiceId = messagingServiceId;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Message withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Message withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Message withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Message withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Message withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Message withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Message other = (Message) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.to, other.to) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.body, other.body) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.numberOfUnits, other.numberOfUnits) &&
            Utils.enhancedDeepEquals(this.numberOfMediaFiles, other.numberOfMediaFiles) &&
            Utils.enhancedDeepEquals(this.direction, other.direction) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.scheduledAt, other.scheduledAt) &&
            Utils.enhancedDeepEquals(this.sentAt, other.sentAt) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.price, other.price) &&
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.messagingServiceId, other.messagingServiceId) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, from, to,
            subject, body, type,
            numberOfUnits, numberOfMediaFiles, direction,
            status, scheduledAt, sentAt,
            webhookUrl, reference, price,
            error, messagingServiceId, customMappings,
            updatedBy, createdBy, updatedAt,
            createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Message.class,
                "id", id,
                "from", from,
                "to", to,
                "subject", subject,
                "body", body,
                "type", type,
                "numberOfUnits", numberOfUnits,
                "numberOfMediaFiles", numberOfMediaFiles,
                "direction", direction,
                "status", status,
                "scheduledAt", scheduledAt,
                "sentAt", sentAt,
                "webhookUrl", webhookUrl,
                "reference", reference,
                "price", price,
                "error", error,
                "messagingServiceId", messagingServiceId,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String from;

        private String to;

        private String subject;

        private String body;

        private MessageType type;

        private Long numberOfUnits;

        private Long numberOfMediaFiles;

        private Direction direction;

        private MessageStatus status;

        private OffsetDateTime scheduledAt;

        private OffsetDateTime sentAt;

        private String webhookUrl;

        private String reference;

        private Price price;

        private Error error;

        private String messagingServiceId;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The phone number that initiated the message.
         */
        public Builder from(@Nonnull String from) {
            this.from = Utils.checkNotNull(from, "from");
            return this;
        }

        /**
         * The phone number that received the message.
         */
        public Builder to(@Nonnull String to) {
            this.to = Utils.checkNotNull(to, "to");
            return this;
        }

        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The message text.
         */
        public Builder body(@Nonnull String body) {
            this.body = Utils.checkNotNull(body, "body");
            return this;
        }

        /**
         * Set to sms for SMS messages and mms for MMS messages.
         */
        public Builder type(@Nullable MessageType type) {
            this.type = type;
            return this;
        }

        /**
         * The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
         */
        public Builder numberOfUnits(@Nullable Long numberOfUnits) {
            this.numberOfUnits = numberOfUnits;
            return this;
        }

        /**
         * The number of media files associated with the message.
         */
        public Builder numberOfMediaFiles(@Nullable Long numberOfMediaFiles) {
            this.numberOfMediaFiles = numberOfMediaFiles;
            return this;
        }

        /**
         * The direction of the message.
         */
        public Builder direction(@Nullable Direction direction) {
            this.direction = direction;
            return this;
        }

        /**
         * Status of the delivery of the message.
         */
        public Builder status(@Nullable MessageStatus status) {
            this.status = status;
            return this;
        }

        /**
         * The scheduled date and time of the message.
         */
        public Builder scheduledAt(@Nullable OffsetDateTime scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }

        /**
         * The date and time that the message was sent
         */
        public Builder sentAt(@Nullable OffsetDateTime sentAt) {
            this.sentAt = sentAt;
            return this;
        }

        /**
         * Define a webhook to receive delivery notifications.
         */
        public Builder webhookUrl(@Nullable String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * A client reference.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = reference;
            return this;
        }

        /**
         * Price of the message.
         */
        public Builder price(@Nullable Price price) {
            this.price = price;
            return this;
        }

        /**
         * The error returned if your message status is failed or undelivered.
         */
        public Builder error(@Nullable Error error) {
            this.error = error;
            return this;
        }

        /**
         * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
         */
        public Builder messagingServiceId(@Nullable String messagingServiceId) {
            this.messagingServiceId = messagingServiceId;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Message build() {
            return new Message(
                id, from, to,
                subject, body, type,
                numberOfUnits, numberOfMediaFiles, direction,
                status, scheduledAt, sentAt,
                webhookUrl, reference, price,
                error, messagingServiceId, customMappings,
                updatedBy, createdBy, updatedAt,
                createdAt, passThrough);
        }

    }
}
