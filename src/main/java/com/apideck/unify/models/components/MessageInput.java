/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class MessageInput {
    /**
     * The phone number that initiated the message.
     */
    @JsonProperty("from")
    private String from;

    /**
     * The phone number that received the message.
     */
    @JsonProperty("to")
    private String to;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The message text.
     */
    @JsonProperty("body")
    private String body;

    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private MessageType type;

    /**
     * The scheduled date and time of the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduled_at")
    private OffsetDateTime scheduledAt;

    /**
     * Define a webhook to receive delivery notifications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_url")
    private String webhookUrl;

    /**
     * A client reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private String reference;

    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messaging_service_id")
    private String messagingServiceId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public MessageInput(
            @JsonProperty("from") @Nonnull String from,
            @JsonProperty("to") @Nonnull String to,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("body") @Nonnull String body,
            @JsonProperty("type") @Nullable MessageType type,
            @JsonProperty("scheduled_at") @Nullable OffsetDateTime scheduledAt,
            @JsonProperty("webhook_url") @Nullable String webhookUrl,
            @JsonProperty("reference") @Nullable String reference,
            @JsonProperty("messaging_service_id") @Nullable String messagingServiceId,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.from = Optional.ofNullable(from)
            .orElseThrow(() -> new IllegalArgumentException("from cannot be null"));
        this.to = Optional.ofNullable(to)
            .orElseThrow(() -> new IllegalArgumentException("to cannot be null"));
        this.subject = subject;
        this.body = Optional.ofNullable(body)
            .orElseThrow(() -> new IllegalArgumentException("body cannot be null"));
        this.type = type;
        this.scheduledAt = scheduledAt;
        this.webhookUrl = webhookUrl;
        this.reference = reference;
        this.messagingServiceId = messagingServiceId;
        this.passThrough = passThrough;
    }
    
    public MessageInput(
            @Nonnull String from,
            @Nonnull String to,
            @Nonnull String body) {
        this(from, to, null,
            body, null, null,
            null, null, null,
            null);
    }

    /**
     * The phone number that initiated the message.
     */
    public String from() {
        return this.from;
    }

    /**
     * The phone number that received the message.
     */
    public String to() {
        return this.to;
    }

    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The message text.
     */
    public String body() {
        return this.body;
    }

    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    public Optional<MessageType> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The scheduled date and time of the message.
     */
    public Optional<OffsetDateTime> scheduledAt() {
        return Optional.ofNullable(this.scheduledAt);
    }

    /**
     * Define a webhook to receive delivery notifications.
     */
    public Optional<String> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }

    /**
     * A client reference.
     */
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }

    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    public Optional<String> messagingServiceId() {
        return Optional.ofNullable(this.messagingServiceId);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The phone number that initiated the message.
     */
    public MessageInput withFrom(@Nonnull String from) {
        this.from = Utils.checkNotNull(from, "from");
        return this;
    }


    /**
     * The phone number that received the message.
     */
    public MessageInput withTo(@Nonnull String to) {
        this.to = Utils.checkNotNull(to, "to");
        return this;
    }


    public MessageInput withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The message text.
     */
    public MessageInput withBody(@Nonnull String body) {
        this.body = Utils.checkNotNull(body, "body");
        return this;
    }


    /**
     * Set to sms for SMS messages and mms for MMS messages.
     */
    public MessageInput withType(@Nullable MessageType type) {
        this.type = type;
        return this;
    }


    /**
     * The scheduled date and time of the message.
     */
    public MessageInput withScheduledAt(@Nullable OffsetDateTime scheduledAt) {
        this.scheduledAt = scheduledAt;
        return this;
    }


    /**
     * Define a webhook to receive delivery notifications.
     */
    public MessageInput withWebhookUrl(@Nullable String webhookUrl) {
        this.webhookUrl = webhookUrl;
        return this;
    }


    /**
     * A client reference.
     */
    public MessageInput withReference(@Nullable String reference) {
        this.reference = reference;
        return this;
    }


    /**
     * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
     */
    public MessageInput withMessagingServiceId(@Nullable String messagingServiceId) {
        this.messagingServiceId = messagingServiceId;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public MessageInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageInput other = (MessageInput) o;
        return 
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.to, other.to) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.body, other.body) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.scheduledAt, other.scheduledAt) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.messagingServiceId, other.messagingServiceId) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            from, to, subject,
            body, type, scheduledAt,
            webhookUrl, reference, messagingServiceId,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageInput.class,
                "from", from,
                "to", to,
                "subject", subject,
                "body", body,
                "type", type,
                "scheduledAt", scheduledAt,
                "webhookUrl", webhookUrl,
                "reference", reference,
                "messagingServiceId", messagingServiceId,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String from;

        private String to;

        private String subject;

        private String body;

        private MessageType type;

        private OffsetDateTime scheduledAt;

        private String webhookUrl;

        private String reference;

        private String messagingServiceId;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The phone number that initiated the message.
         */
        public Builder from(@Nonnull String from) {
            this.from = Utils.checkNotNull(from, "from");
            return this;
        }

        /**
         * The phone number that received the message.
         */
        public Builder to(@Nonnull String to) {
            this.to = Utils.checkNotNull(to, "to");
            return this;
        }

        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The message text.
         */
        public Builder body(@Nonnull String body) {
            this.body = Utils.checkNotNull(body, "body");
            return this;
        }

        /**
         * Set to sms for SMS messages and mms for MMS messages.
         */
        public Builder type(@Nullable MessageType type) {
            this.type = type;
            return this;
        }

        /**
         * The scheduled date and time of the message.
         */
        public Builder scheduledAt(@Nullable OffsetDateTime scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }

        /**
         * Define a webhook to receive delivery notifications.
         */
        public Builder webhookUrl(@Nullable String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * A client reference.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = reference;
            return this;
        }

        /**
         * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
         */
        public Builder messagingServiceId(@Nullable String messagingServiceId) {
            this.messagingServiceId = messagingServiceId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public MessageInput build() {
            return new MessageInput(
                from, to, subject,
                body, type, scheduledAt,
                webhookUrl, reference, messagingServiceId,
                passThrough);
        }

    }
}
