/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ModifierGroupInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternate_name")
    private Optional<String> alternateName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum_required")
    private Optional<Long> minimumRequired;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximum_allowed")
    private Optional<Long> maximumAllowed;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selection_type")
    private Optional<? extends IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    private Optional<Boolean> presentAtAllLocations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiers")
    private Optional<? extends List<Modifiers>> modifiers;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<Boolean> deleted;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public ModifierGroupInput(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("alternate_name") Optional<String> alternateName,
            @JsonProperty("minimum_required") Optional<Long> minimumRequired,
            @JsonProperty("maximum_allowed") Optional<Long> maximumAllowed,
            @JsonProperty("selection_type") Optional<? extends IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType,
            @JsonProperty("present_at_all_locations") Optional<Boolean> presentAtAllLocations,
            @JsonProperty("modifiers") Optional<? extends List<Modifiers>> modifiers,
            @JsonProperty("deleted") JsonNullable<Boolean> deleted,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(alternateName, "alternateName");
        Utils.checkNotNull(minimumRequired, "minimumRequired");
        Utils.checkNotNull(maximumAllowed, "maximumAllowed");
        Utils.checkNotNull(selectionType, "selectionType");
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        Utils.checkNotNull(modifiers, "modifiers");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.name = name;
        this.alternateName = alternateName;
        this.minimumRequired = minimumRequired;
        this.maximumAllowed = maximumAllowed;
        this.selectionType = selectionType;
        this.presentAtAllLocations = presentAtAllLocations;
        this.modifiers = modifiers;
        this.deleted = deleted;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public ModifierGroupInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> alternateName() {
        return alternateName;
    }

    @JsonIgnore
    public Optional<Long> minimumRequired() {
        return minimumRequired;
    }

    @JsonIgnore
    public Optional<Long> maximumAllowed() {
        return maximumAllowed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType() {
        return (Optional<IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers>) selectionType;
    }

    @JsonIgnore
    public Optional<Boolean> presentAtAllLocations() {
        return presentAtAllLocations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Modifiers>> modifiers() {
        return (Optional<List<Modifiers>>) modifiers;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleted() {
        return deleted;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModifierGroupInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ModifierGroupInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ModifierGroupInput withAlternateName(String alternateName) {
        Utils.checkNotNull(alternateName, "alternateName");
        this.alternateName = Optional.ofNullable(alternateName);
        return this;
    }

    public ModifierGroupInput withAlternateName(Optional<String> alternateName) {
        Utils.checkNotNull(alternateName, "alternateName");
        this.alternateName = alternateName;
        return this;
    }

    public ModifierGroupInput withMinimumRequired(long minimumRequired) {
        Utils.checkNotNull(minimumRequired, "minimumRequired");
        this.minimumRequired = Optional.ofNullable(minimumRequired);
        return this;
    }

    public ModifierGroupInput withMinimumRequired(Optional<Long> minimumRequired) {
        Utils.checkNotNull(minimumRequired, "minimumRequired");
        this.minimumRequired = minimumRequired;
        return this;
    }

    public ModifierGroupInput withMaximumAllowed(long maximumAllowed) {
        Utils.checkNotNull(maximumAllowed, "maximumAllowed");
        this.maximumAllowed = Optional.ofNullable(maximumAllowed);
        return this;
    }

    public ModifierGroupInput withMaximumAllowed(Optional<Long> maximumAllowed) {
        Utils.checkNotNull(maximumAllowed, "maximumAllowed");
        this.maximumAllowed = maximumAllowed;
        return this;
    }

    public ModifierGroupInput withSelectionType(IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers selectionType) {
        Utils.checkNotNull(selectionType, "selectionType");
        this.selectionType = Optional.ofNullable(selectionType);
        return this;
    }

    public ModifierGroupInput withSelectionType(Optional<? extends IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType) {
        Utils.checkNotNull(selectionType, "selectionType");
        this.selectionType = selectionType;
        return this;
    }

    public ModifierGroupInput withPresentAtAllLocations(boolean presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
        return this;
    }

    public ModifierGroupInput withPresentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }

    public ModifierGroupInput withModifiers(List<Modifiers> modifiers) {
        Utils.checkNotNull(modifiers, "modifiers");
        this.modifiers = Optional.ofNullable(modifiers);
        return this;
    }

    public ModifierGroupInput withModifiers(Optional<? extends List<Modifiers>> modifiers) {
        Utils.checkNotNull(modifiers, "modifiers");
        this.modifiers = modifiers;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ModifierGroupInput withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ModifierGroupInput withDeleted(JsonNullable<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public ModifierGroupInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public ModifierGroupInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ModifierGroupInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public ModifierGroupInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModifierGroupInput other = (ModifierGroupInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.alternateName, other.alternateName) &&
            Objects.deepEquals(this.minimumRequired, other.minimumRequired) &&
            Objects.deepEquals(this.maximumAllowed, other.maximumAllowed) &&
            Objects.deepEquals(this.selectionType, other.selectionType) &&
            Objects.deepEquals(this.presentAtAllLocations, other.presentAtAllLocations) &&
            Objects.deepEquals(this.modifiers, other.modifiers) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            alternateName,
            minimumRequired,
            maximumAllowed,
            selectionType,
            presentAtAllLocations,
            modifiers,
            deleted,
            rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModifierGroupInput.class,
                "name", name,
                "alternateName", alternateName,
                "minimumRequired", minimumRequired,
                "maximumAllowed", maximumAllowed,
                "selectionType", selectionType,
                "presentAtAllLocations", presentAtAllLocations,
                "modifiers", modifiers,
                "deleted", deleted,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> alternateName = Optional.empty();
 
        private Optional<Long> minimumRequired = Optional.empty();
 
        private Optional<Long> maximumAllowed = Optional.empty();
 
        private Optional<? extends IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType = Optional.empty();
 
        private Optional<Boolean> presentAtAllLocations = Optional.empty();
 
        private Optional<? extends List<Modifiers>> modifiers = Optional.empty();
 
        private JsonNullable<Boolean> deleted = JsonNullable.undefined();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder alternateName(String alternateName) {
            Utils.checkNotNull(alternateName, "alternateName");
            this.alternateName = Optional.ofNullable(alternateName);
            return this;
        }

        public Builder alternateName(Optional<String> alternateName) {
            Utils.checkNotNull(alternateName, "alternateName");
            this.alternateName = alternateName;
            return this;
        }

        public Builder minimumRequired(long minimumRequired) {
            Utils.checkNotNull(minimumRequired, "minimumRequired");
            this.minimumRequired = Optional.ofNullable(minimumRequired);
            return this;
        }

        public Builder minimumRequired(Optional<Long> minimumRequired) {
            Utils.checkNotNull(minimumRequired, "minimumRequired");
            this.minimumRequired = minimumRequired;
            return this;
        }

        public Builder maximumAllowed(long maximumAllowed) {
            Utils.checkNotNull(maximumAllowed, "maximumAllowed");
            this.maximumAllowed = Optional.ofNullable(maximumAllowed);
            return this;
        }

        public Builder maximumAllowed(Optional<Long> maximumAllowed) {
            Utils.checkNotNull(maximumAllowed, "maximumAllowed");
            this.maximumAllowed = maximumAllowed;
            return this;
        }

        public Builder selectionType(IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers selectionType) {
            Utils.checkNotNull(selectionType, "selectionType");
            this.selectionType = Optional.ofNullable(selectionType);
            return this;
        }

        public Builder selectionType(Optional<? extends IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers> selectionType) {
            Utils.checkNotNull(selectionType, "selectionType");
            this.selectionType = selectionType;
            return this;
        }

        public Builder presentAtAllLocations(boolean presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
            return this;
        }

        public Builder presentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = presentAtAllLocations;
            return this;
        }

        public Builder modifiers(List<Modifiers> modifiers) {
            Utils.checkNotNull(modifiers, "modifiers");
            this.modifiers = Optional.ofNullable(modifiers);
            return this;
        }

        public Builder modifiers(Optional<? extends List<Modifiers>> modifiers) {
            Utils.checkNotNull(modifiers, "modifiers");
            this.modifiers = modifiers;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public ModifierGroupInput build() {
            return new ModifierGroupInput(
                name,
                alternateName,
                minimumRequired,
                maximumAllowed,
                selectionType,
                presentAtAllLocations,
                modifiers,
                deleted,
                rowVersion,
                passThrough);
        }
    }
}

