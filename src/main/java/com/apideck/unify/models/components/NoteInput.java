/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class NoteInput {
    /**
     * The title of the note
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The content of the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<String> content;

    /**
     * The user that owns the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The contact that is related to the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * The company that is related to the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The opportunity that is related to the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opportunity_id")
    private JsonNullable<String> opportunityId;

    /**
     * The activity that is related to the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activity_id")
    private JsonNullable<String> activityId;

    /**
     * The lead that is related to the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * Whether the Note is active or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public NoteInput(
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("content") @Nullable JsonNullable<String> content,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("contact_id") @Nullable JsonNullable<String> contactId,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("opportunity_id") @Nullable JsonNullable<String> opportunityId,
            @JsonProperty("activity_id") @Nullable JsonNullable<String> activityId,
            @JsonProperty("lead_id") @Nullable JsonNullable<String> leadId,
            @JsonProperty("active") @Nullable JsonNullable<Boolean> active,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.content = Optional.ofNullable(content)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.contactId = Optional.ofNullable(contactId)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.opportunityId = Optional.ofNullable(opportunityId)
            .orElse(JsonNullable.undefined());
        this.activityId = Optional.ofNullable(activityId)
            .orElse(JsonNullable.undefined());
        this.leadId = Optional.ofNullable(leadId)
            .orElse(JsonNullable.undefined());
        this.active = Optional.ofNullable(active)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public NoteInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The title of the note
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The content of the note.
     */
    public JsonNullable<String> content() {
        return this.content;
    }

    /**
     * The user that owns the note.
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The contact that is related to the note.
     */
    public JsonNullable<String> contactId() {
        return this.contactId;
    }

    /**
     * The company that is related to the note.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The opportunity that is related to the note.
     */
    public JsonNullable<String> opportunityId() {
        return this.opportunityId;
    }

    /**
     * The activity that is related to the note.
     */
    public JsonNullable<String> activityId() {
        return this.activityId;
    }

    /**
     * The lead that is related to the note.
     */
    public JsonNullable<String> leadId() {
        return this.leadId;
    }

    /**
     * Whether the Note is active or not.
     */
    public JsonNullable<Boolean> active() {
        return this.active;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The title of the note
     */
    public NoteInput withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The content of the note.
     */
    public NoteInput withContent(@Nullable String content) {
        this.content = JsonNullable.of(content);
        return this;
    }


    /**
     * The user that owns the note.
     */
    public NoteInput withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The contact that is related to the note.
     */
    public NoteInput withContactId(@Nullable String contactId) {
        this.contactId = JsonNullable.of(contactId);
        return this;
    }


    /**
     * The company that is related to the note.
     */
    public NoteInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The opportunity that is related to the note.
     */
    public NoteInput withOpportunityId(@Nullable String opportunityId) {
        this.opportunityId = JsonNullable.of(opportunityId);
        return this;
    }


    /**
     * The activity that is related to the note.
     */
    public NoteInput withActivityId(@Nullable String activityId) {
        this.activityId = JsonNullable.of(activityId);
        return this;
    }


    /**
     * The lead that is related to the note.
     */
    public NoteInput withLeadId(@Nullable String leadId) {
        this.leadId = JsonNullable.of(leadId);
        return this;
    }


    /**
     * Whether the Note is active or not.
     */
    public NoteInput withActive(@Nullable Boolean active) {
        this.active = JsonNullable.of(active);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public NoteInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NoteInput other = (NoteInput) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.opportunityId, other.opportunityId) &&
            Utils.enhancedDeepEquals(this.activityId, other.activityId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, content, ownerId,
            contactId, companyId, opportunityId,
            activityId, leadId, active,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NoteInput.class,
                "title", title,
                "content", content,
                "ownerId", ownerId,
                "contactId", contactId,
                "companyId", companyId,
                "opportunityId", opportunityId,
                "activityId", activityId,
                "leadId", leadId,
                "active", active,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> title;

        private JsonNullable<String> content;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> contactId;

        private JsonNullable<String> companyId;

        private JsonNullable<String> opportunityId;

        private JsonNullable<String> activityId;

        private JsonNullable<String> leadId;

        private JsonNullable<Boolean> active;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The title of the note
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The content of the note.
         */
        public Builder content(@Nullable String content) {
            this.content = JsonNullable.of(content);
            return this;
        }

        /**
         * The user that owns the note.
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The contact that is related to the note.
         */
        public Builder contactId(@Nullable String contactId) {
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * The company that is related to the note.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The opportunity that is related to the note.
         */
        public Builder opportunityId(@Nullable String opportunityId) {
            this.opportunityId = JsonNullable.of(opportunityId);
            return this;
        }

        /**
         * The activity that is related to the note.
         */
        public Builder activityId(@Nullable String activityId) {
            this.activityId = JsonNullable.of(activityId);
            return this;
        }

        /**
         * The lead that is related to the note.
         */
        public Builder leadId(@Nullable String leadId) {
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * Whether the Note is active or not.
         */
        public Builder active(@Nullable Boolean active) {
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public NoteInput build() {
            return new NoteInput(
                title, content, ownerId,
                contactId, companyId, opportunityId,
                activityId, leadId, active,
                passThrough);
        }

    }
}
