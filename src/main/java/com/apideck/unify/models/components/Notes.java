/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Notes {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee")
    private JsonNullable<String> employee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private JsonNullable<String> manager;

    @JsonCreator
    public Notes(
            @JsonProperty("employee") @Nullable JsonNullable<String> employee,
            @JsonProperty("manager") @Nullable JsonNullable<String> manager) {
        this.employee = Optional.ofNullable(employee)
            .orElse(JsonNullable.undefined());
        this.manager = Optional.ofNullable(manager)
            .orElse(JsonNullable.undefined());
    }
    
    public Notes() {
        this(null, null);
    }

    public JsonNullable<String> employee() {
        return this.employee;
    }

    public JsonNullable<String> manager() {
        return this.manager;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Notes withEmployee(@Nullable String employee) {
        this.employee = JsonNullable.of(employee);
        return this;
    }


    public Notes withManager(@Nullable String manager) {
        this.manager = JsonNullable.of(manager);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Notes other = (Notes) o;
        return 
            Utils.enhancedDeepEquals(this.employee, other.employee) &&
            Utils.enhancedDeepEquals(this.manager, other.manager);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            employee, manager);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Notes.class,
                "employee", employee,
                "manager", manager);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> employee;

        private JsonNullable<String> manager;

        private Builder() {
          // force use of static builder() method
        }

        public Builder employee(@Nullable String employee) {
            this.employee = JsonNullable.of(employee);
            return this;
        }

        public Builder manager(@Nullable String manager) {
            this.manager = JsonNullable.of(manager);
            return this;
        }

        public Notes build() {
            return new Notes(
                employee, manager);
        }

    }
}
