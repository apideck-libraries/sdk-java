/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class One {
    /**
     * Whether the field can be read
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("read")
    private Optional<Boolean> read;

    /**
     * Whether the field can be written to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("write")
    private Optional<Boolean> write;

    @JsonCreator
    public One(
            @JsonProperty("read") Optional<Boolean> read,
            @JsonProperty("write") Optional<Boolean> write) {
        Utils.checkNotNull(read, "read");
        Utils.checkNotNull(write, "write");
        this.read = read;
        this.write = write;
    }
    
    public One() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Whether the field can be read
     */
    @JsonIgnore
    public Optional<Boolean> read() {
        return read;
    }

    /**
     * Whether the field can be written to
     */
    @JsonIgnore
    public Optional<Boolean> write() {
        return write;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether the field can be read
     */
    public One withRead(boolean read) {
        Utils.checkNotNull(read, "read");
        this.read = Optional.ofNullable(read);
        return this;
    }


    /**
     * Whether the field can be read
     */
    public One withRead(Optional<Boolean> read) {
        Utils.checkNotNull(read, "read");
        this.read = read;
        return this;
    }

    /**
     * Whether the field can be written to
     */
    public One withWrite(boolean write) {
        Utils.checkNotNull(write, "write");
        this.write = Optional.ofNullable(write);
        return this;
    }


    /**
     * Whether the field can be written to
     */
    public One withWrite(Optional<Boolean> write) {
        Utils.checkNotNull(write, "write");
        this.write = write;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        One other = (One) o;
        return 
            Utils.enhancedDeepEquals(this.read, other.read) &&
            Utils.enhancedDeepEquals(this.write, other.write);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            read, write);
    }
    
    @Override
    public String toString() {
        return Utils.toString(One.class,
                "read", read,
                "write", write);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> read = Optional.empty();

        private Optional<Boolean> write = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether the field can be read
         */
        public Builder read(boolean read) {
            Utils.checkNotNull(read, "read");
            this.read = Optional.ofNullable(read);
            return this;
        }

        /**
         * Whether the field can be read
         */
        public Builder read(Optional<Boolean> read) {
            Utils.checkNotNull(read, "read");
            this.read = read;
            return this;
        }


        /**
         * Whether the field can be written to
         */
        public Builder write(boolean write) {
            Utils.checkNotNull(write, "write");
            this.write = Optional.ofNullable(write);
            return this;
        }

        /**
         * Whether the field can be written to
         */
        public Builder write(Optional<Boolean> write) {
            Utils.checkNotNull(write, "write");
            this.write = write;
            return this;
        }

        public One build() {

            return new One(
                read, write);
        }

    }
}
