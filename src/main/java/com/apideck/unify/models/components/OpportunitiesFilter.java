/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class OpportunitiesFilter {

    /**
     * Title of the opportunity to filter on
     */
    @SpeakeasyMetadata("queryParam:name=title")
    private Optional<String> title;

    /**
     * Status to filter on
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private Optional<String> status;

    /**
     * Monetary amount to filter on
     */
    @SpeakeasyMetadata("queryParam:name=monetary_amount")
    private Optional<Double> monetaryAmount;

    /**
     * Win probability to filter on
     */
    @SpeakeasyMetadata("queryParam:name=win_probability")
    private Optional<Double> winProbability;

    /**
     * Company ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=company_id")
    private Optional<String> companyId;

    /**
     * Owner ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=owner_id")
    private Optional<String> ownerId;

    /**
     * Primary contact ID to filter on
     */
    @SpeakeasyMetadata("queryParam:name=primary_contact_id")
    private Optional<String> primaryContactId;

    @JsonCreator
    public OpportunitiesFilter(
            Optional<String> title,
            Optional<String> status,
            Optional<Double> monetaryAmount,
            Optional<Double> winProbability,
            Optional<String> companyId,
            Optional<String> ownerId,
            Optional<String> primaryContactId) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        Utils.checkNotNull(winProbability, "winProbability");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.title = title;
        this.status = status;
        this.monetaryAmount = monetaryAmount;
        this.winProbability = winProbability;
        this.companyId = companyId;
        this.ownerId = ownerId;
        this.primaryContactId = primaryContactId;
    }
    
    public OpportunitiesFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Title of the opportunity to filter on
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Status to filter on
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Monetary amount to filter on
     */
    @JsonIgnore
    public Optional<Double> monetaryAmount() {
        return monetaryAmount;
    }

    /**
     * Win probability to filter on
     */
    @JsonIgnore
    public Optional<Double> winProbability() {
        return winProbability;
    }

    /**
     * Company ID to filter on
     */
    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    /**
     * Owner ID to filter on
     */
    @JsonIgnore
    public Optional<String> ownerId() {
        return ownerId;
    }

    /**
     * Primary contact ID to filter on
     */
    @JsonIgnore
    public Optional<String> primaryContactId() {
        return primaryContactId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Title of the opportunity to filter on
     */
    public OpportunitiesFilter withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Title of the opportunity to filter on
     */
    public OpportunitiesFilter withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Status to filter on
     */
    public OpportunitiesFilter withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status to filter on
     */
    public OpportunitiesFilter withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Monetary amount to filter on
     */
    public OpportunitiesFilter withMonetaryAmount(double monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = Optional.ofNullable(monetaryAmount);
        return this;
    }

    /**
     * Monetary amount to filter on
     */
    public OpportunitiesFilter withMonetaryAmount(Optional<Double> monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = monetaryAmount;
        return this;
    }

    /**
     * Win probability to filter on
     */
    public OpportunitiesFilter withWinProbability(double winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = Optional.ofNullable(winProbability);
        return this;
    }

    /**
     * Win probability to filter on
     */
    public OpportunitiesFilter withWinProbability(Optional<Double> winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = winProbability;
        return this;
    }

    /**
     * Company ID to filter on
     */
    public OpportunitiesFilter withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }

    /**
     * Company ID to filter on
     */
    public OpportunitiesFilter withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Owner ID to filter on
     */
    public OpportunitiesFilter withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = Optional.ofNullable(ownerId);
        return this;
    }

    /**
     * Owner ID to filter on
     */
    public OpportunitiesFilter withOwnerId(Optional<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Primary contact ID to filter on
     */
    public OpportunitiesFilter withPrimaryContactId(String primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = Optional.ofNullable(primaryContactId);
        return this;
    }

    /**
     * Primary contact ID to filter on
     */
    public OpportunitiesFilter withPrimaryContactId(Optional<String> primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = primaryContactId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpportunitiesFilter other = (OpportunitiesFilter) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Objects.deepEquals(this.winProbability, other.winProbability) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.primaryContactId, other.primaryContactId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            status,
            monetaryAmount,
            winProbability,
            companyId,
            ownerId,
            primaryContactId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OpportunitiesFilter.class,
                "title", title,
                "status", status,
                "monetaryAmount", monetaryAmount,
                "winProbability", winProbability,
                "companyId", companyId,
                "ownerId", ownerId,
                "primaryContactId", primaryContactId);
    }
    
    public final static class Builder {
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<Double> monetaryAmount = Optional.empty();
 
        private Optional<Double> winProbability = Optional.empty();
 
        private Optional<String> companyId = Optional.empty();
 
        private Optional<String> ownerId = Optional.empty();
 
        private Optional<String> primaryContactId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Title of the opportunity to filter on
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Title of the opportunity to filter on
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Status to filter on
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status to filter on
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Monetary amount to filter on
         */
        public Builder monetaryAmount(double monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = Optional.ofNullable(monetaryAmount);
            return this;
        }

        /**
         * Monetary amount to filter on
         */
        public Builder monetaryAmount(Optional<Double> monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = monetaryAmount;
            return this;
        }

        /**
         * Win probability to filter on
         */
        public Builder winProbability(double winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = Optional.ofNullable(winProbability);
            return this;
        }

        /**
         * Win probability to filter on
         */
        public Builder winProbability(Optional<Double> winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = winProbability;
            return this;
        }

        /**
         * Company ID to filter on
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        /**
         * Company ID to filter on
         */
        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Owner ID to filter on
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        /**
         * Owner ID to filter on
         */
        public Builder ownerId(Optional<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        /**
         * Primary contact ID to filter on
         */
        public Builder primaryContactId(String primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = Optional.ofNullable(primaryContactId);
            return this;
        }

        /**
         * Primary contact ID to filter on
         */
        public Builder primaryContactId(Optional<String> primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = primaryContactId;
            return this;
        }
        
        public OpportunitiesFilter build() {
            return new OpportunitiesFilter(
                title,
                status,
                monetaryAmount,
                winProbability,
                companyId,
                ownerId,
                primaryContactId);
        }
    }
}

