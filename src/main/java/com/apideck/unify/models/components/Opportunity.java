/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Opportunity {

    /**
     * A unique identifier for the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The title or name of the opportunity.
     */
    @JsonProperty("title")
    private String title;

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_contact_id")
    private JsonNullable<String> primaryContactId;

    /**
     * A description of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The type of the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * The monetary value associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monetary_amount")
    private JsonNullable<Double> monetaryAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability")
    private JsonNullable<Double> winProbability;

    /**
     * The expected revenue from the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_revenue")
    private JsonNullable<Double> expectedRevenue;

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("close_date")
    private JsonNullable<LocalDate> closeDate;

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason_id")
    private JsonNullable<String> lossReasonId;

    /**
     * The reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason")
    private JsonNullable<String> lossReason;

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason_id")
    private JsonNullable<String> wonReasonId;

    /**
     * The reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason")
    private JsonNullable<String> wonReason;

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_id")
    private JsonNullable<String> pipelineId;

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_stage_id")
    private JsonNullable<String> pipelineStageId;

    /**
     * The unique identifier of the source of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The source of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_ids")
    private Optional<? extends List<String>> contactIds;

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The priority level of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<String> priority;

    /**
     * The current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The unique identifier of the current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_id")
    private JsonNullable<String> statusId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * The number of interactions with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interaction_count")
    private JsonNullable<Double> interactionCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_last_changed_at")
    private JsonNullable<OffsetDateTime> stageLastChangedAt;

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_activity_at")
    private JsonNullable<String> lastActivityAt;

    /**
     * Indicates whether the opportunity has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private Optional<Boolean> deleted;

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_stage_changed")
    private JsonNullable<OffsetDateTime> dateStageChanged;

    /**
     * The date and time when the opportunity was last contacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_last_contacted")
    private JsonNullable<OffsetDateTime> dateLastContacted;

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_lead_created")
    private JsonNullable<OffsetDateTime> dateLeadCreated;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The unique identifier of the user who created the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the opportunity was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the opportunity was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Opportunity(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("title") String title,
            @JsonProperty("primary_contact_id") JsonNullable<String> primaryContactId,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("type") JsonNullable<String> type,
            @JsonProperty("monetary_amount") JsonNullable<Double> monetaryAmount,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("win_probability") JsonNullable<Double> winProbability,
            @JsonProperty("expected_revenue") JsonNullable<Double> expectedRevenue,
            @JsonProperty("close_date") JsonNullable<LocalDate> closeDate,
            @JsonProperty("loss_reason_id") JsonNullable<String> lossReasonId,
            @JsonProperty("loss_reason") JsonNullable<String> lossReason,
            @JsonProperty("won_reason_id") JsonNullable<String> wonReasonId,
            @JsonProperty("won_reason") JsonNullable<String> wonReason,
            @JsonProperty("pipeline_id") JsonNullable<String> pipelineId,
            @JsonProperty("pipeline_stage_id") JsonNullable<String> pipelineStageId,
            @JsonProperty("source_id") JsonNullable<String> sourceId,
            @JsonProperty("lead_id") JsonNullable<String> leadId,
            @JsonProperty("lead_source") JsonNullable<String> leadSource,
            @JsonProperty("contact_id") JsonNullable<String> contactId,
            @JsonProperty("contact_ids") Optional<? extends List<String>> contactIds,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("priority") JsonNullable<String> priority,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("status_id") JsonNullable<String> statusId,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("interaction_count") JsonNullable<Double> interactionCount,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("stage_last_changed_at") JsonNullable<OffsetDateTime> stageLastChangedAt,
            @JsonProperty("last_activity_at") JsonNullable<String> lastActivityAt,
            @JsonProperty("deleted") Optional<Boolean> deleted,
            @JsonProperty("date_stage_changed") JsonNullable<OffsetDateTime> dateStageChanged,
            @JsonProperty("date_last_contacted") JsonNullable<OffsetDateTime> dateLastContacted,
            @JsonProperty("date_lead_created") JsonNullable<OffsetDateTime> dateLeadCreated,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(winProbability, "winProbability");
        Utils.checkNotNull(expectedRevenue, "expectedRevenue");
        Utils.checkNotNull(closeDate, "closeDate");
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        Utils.checkNotNull(lossReason, "lossReason");
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        Utils.checkNotNull(wonReason, "wonReason");
        Utils.checkNotNull(pipelineId, "pipelineId");
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(leadId, "leadId");
        Utils.checkNotNull(leadSource, "leadSource");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(contactIds, "contactIds");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusId, "statusId");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(interactionCount, "interactionCount");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(dateStageChanged, "dateStageChanged");
        Utils.checkNotNull(dateLastContacted, "dateLastContacted");
        Utils.checkNotNull(dateLeadCreated, "dateLeadCreated");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.title = title;
        this.primaryContactId = primaryContactId;
        this.description = description;
        this.type = type;
        this.monetaryAmount = monetaryAmount;
        this.currency = currency;
        this.winProbability = winProbability;
        this.expectedRevenue = expectedRevenue;
        this.closeDate = closeDate;
        this.lossReasonId = lossReasonId;
        this.lossReason = lossReason;
        this.wonReasonId = wonReasonId;
        this.wonReason = wonReason;
        this.pipelineId = pipelineId;
        this.pipelineStageId = pipelineStageId;
        this.sourceId = sourceId;
        this.leadId = leadId;
        this.leadSource = leadSource;
        this.contactId = contactId;
        this.contactIds = contactIds;
        this.companyId = companyId;
        this.companyName = companyName;
        this.ownerId = ownerId;
        this.priority = priority;
        this.status = status;
        this.statusId = statusId;
        this.tags = tags;
        this.interactionCount = interactionCount;
        this.customFields = customFields;
        this.stageLastChangedAt = stageLastChangedAt;
        this.lastActivityAt = lastActivityAt;
        this.deleted = deleted;
        this.dateStageChanged = dateStageChanged;
        this.dateLastContacted = dateLastContacted;
        this.dateLeadCreated = dateLeadCreated;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public Opportunity(
            String title) {
        this(Optional.empty(), title, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for the opportunity.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The title or name of the opportunity.
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> primaryContactId() {
        return primaryContactId;
    }

    /**
     * A description of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The type of the opportunity
     */
    @JsonIgnore
    public JsonNullable<String> type() {
        return type;
    }

    /**
     * The monetary value associated with the opportunity
     */
    @JsonIgnore
    public JsonNullable<Double> monetaryAmount() {
        return monetaryAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    @JsonIgnore
    public JsonNullable<Double> winProbability() {
        return winProbability;
    }

    /**
     * The expected revenue from the opportunity
     */
    @JsonIgnore
    public JsonNullable<Double> expectedRevenue() {
        return expectedRevenue;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> closeDate() {
        return closeDate;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    @JsonIgnore
    public JsonNullable<String> lossReasonId() {
        return lossReasonId;
    }

    /**
     * The reason why the opportunity was lost.
     */
    @JsonIgnore
    public JsonNullable<String> lossReason() {
        return lossReason;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    @JsonIgnore
    public JsonNullable<String> wonReasonId() {
        return wonReasonId;
    }

    /**
     * The reason why the opportunity was won.
     */
    @JsonIgnore
    public JsonNullable<String> wonReason() {
        return wonReason;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    @JsonIgnore
    public JsonNullable<String> pipelineId() {
        return pipelineId;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> pipelineStageId() {
        return pipelineStageId;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> sourceId() {
        return sourceId;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> leadId() {
        return leadId;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> leadSource() {
        return leadSource;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> contactId() {
        return contactId;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> contactIds() {
        return (Optional<List<String>>) contactIds;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The priority level of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> priority() {
        return priority;
    }

    /**
     * The current status of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> statusId() {
        return statusId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * The number of interactions with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<Double> interactionCount() {
        return interactionCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> stageLastChangedAt() {
        return stageLastChangedAt;
    }

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> lastActivityAt() {
        return lastActivityAt;
    }

    /**
     * Indicates whether the opportunity has been deleted.
     */
    @JsonIgnore
    public Optional<Boolean> deleted() {
        return deleted;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateStageChanged() {
        return dateStageChanged;
    }

    /**
     * The date and time when the opportunity was last contacted.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateLastContacted() {
        return dateLastContacted;
    }

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateLeadCreated() {
        return dateLeadCreated;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The unique identifier of the user who created the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the opportunity was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the opportunity was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for the opportunity.
     */
    public Opportunity withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for the opportunity.
     */
    public Opportunity withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The title or name of the opportunity.
     */
    public Opportunity withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public Opportunity withPrimaryContactId(String primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = JsonNullable.of(primaryContactId);
        return this;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public Opportunity withPrimaryContactId(JsonNullable<String> primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = primaryContactId;
        return this;
    }

    /**
     * A description of the opportunity.
     */
    public Opportunity withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the opportunity.
     */
    public Opportunity withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The type of the opportunity
     */
    public Opportunity withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of the opportunity
     */
    public Opportunity withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The monetary value associated with the opportunity
     */
    public Opportunity withMonetaryAmount(double monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = JsonNullable.of(monetaryAmount);
        return this;
    }

    /**
     * The monetary value associated with the opportunity
     */
    public Opportunity withMonetaryAmount(JsonNullable<Double> monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = monetaryAmount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Opportunity withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Opportunity withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public Opportunity withWinProbability(double winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = JsonNullable.of(winProbability);
        return this;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public Opportunity withWinProbability(JsonNullable<Double> winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = winProbability;
        return this;
    }

    /**
     * The expected revenue from the opportunity
     */
    public Opportunity withExpectedRevenue(double expectedRevenue) {
        Utils.checkNotNull(expectedRevenue, "expectedRevenue");
        this.expectedRevenue = JsonNullable.of(expectedRevenue);
        return this;
    }

    /**
     * The expected revenue from the opportunity
     */
    public Opportunity withExpectedRevenue(JsonNullable<Double> expectedRevenue) {
        Utils.checkNotNull(expectedRevenue, "expectedRevenue");
        this.expectedRevenue = expectedRevenue;
        return this;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public Opportunity withCloseDate(LocalDate closeDate) {
        Utils.checkNotNull(closeDate, "closeDate");
        this.closeDate = JsonNullable.of(closeDate);
        return this;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public Opportunity withCloseDate(JsonNullable<LocalDate> closeDate) {
        Utils.checkNotNull(closeDate, "closeDate");
        this.closeDate = closeDate;
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public Opportunity withLossReasonId(String lossReasonId) {
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        this.lossReasonId = JsonNullable.of(lossReasonId);
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public Opportunity withLossReasonId(JsonNullable<String> lossReasonId) {
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        this.lossReasonId = lossReasonId;
        return this;
    }

    /**
     * The reason why the opportunity was lost.
     */
    public Opportunity withLossReason(String lossReason) {
        Utils.checkNotNull(lossReason, "lossReason");
        this.lossReason = JsonNullable.of(lossReason);
        return this;
    }

    /**
     * The reason why the opportunity was lost.
     */
    public Opportunity withLossReason(JsonNullable<String> lossReason) {
        Utils.checkNotNull(lossReason, "lossReason");
        this.lossReason = lossReason;
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public Opportunity withWonReasonId(String wonReasonId) {
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        this.wonReasonId = JsonNullable.of(wonReasonId);
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public Opportunity withWonReasonId(JsonNullable<String> wonReasonId) {
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        this.wonReasonId = wonReasonId;
        return this;
    }

    /**
     * The reason why the opportunity was won.
     */
    public Opportunity withWonReason(String wonReason) {
        Utils.checkNotNull(wonReason, "wonReason");
        this.wonReason = JsonNullable.of(wonReason);
        return this;
    }

    /**
     * The reason why the opportunity was won.
     */
    public Opportunity withWonReason(JsonNullable<String> wonReason) {
        Utils.checkNotNull(wonReason, "wonReason");
        this.wonReason = wonReason;
        return this;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public Opportunity withPipelineId(String pipelineId) {
        Utils.checkNotNull(pipelineId, "pipelineId");
        this.pipelineId = JsonNullable.of(pipelineId);
        return this;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public Opportunity withPipelineId(JsonNullable<String> pipelineId) {
        Utils.checkNotNull(pipelineId, "pipelineId");
        this.pipelineId = pipelineId;
        return this;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public Opportunity withPipelineStageId(String pipelineStageId) {
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        this.pipelineStageId = JsonNullable.of(pipelineStageId);
        return this;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public Opportunity withPipelineStageId(JsonNullable<String> pipelineStageId) {
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        this.pipelineStageId = pipelineStageId;
        return this;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    public Opportunity withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    public Opportunity withSourceId(JsonNullable<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public Opportunity withLeadId(String leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = JsonNullable.of(leadId);
        return this;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public Opportunity withLeadId(JsonNullable<String> leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = leadId;
        return this;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    public Opportunity withLeadSource(String leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    public Opportunity withLeadSource(JsonNullable<String> leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = leadSource;
        return this;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public Opportunity withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = JsonNullable.of(contactId);
        return this;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public Opportunity withContactId(JsonNullable<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public Opportunity withContactIds(List<String> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = Optional.ofNullable(contactIds);
        return this;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public Opportunity withContactIds(Optional<? extends List<String>> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = contactIds;
        return this;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public Opportunity withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public Opportunity withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    public Opportunity withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    public Opportunity withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public Opportunity withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public Opportunity withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The priority level of the opportunity.
     */
    public Opportunity withPriority(String priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = JsonNullable.of(priority);
        return this;
    }

    /**
     * The priority level of the opportunity.
     */
    public Opportunity withPriority(JsonNullable<String> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    /**
     * The current status of the opportunity.
     */
    public Opportunity withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The current status of the opportunity.
     */
    public Opportunity withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    public Opportunity withStatusId(String statusId) {
        Utils.checkNotNull(statusId, "statusId");
        this.statusId = JsonNullable.of(statusId);
        return this;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    public Opportunity withStatusId(JsonNullable<String> statusId) {
        Utils.checkNotNull(statusId, "statusId");
        this.statusId = statusId;
        return this;
    }

    public Opportunity withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Opportunity withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The number of interactions with the opportunity.
     */
    public Opportunity withInteractionCount(double interactionCount) {
        Utils.checkNotNull(interactionCount, "interactionCount");
        this.interactionCount = JsonNullable.of(interactionCount);
        return this;
    }

    /**
     * The number of interactions with the opportunity.
     */
    public Opportunity withInteractionCount(JsonNullable<Double> interactionCount) {
        Utils.checkNotNull(interactionCount, "interactionCount");
        this.interactionCount = interactionCount;
        return this;
    }

    public Opportunity withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public Opportunity withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withStageLastChangedAt(OffsetDateTime stageLastChangedAt) {
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withStageLastChangedAt(JsonNullable<OffsetDateTime> stageLastChangedAt) {
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        this.stageLastChangedAt = stageLastChangedAt;
        return this;
    }

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    public Opportunity withLastActivityAt(String lastActivityAt) {
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        this.lastActivityAt = JsonNullable.of(lastActivityAt);
        return this;
    }

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    public Opportunity withLastActivityAt(JsonNullable<String> lastActivityAt) {
        Utils.checkNotNull(lastActivityAt, "lastActivityAt");
        this.lastActivityAt = lastActivityAt;
        return this;
    }

    /**
     * Indicates whether the opportunity has been deleted.
     */
    public Opportunity withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = Optional.ofNullable(deleted);
        return this;
    }

    /**
     * Indicates whether the opportunity has been deleted.
     */
    public Opportunity withDeleted(Optional<Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withDateStageChanged(OffsetDateTime dateStageChanged) {
        Utils.checkNotNull(dateStageChanged, "dateStageChanged");
        this.dateStageChanged = JsonNullable.of(dateStageChanged);
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withDateStageChanged(JsonNullable<OffsetDateTime> dateStageChanged) {
        Utils.checkNotNull(dateStageChanged, "dateStageChanged");
        this.dateStageChanged = dateStageChanged;
        return this;
    }

    /**
     * The date and time when the opportunity was last contacted.
     */
    public Opportunity withDateLastContacted(OffsetDateTime dateLastContacted) {
        Utils.checkNotNull(dateLastContacted, "dateLastContacted");
        this.dateLastContacted = JsonNullable.of(dateLastContacted);
        return this;
    }

    /**
     * The date and time when the opportunity was last contacted.
     */
    public Opportunity withDateLastContacted(JsonNullable<OffsetDateTime> dateLastContacted) {
        Utils.checkNotNull(dateLastContacted, "dateLastContacted");
        this.dateLastContacted = dateLastContacted;
        return this;
    }

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    public Opportunity withDateLeadCreated(OffsetDateTime dateLeadCreated) {
        Utils.checkNotNull(dateLeadCreated, "dateLeadCreated");
        this.dateLeadCreated = JsonNullable.of(dateLeadCreated);
        return this;
    }

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    public Opportunity withDateLeadCreated(JsonNullable<OffsetDateTime> dateLeadCreated) {
        Utils.checkNotNull(dateLeadCreated, "dateLeadCreated");
        this.dateLeadCreated = dateLeadCreated;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Opportunity withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Opportunity withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    public Opportunity withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    public Opportunity withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The unique identifier of the user who created the opportunity.
     */
    public Opportunity withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The unique identifier of the user who created the opportunity.
     */
    public Opportunity withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the opportunity was last updated.
     */
    public Opportunity withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the opportunity was last updated.
     */
    public Opportunity withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the opportunity was created.
     */
    public Opportunity withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the opportunity was created.
     */
    public Opportunity withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Opportunity withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Opportunity withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Opportunity other = (Opportunity) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.primaryContactId, other.primaryContactId) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.winProbability, other.winProbability) &&
            Objects.deepEquals(this.expectedRevenue, other.expectedRevenue) &&
            Objects.deepEquals(this.closeDate, other.closeDate) &&
            Objects.deepEquals(this.lossReasonId, other.lossReasonId) &&
            Objects.deepEquals(this.lossReason, other.lossReason) &&
            Objects.deepEquals(this.wonReasonId, other.wonReasonId) &&
            Objects.deepEquals(this.wonReason, other.wonReason) &&
            Objects.deepEquals(this.pipelineId, other.pipelineId) &&
            Objects.deepEquals(this.pipelineStageId, other.pipelineStageId) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.leadId, other.leadId) &&
            Objects.deepEquals(this.leadSource, other.leadSource) &&
            Objects.deepEquals(this.contactId, other.contactId) &&
            Objects.deepEquals(this.contactIds, other.contactIds) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.ownerId, other.ownerId) &&
            Objects.deepEquals(this.priority, other.priority) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.statusId, other.statusId) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.interactionCount, other.interactionCount) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.stageLastChangedAt, other.stageLastChangedAt) &&
            Objects.deepEquals(this.lastActivityAt, other.lastActivityAt) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.dateStageChanged, other.dateStageChanged) &&
            Objects.deepEquals(this.dateLastContacted, other.dateLastContacted) &&
            Objects.deepEquals(this.dateLeadCreated, other.dateLeadCreated) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            title,
            primaryContactId,
            description,
            type,
            monetaryAmount,
            currency,
            winProbability,
            expectedRevenue,
            closeDate,
            lossReasonId,
            lossReason,
            wonReasonId,
            wonReason,
            pipelineId,
            pipelineStageId,
            sourceId,
            leadId,
            leadSource,
            contactId,
            contactIds,
            companyId,
            companyName,
            ownerId,
            priority,
            status,
            statusId,
            tags,
            interactionCount,
            customFields,
            stageLastChangedAt,
            lastActivityAt,
            deleted,
            dateStageChanged,
            dateLastContacted,
            dateLeadCreated,
            customMappings,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Opportunity.class,
                "id", id,
                "title", title,
                "primaryContactId", primaryContactId,
                "description", description,
                "type", type,
                "monetaryAmount", monetaryAmount,
                "currency", currency,
                "winProbability", winProbability,
                "expectedRevenue", expectedRevenue,
                "closeDate", closeDate,
                "lossReasonId", lossReasonId,
                "lossReason", lossReason,
                "wonReasonId", wonReasonId,
                "wonReason", wonReason,
                "pipelineId", pipelineId,
                "pipelineStageId", pipelineStageId,
                "sourceId", sourceId,
                "leadId", leadId,
                "leadSource", leadSource,
                "contactId", contactId,
                "contactIds", contactIds,
                "companyId", companyId,
                "companyName", companyName,
                "ownerId", ownerId,
                "priority", priority,
                "status", status,
                "statusId", statusId,
                "tags", tags,
                "interactionCount", interactionCount,
                "customFields", customFields,
                "stageLastChangedAt", stageLastChangedAt,
                "lastActivityAt", lastActivityAt,
                "deleted", deleted,
                "dateStageChanged", dateStageChanged,
                "dateLastContacted", dateLastContacted,
                "dateLeadCreated", dateLeadCreated,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String title;
 
        private JsonNullable<String> primaryContactId = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> type = JsonNullable.undefined();
 
        private JsonNullable<Double> monetaryAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Double> winProbability = JsonNullable.undefined();
 
        private JsonNullable<Double> expectedRevenue = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> closeDate = JsonNullable.undefined();
 
        private JsonNullable<String> lossReasonId = JsonNullable.undefined();
 
        private JsonNullable<String> lossReason = JsonNullable.undefined();
 
        private JsonNullable<String> wonReasonId = JsonNullable.undefined();
 
        private JsonNullable<String> wonReason = JsonNullable.undefined();
 
        private JsonNullable<String> pipelineId = JsonNullable.undefined();
 
        private JsonNullable<String> pipelineStageId = JsonNullable.undefined();
 
        private JsonNullable<String> sourceId = JsonNullable.undefined();
 
        private JsonNullable<String> leadId = JsonNullable.undefined();
 
        private JsonNullable<String> leadSource = JsonNullable.undefined();
 
        private JsonNullable<String> contactId = JsonNullable.undefined();
 
        private Optional<? extends List<String>> contactIds = Optional.empty();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> ownerId = JsonNullable.undefined();
 
        private JsonNullable<String> priority = JsonNullable.undefined();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private JsonNullable<String> statusId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<Double> interactionCount = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<OffsetDateTime> stageLastChangedAt = JsonNullable.undefined();
 
        private JsonNullable<String> lastActivityAt = JsonNullable.undefined();
 
        private Optional<Boolean> deleted = Optional.empty();
 
        private JsonNullable<OffsetDateTime> dateStageChanged = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> dateLastContacted = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> dateLeadCreated = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the opportunity.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for the opportunity.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The title or name of the opportunity.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The unique identifier of the primary contact associated with the opportunity.
         */
        public Builder primaryContactId(String primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = JsonNullable.of(primaryContactId);
            return this;
        }

        /**
         * The unique identifier of the primary contact associated with the opportunity.
         */
        public Builder primaryContactId(JsonNullable<String> primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = primaryContactId;
            return this;
        }

        /**
         * A description of the opportunity.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the opportunity.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The type of the opportunity
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of the opportunity
         */
        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The monetary value associated with the opportunity
         */
        public Builder monetaryAmount(double monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = JsonNullable.of(monetaryAmount);
            return this;
        }

        /**
         * The monetary value associated with the opportunity
         */
        public Builder monetaryAmount(JsonNullable<Double> monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = monetaryAmount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The probability of winning the opportunity, expressed as a percentage.
         */
        public Builder winProbability(double winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = JsonNullable.of(winProbability);
            return this;
        }

        /**
         * The probability of winning the opportunity, expressed as a percentage.
         */
        public Builder winProbability(JsonNullable<Double> winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = winProbability;
            return this;
        }

        /**
         * The expected revenue from the opportunity
         */
        public Builder expectedRevenue(double expectedRevenue) {
            Utils.checkNotNull(expectedRevenue, "expectedRevenue");
            this.expectedRevenue = JsonNullable.of(expectedRevenue);
            return this;
        }

        /**
         * The expected revenue from the opportunity
         */
        public Builder expectedRevenue(JsonNullable<Double> expectedRevenue) {
            Utils.checkNotNull(expectedRevenue, "expectedRevenue");
            this.expectedRevenue = expectedRevenue;
            return this;
        }

        /**
         * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
         */
        public Builder closeDate(LocalDate closeDate) {
            Utils.checkNotNull(closeDate, "closeDate");
            this.closeDate = JsonNullable.of(closeDate);
            return this;
        }

        /**
         * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
         */
        public Builder closeDate(JsonNullable<LocalDate> closeDate) {
            Utils.checkNotNull(closeDate, "closeDate");
            this.closeDate = closeDate;
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was lost.
         */
        public Builder lossReasonId(String lossReasonId) {
            Utils.checkNotNull(lossReasonId, "lossReasonId");
            this.lossReasonId = JsonNullable.of(lossReasonId);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was lost.
         */
        public Builder lossReasonId(JsonNullable<String> lossReasonId) {
            Utils.checkNotNull(lossReasonId, "lossReasonId");
            this.lossReasonId = lossReasonId;
            return this;
        }

        /**
         * The reason why the opportunity was lost.
         */
        public Builder lossReason(String lossReason) {
            Utils.checkNotNull(lossReason, "lossReason");
            this.lossReason = JsonNullable.of(lossReason);
            return this;
        }

        /**
         * The reason why the opportunity was lost.
         */
        public Builder lossReason(JsonNullable<String> lossReason) {
            Utils.checkNotNull(lossReason, "lossReason");
            this.lossReason = lossReason;
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was won.
         */
        public Builder wonReasonId(String wonReasonId) {
            Utils.checkNotNull(wonReasonId, "wonReasonId");
            this.wonReasonId = JsonNullable.of(wonReasonId);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was won.
         */
        public Builder wonReasonId(JsonNullable<String> wonReasonId) {
            Utils.checkNotNull(wonReasonId, "wonReasonId");
            this.wonReasonId = wonReasonId;
            return this;
        }

        /**
         * The reason why the opportunity was won.
         */
        public Builder wonReason(String wonReason) {
            Utils.checkNotNull(wonReason, "wonReason");
            this.wonReason = JsonNullable.of(wonReason);
            return this;
        }

        /**
         * The reason why the opportunity was won.
         */
        public Builder wonReason(JsonNullable<String> wonReason) {
            Utils.checkNotNull(wonReason, "wonReason");
            this.wonReason = wonReason;
            return this;
        }

        /**
         * The unique identifier of the pipeline associated with the opportunity
         */
        public Builder pipelineId(String pipelineId) {
            Utils.checkNotNull(pipelineId, "pipelineId");
            this.pipelineId = JsonNullable.of(pipelineId);
            return this;
        }

        /**
         * The unique identifier of the pipeline associated with the opportunity
         */
        public Builder pipelineId(JsonNullable<String> pipelineId) {
            Utils.checkNotNull(pipelineId, "pipelineId");
            this.pipelineId = pipelineId;
            return this;
        }

        /**
         * The unique identifier of the stage in the pipeline associated with the opportunity.
         */
        public Builder pipelineStageId(String pipelineStageId) {
            Utils.checkNotNull(pipelineStageId, "pipelineStageId");
            this.pipelineStageId = JsonNullable.of(pipelineStageId);
            return this;
        }

        /**
         * The unique identifier of the stage in the pipeline associated with the opportunity.
         */
        public Builder pipelineStageId(JsonNullable<String> pipelineStageId) {
            Utils.checkNotNull(pipelineStageId, "pipelineStageId");
            this.pipelineStageId = pipelineStageId;
            return this;
        }

        /**
         * The unique identifier of the source of the opportunity.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * The unique identifier of the source of the opportunity.
         */
        public Builder sourceId(JsonNullable<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        /**
         * The unique identifier of the lead associated with the opportunity.
         */
        public Builder leadId(String leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The unique identifier of the lead associated with the opportunity.
         */
        public Builder leadId(JsonNullable<String> leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = leadId;
            return this;
        }

        /**
         * The source of the lead associated with the opportunity.
         */
        public Builder leadSource(String leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The source of the lead associated with the opportunity.
         */
        public Builder leadSource(JsonNullable<String> leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = leadSource;
            return this;
        }

        /**
         * The unique identifier of the contact associated with the opportunity.
         */
        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * The unique identifier of the contact associated with the opportunity.
         */
        public Builder contactId(JsonNullable<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }

        /**
         * An array of unique identifiers of all contacts associated with the opportunity.
         */
        public Builder contactIds(List<String> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = Optional.ofNullable(contactIds);
            return this;
        }

        /**
         * An array of unique identifiers of all contacts associated with the opportunity.
         */
        public Builder contactIds(Optional<? extends List<String>> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = contactIds;
            return this;
        }

        /**
         * The unique identifier of the company associated with the opportunity.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The unique identifier of the company associated with the opportunity.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The name of the company associated with the opportunity.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company associated with the opportunity.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The unique identifier of the user who owns the opportunity.
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The unique identifier of the user who owns the opportunity.
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        /**
         * The priority level of the opportunity.
         */
        public Builder priority(String priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = JsonNullable.of(priority);
            return this;
        }

        /**
         * The priority level of the opportunity.
         */
        public Builder priority(JsonNullable<String> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }

        /**
         * The current status of the opportunity.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The current status of the opportunity.
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The unique identifier of the current status of the opportunity.
         */
        public Builder statusId(String statusId) {
            Utils.checkNotNull(statusId, "statusId");
            this.statusId = JsonNullable.of(statusId);
            return this;
        }

        /**
         * The unique identifier of the current status of the opportunity.
         */
        public Builder statusId(JsonNullable<String> statusId) {
            Utils.checkNotNull(statusId, "statusId");
            this.statusId = statusId;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The number of interactions with the opportunity.
         */
        public Builder interactionCount(double interactionCount) {
            Utils.checkNotNull(interactionCount, "interactionCount");
            this.interactionCount = JsonNullable.of(interactionCount);
            return this;
        }

        /**
         * The number of interactions with the opportunity.
         */
        public Builder interactionCount(JsonNullable<Double> interactionCount) {
            Utils.checkNotNull(interactionCount, "interactionCount");
            this.interactionCount = interactionCount;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder stageLastChangedAt(OffsetDateTime stageLastChangedAt) {
            Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
            this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder stageLastChangedAt(JsonNullable<OffsetDateTime> stageLastChangedAt) {
            Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
            this.stageLastChangedAt = stageLastChangedAt;
            return this;
        }

        /**
         * The date and time of the last activity associated with the opportunity.
         */
        public Builder lastActivityAt(String lastActivityAt) {
            Utils.checkNotNull(lastActivityAt, "lastActivityAt");
            this.lastActivityAt = JsonNullable.of(lastActivityAt);
            return this;
        }

        /**
         * The date and time of the last activity associated with the opportunity.
         */
        public Builder lastActivityAt(JsonNullable<String> lastActivityAt) {
            Utils.checkNotNull(lastActivityAt, "lastActivityAt");
            this.lastActivityAt = lastActivityAt;
            return this;
        }

        /**
         * Indicates whether the opportunity has been deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = Optional.ofNullable(deleted);
            return this;
        }

        /**
         * Indicates whether the opportunity has been deleted.
         */
        public Builder deleted(Optional<Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder dateStageChanged(OffsetDateTime dateStageChanged) {
            Utils.checkNotNull(dateStageChanged, "dateStageChanged");
            this.dateStageChanged = JsonNullable.of(dateStageChanged);
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder dateStageChanged(JsonNullable<OffsetDateTime> dateStageChanged) {
            Utils.checkNotNull(dateStageChanged, "dateStageChanged");
            this.dateStageChanged = dateStageChanged;
            return this;
        }

        /**
         * The date and time when the opportunity was last contacted.
         */
        public Builder dateLastContacted(OffsetDateTime dateLastContacted) {
            Utils.checkNotNull(dateLastContacted, "dateLastContacted");
            this.dateLastContacted = JsonNullable.of(dateLastContacted);
            return this;
        }

        /**
         * The date and time when the opportunity was last contacted.
         */
        public Builder dateLastContacted(JsonNullable<OffsetDateTime> dateLastContacted) {
            Utils.checkNotNull(dateLastContacted, "dateLastContacted");
            this.dateLastContacted = dateLastContacted;
            return this;
        }

        /**
         * The date and time when the lead associated with the opportunity was created.
         */
        public Builder dateLeadCreated(OffsetDateTime dateLeadCreated) {
            Utils.checkNotNull(dateLeadCreated, "dateLeadCreated");
            this.dateLeadCreated = JsonNullable.of(dateLeadCreated);
            return this;
        }

        /**
         * The date and time when the lead associated with the opportunity was created.
         */
        public Builder dateLeadCreated(JsonNullable<OffsetDateTime> dateLeadCreated) {
            Utils.checkNotNull(dateLeadCreated, "dateLeadCreated");
            this.dateLeadCreated = dateLeadCreated;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The unique identifier of the user who last updated the opportunity.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The unique identifier of the user who last updated the opportunity.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The unique identifier of the user who created the opportunity.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The unique identifier of the user who created the opportunity.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the opportunity was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the opportunity was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the opportunity was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the opportunity was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public Opportunity build() {
            return new Opportunity(
                id,
                title,
                primaryContactId,
                description,
                type,
                monetaryAmount,
                currency,
                winProbability,
                expectedRevenue,
                closeDate,
                lossReasonId,
                lossReason,
                wonReasonId,
                wonReason,
                pipelineId,
                pipelineStageId,
                sourceId,
                leadId,
                leadSource,
                contactId,
                contactIds,
                companyId,
                companyName,
                ownerId,
                priority,
                status,
                statusId,
                tags,
                interactionCount,
                customFields,
                stageLastChangedAt,
                lastActivityAt,
                deleted,
                dateStageChanged,
                dateLastContacted,
                dateLeadCreated,
                customMappings,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                passThrough);
        }
    }
}

