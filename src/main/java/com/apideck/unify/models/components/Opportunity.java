/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Opportunity {
    /**
     * A unique identifier for the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The title or name of the opportunity.
     */
    @JsonProperty("title")
    private String title;

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_contact_id")
    private JsonNullable<String> primaryContactId;

    /**
     * A description of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The type of the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * The monetary value associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monetary_amount")
    private JsonNullable<Double> monetaryAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability")
    private JsonNullable<Double> winProbability;

    /**
     * The expected revenue from the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_revenue")
    private JsonNullable<Double> expectedRevenue;

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("close_date")
    private JsonNullable<LocalDate> closeDate;

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason_id")
    private JsonNullable<String> lossReasonId;

    /**
     * The reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason")
    private JsonNullable<String> lossReason;

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason_id")
    private JsonNullable<String> wonReasonId;

    /**
     * The reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason")
    private JsonNullable<String> wonReason;

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_id")
    private JsonNullable<String> pipelineId;

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_stage_id")
    private JsonNullable<String> pipelineStageId;

    /**
     * The unique identifier of the source of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The source of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_ids")
    private List<String> contactIds;

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The priority level of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<String> priority;

    /**
     * The current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The unique identifier of the current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_id")
    private JsonNullable<String> statusId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<List<String>> tags;

    /**
     * The number of interactions with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interaction_count")
    private JsonNullable<Double> interactionCount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_last_changed_at")
    private JsonNullable<OffsetDateTime> stageLastChangedAt;

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_activity_at")
    private JsonNullable<String> lastActivityAt;

    /**
     * Indicates whether the opportunity has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private Boolean deleted;

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_stage_changed")
    private JsonNullable<OffsetDateTime> dateStageChanged;

    /**
     * The date and time when the opportunity was last contacted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_last_contacted")
    private JsonNullable<OffsetDateTime> dateLastContacted;

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_lead_created")
    private JsonNullable<OffsetDateTime> dateLeadCreated;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The unique identifier of the user who created the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the opportunity was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the opportunity was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Opportunity(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("title") @Nonnull String title,
            @JsonProperty("primary_contact_id") @Nullable JsonNullable<String> primaryContactId,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("type") @Nullable JsonNullable<String> type,
            @JsonProperty("monetary_amount") @Nullable JsonNullable<Double> monetaryAmount,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("win_probability") @Nullable JsonNullable<Double> winProbability,
            @JsonProperty("expected_revenue") @Nullable JsonNullable<Double> expectedRevenue,
            @JsonProperty("close_date") @Nullable JsonNullable<LocalDate> closeDate,
            @JsonProperty("loss_reason_id") @Nullable JsonNullable<String> lossReasonId,
            @JsonProperty("loss_reason") @Nullable JsonNullable<String> lossReason,
            @JsonProperty("won_reason_id") @Nullable JsonNullable<String> wonReasonId,
            @JsonProperty("won_reason") @Nullable JsonNullable<String> wonReason,
            @JsonProperty("pipeline_id") @Nullable JsonNullable<String> pipelineId,
            @JsonProperty("pipeline_stage_id") @Nullable JsonNullable<String> pipelineStageId,
            @JsonProperty("source_id") @Nullable JsonNullable<String> sourceId,
            @JsonProperty("lead_id") @Nullable JsonNullable<String> leadId,
            @JsonProperty("lead_source") @Nullable JsonNullable<String> leadSource,
            @JsonProperty("contact_id") @Nullable JsonNullable<String> contactId,
            @JsonProperty("contact_ids") @Nullable List<String> contactIds,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("owner_id") @Nullable JsonNullable<String> ownerId,
            @JsonProperty("priority") @Nullable JsonNullable<String> priority,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("status_id") @Nullable JsonNullable<String> statusId,
            @JsonProperty("tags") @Nullable JsonNullable<List<String>> tags,
            @JsonProperty("interaction_count") @Nullable JsonNullable<Double> interactionCount,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("stage_last_changed_at") @Nullable JsonNullable<OffsetDateTime> stageLastChangedAt,
            @JsonProperty("last_activity_at") @Nullable JsonNullable<String> lastActivityAt,
            @JsonProperty("deleted") @Nullable Boolean deleted,
            @JsonProperty("date_stage_changed") @Nullable JsonNullable<OffsetDateTime> dateStageChanged,
            @JsonProperty("date_last_contacted") @Nullable JsonNullable<OffsetDateTime> dateLastContacted,
            @JsonProperty("date_lead_created") @Nullable JsonNullable<OffsetDateTime> dateLeadCreated,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.title = Optional.ofNullable(title)
            .orElseThrow(() -> new IllegalArgumentException("title cannot be null"));
        this.primaryContactId = Optional.ofNullable(primaryContactId)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.monetaryAmount = Optional.ofNullable(monetaryAmount)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.winProbability = Optional.ofNullable(winProbability)
            .orElse(JsonNullable.undefined());
        this.expectedRevenue = Optional.ofNullable(expectedRevenue)
            .orElse(JsonNullable.undefined());
        this.closeDate = Optional.ofNullable(closeDate)
            .orElse(JsonNullable.undefined());
        this.lossReasonId = Optional.ofNullable(lossReasonId)
            .orElse(JsonNullable.undefined());
        this.lossReason = Optional.ofNullable(lossReason)
            .orElse(JsonNullable.undefined());
        this.wonReasonId = Optional.ofNullable(wonReasonId)
            .orElse(JsonNullable.undefined());
        this.wonReason = Optional.ofNullable(wonReason)
            .orElse(JsonNullable.undefined());
        this.pipelineId = Optional.ofNullable(pipelineId)
            .orElse(JsonNullable.undefined());
        this.pipelineStageId = Optional.ofNullable(pipelineStageId)
            .orElse(JsonNullable.undefined());
        this.sourceId = Optional.ofNullable(sourceId)
            .orElse(JsonNullable.undefined());
        this.leadId = Optional.ofNullable(leadId)
            .orElse(JsonNullable.undefined());
        this.leadSource = Optional.ofNullable(leadSource)
            .orElse(JsonNullable.undefined());
        this.contactId = Optional.ofNullable(contactId)
            .orElse(JsonNullable.undefined());
        this.contactIds = contactIds;
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.ownerId = Optional.ofNullable(ownerId)
            .orElse(JsonNullable.undefined());
        this.priority = Optional.ofNullable(priority)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.statusId = Optional.ofNullable(statusId)
            .orElse(JsonNullable.undefined());
        this.tags = Optional.ofNullable(tags)
            .orElse(JsonNullable.undefined());
        this.interactionCount = Optional.ofNullable(interactionCount)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.stageLastChangedAt = Optional.ofNullable(stageLastChangedAt)
            .orElse(JsonNullable.undefined());
        this.lastActivityAt = Optional.ofNullable(lastActivityAt)
            .orElse(JsonNullable.undefined());
        this.deleted = deleted;
        this.dateStageChanged = Optional.ofNullable(dateStageChanged)
            .orElse(JsonNullable.undefined());
        this.dateLastContacted = Optional.ofNullable(dateLastContacted)
            .orElse(JsonNullable.undefined());
        this.dateLeadCreated = Optional.ofNullable(dateLeadCreated)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Opportunity(
            @Nonnull String title) {
        this(null, title, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for the opportunity.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The title or name of the opportunity.
     */
    public String title() {
        return this.title;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public JsonNullable<String> primaryContactId() {
        return this.primaryContactId;
    }

    /**
     * A description of the opportunity.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The type of the opportunity
     */
    public JsonNullable<String> type() {
        return this.type;
    }

    /**
     * The monetary value associated with the opportunity
     */
    public JsonNullable<Double> monetaryAmount() {
        return this.monetaryAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public JsonNullable<Double> winProbability() {
        return this.winProbability;
    }

    /**
     * The expected revenue from the opportunity
     */
    public JsonNullable<Double> expectedRevenue() {
        return this.expectedRevenue;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public JsonNullable<LocalDate> closeDate() {
        return this.closeDate;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public JsonNullable<String> lossReasonId() {
        return this.lossReasonId;
    }

    /**
     * The reason why the opportunity was lost.
     */
    public JsonNullable<String> lossReason() {
        return this.lossReason;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public JsonNullable<String> wonReasonId() {
        return this.wonReasonId;
    }

    /**
     * The reason why the opportunity was won.
     */
    public JsonNullable<String> wonReason() {
        return this.wonReason;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public JsonNullable<String> pipelineId() {
        return this.pipelineId;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public JsonNullable<String> pipelineStageId() {
        return this.pipelineStageId;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    public JsonNullable<String> sourceId() {
        return this.sourceId;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public JsonNullable<String> leadId() {
        return this.leadId;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    public JsonNullable<String> leadSource() {
        return this.leadSource;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public JsonNullable<String> contactId() {
        return this.contactId;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public Optional<List<String>> contactIds() {
        return Optional.ofNullable(this.contactIds);
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public JsonNullable<String> ownerId() {
        return this.ownerId;
    }

    /**
     * The priority level of the opportunity.
     */
    public JsonNullable<String> priority() {
        return this.priority;
    }

    /**
     * The current status of the opportunity.
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    public JsonNullable<String> statusId() {
        return this.statusId;
    }

    public JsonNullable<List<String>> tags() {
        return this.tags;
    }

    /**
     * The number of interactions with the opportunity.
     */
    public JsonNullable<Double> interactionCount() {
        return this.interactionCount;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public JsonNullable<OffsetDateTime> stageLastChangedAt() {
        return this.stageLastChangedAt;
    }

    /**
     * The date and time of the last activity associated with the opportunity.
     */
    public JsonNullable<String> lastActivityAt() {
        return this.lastActivityAt;
    }

    /**
     * Indicates whether the opportunity has been deleted.
     */
    public Optional<Boolean> deleted() {
        return Optional.ofNullable(this.deleted);
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public JsonNullable<OffsetDateTime> dateStageChanged() {
        return this.dateStageChanged;
    }

    /**
     * The date and time when the opportunity was last contacted.
     */
    public JsonNullable<OffsetDateTime> dateLastContacted() {
        return this.dateLastContacted;
    }

    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    public JsonNullable<OffsetDateTime> dateLeadCreated() {
        return this.dateLeadCreated;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The unique identifier of the user who created the opportunity.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the opportunity was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the opportunity was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for the opportunity.
     */
    public Opportunity withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The title or name of the opportunity.
     */
    public Opportunity withTitle(@Nonnull String title) {
        this.title = Utils.checkNotNull(title, "title");
        return this;
    }


    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public Opportunity withPrimaryContactId(@Nullable String primaryContactId) {
        this.primaryContactId = JsonNullable.of(primaryContactId);
        return this;
    }


    /**
     * A description of the opportunity.
     */
    public Opportunity withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The type of the opportunity
     */
    public Opportunity withType(@Nullable String type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The monetary value associated with the opportunity
     */
    public Opportunity withMonetaryAmount(@Nullable Double monetaryAmount) {
        this.monetaryAmount = JsonNullable.of(monetaryAmount);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Opportunity withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public Opportunity withWinProbability(@Nullable Double winProbability) {
        this.winProbability = JsonNullable.of(winProbability);
        return this;
    }


    /**
     * The expected revenue from the opportunity
     */
    public Opportunity withExpectedRevenue(@Nullable Double expectedRevenue) {
        this.expectedRevenue = JsonNullable.of(expectedRevenue);
        return this;
    }


    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public Opportunity withCloseDate(@Nullable LocalDate closeDate) {
        this.closeDate = JsonNullable.of(closeDate);
        return this;
    }


    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public Opportunity withLossReasonId(@Nullable String lossReasonId) {
        this.lossReasonId = JsonNullable.of(lossReasonId);
        return this;
    }


    /**
     * The reason why the opportunity was lost.
     */
    public Opportunity withLossReason(@Nullable String lossReason) {
        this.lossReason = JsonNullable.of(lossReason);
        return this;
    }


    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public Opportunity withWonReasonId(@Nullable String wonReasonId) {
        this.wonReasonId = JsonNullable.of(wonReasonId);
        return this;
    }


    /**
     * The reason why the opportunity was won.
     */
    public Opportunity withWonReason(@Nullable String wonReason) {
        this.wonReason = JsonNullable.of(wonReason);
        return this;
    }


    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public Opportunity withPipelineId(@Nullable String pipelineId) {
        this.pipelineId = JsonNullable.of(pipelineId);
        return this;
    }


    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public Opportunity withPipelineStageId(@Nullable String pipelineStageId) {
        this.pipelineStageId = JsonNullable.of(pipelineStageId);
        return this;
    }


    /**
     * The unique identifier of the source of the opportunity.
     */
    public Opportunity withSourceId(@Nullable String sourceId) {
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }


    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public Opportunity withLeadId(@Nullable String leadId) {
        this.leadId = JsonNullable.of(leadId);
        return this;
    }


    /**
     * The source of the lead associated with the opportunity.
     */
    public Opportunity withLeadSource(@Nullable String leadSource) {
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }


    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public Opportunity withContactId(@Nullable String contactId) {
        this.contactId = JsonNullable.of(contactId);
        return this;
    }


    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public Opportunity withContactIds(@Nullable List<String> contactIds) {
        this.contactIds = contactIds;
        return this;
    }


    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public Opportunity withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The name of the company associated with the opportunity.
     */
    public Opportunity withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public Opportunity withOwnerId(@Nullable String ownerId) {
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }


    /**
     * The priority level of the opportunity.
     */
    public Opportunity withPriority(@Nullable String priority) {
        this.priority = JsonNullable.of(priority);
        return this;
    }


    /**
     * The current status of the opportunity.
     */
    public Opportunity withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * The unique identifier of the current status of the opportunity.
     */
    public Opportunity withStatusId(@Nullable String statusId) {
        this.statusId = JsonNullable.of(statusId);
        return this;
    }


    public Opportunity withTags(@Nullable List<String> tags) {
        this.tags = JsonNullable.of(tags);
        return this;
    }


    /**
     * The number of interactions with the opportunity.
     */
    public Opportunity withInteractionCount(@Nullable Double interactionCount) {
        this.interactionCount = JsonNullable.of(interactionCount);
        return this;
    }


    public Opportunity withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withStageLastChangedAt(@Nullable OffsetDateTime stageLastChangedAt) {
        this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
        return this;
    }


    /**
     * The date and time of the last activity associated with the opportunity.
     */
    public Opportunity withLastActivityAt(@Nullable String lastActivityAt) {
        this.lastActivityAt = JsonNullable.of(lastActivityAt);
        return this;
    }


    /**
     * Indicates whether the opportunity has been deleted.
     */
    public Opportunity withDeleted(@Nullable Boolean deleted) {
        this.deleted = deleted;
        return this;
    }


    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public Opportunity withDateStageChanged(@Nullable OffsetDateTime dateStageChanged) {
        this.dateStageChanged = JsonNullable.of(dateStageChanged);
        return this;
    }


    /**
     * The date and time when the opportunity was last contacted.
     */
    public Opportunity withDateLastContacted(@Nullable OffsetDateTime dateLastContacted) {
        this.dateLastContacted = JsonNullable.of(dateLastContacted);
        return this;
    }


    /**
     * The date and time when the lead associated with the opportunity was created.
     */
    public Opportunity withDateLeadCreated(@Nullable OffsetDateTime dateLeadCreated) {
        this.dateLeadCreated = JsonNullable.of(dateLeadCreated);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Opportunity withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The unique identifier of the user who last updated the opportunity.
     */
    public Opportunity withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The unique identifier of the user who created the opportunity.
     */
    public Opportunity withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the opportunity was last updated.
     */
    public Opportunity withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the opportunity was created.
     */
    public Opportunity withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Opportunity withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Opportunity other = (Opportunity) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.primaryContactId, other.primaryContactId) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.winProbability, other.winProbability) &&
            Utils.enhancedDeepEquals(this.expectedRevenue, other.expectedRevenue) &&
            Utils.enhancedDeepEquals(this.closeDate, other.closeDate) &&
            Utils.enhancedDeepEquals(this.lossReasonId, other.lossReasonId) &&
            Utils.enhancedDeepEquals(this.lossReason, other.lossReason) &&
            Utils.enhancedDeepEquals(this.wonReasonId, other.wonReasonId) &&
            Utils.enhancedDeepEquals(this.wonReason, other.wonReason) &&
            Utils.enhancedDeepEquals(this.pipelineId, other.pipelineId) &&
            Utils.enhancedDeepEquals(this.pipelineStageId, other.pipelineStageId) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.leadSource, other.leadSource) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.contactIds, other.contactIds) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.statusId, other.statusId) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.interactionCount, other.interactionCount) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.stageLastChangedAt, other.stageLastChangedAt) &&
            Utils.enhancedDeepEquals(this.lastActivityAt, other.lastActivityAt) &&
            Utils.enhancedDeepEquals(this.deleted, other.deleted) &&
            Utils.enhancedDeepEquals(this.dateStageChanged, other.dateStageChanged) &&
            Utils.enhancedDeepEquals(this.dateLastContacted, other.dateLastContacted) &&
            Utils.enhancedDeepEquals(this.dateLeadCreated, other.dateLeadCreated) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, title, primaryContactId,
            description, type, monetaryAmount,
            currency, winProbability, expectedRevenue,
            closeDate, lossReasonId, lossReason,
            wonReasonId, wonReason, pipelineId,
            pipelineStageId, sourceId, leadId,
            leadSource, contactId, contactIds,
            companyId, companyName, ownerId,
            priority, status, statusId,
            tags, interactionCount, customFields,
            stageLastChangedAt, lastActivityAt, deleted,
            dateStageChanged, dateLastContacted, dateLeadCreated,
            customMappings, updatedBy, createdBy,
            updatedAt, createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Opportunity.class,
                "id", id,
                "title", title,
                "primaryContactId", primaryContactId,
                "description", description,
                "type", type,
                "monetaryAmount", monetaryAmount,
                "currency", currency,
                "winProbability", winProbability,
                "expectedRevenue", expectedRevenue,
                "closeDate", closeDate,
                "lossReasonId", lossReasonId,
                "lossReason", lossReason,
                "wonReasonId", wonReasonId,
                "wonReason", wonReason,
                "pipelineId", pipelineId,
                "pipelineStageId", pipelineStageId,
                "sourceId", sourceId,
                "leadId", leadId,
                "leadSource", leadSource,
                "contactId", contactId,
                "contactIds", contactIds,
                "companyId", companyId,
                "companyName", companyName,
                "ownerId", ownerId,
                "priority", priority,
                "status", status,
                "statusId", statusId,
                "tags", tags,
                "interactionCount", interactionCount,
                "customFields", customFields,
                "stageLastChangedAt", stageLastChangedAt,
                "lastActivityAt", lastActivityAt,
                "deleted", deleted,
                "dateStageChanged", dateStageChanged,
                "dateLastContacted", dateLastContacted,
                "dateLeadCreated", dateLeadCreated,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String title;

        private JsonNullable<String> primaryContactId;

        private JsonNullable<String> description;

        private JsonNullable<String> type;

        private JsonNullable<Double> monetaryAmount;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> winProbability;

        private JsonNullable<Double> expectedRevenue;

        private JsonNullable<LocalDate> closeDate;

        private JsonNullable<String> lossReasonId;

        private JsonNullable<String> lossReason;

        private JsonNullable<String> wonReasonId;

        private JsonNullable<String> wonReason;

        private JsonNullable<String> pipelineId;

        private JsonNullable<String> pipelineStageId;

        private JsonNullable<String> sourceId;

        private JsonNullable<String> leadId;

        private JsonNullable<String> leadSource;

        private JsonNullable<String> contactId;

        private List<String> contactIds;

        private JsonNullable<String> companyId;

        private JsonNullable<String> companyName;

        private JsonNullable<String> ownerId;

        private JsonNullable<String> priority;

        private JsonNullable<String> status;

        private JsonNullable<String> statusId;

        private JsonNullable<List<String>> tags;

        private JsonNullable<Double> interactionCount;

        private List<CustomField> customFields;

        private JsonNullable<OffsetDateTime> stageLastChangedAt;

        private JsonNullable<String> lastActivityAt;

        private Boolean deleted;

        private JsonNullable<OffsetDateTime> dateStageChanged;

        private JsonNullable<OffsetDateTime> dateLastContacted;

        private JsonNullable<OffsetDateTime> dateLeadCreated;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the opportunity.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The title or name of the opportunity.
         */
        public Builder title(@Nonnull String title) {
            this.title = Utils.checkNotNull(title, "title");
            return this;
        }

        /**
         * The unique identifier of the primary contact associated with the opportunity.
         */
        public Builder primaryContactId(@Nullable String primaryContactId) {
            this.primaryContactId = JsonNullable.of(primaryContactId);
            return this;
        }

        /**
         * A description of the opportunity.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The type of the opportunity
         */
        public Builder type(@Nullable String type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The monetary value associated with the opportunity
         */
        public Builder monetaryAmount(@Nullable Double monetaryAmount) {
            this.monetaryAmount = JsonNullable.of(monetaryAmount);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The probability of winning the opportunity, expressed as a percentage.
         */
        public Builder winProbability(@Nullable Double winProbability) {
            this.winProbability = JsonNullable.of(winProbability);
            return this;
        }

        /**
         * The expected revenue from the opportunity
         */
        public Builder expectedRevenue(@Nullable Double expectedRevenue) {
            this.expectedRevenue = JsonNullable.of(expectedRevenue);
            return this;
        }

        /**
         * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
         */
        public Builder closeDate(@Nullable LocalDate closeDate) {
            this.closeDate = JsonNullable.of(closeDate);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was lost.
         */
        public Builder lossReasonId(@Nullable String lossReasonId) {
            this.lossReasonId = JsonNullable.of(lossReasonId);
            return this;
        }

        /**
         * The reason why the opportunity was lost.
         */
        public Builder lossReason(@Nullable String lossReason) {
            this.lossReason = JsonNullable.of(lossReason);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was won.
         */
        public Builder wonReasonId(@Nullable String wonReasonId) {
            this.wonReasonId = JsonNullable.of(wonReasonId);
            return this;
        }

        /**
         * The reason why the opportunity was won.
         */
        public Builder wonReason(@Nullable String wonReason) {
            this.wonReason = JsonNullable.of(wonReason);
            return this;
        }

        /**
         * The unique identifier of the pipeline associated with the opportunity
         */
        public Builder pipelineId(@Nullable String pipelineId) {
            this.pipelineId = JsonNullable.of(pipelineId);
            return this;
        }

        /**
         * The unique identifier of the stage in the pipeline associated with the opportunity.
         */
        public Builder pipelineStageId(@Nullable String pipelineStageId) {
            this.pipelineStageId = JsonNullable.of(pipelineStageId);
            return this;
        }

        /**
         * The unique identifier of the source of the opportunity.
         */
        public Builder sourceId(@Nullable String sourceId) {
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * The unique identifier of the lead associated with the opportunity.
         */
        public Builder leadId(@Nullable String leadId) {
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The source of the lead associated with the opportunity.
         */
        public Builder leadSource(@Nullable String leadSource) {
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The unique identifier of the contact associated with the opportunity.
         */
        public Builder contactId(@Nullable String contactId) {
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * An array of unique identifiers of all contacts associated with the opportunity.
         */
        public Builder contactIds(@Nullable List<String> contactIds) {
            this.contactIds = contactIds;
            return this;
        }

        /**
         * The unique identifier of the company associated with the opportunity.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The name of the company associated with the opportunity.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The unique identifier of the user who owns the opportunity.
         */
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The priority level of the opportunity.
         */
        public Builder priority(@Nullable String priority) {
            this.priority = JsonNullable.of(priority);
            return this;
        }

        /**
         * The current status of the opportunity.
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The unique identifier of the current status of the opportunity.
         */
        public Builder statusId(@Nullable String statusId) {
            this.statusId = JsonNullable.of(statusId);
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * The number of interactions with the opportunity.
         */
        public Builder interactionCount(@Nullable Double interactionCount) {
            this.interactionCount = JsonNullable.of(interactionCount);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder stageLastChangedAt(@Nullable OffsetDateTime stageLastChangedAt) {
            this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
            return this;
        }

        /**
         * The date and time of the last activity associated with the opportunity.
         */
        public Builder lastActivityAt(@Nullable String lastActivityAt) {
            this.lastActivityAt = JsonNullable.of(lastActivityAt);
            return this;
        }

        /**
         * Indicates whether the opportunity has been deleted.
         */
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder dateStageChanged(@Nullable OffsetDateTime dateStageChanged) {
            this.dateStageChanged = JsonNullable.of(dateStageChanged);
            return this;
        }

        /**
         * The date and time when the opportunity was last contacted.
         */
        public Builder dateLastContacted(@Nullable OffsetDateTime dateLastContacted) {
            this.dateLastContacted = JsonNullable.of(dateLastContacted);
            return this;
        }

        /**
         * The date and time when the lead associated with the opportunity was created.
         */
        public Builder dateLeadCreated(@Nullable OffsetDateTime dateLeadCreated) {
            this.dateLeadCreated = JsonNullable.of(dateLeadCreated);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The unique identifier of the user who last updated the opportunity.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The unique identifier of the user who created the opportunity.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the opportunity was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the opportunity was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Opportunity build() {
            return new Opportunity(
                id, title, primaryContactId,
                description, type, monetaryAmount,
                currency, winProbability, expectedRevenue,
                closeDate, lossReasonId, lossReason,
                wonReasonId, wonReason, pipelineId,
                pipelineStageId, sourceId, leadId,
                leadSource, contactId, contactIds,
                companyId, companyName, ownerId,
                priority, status, statusId,
                tags, interactionCount, customFields,
                stageLastChangedAt, lastActivityAt, deleted,
                dateStageChanged, dateLastContacted, dateLeadCreated,
                customMappings, updatedBy, createdBy,
                updatedAt, createdAt, passThrough);
        }

    }
}
