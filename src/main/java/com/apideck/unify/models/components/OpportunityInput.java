/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class OpportunityInput {
    /**
     * The title or name of the opportunity.
     */
    @JsonProperty("title")
    private String title;

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_contact_id")
    private JsonNullable<String> primaryContactId;

    /**
     * A description of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The type of the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * The monetary value associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monetary_amount")
    private JsonNullable<Double> monetaryAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability")
    private JsonNullable<Double> winProbability;

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("close_date")
    private JsonNullable<LocalDate> closeDate;

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason_id")
    private JsonNullable<String> lossReasonId;

    /**
     * The reason why the opportunity was lost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loss_reason")
    private JsonNullable<String> lossReason;

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason_id")
    private JsonNullable<String> wonReasonId;

    /**
     * The reason why the opportunity was won.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won_reason")
    private JsonNullable<String> wonReason;

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_id")
    private JsonNullable<String> pipelineId;

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pipeline_stage_id")
    private JsonNullable<String> pipelineStageId;

    /**
     * The unique identifier of the source of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_id")
    private JsonNullable<String> leadId;

    /**
     * The source of the lead associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_source")
    private JsonNullable<String> leadSource;

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private JsonNullable<String> contactId;

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_ids")
    private Optional<? extends List<String>> contactIds;

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The name of the company associated with the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The priority level of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<String> priority;

    /**
     * The current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * The unique identifier of the current status of the opportunity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_id")
    private JsonNullable<String> statusId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_last_changed_at")
    private JsonNullable<OffsetDateTime> stageLastChangedAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public OpportunityInput(
            @JsonProperty("title") String title,
            @JsonProperty("primary_contact_id") JsonNullable<String> primaryContactId,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("type") JsonNullable<String> type,
            @JsonProperty("monetary_amount") JsonNullable<Double> monetaryAmount,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("win_probability") JsonNullable<Double> winProbability,
            @JsonProperty("close_date") JsonNullable<LocalDate> closeDate,
            @JsonProperty("loss_reason_id") JsonNullable<String> lossReasonId,
            @JsonProperty("loss_reason") JsonNullable<String> lossReason,
            @JsonProperty("won_reason_id") JsonNullable<String> wonReasonId,
            @JsonProperty("won_reason") JsonNullable<String> wonReason,
            @JsonProperty("pipeline_id") JsonNullable<String> pipelineId,
            @JsonProperty("pipeline_stage_id") JsonNullable<String> pipelineStageId,
            @JsonProperty("source_id") JsonNullable<String> sourceId,
            @JsonProperty("lead_id") JsonNullable<String> leadId,
            @JsonProperty("lead_source") JsonNullable<String> leadSource,
            @JsonProperty("contact_id") JsonNullable<String> contactId,
            @JsonProperty("contact_ids") Optional<? extends List<String>> contactIds,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("priority") JsonNullable<String> priority,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("status_id") JsonNullable<String> statusId,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("stage_last_changed_at") JsonNullable<OffsetDateTime> stageLastChangedAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(winProbability, "winProbability");
        Utils.checkNotNull(closeDate, "closeDate");
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        Utils.checkNotNull(lossReason, "lossReason");
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        Utils.checkNotNull(wonReason, "wonReason");
        Utils.checkNotNull(pipelineId, "pipelineId");
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(leadId, "leadId");
        Utils.checkNotNull(leadSource, "leadSource");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(contactIds, "contactIds");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusId, "statusId");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.title = title;
        this.primaryContactId = primaryContactId;
        this.description = description;
        this.type = type;
        this.monetaryAmount = monetaryAmount;
        this.currency = currency;
        this.winProbability = winProbability;
        this.closeDate = closeDate;
        this.lossReasonId = lossReasonId;
        this.lossReason = lossReason;
        this.wonReasonId = wonReasonId;
        this.wonReason = wonReason;
        this.pipelineId = pipelineId;
        this.pipelineStageId = pipelineStageId;
        this.sourceId = sourceId;
        this.leadId = leadId;
        this.leadSource = leadSource;
        this.contactId = contactId;
        this.contactIds = contactIds;
        this.companyId = companyId;
        this.companyName = companyName;
        this.ownerId = ownerId;
        this.priority = priority;
        this.status = status;
        this.statusId = statusId;
        this.tags = tags;
        this.customFields = customFields;
        this.stageLastChangedAt = stageLastChangedAt;
        this.passThrough = passThrough;
    }
    
    public OpportunityInput(
            String title) {
        this(title, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The title or name of the opportunity.
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> primaryContactId() {
        return primaryContactId;
    }

    /**
     * A description of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The type of the opportunity
     */
    @JsonIgnore
    public JsonNullable<String> type() {
        return type;
    }

    /**
     * The monetary value associated with the opportunity
     */
    @JsonIgnore
    public JsonNullable<Double> monetaryAmount() {
        return monetaryAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    @JsonIgnore
    public JsonNullable<Double> winProbability() {
        return winProbability;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> closeDate() {
        return closeDate;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    @JsonIgnore
    public JsonNullable<String> lossReasonId() {
        return lossReasonId;
    }

    /**
     * The reason why the opportunity was lost.
     */
    @JsonIgnore
    public JsonNullable<String> lossReason() {
        return lossReason;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    @JsonIgnore
    public JsonNullable<String> wonReasonId() {
        return wonReasonId;
    }

    /**
     * The reason why the opportunity was won.
     */
    @JsonIgnore
    public JsonNullable<String> wonReason() {
        return wonReason;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    @JsonIgnore
    public JsonNullable<String> pipelineId() {
        return pipelineId;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> pipelineStageId() {
        return pipelineStageId;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> sourceId() {
        return sourceId;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> leadId() {
        return leadId;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> leadSource() {
        return leadSource;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> contactId() {
        return contactId;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> contactIds() {
        return (Optional<List<String>>) contactIds;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The priority level of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> priority() {
        return priority;
    }

    /**
     * The current status of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    @JsonIgnore
    public JsonNullable<String> statusId() {
        return statusId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> stageLastChangedAt() {
        return stageLastChangedAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The title or name of the opportunity.
     */
    public OpportunityInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public OpportunityInput withPrimaryContactId(String primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = JsonNullable.of(primaryContactId);
        return this;
    }

    /**
     * The unique identifier of the primary contact associated with the opportunity.
     */
    public OpportunityInput withPrimaryContactId(JsonNullable<String> primaryContactId) {
        Utils.checkNotNull(primaryContactId, "primaryContactId");
        this.primaryContactId = primaryContactId;
        return this;
    }

    /**
     * A description of the opportunity.
     */
    public OpportunityInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the opportunity.
     */
    public OpportunityInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The type of the opportunity
     */
    public OpportunityInput withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of the opportunity
     */
    public OpportunityInput withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The monetary value associated with the opportunity
     */
    public OpportunityInput withMonetaryAmount(double monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = JsonNullable.of(monetaryAmount);
        return this;
    }

    /**
     * The monetary value associated with the opportunity
     */
    public OpportunityInput withMonetaryAmount(JsonNullable<Double> monetaryAmount) {
        Utils.checkNotNull(monetaryAmount, "monetaryAmount");
        this.monetaryAmount = monetaryAmount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OpportunityInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OpportunityInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public OpportunityInput withWinProbability(double winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = JsonNullable.of(winProbability);
        return this;
    }

    /**
     * The probability of winning the opportunity, expressed as a percentage.
     */
    public OpportunityInput withWinProbability(JsonNullable<Double> winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = winProbability;
        return this;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public OpportunityInput withCloseDate(LocalDate closeDate) {
        Utils.checkNotNull(closeDate, "closeDate");
        this.closeDate = JsonNullable.of(closeDate);
        return this;
    }

    /**
     * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
     */
    public OpportunityInput withCloseDate(JsonNullable<LocalDate> closeDate) {
        Utils.checkNotNull(closeDate, "closeDate");
        this.closeDate = closeDate;
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public OpportunityInput withLossReasonId(String lossReasonId) {
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        this.lossReasonId = JsonNullable.of(lossReasonId);
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was lost.
     */
    public OpportunityInput withLossReasonId(JsonNullable<String> lossReasonId) {
        Utils.checkNotNull(lossReasonId, "lossReasonId");
        this.lossReasonId = lossReasonId;
        return this;
    }

    /**
     * The reason why the opportunity was lost.
     */
    public OpportunityInput withLossReason(String lossReason) {
        Utils.checkNotNull(lossReason, "lossReason");
        this.lossReason = JsonNullable.of(lossReason);
        return this;
    }

    /**
     * The reason why the opportunity was lost.
     */
    public OpportunityInput withLossReason(JsonNullable<String> lossReason) {
        Utils.checkNotNull(lossReason, "lossReason");
        this.lossReason = lossReason;
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public OpportunityInput withWonReasonId(String wonReasonId) {
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        this.wonReasonId = JsonNullable.of(wonReasonId);
        return this;
    }

    /**
     * The unique identifier of the reason why the opportunity was won.
     */
    public OpportunityInput withWonReasonId(JsonNullable<String> wonReasonId) {
        Utils.checkNotNull(wonReasonId, "wonReasonId");
        this.wonReasonId = wonReasonId;
        return this;
    }

    /**
     * The reason why the opportunity was won.
     */
    public OpportunityInput withWonReason(String wonReason) {
        Utils.checkNotNull(wonReason, "wonReason");
        this.wonReason = JsonNullable.of(wonReason);
        return this;
    }

    /**
     * The reason why the opportunity was won.
     */
    public OpportunityInput withWonReason(JsonNullable<String> wonReason) {
        Utils.checkNotNull(wonReason, "wonReason");
        this.wonReason = wonReason;
        return this;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public OpportunityInput withPipelineId(String pipelineId) {
        Utils.checkNotNull(pipelineId, "pipelineId");
        this.pipelineId = JsonNullable.of(pipelineId);
        return this;
    }

    /**
     * The unique identifier of the pipeline associated with the opportunity
     */
    public OpportunityInput withPipelineId(JsonNullable<String> pipelineId) {
        Utils.checkNotNull(pipelineId, "pipelineId");
        this.pipelineId = pipelineId;
        return this;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public OpportunityInput withPipelineStageId(String pipelineStageId) {
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        this.pipelineStageId = JsonNullable.of(pipelineStageId);
        return this;
    }

    /**
     * The unique identifier of the stage in the pipeline associated with the opportunity.
     */
    public OpportunityInput withPipelineStageId(JsonNullable<String> pipelineStageId) {
        Utils.checkNotNull(pipelineStageId, "pipelineStageId");
        this.pipelineStageId = pipelineStageId;
        return this;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    public OpportunityInput withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }

    /**
     * The unique identifier of the source of the opportunity.
     */
    public OpportunityInput withSourceId(JsonNullable<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public OpportunityInput withLeadId(String leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = JsonNullable.of(leadId);
        return this;
    }

    /**
     * The unique identifier of the lead associated with the opportunity.
     */
    public OpportunityInput withLeadId(JsonNullable<String> leadId) {
        Utils.checkNotNull(leadId, "leadId");
        this.leadId = leadId;
        return this;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    public OpportunityInput withLeadSource(String leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = JsonNullable.of(leadSource);
        return this;
    }

    /**
     * The source of the lead associated with the opportunity.
     */
    public OpportunityInput withLeadSource(JsonNullable<String> leadSource) {
        Utils.checkNotNull(leadSource, "leadSource");
        this.leadSource = leadSource;
        return this;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public OpportunityInput withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = JsonNullable.of(contactId);
        return this;
    }

    /**
     * The unique identifier of the contact associated with the opportunity.
     */
    public OpportunityInput withContactId(JsonNullable<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public OpportunityInput withContactIds(List<String> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = Optional.ofNullable(contactIds);
        return this;
    }


    /**
     * An array of unique identifiers of all contacts associated with the opportunity.
     */
    public OpportunityInput withContactIds(Optional<? extends List<String>> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = contactIds;
        return this;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public OpportunityInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The unique identifier of the company associated with the opportunity.
     */
    public OpportunityInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    public OpportunityInput withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The name of the company associated with the opportunity.
     */
    public OpportunityInput withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public OpportunityInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * The unique identifier of the user who owns the opportunity.
     */
    public OpportunityInput withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The priority level of the opportunity.
     */
    public OpportunityInput withPriority(String priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = JsonNullable.of(priority);
        return this;
    }

    /**
     * The priority level of the opportunity.
     */
    public OpportunityInput withPriority(JsonNullable<String> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    /**
     * The current status of the opportunity.
     */
    public OpportunityInput withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The current status of the opportunity.
     */
    public OpportunityInput withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    public OpportunityInput withStatusId(String statusId) {
        Utils.checkNotNull(statusId, "statusId");
        this.statusId = JsonNullable.of(statusId);
        return this;
    }

    /**
     * The unique identifier of the current status of the opportunity.
     */
    public OpportunityInput withStatusId(JsonNullable<String> statusId) {
        Utils.checkNotNull(statusId, "statusId");
        this.statusId = statusId;
        return this;
    }

    public OpportunityInput withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public OpportunityInput withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public OpportunityInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public OpportunityInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public OpportunityInput withStageLastChangedAt(OffsetDateTime stageLastChangedAt) {
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
        return this;
    }

    /**
     * The date and time when the stage of the opportunity was last changed.
     */
    public OpportunityInput withStageLastChangedAt(JsonNullable<OffsetDateTime> stageLastChangedAt) {
        Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
        this.stageLastChangedAt = stageLastChangedAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public OpportunityInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public OpportunityInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpportunityInput other = (OpportunityInput) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.primaryContactId, other.primaryContactId) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.monetaryAmount, other.monetaryAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.winProbability, other.winProbability) &&
            Utils.enhancedDeepEquals(this.closeDate, other.closeDate) &&
            Utils.enhancedDeepEquals(this.lossReasonId, other.lossReasonId) &&
            Utils.enhancedDeepEquals(this.lossReason, other.lossReason) &&
            Utils.enhancedDeepEquals(this.wonReasonId, other.wonReasonId) &&
            Utils.enhancedDeepEquals(this.wonReason, other.wonReason) &&
            Utils.enhancedDeepEquals(this.pipelineId, other.pipelineId) &&
            Utils.enhancedDeepEquals(this.pipelineStageId, other.pipelineStageId) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.leadId, other.leadId) &&
            Utils.enhancedDeepEquals(this.leadSource, other.leadSource) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.contactIds, other.contactIds) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.statusId, other.statusId) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.stageLastChangedAt, other.stageLastChangedAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, primaryContactId, description,
            type, monetaryAmount, currency,
            winProbability, closeDate, lossReasonId,
            lossReason, wonReasonId, wonReason,
            pipelineId, pipelineStageId, sourceId,
            leadId, leadSource, contactId,
            contactIds, companyId, companyName,
            ownerId, priority, status,
            statusId, tags, customFields,
            stageLastChangedAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OpportunityInput.class,
                "title", title,
                "primaryContactId", primaryContactId,
                "description", description,
                "type", type,
                "monetaryAmount", monetaryAmount,
                "currency", currency,
                "winProbability", winProbability,
                "closeDate", closeDate,
                "lossReasonId", lossReasonId,
                "lossReason", lossReason,
                "wonReasonId", wonReasonId,
                "wonReason", wonReason,
                "pipelineId", pipelineId,
                "pipelineStageId", pipelineStageId,
                "sourceId", sourceId,
                "leadId", leadId,
                "leadSource", leadSource,
                "contactId", contactId,
                "contactIds", contactIds,
                "companyId", companyId,
                "companyName", companyName,
                "ownerId", ownerId,
                "priority", priority,
                "status", status,
                "statusId", statusId,
                "tags", tags,
                "customFields", customFields,
                "stageLastChangedAt", stageLastChangedAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String title;

        private JsonNullable<String> primaryContactId = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> type = JsonNullable.undefined();

        private JsonNullable<Double> monetaryAmount = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> winProbability = JsonNullable.undefined();

        private JsonNullable<LocalDate> closeDate = JsonNullable.undefined();

        private JsonNullable<String> lossReasonId = JsonNullable.undefined();

        private JsonNullable<String> lossReason = JsonNullable.undefined();

        private JsonNullable<String> wonReasonId = JsonNullable.undefined();

        private JsonNullable<String> wonReason = JsonNullable.undefined();

        private JsonNullable<String> pipelineId = JsonNullable.undefined();

        private JsonNullable<String> pipelineStageId = JsonNullable.undefined();

        private JsonNullable<String> sourceId = JsonNullable.undefined();

        private JsonNullable<String> leadId = JsonNullable.undefined();

        private JsonNullable<String> leadSource = JsonNullable.undefined();

        private JsonNullable<String> contactId = JsonNullable.undefined();

        private Optional<? extends List<String>> contactIds = Optional.empty();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> companyName = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<String> priority = JsonNullable.undefined();

        private JsonNullable<String> status = JsonNullable.undefined();

        private JsonNullable<String> statusId = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<OffsetDateTime> stageLastChangedAt = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The title or name of the opportunity.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The unique identifier of the primary contact associated with the opportunity.
         */
        public Builder primaryContactId(String primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = JsonNullable.of(primaryContactId);
            return this;
        }

        /**
         * The unique identifier of the primary contact associated with the opportunity.
         */
        public Builder primaryContactId(JsonNullable<String> primaryContactId) {
            Utils.checkNotNull(primaryContactId, "primaryContactId");
            this.primaryContactId = primaryContactId;
            return this;
        }


        /**
         * A description of the opportunity.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the opportunity.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The type of the opportunity
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of the opportunity
         */
        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The monetary value associated with the opportunity
         */
        public Builder monetaryAmount(double monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = JsonNullable.of(monetaryAmount);
            return this;
        }

        /**
         * The monetary value associated with the opportunity
         */
        public Builder monetaryAmount(JsonNullable<Double> monetaryAmount) {
            Utils.checkNotNull(monetaryAmount, "monetaryAmount");
            this.monetaryAmount = monetaryAmount;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The probability of winning the opportunity, expressed as a percentage.
         */
        public Builder winProbability(double winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = JsonNullable.of(winProbability);
            return this;
        }

        /**
         * The probability of winning the opportunity, expressed as a percentage.
         */
        public Builder winProbability(JsonNullable<Double> winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = winProbability;
            return this;
        }


        /**
         * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
         */
        public Builder closeDate(LocalDate closeDate) {
            Utils.checkNotNull(closeDate, "closeDate");
            this.closeDate = JsonNullable.of(closeDate);
            return this;
        }

        /**
         * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
         */
        public Builder closeDate(JsonNullable<LocalDate> closeDate) {
            Utils.checkNotNull(closeDate, "closeDate");
            this.closeDate = closeDate;
            return this;
        }


        /**
         * The unique identifier of the reason why the opportunity was lost.
         */
        public Builder lossReasonId(String lossReasonId) {
            Utils.checkNotNull(lossReasonId, "lossReasonId");
            this.lossReasonId = JsonNullable.of(lossReasonId);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was lost.
         */
        public Builder lossReasonId(JsonNullable<String> lossReasonId) {
            Utils.checkNotNull(lossReasonId, "lossReasonId");
            this.lossReasonId = lossReasonId;
            return this;
        }


        /**
         * The reason why the opportunity was lost.
         */
        public Builder lossReason(String lossReason) {
            Utils.checkNotNull(lossReason, "lossReason");
            this.lossReason = JsonNullable.of(lossReason);
            return this;
        }

        /**
         * The reason why the opportunity was lost.
         */
        public Builder lossReason(JsonNullable<String> lossReason) {
            Utils.checkNotNull(lossReason, "lossReason");
            this.lossReason = lossReason;
            return this;
        }


        /**
         * The unique identifier of the reason why the opportunity was won.
         */
        public Builder wonReasonId(String wonReasonId) {
            Utils.checkNotNull(wonReasonId, "wonReasonId");
            this.wonReasonId = JsonNullable.of(wonReasonId);
            return this;
        }

        /**
         * The unique identifier of the reason why the opportunity was won.
         */
        public Builder wonReasonId(JsonNullable<String> wonReasonId) {
            Utils.checkNotNull(wonReasonId, "wonReasonId");
            this.wonReasonId = wonReasonId;
            return this;
        }


        /**
         * The reason why the opportunity was won.
         */
        public Builder wonReason(String wonReason) {
            Utils.checkNotNull(wonReason, "wonReason");
            this.wonReason = JsonNullable.of(wonReason);
            return this;
        }

        /**
         * The reason why the opportunity was won.
         */
        public Builder wonReason(JsonNullable<String> wonReason) {
            Utils.checkNotNull(wonReason, "wonReason");
            this.wonReason = wonReason;
            return this;
        }


        /**
         * The unique identifier of the pipeline associated with the opportunity
         */
        public Builder pipelineId(String pipelineId) {
            Utils.checkNotNull(pipelineId, "pipelineId");
            this.pipelineId = JsonNullable.of(pipelineId);
            return this;
        }

        /**
         * The unique identifier of the pipeline associated with the opportunity
         */
        public Builder pipelineId(JsonNullable<String> pipelineId) {
            Utils.checkNotNull(pipelineId, "pipelineId");
            this.pipelineId = pipelineId;
            return this;
        }


        /**
         * The unique identifier of the stage in the pipeline associated with the opportunity.
         */
        public Builder pipelineStageId(String pipelineStageId) {
            Utils.checkNotNull(pipelineStageId, "pipelineStageId");
            this.pipelineStageId = JsonNullable.of(pipelineStageId);
            return this;
        }

        /**
         * The unique identifier of the stage in the pipeline associated with the opportunity.
         */
        public Builder pipelineStageId(JsonNullable<String> pipelineStageId) {
            Utils.checkNotNull(pipelineStageId, "pipelineStageId");
            this.pipelineStageId = pipelineStageId;
            return this;
        }


        /**
         * The unique identifier of the source of the opportunity.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * The unique identifier of the source of the opportunity.
         */
        public Builder sourceId(JsonNullable<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }


        /**
         * The unique identifier of the lead associated with the opportunity.
         */
        public Builder leadId(String leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = JsonNullable.of(leadId);
            return this;
        }

        /**
         * The unique identifier of the lead associated with the opportunity.
         */
        public Builder leadId(JsonNullable<String> leadId) {
            Utils.checkNotNull(leadId, "leadId");
            this.leadId = leadId;
            return this;
        }


        /**
         * The source of the lead associated with the opportunity.
         */
        public Builder leadSource(String leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = JsonNullable.of(leadSource);
            return this;
        }

        /**
         * The source of the lead associated with the opportunity.
         */
        public Builder leadSource(JsonNullable<String> leadSource) {
            Utils.checkNotNull(leadSource, "leadSource");
            this.leadSource = leadSource;
            return this;
        }


        /**
         * The unique identifier of the contact associated with the opportunity.
         */
        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = JsonNullable.of(contactId);
            return this;
        }

        /**
         * The unique identifier of the contact associated with the opportunity.
         */
        public Builder contactId(JsonNullable<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }


        /**
         * An array of unique identifiers of all contacts associated with the opportunity.
         */
        public Builder contactIds(List<String> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = Optional.ofNullable(contactIds);
            return this;
        }

        /**
         * An array of unique identifiers of all contacts associated with the opportunity.
         */
        public Builder contactIds(Optional<? extends List<String>> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = contactIds;
            return this;
        }


        /**
         * The unique identifier of the company associated with the opportunity.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The unique identifier of the company associated with the opportunity.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The name of the company associated with the opportunity.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The name of the company associated with the opportunity.
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }


        /**
         * The unique identifier of the user who owns the opportunity.
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The unique identifier of the user who owns the opportunity.
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        /**
         * The priority level of the opportunity.
         */
        public Builder priority(String priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = JsonNullable.of(priority);
            return this;
        }

        /**
         * The priority level of the opportunity.
         */
        public Builder priority(JsonNullable<String> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }


        /**
         * The current status of the opportunity.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The current status of the opportunity.
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The unique identifier of the current status of the opportunity.
         */
        public Builder statusId(String statusId) {
            Utils.checkNotNull(statusId, "statusId");
            this.statusId = JsonNullable.of(statusId);
            return this;
        }

        /**
         * The unique identifier of the current status of the opportunity.
         */
        public Builder statusId(JsonNullable<String> statusId) {
            Utils.checkNotNull(statusId, "statusId");
            this.statusId = statusId;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder stageLastChangedAt(OffsetDateTime stageLastChangedAt) {
            Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
            this.stageLastChangedAt = JsonNullable.of(stageLastChangedAt);
            return this;
        }

        /**
         * The date and time when the stage of the opportunity was last changed.
         */
        public Builder stageLastChangedAt(JsonNullable<OffsetDateTime> stageLastChangedAt) {
            Utils.checkNotNull(stageLastChangedAt, "stageLastChangedAt");
            this.stageLastChangedAt = stageLastChangedAt;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public OpportunityInput build() {

            return new OpportunityInput(
                title, primaryContactId, description,
                type, monetaryAmount, currency,
                winProbability, closeDate, lossReasonId,
                lossReason, wonReasonId, wonReason,
                pipelineId, pipelineStageId, sourceId,
                leadId, leadSource, contactId,
                contactIds, companyId, companyName,
                ownerId, priority, status,
                statusId, tags, customFields,
                stageLastChangedAt, passThrough);
        }

    }
}
