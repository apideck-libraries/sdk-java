/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Order {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    private Optional<String> idempotencyKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_number")
    private Optional<String> orderNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_date")
    private JsonNullable<LocalDate> orderDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_date")
    private JsonNullable<LocalDate> closedDate;

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    private JsonNullable<String> referenceId;

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends OrderStatus> status;

    /**
     * Is this order paid or not?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    private Optional<? extends PosPaymentStatus> paymentStatus;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private Optional<String> note;

    @JsonProperty("merchant_id")
    private String merchantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private Optional<String> customerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private Optional<String> employeeId;

    @JsonProperty("location_id")
    private String locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_type_id")
    private Optional<String> orderTypeId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    private Optional<String> table;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seat")
    private Optional<String> seat;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Long> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tip")
    private JsonNullable<Long> totalTip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Long> totalTax;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<Long> totalDiscount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_refund")
    private JsonNullable<Long> totalRefund;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_service_charge")
    private JsonNullable<Long> totalServiceCharge;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded")
    private Optional<Boolean> refunded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customers")
    private Optional<? extends List<Customers>> customers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillments")
    private Optional<? extends List<Fulfillments>> fulfillments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<LineItems>> lineItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends List<Payments>> payments;

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charges")
    private Optional<? extends List<ServiceCharge>> serviceCharges;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends List<Refunds>> refunds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    private Optional<? extends List<Taxes>> taxes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private Optional<? extends List<Discounts>> discounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenders")
    private Optional<? extends List<Tenders>> tenders;

    /**
     * Source of order. Indicates the way that the order was placed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private JsonNullable<? extends Source> source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voided")
    private Optional<Boolean> voided;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voided_at")
    private Optional<OffsetDateTime> voidedAt;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private JsonNullable<String> version;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public Order(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("idempotency_key") Optional<String> idempotencyKey,
            @JsonProperty("order_number") Optional<String> orderNumber,
            @JsonProperty("order_date") JsonNullable<LocalDate> orderDate,
            @JsonProperty("closed_date") JsonNullable<LocalDate> closedDate,
            @JsonProperty("reference_id") JsonNullable<String> referenceId,
            @JsonProperty("status") Optional<? extends OrderStatus> status,
            @JsonProperty("payment_status") Optional<? extends PosPaymentStatus> paymentStatus,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("note") Optional<String> note,
            @JsonProperty("merchant_id") String merchantId,
            @JsonProperty("customer_id") Optional<String> customerId,
            @JsonProperty("employee_id") Optional<String> employeeId,
            @JsonProperty("location_id") String locationId,
            @JsonProperty("order_type_id") Optional<String> orderTypeId,
            @JsonProperty("table") Optional<String> table,
            @JsonProperty("seat") Optional<String> seat,
            @JsonProperty("total_amount") JsonNullable<Long> totalAmount,
            @JsonProperty("total_tip") JsonNullable<Long> totalTip,
            @JsonProperty("total_tax") JsonNullable<Long> totalTax,
            @JsonProperty("total_discount") JsonNullable<Long> totalDiscount,
            @JsonProperty("total_refund") JsonNullable<Long> totalRefund,
            @JsonProperty("total_service_charge") JsonNullable<Long> totalServiceCharge,
            @JsonProperty("refunded") Optional<Boolean> refunded,
            @JsonProperty("customers") Optional<? extends List<Customers>> customers,
            @JsonProperty("fulfillments") Optional<? extends List<Fulfillments>> fulfillments,
            @JsonProperty("line_items") Optional<? extends List<LineItems>> lineItems,
            @JsonProperty("payments") Optional<? extends List<Payments>> payments,
            @JsonProperty("service_charges") Optional<? extends List<ServiceCharge>> serviceCharges,
            @JsonProperty("refunds") Optional<? extends List<Refunds>> refunds,
            @JsonProperty("taxes") Optional<? extends List<Taxes>> taxes,
            @JsonProperty("discounts") Optional<? extends List<Discounts>> discounts,
            @JsonProperty("tenders") Optional<? extends List<Tenders>> tenders,
            @JsonProperty("source") JsonNullable<? extends Source> source,
            @JsonProperty("voided") Optional<Boolean> voided,
            @JsonProperty("voided_at") Optional<OffsetDateTime> voidedAt,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("version") JsonNullable<String> version,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(orderNumber, "orderNumber");
        Utils.checkNotNull(orderDate, "orderDate");
        Utils.checkNotNull(closedDate, "closedDate");
        Utils.checkNotNull(referenceId, "referenceId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(merchantId, "merchantId");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        Utils.checkNotNull(table, "table");
        Utils.checkNotNull(seat, "seat");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalTip, "totalTip");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(totalRefund, "totalRefund");
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        Utils.checkNotNull(refunded, "refunded");
        Utils.checkNotNull(customers, "customers");
        Utils.checkNotNull(fulfillments, "fulfillments");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(taxes, "taxes");
        Utils.checkNotNull(discounts, "discounts");
        Utils.checkNotNull(tenders, "tenders");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(voided, "voided");
        Utils.checkNotNull(voidedAt, "voidedAt");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.idempotencyKey = idempotencyKey;
        this.orderNumber = orderNumber;
        this.orderDate = orderDate;
        this.closedDate = closedDate;
        this.referenceId = referenceId;
        this.status = status;
        this.paymentStatus = paymentStatus;
        this.currency = currency;
        this.title = title;
        this.note = note;
        this.merchantId = merchantId;
        this.customerId = customerId;
        this.employeeId = employeeId;
        this.locationId = locationId;
        this.orderTypeId = orderTypeId;
        this.table = table;
        this.seat = seat;
        this.totalAmount = totalAmount;
        this.totalTip = totalTip;
        this.totalTax = totalTax;
        this.totalDiscount = totalDiscount;
        this.totalRefund = totalRefund;
        this.totalServiceCharge = totalServiceCharge;
        this.refunded = refunded;
        this.customers = customers;
        this.fulfillments = fulfillments;
        this.lineItems = lineItems;
        this.payments = payments;
        this.serviceCharges = serviceCharges;
        this.refunds = refunds;
        this.taxes = taxes;
        this.discounts = discounts;
        this.tenders = tenders;
        this.source = source;
        this.voided = voided;
        this.voidedAt = voidedAt;
        this.customMappings = customMappings;
        this.version = version;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public Order(
            String merchantId,
            String locationId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), merchantId, Optional.empty(), Optional.empty(), locationId, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public Optional<String> orderNumber() {
        return orderNumber;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> orderDate() {
        return orderDate;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> closedDate() {
        return closedDate;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    @JsonIgnore
    public JsonNullable<String> referenceId() {
        return referenceId;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderStatus> status() {
        return (Optional<OrderStatus>) status;
    }

    /**
     * Is this order paid or not?
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosPaymentStatus> paymentStatus() {
        return (Optional<PosPaymentStatus>) paymentStatus;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    @JsonIgnore
    public Optional<String> note() {
        return note;
    }

    @JsonIgnore
    public String merchantId() {
        return merchantId;
    }

    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    @JsonIgnore
    public Optional<String> employeeId() {
        return employeeId;
    }

    @JsonIgnore
    public String locationId() {
        return locationId;
    }

    @JsonIgnore
    public Optional<String> orderTypeId() {
        return orderTypeId;
    }

    @JsonIgnore
    public Optional<String> table() {
        return table;
    }

    @JsonIgnore
    public Optional<String> seat() {
        return seat;
    }

    @JsonIgnore
    public JsonNullable<Long> totalAmount() {
        return totalAmount;
    }

    @JsonIgnore
    public JsonNullable<Long> totalTip() {
        return totalTip;
    }

    @JsonIgnore
    public JsonNullable<Long> totalTax() {
        return totalTax;
    }

    @JsonIgnore
    public JsonNullable<Long> totalDiscount() {
        return totalDiscount;
    }

    @JsonIgnore
    public JsonNullable<Long> totalRefund() {
        return totalRefund;
    }

    @JsonIgnore
    public JsonNullable<Long> totalServiceCharge() {
        return totalServiceCharge;
    }

    @JsonIgnore
    public Optional<Boolean> refunded() {
        return refunded;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Customers>> customers() {
        return (Optional<List<Customers>>) customers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Fulfillments>> fulfillments() {
        return (Optional<List<Fulfillments>>) fulfillments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LineItems>> lineItems() {
        return (Optional<List<LineItems>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Payments>> payments() {
        return (Optional<List<Payments>>) payments;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ServiceCharge>> serviceCharges() {
        return (Optional<List<ServiceCharge>>) serviceCharges;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Refunds>> refunds() {
        return (Optional<List<Refunds>>) refunds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Taxes>> taxes() {
        return (Optional<List<Taxes>>) taxes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Discounts>> discounts() {
        return (Optional<List<Discounts>>) discounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Tenders>> tenders() {
        return (Optional<List<Tenders>>) tenders;
    }

    /**
     * Source of order. Indicates the way that the order was placed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Source> source() {
        return (JsonNullable<Source>) source;
    }

    @JsonIgnore
    public Optional<Boolean> voided() {
        return voided;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> voidedAt() {
        return voidedAt;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    @JsonIgnore
    public JsonNullable<String> version() {
        return version;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public Order withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Order withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public Order withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public Order withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public Order withOrderNumber(String orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = Optional.ofNullable(orderNumber);
        return this;
    }

    public Order withOrderNumber(Optional<String> orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = orderNumber;
        return this;
    }

    public Order withOrderDate(LocalDate orderDate) {
        Utils.checkNotNull(orderDate, "orderDate");
        this.orderDate = JsonNullable.of(orderDate);
        return this;
    }

    public Order withOrderDate(JsonNullable<LocalDate> orderDate) {
        Utils.checkNotNull(orderDate, "orderDate");
        this.orderDate = orderDate;
        return this;
    }

    public Order withClosedDate(LocalDate closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = JsonNullable.of(closedDate);
        return this;
    }

    public Order withClosedDate(JsonNullable<LocalDate> closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = closedDate;
        return this;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    public Order withReferenceId(String referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = JsonNullable.of(referenceId);
        return this;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    public Order withReferenceId(JsonNullable<String> referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = referenceId;
        return this;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    public Order withStatus(OrderStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    public Order withStatus(Optional<? extends OrderStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Is this order paid or not?
     */
    public Order withPaymentStatus(PosPaymentStatus paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = Optional.ofNullable(paymentStatus);
        return this;
    }

    /**
     * Is this order paid or not?
     */
    public Order withPaymentStatus(Optional<? extends PosPaymentStatus> paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = paymentStatus;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Order withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Order withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Order withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public Order withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    public Order withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = Optional.ofNullable(note);
        return this;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    public Order withNote(Optional<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    public Order withMerchantId(String merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = merchantId;
        return this;
    }

    public Order withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }

    public Order withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public Order withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = Optional.ofNullable(employeeId);
        return this;
    }

    public Order withEmployeeId(Optional<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    public Order withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public Order withOrderTypeId(String orderTypeId) {
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        this.orderTypeId = Optional.ofNullable(orderTypeId);
        return this;
    }

    public Order withOrderTypeId(Optional<String> orderTypeId) {
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        this.orderTypeId = orderTypeId;
        return this;
    }

    public Order withTable(String table) {
        Utils.checkNotNull(table, "table");
        this.table = Optional.ofNullable(table);
        return this;
    }

    public Order withTable(Optional<String> table) {
        Utils.checkNotNull(table, "table");
        this.table = table;
        return this;
    }

    public Order withSeat(String seat) {
        Utils.checkNotNull(seat, "seat");
        this.seat = Optional.ofNullable(seat);
        return this;
    }

    public Order withSeat(Optional<String> seat) {
        Utils.checkNotNull(seat, "seat");
        this.seat = seat;
        return this;
    }

    public Order withTotalAmount(long totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    public Order withTotalAmount(JsonNullable<Long> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public Order withTotalTip(long totalTip) {
        Utils.checkNotNull(totalTip, "totalTip");
        this.totalTip = JsonNullable.of(totalTip);
        return this;
    }

    public Order withTotalTip(JsonNullable<Long> totalTip) {
        Utils.checkNotNull(totalTip, "totalTip");
        this.totalTip = totalTip;
        return this;
    }

    public Order withTotalTax(long totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    public Order withTotalTax(JsonNullable<Long> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    public Order withTotalDiscount(long totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }

    public Order withTotalDiscount(JsonNullable<Long> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    public Order withTotalRefund(long totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = JsonNullable.of(totalRefund);
        return this;
    }

    public Order withTotalRefund(JsonNullable<Long> totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = totalRefund;
        return this;
    }

    public Order withTotalServiceCharge(long totalServiceCharge) {
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        this.totalServiceCharge = JsonNullable.of(totalServiceCharge);
        return this;
    }

    public Order withTotalServiceCharge(JsonNullable<Long> totalServiceCharge) {
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        this.totalServiceCharge = totalServiceCharge;
        return this;
    }

    public Order withRefunded(boolean refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = Optional.ofNullable(refunded);
        return this;
    }

    public Order withRefunded(Optional<Boolean> refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = refunded;
        return this;
    }

    public Order withCustomers(List<Customers> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = Optional.ofNullable(customers);
        return this;
    }

    public Order withCustomers(Optional<? extends List<Customers>> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = customers;
        return this;
    }

    public Order withFulfillments(List<Fulfillments> fulfillments) {
        Utils.checkNotNull(fulfillments, "fulfillments");
        this.fulfillments = Optional.ofNullable(fulfillments);
        return this;
    }

    public Order withFulfillments(Optional<? extends List<Fulfillments>> fulfillments) {
        Utils.checkNotNull(fulfillments, "fulfillments");
        this.fulfillments = fulfillments;
        return this;
    }

    public Order withLineItems(List<LineItems> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    public Order withLineItems(Optional<? extends List<LineItems>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public Order withPayments(List<Payments> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }

    public Order withPayments(Optional<? extends List<Payments>> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public Order withServiceCharges(List<ServiceCharge> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = Optional.ofNullable(serviceCharges);
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public Order withServiceCharges(Optional<? extends List<ServiceCharge>> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = serviceCharges;
        return this;
    }

    public Order withRefunds(List<Refunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }

    public Order withRefunds(Optional<? extends List<Refunds>> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    public Order withTaxes(List<Taxes> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = Optional.ofNullable(taxes);
        return this;
    }

    public Order withTaxes(Optional<? extends List<Taxes>> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = taxes;
        return this;
    }

    public Order withDiscounts(List<Discounts> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = Optional.ofNullable(discounts);
        return this;
    }

    public Order withDiscounts(Optional<? extends List<Discounts>> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = discounts;
        return this;
    }

    public Order withTenders(List<Tenders> tenders) {
        Utils.checkNotNull(tenders, "tenders");
        this.tenders = Optional.ofNullable(tenders);
        return this;
    }

    public Order withTenders(Optional<? extends List<Tenders>> tenders) {
        Utils.checkNotNull(tenders, "tenders");
        this.tenders = tenders;
        return this;
    }

    /**
     * Source of order. Indicates the way that the order was placed.
     */
    public Order withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = JsonNullable.of(source);
        return this;
    }

    /**
     * Source of order. Indicates the way that the order was placed.
     */
    public Order withSource(JsonNullable<? extends Source> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public Order withVoided(boolean voided) {
        Utils.checkNotNull(voided, "voided");
        this.voided = Optional.ofNullable(voided);
        return this;
    }

    public Order withVoided(Optional<Boolean> voided) {
        Utils.checkNotNull(voided, "voided");
        this.voided = voided;
        return this;
    }

    public Order withVoidedAt(OffsetDateTime voidedAt) {
        Utils.checkNotNull(voidedAt, "voidedAt");
        this.voidedAt = Optional.ofNullable(voidedAt);
        return this;
    }

    public Order withVoidedAt(Optional<OffsetDateTime> voidedAt) {
        Utils.checkNotNull(voidedAt, "voidedAt");
        this.voidedAt = voidedAt;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Order withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Order withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    public Order withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = JsonNullable.of(version);
        return this;
    }

    public Order withVersion(JsonNullable<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Order withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Order withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Order withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Order withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Order withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Order withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Order withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Order withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Order withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Order withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Order other = (Order) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.orderNumber, other.orderNumber) &&
            Objects.deepEquals(this.orderDate, other.orderDate) &&
            Objects.deepEquals(this.closedDate, other.closedDate) &&
            Objects.deepEquals(this.referenceId, other.referenceId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.paymentStatus, other.paymentStatus) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.merchantId, other.merchantId) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.employeeId, other.employeeId) &&
            Objects.deepEquals(this.locationId, other.locationId) &&
            Objects.deepEquals(this.orderTypeId, other.orderTypeId) &&
            Objects.deepEquals(this.table, other.table) &&
            Objects.deepEquals(this.seat, other.seat) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.totalTip, other.totalTip) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.totalDiscount, other.totalDiscount) &&
            Objects.deepEquals(this.totalRefund, other.totalRefund) &&
            Objects.deepEquals(this.totalServiceCharge, other.totalServiceCharge) &&
            Objects.deepEquals(this.refunded, other.refunded) &&
            Objects.deepEquals(this.customers, other.customers) &&
            Objects.deepEquals(this.fulfillments, other.fulfillments) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.payments, other.payments) &&
            Objects.deepEquals(this.serviceCharges, other.serviceCharges) &&
            Objects.deepEquals(this.refunds, other.refunds) &&
            Objects.deepEquals(this.taxes, other.taxes) &&
            Objects.deepEquals(this.discounts, other.discounts) &&
            Objects.deepEquals(this.tenders, other.tenders) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.voided, other.voided) &&
            Objects.deepEquals(this.voidedAt, other.voidedAt) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            idempotencyKey,
            orderNumber,
            orderDate,
            closedDate,
            referenceId,
            status,
            paymentStatus,
            currency,
            title,
            note,
            merchantId,
            customerId,
            employeeId,
            locationId,
            orderTypeId,
            table,
            seat,
            totalAmount,
            totalTip,
            totalTax,
            totalDiscount,
            totalRefund,
            totalServiceCharge,
            refunded,
            customers,
            fulfillments,
            lineItems,
            payments,
            serviceCharges,
            refunds,
            taxes,
            discounts,
            tenders,
            source,
            voided,
            voidedAt,
            customMappings,
            version,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Order.class,
                "id", id,
                "idempotencyKey", idempotencyKey,
                "orderNumber", orderNumber,
                "orderDate", orderDate,
                "closedDate", closedDate,
                "referenceId", referenceId,
                "status", status,
                "paymentStatus", paymentStatus,
                "currency", currency,
                "title", title,
                "note", note,
                "merchantId", merchantId,
                "customerId", customerId,
                "employeeId", employeeId,
                "locationId", locationId,
                "orderTypeId", orderTypeId,
                "table", table,
                "seat", seat,
                "totalAmount", totalAmount,
                "totalTip", totalTip,
                "totalTax", totalTax,
                "totalDiscount", totalDiscount,
                "totalRefund", totalRefund,
                "totalServiceCharge", totalServiceCharge,
                "refunded", refunded,
                "customers", customers,
                "fulfillments", fulfillments,
                "lineItems", lineItems,
                "payments", payments,
                "serviceCharges", serviceCharges,
                "refunds", refunds,
                "taxes", taxes,
                "discounts", discounts,
                "tenders", tenders,
                "source", source,
                "voided", voided,
                "voidedAt", voidedAt,
                "customMappings", customMappings,
                "version", version,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private Optional<String> orderNumber = Optional.empty();
 
        private JsonNullable<LocalDate> orderDate = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> closedDate = JsonNullable.undefined();
 
        private JsonNullable<String> referenceId = JsonNullable.undefined();
 
        private Optional<? extends OrderStatus> status = Optional.empty();
 
        private Optional<? extends PosPaymentStatus> paymentStatus = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> note = Optional.empty();
 
        private String merchantId;
 
        private Optional<String> customerId = Optional.empty();
 
        private Optional<String> employeeId = Optional.empty();
 
        private String locationId;
 
        private Optional<String> orderTypeId = Optional.empty();
 
        private Optional<String> table = Optional.empty();
 
        private Optional<String> seat = Optional.empty();
 
        private JsonNullable<Long> totalAmount = JsonNullable.undefined();
 
        private JsonNullable<Long> totalTip = JsonNullable.undefined();
 
        private JsonNullable<Long> totalTax = JsonNullable.undefined();
 
        private JsonNullable<Long> totalDiscount = JsonNullable.undefined();
 
        private JsonNullable<Long> totalRefund = JsonNullable.undefined();
 
        private JsonNullable<Long> totalServiceCharge = JsonNullable.undefined();
 
        private Optional<Boolean> refunded = Optional.empty();
 
        private Optional<? extends List<Customers>> customers = Optional.empty();
 
        private Optional<? extends List<Fulfillments>> fulfillments = Optional.empty();
 
        private Optional<? extends List<LineItems>> lineItems = Optional.empty();
 
        private Optional<? extends List<Payments>> payments = Optional.empty();
 
        private Optional<? extends List<ServiceCharge>> serviceCharges = Optional.empty();
 
        private Optional<? extends List<Refunds>> refunds = Optional.empty();
 
        private Optional<? extends List<Taxes>> taxes = Optional.empty();
 
        private Optional<? extends List<Discounts>> discounts = Optional.empty();
 
        private Optional<? extends List<Tenders>> tenders = Optional.empty();
 
        private JsonNullable<? extends Source> source = JsonNullable.undefined();
 
        private Optional<Boolean> voided = Optional.empty();
 
        private Optional<OffsetDateTime> voidedAt = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> version = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder orderNumber(String orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = Optional.ofNullable(orderNumber);
            return this;
        }

        public Builder orderNumber(Optional<String> orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = orderNumber;
            return this;
        }

        public Builder orderDate(LocalDate orderDate) {
            Utils.checkNotNull(orderDate, "orderDate");
            this.orderDate = JsonNullable.of(orderDate);
            return this;
        }

        public Builder orderDate(JsonNullable<LocalDate> orderDate) {
            Utils.checkNotNull(orderDate, "orderDate");
            this.orderDate = orderDate;
            return this;
        }

        public Builder closedDate(LocalDate closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = JsonNullable.of(closedDate);
            return this;
        }

        public Builder closedDate(JsonNullable<LocalDate> closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = closedDate;
            return this;
        }

        /**
         * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
         */
        public Builder referenceId(String referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = JsonNullable.of(referenceId);
            return this;
        }

        /**
         * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
         */
        public Builder referenceId(JsonNullable<String> referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = referenceId;
            return this;
        }

        /**
         * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
         */
        public Builder status(OrderStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
         */
        public Builder status(Optional<? extends OrderStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Is this order paid or not?
         */
        public Builder paymentStatus(PosPaymentStatus paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = Optional.ofNullable(paymentStatus);
            return this;
        }

        /**
         * Is this order paid or not?
         */
        public Builder paymentStatus(Optional<? extends PosPaymentStatus> paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = paymentStatus;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * A note with information about this order, may be printed on the order receipt and displayed in apps
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * A note with information about this order, may be printed on the order receipt and displayed in apps
         */
        public Builder note(Optional<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        public Builder merchantId(String merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = merchantId;
            return this;
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        public Builder employeeId(Optional<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }

        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder orderTypeId(String orderTypeId) {
            Utils.checkNotNull(orderTypeId, "orderTypeId");
            this.orderTypeId = Optional.ofNullable(orderTypeId);
            return this;
        }

        public Builder orderTypeId(Optional<String> orderTypeId) {
            Utils.checkNotNull(orderTypeId, "orderTypeId");
            this.orderTypeId = orderTypeId;
            return this;
        }

        public Builder table(String table) {
            Utils.checkNotNull(table, "table");
            this.table = Optional.ofNullable(table);
            return this;
        }

        public Builder table(Optional<String> table) {
            Utils.checkNotNull(table, "table");
            this.table = table;
            return this;
        }

        public Builder seat(String seat) {
            Utils.checkNotNull(seat, "seat");
            this.seat = Optional.ofNullable(seat);
            return this;
        }

        public Builder seat(Optional<String> seat) {
            Utils.checkNotNull(seat, "seat");
            this.seat = seat;
            return this;
        }

        public Builder totalAmount(long totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        public Builder totalAmount(JsonNullable<Long> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalTip(long totalTip) {
            Utils.checkNotNull(totalTip, "totalTip");
            this.totalTip = JsonNullable.of(totalTip);
            return this;
        }

        public Builder totalTip(JsonNullable<Long> totalTip) {
            Utils.checkNotNull(totalTip, "totalTip");
            this.totalTip = totalTip;
            return this;
        }

        public Builder totalTax(long totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        public Builder totalTax(JsonNullable<Long> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        public Builder totalDiscount(long totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        public Builder totalDiscount(JsonNullable<Long> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        public Builder totalRefund(long totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = JsonNullable.of(totalRefund);
            return this;
        }

        public Builder totalRefund(JsonNullable<Long> totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = totalRefund;
            return this;
        }

        public Builder totalServiceCharge(long totalServiceCharge) {
            Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
            this.totalServiceCharge = JsonNullable.of(totalServiceCharge);
            return this;
        }

        public Builder totalServiceCharge(JsonNullable<Long> totalServiceCharge) {
            Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
            this.totalServiceCharge = totalServiceCharge;
            return this;
        }

        public Builder refunded(boolean refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = Optional.ofNullable(refunded);
            return this;
        }

        public Builder refunded(Optional<Boolean> refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = refunded;
            return this;
        }

        public Builder customers(List<Customers> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = Optional.ofNullable(customers);
            return this;
        }

        public Builder customers(Optional<? extends List<Customers>> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = customers;
            return this;
        }

        public Builder fulfillments(List<Fulfillments> fulfillments) {
            Utils.checkNotNull(fulfillments, "fulfillments");
            this.fulfillments = Optional.ofNullable(fulfillments);
            return this;
        }

        public Builder fulfillments(Optional<? extends List<Fulfillments>> fulfillments) {
            Utils.checkNotNull(fulfillments, "fulfillments");
            this.fulfillments = fulfillments;
            return this;
        }

        public Builder lineItems(List<LineItems> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<LineItems>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        public Builder payments(List<Payments> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }

        public Builder payments(Optional<? extends List<Payments>> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(List<ServiceCharge> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(Optional<? extends List<ServiceCharge>> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = serviceCharges;
            return this;
        }

        public Builder refunds(List<Refunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        public Builder refunds(Optional<? extends List<Refunds>> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        public Builder taxes(List<Taxes> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = Optional.ofNullable(taxes);
            return this;
        }

        public Builder taxes(Optional<? extends List<Taxes>> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = taxes;
            return this;
        }

        public Builder discounts(List<Discounts> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = Optional.ofNullable(discounts);
            return this;
        }

        public Builder discounts(Optional<? extends List<Discounts>> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = discounts;
            return this;
        }

        public Builder tenders(List<Tenders> tenders) {
            Utils.checkNotNull(tenders, "tenders");
            this.tenders = Optional.ofNullable(tenders);
            return this;
        }

        public Builder tenders(Optional<? extends List<Tenders>> tenders) {
            Utils.checkNotNull(tenders, "tenders");
            this.tenders = tenders;
            return this;
        }

        /**
         * Source of order. Indicates the way that the order was placed.
         */
        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = JsonNullable.of(source);
            return this;
        }

        /**
         * Source of order. Indicates the way that the order was placed.
         */
        public Builder source(JsonNullable<? extends Source> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder voided(boolean voided) {
            Utils.checkNotNull(voided, "voided");
            this.voided = Optional.ofNullable(voided);
            return this;
        }

        public Builder voided(Optional<Boolean> voided) {
            Utils.checkNotNull(voided, "voided");
            this.voided = voided;
            return this;
        }

        public Builder voidedAt(OffsetDateTime voidedAt) {
            Utils.checkNotNull(voidedAt, "voidedAt");
            this.voidedAt = Optional.ofNullable(voidedAt);
            return this;
        }

        public Builder voidedAt(Optional<OffsetDateTime> voidedAt) {
            Utils.checkNotNull(voidedAt, "voidedAt");
            this.voidedAt = voidedAt;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = JsonNullable.of(version);
            return this;
        }

        public Builder version(JsonNullable<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public Order build() {
            return new Order(
                id,
                idempotencyKey,
                orderNumber,
                orderDate,
                closedDate,
                referenceId,
                status,
                paymentStatus,
                currency,
                title,
                note,
                merchantId,
                customerId,
                employeeId,
                locationId,
                orderTypeId,
                table,
                seat,
                totalAmount,
                totalTip,
                totalTax,
                totalDiscount,
                totalRefund,
                totalServiceCharge,
                refunded,
                customers,
                fulfillments,
                lineItems,
                payments,
                serviceCharges,
                refunds,
                taxes,
                discounts,
                tenders,
                source,
                voided,
                voidedAt,
                customMappings,
                version,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                passThrough);
        }
    }
}

