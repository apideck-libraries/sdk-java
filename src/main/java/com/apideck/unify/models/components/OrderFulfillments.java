/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class OrderFulfillments {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The state of the fulfillment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends OrderFulfillmentStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends OrderFulfillmentsType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_details")
    private Optional<? extends OrderPickupDetails> pickupDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipment_details")
    private Optional<? extends ShipmentDetails> shipmentDetails;

    @JsonCreator
    public OrderFulfillments(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("status") Optional<? extends OrderFulfillmentStatus> status,
            @JsonProperty("type") Optional<? extends OrderFulfillmentsType> type,
            @JsonProperty("pickup_details") Optional<? extends OrderPickupDetails> pickupDetails,
            @JsonProperty("shipment_details") Optional<? extends ShipmentDetails> shipmentDetails) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(pickupDetails, "pickupDetails");
        Utils.checkNotNull(shipmentDetails, "shipmentDetails");
        this.id = id;
        this.status = status;
        this.type = type;
        this.pickupDetails = pickupDetails;
        this.shipmentDetails = shipmentDetails;
    }
    
    public OrderFulfillments() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The state of the fulfillment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderFulfillmentStatus> status() {
        return (Optional<OrderFulfillmentStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderFulfillmentsType> type() {
        return (Optional<OrderFulfillmentsType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderPickupDetails> pickupDetails() {
        return (Optional<OrderPickupDetails>) pickupDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShipmentDetails> shipmentDetails() {
        return (Optional<ShipmentDetails>) shipmentDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OrderFulfillments withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public OrderFulfillments withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The state of the fulfillment.
     */
    public OrderFulfillments withStatus(OrderFulfillmentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The state of the fulfillment.
     */
    public OrderFulfillments withStatus(Optional<? extends OrderFulfillmentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public OrderFulfillments withType(OrderFulfillmentsType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public OrderFulfillments withType(Optional<? extends OrderFulfillmentsType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public OrderFulfillments withPickupDetails(OrderPickupDetails pickupDetails) {
        Utils.checkNotNull(pickupDetails, "pickupDetails");
        this.pickupDetails = Optional.ofNullable(pickupDetails);
        return this;
    }

    public OrderFulfillments withPickupDetails(Optional<? extends OrderPickupDetails> pickupDetails) {
        Utils.checkNotNull(pickupDetails, "pickupDetails");
        this.pickupDetails = pickupDetails;
        return this;
    }

    public OrderFulfillments withShipmentDetails(ShipmentDetails shipmentDetails) {
        Utils.checkNotNull(shipmentDetails, "shipmentDetails");
        this.shipmentDetails = Optional.ofNullable(shipmentDetails);
        return this;
    }

    public OrderFulfillments withShipmentDetails(Optional<? extends ShipmentDetails> shipmentDetails) {
        Utils.checkNotNull(shipmentDetails, "shipmentDetails");
        this.shipmentDetails = shipmentDetails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderFulfillments other = (OrderFulfillments) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.pickupDetails, other.pickupDetails) &&
            Objects.deepEquals(this.shipmentDetails, other.shipmentDetails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            status,
            type,
            pickupDetails,
            shipmentDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrderFulfillments.class,
                "id", id,
                "status", status,
                "type", type,
                "pickupDetails", pickupDetails,
                "shipmentDetails", shipmentDetails);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends OrderFulfillmentStatus> status = Optional.empty();
 
        private Optional<? extends OrderFulfillmentsType> type = Optional.empty();
 
        private Optional<? extends OrderPickupDetails> pickupDetails = Optional.empty();
 
        private Optional<? extends ShipmentDetails> shipmentDetails = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The state of the fulfillment.
         */
        public Builder status(OrderFulfillmentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The state of the fulfillment.
         */
        public Builder status(Optional<? extends OrderFulfillmentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder type(OrderFulfillmentsType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends OrderFulfillmentsType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder pickupDetails(OrderPickupDetails pickupDetails) {
            Utils.checkNotNull(pickupDetails, "pickupDetails");
            this.pickupDetails = Optional.ofNullable(pickupDetails);
            return this;
        }

        public Builder pickupDetails(Optional<? extends OrderPickupDetails> pickupDetails) {
            Utils.checkNotNull(pickupDetails, "pickupDetails");
            this.pickupDetails = pickupDetails;
            return this;
        }

        public Builder shipmentDetails(ShipmentDetails shipmentDetails) {
            Utils.checkNotNull(shipmentDetails, "shipmentDetails");
            this.shipmentDetails = Optional.ofNullable(shipmentDetails);
            return this;
        }

        public Builder shipmentDetails(Optional<? extends ShipmentDetails> shipmentDetails) {
            Utils.checkNotNull(shipmentDetails, "shipmentDetails");
            this.shipmentDetails = shipmentDetails;
            return this;
        }
        
        public OrderFulfillments build() {
            return new OrderFulfillments(
                id,
                status,
                type,
                pickupDetails,
                shipmentDetails);
        }
    }
}

