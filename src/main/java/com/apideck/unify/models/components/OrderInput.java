/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class OrderInput {

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    private Optional<String> idempotencyKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_number")
    private Optional<String> orderNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_date")
    private JsonNullable<LocalDate> orderDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_date")
    private JsonNullable<LocalDate> closedDate;

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    private JsonNullable<String> referenceId;

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends OrderStatus> status;

    /**
     * Is this order paid or not?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    private Optional<? extends PosPaymentStatus> paymentStatus;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private Optional<String> note;

    @JsonProperty("merchant_id")
    private String merchantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private Optional<String> customerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private Optional<String> employeeId;

    @JsonProperty("location_id")
    private String locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_type_id")
    private Optional<String> orderTypeId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    private Optional<String> table;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seat")
    private Optional<String> seat;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<Long> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tip")
    private JsonNullable<Long> totalTip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Long> totalTax;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount")
    private JsonNullable<Long> totalDiscount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_refund")
    private JsonNullable<Long> totalRefund;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_service_charge")
    private JsonNullable<Long> totalServiceCharge;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded")
    private Optional<Boolean> refunded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customers")
    private Optional<? extends List<Customers>> customers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillments")
    private Optional<? extends List<OrderFulfillments>> fulfillments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<OrderLineItems>> lineItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends List<OrderPayments>> payments;

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charges")
    private Optional<? extends List<ServiceChargeInput>> serviceCharges;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends List<OrderRefunds>> refunds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    private Optional<? extends List<Taxes>> taxes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    private Optional<? extends List<OrderDiscounts>> discounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenders")
    private Optional<? extends List<OrderTenders>> tenders;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voided")
    private Optional<Boolean> voided;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private JsonNullable<String> version;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public OrderInput(
            @JsonProperty("idempotency_key") Optional<String> idempotencyKey,
            @JsonProperty("order_number") Optional<String> orderNumber,
            @JsonProperty("order_date") JsonNullable<LocalDate> orderDate,
            @JsonProperty("closed_date") JsonNullable<LocalDate> closedDate,
            @JsonProperty("reference_id") JsonNullable<String> referenceId,
            @JsonProperty("status") Optional<? extends OrderStatus> status,
            @JsonProperty("payment_status") Optional<? extends PosPaymentStatus> paymentStatus,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("note") Optional<String> note,
            @JsonProperty("merchant_id") String merchantId,
            @JsonProperty("customer_id") Optional<String> customerId,
            @JsonProperty("employee_id") Optional<String> employeeId,
            @JsonProperty("location_id") String locationId,
            @JsonProperty("order_type_id") Optional<String> orderTypeId,
            @JsonProperty("table") Optional<String> table,
            @JsonProperty("seat") Optional<String> seat,
            @JsonProperty("total_amount") JsonNullable<Long> totalAmount,
            @JsonProperty("total_tip") JsonNullable<Long> totalTip,
            @JsonProperty("total_tax") JsonNullable<Long> totalTax,
            @JsonProperty("total_discount") JsonNullable<Long> totalDiscount,
            @JsonProperty("total_refund") JsonNullable<Long> totalRefund,
            @JsonProperty("total_service_charge") JsonNullable<Long> totalServiceCharge,
            @JsonProperty("refunded") Optional<Boolean> refunded,
            @JsonProperty("customers") Optional<? extends List<Customers>> customers,
            @JsonProperty("fulfillments") Optional<? extends List<OrderFulfillments>> fulfillments,
            @JsonProperty("line_items") Optional<? extends List<OrderLineItems>> lineItems,
            @JsonProperty("payments") Optional<? extends List<OrderPayments>> payments,
            @JsonProperty("service_charges") Optional<? extends List<ServiceChargeInput>> serviceCharges,
            @JsonProperty("refunds") Optional<? extends List<OrderRefunds>> refunds,
            @JsonProperty("taxes") Optional<? extends List<Taxes>> taxes,
            @JsonProperty("discounts") Optional<? extends List<OrderDiscounts>> discounts,
            @JsonProperty("tenders") Optional<? extends List<OrderTenders>> tenders,
            @JsonProperty("voided") Optional<Boolean> voided,
            @JsonProperty("version") JsonNullable<String> version,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(orderNumber, "orderNumber");
        Utils.checkNotNull(orderDate, "orderDate");
        Utils.checkNotNull(closedDate, "closedDate");
        Utils.checkNotNull(referenceId, "referenceId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(merchantId, "merchantId");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        Utils.checkNotNull(table, "table");
        Utils.checkNotNull(seat, "seat");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalTip, "totalTip");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(totalRefund, "totalRefund");
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        Utils.checkNotNull(refunded, "refunded");
        Utils.checkNotNull(customers, "customers");
        Utils.checkNotNull(fulfillments, "fulfillments");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(taxes, "taxes");
        Utils.checkNotNull(discounts, "discounts");
        Utils.checkNotNull(tenders, "tenders");
        Utils.checkNotNull(voided, "voided");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(passThrough, "passThrough");
        this.idempotencyKey = idempotencyKey;
        this.orderNumber = orderNumber;
        this.orderDate = orderDate;
        this.closedDate = closedDate;
        this.referenceId = referenceId;
        this.status = status;
        this.paymentStatus = paymentStatus;
        this.currency = currency;
        this.title = title;
        this.note = note;
        this.merchantId = merchantId;
        this.customerId = customerId;
        this.employeeId = employeeId;
        this.locationId = locationId;
        this.orderTypeId = orderTypeId;
        this.table = table;
        this.seat = seat;
        this.totalAmount = totalAmount;
        this.totalTip = totalTip;
        this.totalTax = totalTax;
        this.totalDiscount = totalDiscount;
        this.totalRefund = totalRefund;
        this.totalServiceCharge = totalServiceCharge;
        this.refunded = refunded;
        this.customers = customers;
        this.fulfillments = fulfillments;
        this.lineItems = lineItems;
        this.payments = payments;
        this.serviceCharges = serviceCharges;
        this.refunds = refunds;
        this.taxes = taxes;
        this.discounts = discounts;
        this.tenders = tenders;
        this.voided = voided;
        this.version = version;
        this.passThrough = passThrough;
    }
    
    public OrderInput(
            String merchantId,
            String locationId) {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), merchantId, Optional.empty(), Optional.empty(), locationId, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public Optional<String> orderNumber() {
        return orderNumber;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> orderDate() {
        return orderDate;
    }

    @JsonIgnore
    public JsonNullable<LocalDate> closedDate() {
        return closedDate;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    @JsonIgnore
    public JsonNullable<String> referenceId() {
        return referenceId;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderStatus> status() {
        return (Optional<OrderStatus>) status;
    }

    /**
     * Is this order paid or not?
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosPaymentStatus> paymentStatus() {
        return (Optional<PosPaymentStatus>) paymentStatus;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    @JsonIgnore
    public Optional<String> note() {
        return note;
    }

    @JsonIgnore
    public String merchantId() {
        return merchantId;
    }

    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    @JsonIgnore
    public Optional<String> employeeId() {
        return employeeId;
    }

    @JsonIgnore
    public String locationId() {
        return locationId;
    }

    @JsonIgnore
    public Optional<String> orderTypeId() {
        return orderTypeId;
    }

    @JsonIgnore
    public Optional<String> table() {
        return table;
    }

    @JsonIgnore
    public Optional<String> seat() {
        return seat;
    }

    @JsonIgnore
    public JsonNullable<Long> totalAmount() {
        return totalAmount;
    }

    @JsonIgnore
    public JsonNullable<Long> totalTip() {
        return totalTip;
    }

    @JsonIgnore
    public JsonNullable<Long> totalTax() {
        return totalTax;
    }

    @JsonIgnore
    public JsonNullable<Long> totalDiscount() {
        return totalDiscount;
    }

    @JsonIgnore
    public JsonNullable<Long> totalRefund() {
        return totalRefund;
    }

    @JsonIgnore
    public JsonNullable<Long> totalServiceCharge() {
        return totalServiceCharge;
    }

    @JsonIgnore
    public Optional<Boolean> refunded() {
        return refunded;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Customers>> customers() {
        return (Optional<List<Customers>>) customers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderFulfillments>> fulfillments() {
        return (Optional<List<OrderFulfillments>>) fulfillments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderLineItems>> lineItems() {
        return (Optional<List<OrderLineItems>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderPayments>> payments() {
        return (Optional<List<OrderPayments>>) payments;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ServiceChargeInput>> serviceCharges() {
        return (Optional<List<ServiceChargeInput>>) serviceCharges;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderRefunds>> refunds() {
        return (Optional<List<OrderRefunds>>) refunds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Taxes>> taxes() {
        return (Optional<List<Taxes>>) taxes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderDiscounts>> discounts() {
        return (Optional<List<OrderDiscounts>>) discounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderTenders>> tenders() {
        return (Optional<List<OrderTenders>>) tenders;
    }

    @JsonIgnore
    public Optional<Boolean> voided() {
        return voided;
    }

    @JsonIgnore
    public JsonNullable<String> version() {
        return version;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public OrderInput withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public OrderInput withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public OrderInput withOrderNumber(String orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = Optional.ofNullable(orderNumber);
        return this;
    }

    public OrderInput withOrderNumber(Optional<String> orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = orderNumber;
        return this;
    }

    public OrderInput withOrderDate(LocalDate orderDate) {
        Utils.checkNotNull(orderDate, "orderDate");
        this.orderDate = JsonNullable.of(orderDate);
        return this;
    }

    public OrderInput withOrderDate(JsonNullable<LocalDate> orderDate) {
        Utils.checkNotNull(orderDate, "orderDate");
        this.orderDate = orderDate;
        return this;
    }

    public OrderInput withClosedDate(LocalDate closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = JsonNullable.of(closedDate);
        return this;
    }

    public OrderInput withClosedDate(JsonNullable<LocalDate> closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = closedDate;
        return this;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    public OrderInput withReferenceId(String referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = JsonNullable.of(referenceId);
        return this;
    }

    /**
     * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     */
    public OrderInput withReferenceId(JsonNullable<String> referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = referenceId;
        return this;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    public OrderInput withStatus(OrderStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     */
    public OrderInput withStatus(Optional<? extends OrderStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Is this order paid or not?
     */
    public OrderInput withPaymentStatus(PosPaymentStatus paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = Optional.ofNullable(paymentStatus);
        return this;
    }

    /**
     * Is this order paid or not?
     */
    public OrderInput withPaymentStatus(Optional<? extends PosPaymentStatus> paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = paymentStatus;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OrderInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OrderInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public OrderInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public OrderInput withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    public OrderInput withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = Optional.ofNullable(note);
        return this;
    }

    /**
     * A note with information about this order, may be printed on the order receipt and displayed in apps
     */
    public OrderInput withNote(Optional<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    public OrderInput withMerchantId(String merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = merchantId;
        return this;
    }

    public OrderInput withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }

    public OrderInput withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public OrderInput withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = Optional.ofNullable(employeeId);
        return this;
    }

    public OrderInput withEmployeeId(Optional<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    public OrderInput withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public OrderInput withOrderTypeId(String orderTypeId) {
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        this.orderTypeId = Optional.ofNullable(orderTypeId);
        return this;
    }

    public OrderInput withOrderTypeId(Optional<String> orderTypeId) {
        Utils.checkNotNull(orderTypeId, "orderTypeId");
        this.orderTypeId = orderTypeId;
        return this;
    }

    public OrderInput withTable(String table) {
        Utils.checkNotNull(table, "table");
        this.table = Optional.ofNullable(table);
        return this;
    }

    public OrderInput withTable(Optional<String> table) {
        Utils.checkNotNull(table, "table");
        this.table = table;
        return this;
    }

    public OrderInput withSeat(String seat) {
        Utils.checkNotNull(seat, "seat");
        this.seat = Optional.ofNullable(seat);
        return this;
    }

    public OrderInput withSeat(Optional<String> seat) {
        Utils.checkNotNull(seat, "seat");
        this.seat = seat;
        return this;
    }

    public OrderInput withTotalAmount(long totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    public OrderInput withTotalAmount(JsonNullable<Long> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public OrderInput withTotalTip(long totalTip) {
        Utils.checkNotNull(totalTip, "totalTip");
        this.totalTip = JsonNullable.of(totalTip);
        return this;
    }

    public OrderInput withTotalTip(JsonNullable<Long> totalTip) {
        Utils.checkNotNull(totalTip, "totalTip");
        this.totalTip = totalTip;
        return this;
    }

    public OrderInput withTotalTax(long totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    public OrderInput withTotalTax(JsonNullable<Long> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    public OrderInput withTotalDiscount(long totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = JsonNullable.of(totalDiscount);
        return this;
    }

    public OrderInput withTotalDiscount(JsonNullable<Long> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    public OrderInput withTotalRefund(long totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = JsonNullable.of(totalRefund);
        return this;
    }

    public OrderInput withTotalRefund(JsonNullable<Long> totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = totalRefund;
        return this;
    }

    public OrderInput withTotalServiceCharge(long totalServiceCharge) {
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        this.totalServiceCharge = JsonNullable.of(totalServiceCharge);
        return this;
    }

    public OrderInput withTotalServiceCharge(JsonNullable<Long> totalServiceCharge) {
        Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
        this.totalServiceCharge = totalServiceCharge;
        return this;
    }

    public OrderInput withRefunded(boolean refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = Optional.ofNullable(refunded);
        return this;
    }

    public OrderInput withRefunded(Optional<Boolean> refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = refunded;
        return this;
    }

    public OrderInput withCustomers(List<Customers> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = Optional.ofNullable(customers);
        return this;
    }

    public OrderInput withCustomers(Optional<? extends List<Customers>> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = customers;
        return this;
    }

    public OrderInput withFulfillments(List<OrderFulfillments> fulfillments) {
        Utils.checkNotNull(fulfillments, "fulfillments");
        this.fulfillments = Optional.ofNullable(fulfillments);
        return this;
    }

    public OrderInput withFulfillments(Optional<? extends List<OrderFulfillments>> fulfillments) {
        Utils.checkNotNull(fulfillments, "fulfillments");
        this.fulfillments = fulfillments;
        return this;
    }

    public OrderInput withLineItems(List<OrderLineItems> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }

    public OrderInput withLineItems(Optional<? extends List<OrderLineItems>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public OrderInput withPayments(List<OrderPayments> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }

    public OrderInput withPayments(Optional<? extends List<OrderPayments>> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public OrderInput withServiceCharges(List<ServiceChargeInput> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = Optional.ofNullable(serviceCharges);
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public OrderInput withServiceCharges(Optional<? extends List<ServiceChargeInput>> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = serviceCharges;
        return this;
    }

    public OrderInput withRefunds(List<OrderRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }

    public OrderInput withRefunds(Optional<? extends List<OrderRefunds>> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    public OrderInput withTaxes(List<Taxes> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = Optional.ofNullable(taxes);
        return this;
    }

    public OrderInput withTaxes(Optional<? extends List<Taxes>> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = taxes;
        return this;
    }

    public OrderInput withDiscounts(List<OrderDiscounts> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = Optional.ofNullable(discounts);
        return this;
    }

    public OrderInput withDiscounts(Optional<? extends List<OrderDiscounts>> discounts) {
        Utils.checkNotNull(discounts, "discounts");
        this.discounts = discounts;
        return this;
    }

    public OrderInput withTenders(List<OrderTenders> tenders) {
        Utils.checkNotNull(tenders, "tenders");
        this.tenders = Optional.ofNullable(tenders);
        return this;
    }

    public OrderInput withTenders(Optional<? extends List<OrderTenders>> tenders) {
        Utils.checkNotNull(tenders, "tenders");
        this.tenders = tenders;
        return this;
    }

    public OrderInput withVoided(boolean voided) {
        Utils.checkNotNull(voided, "voided");
        this.voided = Optional.ofNullable(voided);
        return this;
    }

    public OrderInput withVoided(Optional<Boolean> voided) {
        Utils.checkNotNull(voided, "voided");
        this.voided = voided;
        return this;
    }

    public OrderInput withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = JsonNullable.of(version);
        return this;
    }

    public OrderInput withVersion(JsonNullable<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public OrderInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public OrderInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderInput other = (OrderInput) o;
        return 
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.orderNumber, other.orderNumber) &&
            Objects.deepEquals(this.orderDate, other.orderDate) &&
            Objects.deepEquals(this.closedDate, other.closedDate) &&
            Objects.deepEquals(this.referenceId, other.referenceId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.paymentStatus, other.paymentStatus) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.merchantId, other.merchantId) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.employeeId, other.employeeId) &&
            Objects.deepEquals(this.locationId, other.locationId) &&
            Objects.deepEquals(this.orderTypeId, other.orderTypeId) &&
            Objects.deepEquals(this.table, other.table) &&
            Objects.deepEquals(this.seat, other.seat) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.totalTip, other.totalTip) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.totalDiscount, other.totalDiscount) &&
            Objects.deepEquals(this.totalRefund, other.totalRefund) &&
            Objects.deepEquals(this.totalServiceCharge, other.totalServiceCharge) &&
            Objects.deepEquals(this.refunded, other.refunded) &&
            Objects.deepEquals(this.customers, other.customers) &&
            Objects.deepEquals(this.fulfillments, other.fulfillments) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.payments, other.payments) &&
            Objects.deepEquals(this.serviceCharges, other.serviceCharges) &&
            Objects.deepEquals(this.refunds, other.refunds) &&
            Objects.deepEquals(this.taxes, other.taxes) &&
            Objects.deepEquals(this.discounts, other.discounts) &&
            Objects.deepEquals(this.tenders, other.tenders) &&
            Objects.deepEquals(this.voided, other.voided) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            idempotencyKey,
            orderNumber,
            orderDate,
            closedDate,
            referenceId,
            status,
            paymentStatus,
            currency,
            title,
            note,
            merchantId,
            customerId,
            employeeId,
            locationId,
            orderTypeId,
            table,
            seat,
            totalAmount,
            totalTip,
            totalTax,
            totalDiscount,
            totalRefund,
            totalServiceCharge,
            refunded,
            customers,
            fulfillments,
            lineItems,
            payments,
            serviceCharges,
            refunds,
            taxes,
            discounts,
            tenders,
            voided,
            version,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrderInput.class,
                "idempotencyKey", idempotencyKey,
                "orderNumber", orderNumber,
                "orderDate", orderDate,
                "closedDate", closedDate,
                "referenceId", referenceId,
                "status", status,
                "paymentStatus", paymentStatus,
                "currency", currency,
                "title", title,
                "note", note,
                "merchantId", merchantId,
                "customerId", customerId,
                "employeeId", employeeId,
                "locationId", locationId,
                "orderTypeId", orderTypeId,
                "table", table,
                "seat", seat,
                "totalAmount", totalAmount,
                "totalTip", totalTip,
                "totalTax", totalTax,
                "totalDiscount", totalDiscount,
                "totalRefund", totalRefund,
                "totalServiceCharge", totalServiceCharge,
                "refunded", refunded,
                "customers", customers,
                "fulfillments", fulfillments,
                "lineItems", lineItems,
                "payments", payments,
                "serviceCharges", serviceCharges,
                "refunds", refunds,
                "taxes", taxes,
                "discounts", discounts,
                "tenders", tenders,
                "voided", voided,
                "version", version,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private Optional<String> orderNumber = Optional.empty();
 
        private JsonNullable<LocalDate> orderDate = JsonNullable.undefined();
 
        private JsonNullable<LocalDate> closedDate = JsonNullable.undefined();
 
        private JsonNullable<String> referenceId = JsonNullable.undefined();
 
        private Optional<? extends OrderStatus> status = Optional.empty();
 
        private Optional<? extends PosPaymentStatus> paymentStatus = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> note = Optional.empty();
 
        private String merchantId;
 
        private Optional<String> customerId = Optional.empty();
 
        private Optional<String> employeeId = Optional.empty();
 
        private String locationId;
 
        private Optional<String> orderTypeId = Optional.empty();
 
        private Optional<String> table = Optional.empty();
 
        private Optional<String> seat = Optional.empty();
 
        private JsonNullable<Long> totalAmount = JsonNullable.undefined();
 
        private JsonNullable<Long> totalTip = JsonNullable.undefined();
 
        private JsonNullable<Long> totalTax = JsonNullable.undefined();
 
        private JsonNullable<Long> totalDiscount = JsonNullable.undefined();
 
        private JsonNullable<Long> totalRefund = JsonNullable.undefined();
 
        private JsonNullable<Long> totalServiceCharge = JsonNullable.undefined();
 
        private Optional<Boolean> refunded = Optional.empty();
 
        private Optional<? extends List<Customers>> customers = Optional.empty();
 
        private Optional<? extends List<OrderFulfillments>> fulfillments = Optional.empty();
 
        private Optional<? extends List<OrderLineItems>> lineItems = Optional.empty();
 
        private Optional<? extends List<OrderPayments>> payments = Optional.empty();
 
        private Optional<? extends List<ServiceChargeInput>> serviceCharges = Optional.empty();
 
        private Optional<? extends List<OrderRefunds>> refunds = Optional.empty();
 
        private Optional<? extends List<Taxes>> taxes = Optional.empty();
 
        private Optional<? extends List<OrderDiscounts>> discounts = Optional.empty();
 
        private Optional<? extends List<OrderTenders>> tenders = Optional.empty();
 
        private Optional<Boolean> voided = Optional.empty();
 
        private JsonNullable<String> version = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder orderNumber(String orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = Optional.ofNullable(orderNumber);
            return this;
        }

        public Builder orderNumber(Optional<String> orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = orderNumber;
            return this;
        }

        public Builder orderDate(LocalDate orderDate) {
            Utils.checkNotNull(orderDate, "orderDate");
            this.orderDate = JsonNullable.of(orderDate);
            return this;
        }

        public Builder orderDate(JsonNullable<LocalDate> orderDate) {
            Utils.checkNotNull(orderDate, "orderDate");
            this.orderDate = orderDate;
            return this;
        }

        public Builder closedDate(LocalDate closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = JsonNullable.of(closedDate);
            return this;
        }

        public Builder closedDate(JsonNullable<LocalDate> closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = closedDate;
            return this;
        }

        /**
         * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
         */
        public Builder referenceId(String referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = JsonNullable.of(referenceId);
            return this;
        }

        /**
         * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
         */
        public Builder referenceId(JsonNullable<String> referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = referenceId;
            return this;
        }

        /**
         * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
         */
        public Builder status(OrderStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
         */
        public Builder status(Optional<? extends OrderStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Is this order paid or not?
         */
        public Builder paymentStatus(PosPaymentStatus paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = Optional.ofNullable(paymentStatus);
            return this;
        }

        /**
         * Is this order paid or not?
         */
        public Builder paymentStatus(Optional<? extends PosPaymentStatus> paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = paymentStatus;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * A note with information about this order, may be printed on the order receipt and displayed in apps
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * A note with information about this order, may be printed on the order receipt and displayed in apps
         */
        public Builder note(Optional<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        public Builder merchantId(String merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = merchantId;
            return this;
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        public Builder employeeId(Optional<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }

        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder orderTypeId(String orderTypeId) {
            Utils.checkNotNull(orderTypeId, "orderTypeId");
            this.orderTypeId = Optional.ofNullable(orderTypeId);
            return this;
        }

        public Builder orderTypeId(Optional<String> orderTypeId) {
            Utils.checkNotNull(orderTypeId, "orderTypeId");
            this.orderTypeId = orderTypeId;
            return this;
        }

        public Builder table(String table) {
            Utils.checkNotNull(table, "table");
            this.table = Optional.ofNullable(table);
            return this;
        }

        public Builder table(Optional<String> table) {
            Utils.checkNotNull(table, "table");
            this.table = table;
            return this;
        }

        public Builder seat(String seat) {
            Utils.checkNotNull(seat, "seat");
            this.seat = Optional.ofNullable(seat);
            return this;
        }

        public Builder seat(Optional<String> seat) {
            Utils.checkNotNull(seat, "seat");
            this.seat = seat;
            return this;
        }

        public Builder totalAmount(long totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        public Builder totalAmount(JsonNullable<Long> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalTip(long totalTip) {
            Utils.checkNotNull(totalTip, "totalTip");
            this.totalTip = JsonNullable.of(totalTip);
            return this;
        }

        public Builder totalTip(JsonNullable<Long> totalTip) {
            Utils.checkNotNull(totalTip, "totalTip");
            this.totalTip = totalTip;
            return this;
        }

        public Builder totalTax(long totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        public Builder totalTax(JsonNullable<Long> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        public Builder totalDiscount(long totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = JsonNullable.of(totalDiscount);
            return this;
        }

        public Builder totalDiscount(JsonNullable<Long> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        public Builder totalRefund(long totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = JsonNullable.of(totalRefund);
            return this;
        }

        public Builder totalRefund(JsonNullable<Long> totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = totalRefund;
            return this;
        }

        public Builder totalServiceCharge(long totalServiceCharge) {
            Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
            this.totalServiceCharge = JsonNullable.of(totalServiceCharge);
            return this;
        }

        public Builder totalServiceCharge(JsonNullable<Long> totalServiceCharge) {
            Utils.checkNotNull(totalServiceCharge, "totalServiceCharge");
            this.totalServiceCharge = totalServiceCharge;
            return this;
        }

        public Builder refunded(boolean refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = Optional.ofNullable(refunded);
            return this;
        }

        public Builder refunded(Optional<Boolean> refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = refunded;
            return this;
        }

        public Builder customers(List<Customers> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = Optional.ofNullable(customers);
            return this;
        }

        public Builder customers(Optional<? extends List<Customers>> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = customers;
            return this;
        }

        public Builder fulfillments(List<OrderFulfillments> fulfillments) {
            Utils.checkNotNull(fulfillments, "fulfillments");
            this.fulfillments = Optional.ofNullable(fulfillments);
            return this;
        }

        public Builder fulfillments(Optional<? extends List<OrderFulfillments>> fulfillments) {
            Utils.checkNotNull(fulfillments, "fulfillments");
            this.fulfillments = fulfillments;
            return this;
        }

        public Builder lineItems(List<OrderLineItems> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<OrderLineItems>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        public Builder payments(List<OrderPayments> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }

        public Builder payments(Optional<? extends List<OrderPayments>> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(List<ServiceChargeInput> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(Optional<? extends List<ServiceChargeInput>> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = serviceCharges;
            return this;
        }

        public Builder refunds(List<OrderRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        public Builder refunds(Optional<? extends List<OrderRefunds>> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        public Builder taxes(List<Taxes> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = Optional.ofNullable(taxes);
            return this;
        }

        public Builder taxes(Optional<? extends List<Taxes>> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = taxes;
            return this;
        }

        public Builder discounts(List<OrderDiscounts> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = Optional.ofNullable(discounts);
            return this;
        }

        public Builder discounts(Optional<? extends List<OrderDiscounts>> discounts) {
            Utils.checkNotNull(discounts, "discounts");
            this.discounts = discounts;
            return this;
        }

        public Builder tenders(List<OrderTenders> tenders) {
            Utils.checkNotNull(tenders, "tenders");
            this.tenders = Optional.ofNullable(tenders);
            return this;
        }

        public Builder tenders(Optional<? extends List<OrderTenders>> tenders) {
            Utils.checkNotNull(tenders, "tenders");
            this.tenders = tenders;
            return this;
        }

        public Builder voided(boolean voided) {
            Utils.checkNotNull(voided, "voided");
            this.voided = Optional.ofNullable(voided);
            return this;
        }

        public Builder voided(Optional<Boolean> voided) {
            Utils.checkNotNull(voided, "voided");
            this.voided = voided;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = JsonNullable.of(version);
            return this;
        }

        public Builder version(JsonNullable<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public OrderInput build() {
            return new OrderInput(
                idempotencyKey,
                orderNumber,
                orderDate,
                closedDate,
                referenceId,
                status,
                paymentStatus,
                currency,
                title,
                note,
                merchantId,
                customerId,
                employeeId,
                locationId,
                orderTypeId,
                table,
                seat,
                totalAmount,
                totalTip,
                totalTax,
                totalDiscount,
                totalRefund,
                totalServiceCharge,
                refunded,
                customers,
                fulfillments,
                lineItems,
                payments,
                serviceCharges,
                refunds,
                taxes,
                discounts,
                tenders,
                voided,
                version,
                passThrough);
        }
    }
}

