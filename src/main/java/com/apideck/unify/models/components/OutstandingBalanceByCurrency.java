/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class OutstandingBalanceByCurrency {

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balances_by_period")
    private Optional<? extends List<BalanceByPeriod>> balancesByPeriod;

    @JsonCreator
    public OutstandingBalanceByCurrency(
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("balances_by_period") Optional<? extends List<BalanceByPeriod>> balancesByPeriod) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(balancesByPeriod, "balancesByPeriod");
        this.currency = currency;
        this.balancesByPeriod = balancesByPeriod;
    }
    
    public OutstandingBalanceByCurrency() {
        this(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BalanceByPeriod>> balancesByPeriod() {
        return (Optional<List<BalanceByPeriod>>) balancesByPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OutstandingBalanceByCurrency withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public OutstandingBalanceByCurrency withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public OutstandingBalanceByCurrency withBalancesByPeriod(List<BalanceByPeriod> balancesByPeriod) {
        Utils.checkNotNull(balancesByPeriod, "balancesByPeriod");
        this.balancesByPeriod = Optional.ofNullable(balancesByPeriod);
        return this;
    }

    public OutstandingBalanceByCurrency withBalancesByPeriod(Optional<? extends List<BalanceByPeriod>> balancesByPeriod) {
        Utils.checkNotNull(balancesByPeriod, "balancesByPeriod");
        this.balancesByPeriod = balancesByPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutstandingBalanceByCurrency other = (OutstandingBalanceByCurrency) o;
        return 
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.balancesByPeriod, other.balancesByPeriod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            currency,
            balancesByPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OutstandingBalanceByCurrency.class,
                "currency", currency,
                "balancesByPeriod", balancesByPeriod);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<? extends List<BalanceByPeriod>> balancesByPeriod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder balancesByPeriod(List<BalanceByPeriod> balancesByPeriod) {
            Utils.checkNotNull(balancesByPeriod, "balancesByPeriod");
            this.balancesByPeriod = Optional.ofNullable(balancesByPeriod);
            return this;
        }

        public Builder balancesByPeriod(Optional<? extends List<BalanceByPeriod>> balancesByPeriod) {
            Utils.checkNotNull(balancesByPeriod, "balancesByPeriod");
            this.balancesByPeriod = balancesByPeriod;
            return this;
        }
        
        public OutstandingBalanceByCurrency build() {
            return new OutstandingBalanceByCurrency(
                currency,
                balancesByPeriod);
        }
    }
}

