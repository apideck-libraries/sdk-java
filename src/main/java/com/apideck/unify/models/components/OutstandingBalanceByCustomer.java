/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class OutstandingBalanceByCustomer {
    /**
     * Unique identifier for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private String customerId;

    /**
     * Full name of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_name")
    private String customerName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outstanding_balances_by_currency")
    private List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency;

    @JsonCreator
    public OutstandingBalanceByCustomer(
            @JsonProperty("customer_id") @Nullable String customerId,
            @JsonProperty("customer_name") @Nullable String customerName,
            @JsonProperty("outstanding_balances_by_currency") @Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
        this.customerId = customerId;
        this.customerName = customerName;
        this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
    }
    
    public OutstandingBalanceByCustomer() {
        this(null, null, null);
    }

    /**
     * Unique identifier for the customer.
     */
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    /**
     * Full name of the customer.
     */
    public Optional<String> customerName() {
        return Optional.ofNullable(this.customerName);
    }

    public Optional<List<OutstandingBalanceByCurrency>> outstandingBalancesByCurrency() {
        return Optional.ofNullable(this.outstandingBalancesByCurrency);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the customer.
     */
    public OutstandingBalanceByCustomer withCustomerId(@Nullable String customerId) {
        this.customerId = customerId;
        return this;
    }


    /**
     * Full name of the customer.
     */
    public OutstandingBalanceByCustomer withCustomerName(@Nullable String customerName) {
        this.customerName = customerName;
        return this;
    }


    public OutstandingBalanceByCustomer withOutstandingBalancesByCurrency(@Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
        this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutstandingBalanceByCustomer other = (OutstandingBalanceByCustomer) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.customerName, other.customerName) &&
            Utils.enhancedDeepEquals(this.outstandingBalancesByCurrency, other.outstandingBalancesByCurrency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, customerName, outstandingBalancesByCurrency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OutstandingBalanceByCustomer.class,
                "customerId", customerId,
                "customerName", customerName,
                "outstandingBalancesByCurrency", outstandingBalancesByCurrency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private String customerName;

        private List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the customer.
         */
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * Full name of the customer.
         */
        public Builder customerName(@Nullable String customerName) {
            this.customerName = customerName;
            return this;
        }

        public Builder outstandingBalancesByCurrency(@Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
            this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
            return this;
        }

        public OutstandingBalanceByCustomer build() {
            return new OutstandingBalanceByCustomer(
                customerId, customerName, outstandingBalancesByCurrency);
        }

    }
}
