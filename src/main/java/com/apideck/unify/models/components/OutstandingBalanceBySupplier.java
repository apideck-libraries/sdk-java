/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class OutstandingBalanceBySupplier {
    /**
     * Unique identifier for the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier_id")
    private String supplierId;

    /**
     * Full name of the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier_name")
    private String supplierName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outstanding_balances_by_currency")
    private List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency;

    @JsonCreator
    public OutstandingBalanceBySupplier(
            @JsonProperty("supplier_id") @Nullable String supplierId,
            @JsonProperty("supplier_name") @Nullable String supplierName,
            @JsonProperty("outstanding_balances_by_currency") @Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
        this.supplierId = supplierId;
        this.supplierName = supplierName;
        this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
    }
    
    public OutstandingBalanceBySupplier() {
        this(null, null, null);
    }

    /**
     * Unique identifier for the supplier.
     */
    public Optional<String> supplierId() {
        return Optional.ofNullable(this.supplierId);
    }

    /**
     * Full name of the supplier.
     */
    public Optional<String> supplierName() {
        return Optional.ofNullable(this.supplierName);
    }

    public Optional<List<OutstandingBalanceByCurrency>> outstandingBalancesByCurrency() {
        return Optional.ofNullable(this.outstandingBalancesByCurrency);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the supplier.
     */
    public OutstandingBalanceBySupplier withSupplierId(@Nullable String supplierId) {
        this.supplierId = supplierId;
        return this;
    }


    /**
     * Full name of the supplier.
     */
    public OutstandingBalanceBySupplier withSupplierName(@Nullable String supplierName) {
        this.supplierName = supplierName;
        return this;
    }


    public OutstandingBalanceBySupplier withOutstandingBalancesByCurrency(@Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
        this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutstandingBalanceBySupplier other = (OutstandingBalanceBySupplier) o;
        return 
            Utils.enhancedDeepEquals(this.supplierId, other.supplierId) &&
            Utils.enhancedDeepEquals(this.supplierName, other.supplierName) &&
            Utils.enhancedDeepEquals(this.outstandingBalancesByCurrency, other.outstandingBalancesByCurrency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            supplierId, supplierName, outstandingBalancesByCurrency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OutstandingBalanceBySupplier.class,
                "supplierId", supplierId,
                "supplierName", supplierName,
                "outstandingBalancesByCurrency", outstandingBalancesByCurrency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String supplierId;

        private String supplierName;

        private List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the supplier.
         */
        public Builder supplierId(@Nullable String supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        /**
         * Full name of the supplier.
         */
        public Builder supplierName(@Nullable String supplierName) {
            this.supplierName = supplierName;
            return this;
        }

        public Builder outstandingBalancesByCurrency(@Nullable List<OutstandingBalanceByCurrency> outstandingBalancesByCurrency) {
            this.outstandingBalancesByCurrency = outstandingBalancesByCurrency;
            return this;
        }

        public OutstandingBalanceBySupplier build() {
            return new OutstandingBalanceBySupplier(
                supplierId, supplierName, outstandingBalancesByCurrency);
        }

    }
}
