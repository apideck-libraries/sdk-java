/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class PaginationCoverage {
    /**
     * How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private PaginationCoverageMode mode;

    /**
     * Indicates whether the connector supports paging through results using the cursor parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paging_support")
    private Boolean pagingSupport;

    /**
     * Indicates whether the connector supports changing the page size by using the limit parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit_support")
    private Boolean limitSupport;

    @JsonCreator
    public PaginationCoverage(
            @JsonProperty("mode") @Nullable PaginationCoverageMode mode,
            @JsonProperty("paging_support") @Nullable Boolean pagingSupport,
            @JsonProperty("limit_support") @Nullable Boolean limitSupport) {
        this.mode = mode;
        this.pagingSupport = pagingSupport;
        this.limitSupport = limitSupport;
    }
    
    public PaginationCoverage() {
        this(null, null, null);
    }

    /**
     * How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
     */
    public Optional<PaginationCoverageMode> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Indicates whether the connector supports paging through results using the cursor parameter.
     */
    public Optional<Boolean> pagingSupport() {
        return Optional.ofNullable(this.pagingSupport);
    }

    /**
     * Indicates whether the connector supports changing the page size by using the limit parameter.
     */
    public Optional<Boolean> limitSupport() {
        return Optional.ofNullable(this.limitSupport);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
     */
    public PaginationCoverage withMode(@Nullable PaginationCoverageMode mode) {
        this.mode = mode;
        return this;
    }


    /**
     * Indicates whether the connector supports paging through results using the cursor parameter.
     */
    public PaginationCoverage withPagingSupport(@Nullable Boolean pagingSupport) {
        this.pagingSupport = pagingSupport;
        return this;
    }


    /**
     * Indicates whether the connector supports changing the page size by using the limit parameter.
     */
    public PaginationCoverage withLimitSupport(@Nullable Boolean limitSupport) {
        this.limitSupport = limitSupport;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationCoverage other = (PaginationCoverage) o;
        return 
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.pagingSupport, other.pagingSupport) &&
            Utils.enhancedDeepEquals(this.limitSupport, other.limitSupport);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            mode, pagingSupport, limitSupport);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationCoverage.class,
                "mode", mode,
                "pagingSupport", pagingSupport,
                "limitSupport", limitSupport);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private PaginationCoverageMode mode;

        private Boolean pagingSupport;

        private Boolean limitSupport;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
         */
        public Builder mode(@Nullable PaginationCoverageMode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Indicates whether the connector supports paging through results using the cursor parameter.
         */
        public Builder pagingSupport(@Nullable Boolean pagingSupport) {
            this.pagingSupport = pagingSupport;
            return this;
        }

        /**
         * Indicates whether the connector supports changing the page size by using the limit parameter.
         */
        public Builder limitSupport(@Nullable Boolean limitSupport) {
            this.limitSupport = limitSupport;
            return this;
        }

        public PaginationCoverage build() {
            return new PaginationCoverage(
                mode, pagingSupport, limitSupport);
        }

    }
}
