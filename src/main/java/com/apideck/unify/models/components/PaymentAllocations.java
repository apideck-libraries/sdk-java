/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentAllocations {

    /**
     * ID of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Amount of the payment allocated to the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocated_amount")
    private JsonNullable<Double> allocatedAmount;

    /**
     * Date of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private JsonNullable<OffsetDateTime> date;

    @JsonCreator
    public PaymentAllocations(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("allocated_amount") JsonNullable<Double> allocatedAmount,
            @JsonProperty("date") JsonNullable<OffsetDateTime> date) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(allocatedAmount, "allocatedAmount");
        Utils.checkNotNull(date, "date");
        this.id = id;
        this.allocatedAmount = allocatedAmount;
        this.date = date;
    }
    
    public PaymentAllocations() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * ID of the payment
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Amount of the payment allocated to the invoice
     */
    @JsonIgnore
    public JsonNullable<Double> allocatedAmount() {
        return allocatedAmount;
    }

    /**
     * Date of the payment
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> date() {
        return date;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * ID of the payment
     */
    public PaymentAllocations withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * ID of the payment
     */
    public PaymentAllocations withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Amount of the payment allocated to the invoice
     */
    public PaymentAllocations withAllocatedAmount(double allocatedAmount) {
        Utils.checkNotNull(allocatedAmount, "allocatedAmount");
        this.allocatedAmount = JsonNullable.of(allocatedAmount);
        return this;
    }

    /**
     * Amount of the payment allocated to the invoice
     */
    public PaymentAllocations withAllocatedAmount(JsonNullable<Double> allocatedAmount) {
        Utils.checkNotNull(allocatedAmount, "allocatedAmount");
        this.allocatedAmount = allocatedAmount;
        return this;
    }

    /**
     * Date of the payment
     */
    public PaymentAllocations withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = JsonNullable.of(date);
        return this;
    }

    /**
     * Date of the payment
     */
    public PaymentAllocations withDate(JsonNullable<OffsetDateTime> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentAllocations other = (PaymentAllocations) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.allocatedAmount, other.allocatedAmount) &&
            Objects.deepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            allocatedAmount,
            date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentAllocations.class,
                "id", id,
                "allocatedAmount", allocatedAmount,
                "date", date);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<Double> allocatedAmount = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> date = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the payment
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * ID of the payment
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Amount of the payment allocated to the invoice
         */
        public Builder allocatedAmount(double allocatedAmount) {
            Utils.checkNotNull(allocatedAmount, "allocatedAmount");
            this.allocatedAmount = JsonNullable.of(allocatedAmount);
            return this;
        }

        /**
         * Amount of the payment allocated to the invoice
         */
        public Builder allocatedAmount(JsonNullable<Double> allocatedAmount) {
            Utils.checkNotNull(allocatedAmount, "allocatedAmount");
            this.allocatedAmount = allocatedAmount;
            return this;
        }

        /**
         * Date of the payment
         */
        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = JsonNullable.of(date);
            return this;
        }

        /**
         * Date of the payment
         */
        public Builder date(JsonNullable<OffsetDateTime> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }
        
        public PaymentAllocations build() {
            return new PaymentAllocations(
                id,
                allocatedAmount,
                date);
        }
    }
}
