/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentAllocations {
    /**
     * ID of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Amount of the payment allocated to the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocated_amount")
    private JsonNullable<Double> allocatedAmount;

    /**
     * Date of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private JsonNullable<OffsetDateTime> date;

    @JsonCreator
    public PaymentAllocations(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("allocated_amount") @Nullable JsonNullable<Double> allocatedAmount,
            @JsonProperty("date") @Nullable JsonNullable<OffsetDateTime> date) {
        this.id = id;
        this.allocatedAmount = Optional.ofNullable(allocatedAmount)
            .orElse(JsonNullable.undefined());
        this.date = Optional.ofNullable(date)
            .orElse(JsonNullable.undefined());
    }
    
    public PaymentAllocations() {
        this(null, null, null);
    }

    /**
     * ID of the payment
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Amount of the payment allocated to the invoice
     */
    public JsonNullable<Double> allocatedAmount() {
        return this.allocatedAmount;
    }

    /**
     * Date of the payment
     */
    public JsonNullable<OffsetDateTime> date() {
        return this.date;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the payment
     */
    public PaymentAllocations withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Amount of the payment allocated to the invoice
     */
    public PaymentAllocations withAllocatedAmount(@Nullable Double allocatedAmount) {
        this.allocatedAmount = JsonNullable.of(allocatedAmount);
        return this;
    }


    /**
     * Date of the payment
     */
    public PaymentAllocations withDate(@Nullable OffsetDateTime date) {
        this.date = JsonNullable.of(date);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentAllocations other = (PaymentAllocations) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.allocatedAmount, other.allocatedAmount) &&
            Utils.enhancedDeepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, allocatedAmount, date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentAllocations.class,
                "id", id,
                "allocatedAmount", allocatedAmount,
                "date", date);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<Double> allocatedAmount;

        private JsonNullable<OffsetDateTime> date;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the payment
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Amount of the payment allocated to the invoice
         */
        public Builder allocatedAmount(@Nullable Double allocatedAmount) {
            this.allocatedAmount = JsonNullable.of(allocatedAmount);
            return this;
        }

        /**
         * Date of the payment
         */
        public Builder date(@Nullable OffsetDateTime date) {
            this.date = JsonNullable.of(date);
            return this;
        }

        public PaymentAllocations build() {
            return new PaymentAllocations(
                id, allocatedAmount, date);
        }

    }
}
