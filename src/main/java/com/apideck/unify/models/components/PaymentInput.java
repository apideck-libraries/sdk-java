/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PaymentInput {

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * The total amount of the transaction or record
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_reference")
    private JsonNullable<String> paymentMethodReference;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_id")
    private JsonNullable<String> paymentMethodId;

    /**
     * Type of accounts receivable account.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts_receivable_account_type")
    @Deprecated
    private JsonNullable<String> accountsReceivableAccountType;

    /**
     * Unique identifier for the account to allocate payment to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts_receivable_account_id")
    @Deprecated
    private JsonNullable<String> accountsReceivableAccountId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<? extends LinkedLedgerAccountInput> account;

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("transaction_date")
    private Optional<OffsetDateTime> transactionDate;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * The supplier this entity is linked to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    @Deprecated
    private JsonNullable<? extends DeprecatedLinkedSupplierInput> supplier;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Indicates if the transaction has been reconciled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciled")
    private JsonNullable<Boolean> reconciled;

    /**
     * Status of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PaymentStatus> status;

    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends PaymentType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    private Optional<? extends List<AllocationInput>> allocations;

    /**
     * Note associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * Number associated with the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * Id to be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public PaymentInput(
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("payment_method_reference") JsonNullable<String> paymentMethodReference,
            @JsonProperty("payment_method_id") JsonNullable<String> paymentMethodId,
            @JsonProperty("accounts_receivable_account_type") JsonNullable<String> accountsReceivableAccountType,
            @JsonProperty("accounts_receivable_account_id") JsonNullable<String> accountsReceivableAccountId,
            @JsonProperty("account") JsonNullable<? extends LinkedLedgerAccountInput> account,
            @JsonProperty("transaction_date") Optional<OffsetDateTime> transactionDate,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("supplier") JsonNullable<? extends DeprecatedLinkedSupplierInput> supplier,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("reconciled") JsonNullable<Boolean> reconciled,
            @JsonProperty("status") Optional<? extends PaymentStatus> status,
            @JsonProperty("type") Optional<? extends PaymentType> type,
            @JsonProperty("allocations") Optional<? extends List<AllocationInput>> allocations,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("display_id") JsonNullable<String> displayId,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        Utils.checkNotNull(accountsReceivableAccountType, "accountsReceivableAccountType");
        Utils.checkNotNull(accountsReceivableAccountId, "accountsReceivableAccountId");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(transactionDate, "transactionDate");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(supplier, "supplier");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(reconciled, "reconciled");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(allocations, "allocations");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(passThrough, "passThrough");
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.totalAmount = totalAmount;
        this.reference = reference;
        this.paymentMethod = paymentMethod;
        this.paymentMethodReference = paymentMethodReference;
        this.paymentMethodId = paymentMethodId;
        this.accountsReceivableAccountType = accountsReceivableAccountType;
        this.accountsReceivableAccountId = accountsReceivableAccountId;
        this.account = account;
        this.transactionDate = transactionDate;
        this.customer = customer;
        this.supplier = supplier;
        this.companyId = companyId;
        this.reconciled = reconciled;
        this.status = status;
        this.type = type;
        this.allocations = allocations;
        this.note = note;
        this.number = number;
        this.trackingCategories = trackingCategories;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.displayId = displayId;
        this.passThrough = passThrough;
    }
    
    public PaymentInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * The total amount of the transaction or record
     */
    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodReference() {
        return paymentMethodReference;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethodId() {
        return paymentMethodId;
    }

    /**
     * Type of accounts receivable account.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> accountsReceivableAccountType() {
        return accountsReceivableAccountType;
    }

    /**
     * Unique identifier for the account to allocate payment to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> accountsReceivableAccountId() {
        return accountsReceivableAccountId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> account() {
        return (JsonNullable<LinkedLedgerAccountInput>) account;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonIgnore
    public Optional<OffsetDateTime> transactionDate() {
        return transactionDate;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * The supplier this entity is linked to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<DeprecatedLinkedSupplierInput> supplier() {
        return (JsonNullable<DeprecatedLinkedSupplierInput>) supplier;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reconciled() {
        return reconciled;
    }

    /**
     * Status of payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentStatus> status() {
        return (Optional<PaymentStatus>) status;
    }

    /**
     * Type of payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentType> type() {
        return (Optional<PaymentType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AllocationInput>> allocations() {
        return (Optional<List<AllocationInput>>) allocations;
    }

    /**
     * Note associated with the transaction
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * Number associated with the transaction
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * Id to be displayed.
     */
    @JsonIgnore
    public JsonNullable<String> displayId() {
        return displayId;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PaymentInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PaymentInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public PaymentInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public PaymentInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * The total amount of the transaction or record
     */
    public PaymentInput withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * The total amount of the transaction or record
     */
    public PaymentInput withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public PaymentInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional transaction reference message ie: Debit remittance detail.
     */
    public PaymentInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public PaymentInput withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public PaymentInput withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    public PaymentInput withPaymentMethodReference(String paymentMethodReference) {
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
        return this;
    }

    /**
     * Optional reference message returned by payment method on processing
     */
    public PaymentInput withPaymentMethodReference(JsonNullable<String> paymentMethodReference) {
        Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
        this.paymentMethodReference = paymentMethodReference;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public PaymentInput withPaymentMethodId(String paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = JsonNullable.of(paymentMethodId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public PaymentInput withPaymentMethodId(JsonNullable<String> paymentMethodId) {
        Utils.checkNotNull(paymentMethodId, "paymentMethodId");
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * Type of accounts receivable account.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withAccountsReceivableAccountType(String accountsReceivableAccountType) {
        Utils.checkNotNull(accountsReceivableAccountType, "accountsReceivableAccountType");
        this.accountsReceivableAccountType = JsonNullable.of(accountsReceivableAccountType);
        return this;
    }

    /**
     * Type of accounts receivable account.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withAccountsReceivableAccountType(JsonNullable<String> accountsReceivableAccountType) {
        Utils.checkNotNull(accountsReceivableAccountType, "accountsReceivableAccountType");
        this.accountsReceivableAccountType = accountsReceivableAccountType;
        return this;
    }

    /**
     * Unique identifier for the account to allocate payment to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withAccountsReceivableAccountId(String accountsReceivableAccountId) {
        Utils.checkNotNull(accountsReceivableAccountId, "accountsReceivableAccountId");
        this.accountsReceivableAccountId = JsonNullable.of(accountsReceivableAccountId);
        return this;
    }

    /**
     * Unique identifier for the account to allocate payment to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withAccountsReceivableAccountId(JsonNullable<String> accountsReceivableAccountId) {
        Utils.checkNotNull(accountsReceivableAccountId, "accountsReceivableAccountId");
        this.accountsReceivableAccountId = accountsReceivableAccountId;
        return this;
    }

    public PaymentInput withAccount(LinkedLedgerAccountInput account) {
        Utils.checkNotNull(account, "account");
        this.account = JsonNullable.of(account);
        return this;
    }

    public PaymentInput withAccount(JsonNullable<? extends LinkedLedgerAccountInput> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public PaymentInput withTransactionDate(OffsetDateTime transactionDate) {
        Utils.checkNotNull(transactionDate, "transactionDate");
        this.transactionDate = Optional.ofNullable(transactionDate);
        return this;
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public PaymentInput withTransactionDate(Optional<OffsetDateTime> transactionDate) {
        Utils.checkNotNull(transactionDate, "transactionDate");
        this.transactionDate = transactionDate;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public PaymentInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public PaymentInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The supplier this entity is linked to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withSupplier(DeprecatedLinkedSupplierInput supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = JsonNullable.of(supplier);
        return this;
    }

    /**
     * The supplier this entity is linked to.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PaymentInput withSupplier(JsonNullable<? extends DeprecatedLinkedSupplierInput> supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = supplier;
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public PaymentInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public PaymentInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    public PaymentInput withReconciled(boolean reconciled) {
        Utils.checkNotNull(reconciled, "reconciled");
        this.reconciled = JsonNullable.of(reconciled);
        return this;
    }

    /**
     * Indicates if the transaction has been reconciled.
     */
    public PaymentInput withReconciled(JsonNullable<Boolean> reconciled) {
        Utils.checkNotNull(reconciled, "reconciled");
        this.reconciled = reconciled;
        return this;
    }

    /**
     * Status of payment
     */
    public PaymentInput withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of payment
     */
    public PaymentInput withStatus(Optional<? extends PaymentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Type of payment
     */
    public PaymentInput withType(PaymentType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of payment
     */
    public PaymentInput withType(Optional<? extends PaymentType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public PaymentInput withAllocations(List<AllocationInput> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = Optional.ofNullable(allocations);
        return this;
    }

    public PaymentInput withAllocations(Optional<? extends List<AllocationInput>> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = allocations;
        return this;
    }

    /**
     * Note associated with the transaction
     */
    public PaymentInput withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Note associated with the transaction
     */
    public PaymentInput withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * Number associated with the transaction
     */
    public PaymentInput withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Number associated with the transaction
     */
    public PaymentInput withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public PaymentInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public PaymentInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public PaymentInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public PaymentInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public PaymentInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public PaymentInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * Id to be displayed.
     */
    public PaymentInput withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = JsonNullable.of(displayId);
        return this;
    }

    /**
     * Id to be displayed.
     */
    public PaymentInput withDisplayId(JsonNullable<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PaymentInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PaymentInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentInput other = (PaymentInput) o;
        return 
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.paymentMethodReference, other.paymentMethodReference) &&
            Objects.deepEquals(this.paymentMethodId, other.paymentMethodId) &&
            Objects.deepEquals(this.accountsReceivableAccountType, other.accountsReceivableAccountType) &&
            Objects.deepEquals(this.accountsReceivableAccountId, other.accountsReceivableAccountId) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.transactionDate, other.transactionDate) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.supplier, other.supplier) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.reconciled, other.reconciled) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.allocations, other.allocations) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            Objects.deepEquals(this.displayId, other.displayId) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            currency,
            currencyRate,
            totalAmount,
            reference,
            paymentMethod,
            paymentMethodReference,
            paymentMethodId,
            accountsReceivableAccountType,
            accountsReceivableAccountId,
            account,
            transactionDate,
            customer,
            supplier,
            companyId,
            reconciled,
            status,
            type,
            allocations,
            note,
            number,
            trackingCategories,
            customFields,
            rowVersion,
            displayId,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentInput.class,
                "currency", currency,
                "currencyRate", currencyRate,
                "totalAmount", totalAmount,
                "reference", reference,
                "paymentMethod", paymentMethod,
                "paymentMethodReference", paymentMethodReference,
                "paymentMethodId", paymentMethodId,
                "accountsReceivableAccountType", accountsReceivableAccountType,
                "accountsReceivableAccountId", accountsReceivableAccountId,
                "account", account,
                "transactionDate", transactionDate,
                "customer", customer,
                "supplier", supplier,
                "companyId", companyId,
                "reconciled", reconciled,
                "status", status,
                "type", type,
                "allocations", allocations,
                "note", note,
                "number", number,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "displayId", displayId,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Double> currencyRate = JsonNullable.undefined();
 
        private Optional<Double> totalAmount = Optional.empty();
 
        private JsonNullable<String> reference = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethod = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethodReference = JsonNullable.undefined();
 
        private JsonNullable<String> paymentMethodId = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> accountsReceivableAccountType = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> accountsReceivableAccountId = JsonNullable.undefined();
 
        private JsonNullable<? extends LinkedLedgerAccountInput> account = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> transactionDate = Optional.empty();
 
        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends DeprecatedLinkedSupplierInput> supplier = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<Boolean> reconciled = JsonNullable.undefined();
 
        private Optional<? extends PaymentStatus> status = Optional.empty();
 
        private Optional<? extends PaymentType> type = Optional.empty();
 
        private Optional<? extends List<AllocationInput>> allocations = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();
 
        private Optional<? extends List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<String> rowVersion = JsonNullable.undefined();
 
        private JsonNullable<String> displayId = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Optional transaction reference message ie: Debit remittance detail.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional transaction reference message ie: Debit remittance detail.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * Optional reference message returned by payment method on processing
         */
        public Builder paymentMethodReference(String paymentMethodReference) {
            Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
            this.paymentMethodReference = JsonNullable.of(paymentMethodReference);
            return this;
        }

        /**
         * Optional reference message returned by payment method on processing
         */
        public Builder paymentMethodReference(JsonNullable<String> paymentMethodReference) {
            Utils.checkNotNull(paymentMethodReference, "paymentMethodReference");
            this.paymentMethodReference = paymentMethodReference;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder paymentMethodId(String paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = JsonNullable.of(paymentMethodId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder paymentMethodId(JsonNullable<String> paymentMethodId) {
            Utils.checkNotNull(paymentMethodId, "paymentMethodId");
            this.paymentMethodId = paymentMethodId;
            return this;
        }

        /**
         * Type of accounts receivable account.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder accountsReceivableAccountType(String accountsReceivableAccountType) {
            Utils.checkNotNull(accountsReceivableAccountType, "accountsReceivableAccountType");
            this.accountsReceivableAccountType = JsonNullable.of(accountsReceivableAccountType);
            return this;
        }

        /**
         * Type of accounts receivable account.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder accountsReceivableAccountType(JsonNullable<String> accountsReceivableAccountType) {
            Utils.checkNotNull(accountsReceivableAccountType, "accountsReceivableAccountType");
            this.accountsReceivableAccountType = accountsReceivableAccountType;
            return this;
        }

        /**
         * Unique identifier for the account to allocate payment to.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder accountsReceivableAccountId(String accountsReceivableAccountId) {
            Utils.checkNotNull(accountsReceivableAccountId, "accountsReceivableAccountId");
            this.accountsReceivableAccountId = JsonNullable.of(accountsReceivableAccountId);
            return this;
        }

        /**
         * Unique identifier for the account to allocate payment to.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder accountsReceivableAccountId(JsonNullable<String> accountsReceivableAccountId) {
            Utils.checkNotNull(accountsReceivableAccountId, "accountsReceivableAccountId");
            this.accountsReceivableAccountId = accountsReceivableAccountId;
            return this;
        }

        public Builder account(LinkedLedgerAccountInput account) {
            Utils.checkNotNull(account, "account");
            this.account = JsonNullable.of(account);
            return this;
        }

        public Builder account(JsonNullable<? extends LinkedLedgerAccountInput> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(OffsetDateTime transactionDate) {
            Utils.checkNotNull(transactionDate, "transactionDate");
            this.transactionDate = Optional.ofNullable(transactionDate);
            return this;
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder transactionDate(Optional<OffsetDateTime> transactionDate) {
            Utils.checkNotNull(transactionDate, "transactionDate");
            this.transactionDate = transactionDate;
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * The supplier this entity is linked to.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder supplier(DeprecatedLinkedSupplierInput supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder supplier(JsonNullable<? extends DeprecatedLinkedSupplierInput> supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = supplier;
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Indicates if the transaction has been reconciled.
         */
        public Builder reconciled(boolean reconciled) {
            Utils.checkNotNull(reconciled, "reconciled");
            this.reconciled = JsonNullable.of(reconciled);
            return this;
        }

        /**
         * Indicates if the transaction has been reconciled.
         */
        public Builder reconciled(JsonNullable<Boolean> reconciled) {
            Utils.checkNotNull(reconciled, "reconciled");
            this.reconciled = reconciled;
            return this;
        }

        /**
         * Status of payment
         */
        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of payment
         */
        public Builder status(Optional<? extends PaymentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(PaymentType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of payment
         */
        public Builder type(Optional<? extends PaymentType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder allocations(List<AllocationInput> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = Optional.ofNullable(allocations);
            return this;
        }

        public Builder allocations(Optional<? extends List<AllocationInput>> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = allocations;
            return this;
        }

        /**
         * Note associated with the transaction
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Note associated with the transaction
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * Number associated with the transaction
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Number associated with the transaction
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * Id to be displayed.
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * Id to be displayed.
         */
        public Builder displayId(JsonNullable<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public PaymentInput build() {
            return new PaymentInput(
                currency,
                currencyRate,
                totalAmount,
                reference,
                paymentMethod,
                paymentMethodReference,
                paymentMethodId,
                accountsReceivableAccountType,
                accountsReceivableAccountId,
                account,
                transactionDate,
                customer,
                supplier,
                companyId,
                reconciled,
                status,
                type,
                allocations,
                note,
                number,
                trackingCategories,
                customFields,
                rowVersion,
                displayId,
                passThrough);
        }
    }
}

