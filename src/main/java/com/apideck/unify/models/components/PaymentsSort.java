/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class PaymentsSort {
    /**
     * The field on which to sort the Payments
     */
    @SpeakeasyMetadata("queryParam:name=by")
    private PaymentsSortBy by;

    /**
     * The direction in which to sort the results
     */
    @SpeakeasyMetadata("queryParam:name=direction")
    private SortDirection direction;

    @JsonCreator
    public PaymentsSort(
            @Nullable PaymentsSortBy by,
            @Nullable SortDirection direction) {
        this.by = by;
        this.direction = Optional.ofNullable(direction)
            .orElse(Builder._SINGLETON_VALUE_Direction.value());
    }
    
    public PaymentsSort() {
        this(null, null);
    }

    /**
     * The field on which to sort the Payments
     */
    public Optional<PaymentsSortBy> by() {
        return Optional.ofNullable(this.by);
    }

    /**
     * The direction in which to sort the results
     */
    public Optional<SortDirection> direction() {
        return Optional.ofNullable(this.direction);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The field on which to sort the Payments
     */
    public PaymentsSort withBy(@Nullable PaymentsSortBy by) {
        this.by = by;
        return this;
    }


    /**
     * The direction in which to sort the results
     */
    public PaymentsSort withDirection(@Nullable SortDirection direction) {
        this.direction = direction;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentsSort other = (PaymentsSort) o;
        return 
            Utils.enhancedDeepEquals(this.by, other.by) &&
            Utils.enhancedDeepEquals(this.direction, other.direction);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            by, direction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentsSort.class,
                "by", by,
                "direction", direction);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private PaymentsSortBy by;

        private SortDirection direction;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The field on which to sort the Payments
         */
        public Builder by(@Nullable PaymentsSortBy by) {
            this.by = by;
            return this;
        }

        /**
         * The direction in which to sort the results
         */
        public Builder direction(@Nullable SortDirection direction) {
            this.direction = direction;
            return this;
        }

        public PaymentsSort build() {
            return new PaymentsSort(
                by, direction);
        }


        private static final LazySingletonValue<SortDirection> _SINGLETON_VALUE_Direction =
                new LazySingletonValue<>(
                        "direction",
                        "\"asc\"",
                        new TypeReference<SortDirection>() {});
    }
}
