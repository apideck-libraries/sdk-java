/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Payroll {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The unique identifier of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("processed")
    private JsonNullable<Boolean> processed;

    /**
     * The date the payroll was processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processed_date")
    private JsonNullable<String> processedDate;

    /**
     * The date on which employees will be paid for the payroll.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("check_date")
    private JsonNullable<String> checkDate;

    /**
     * The start date, inclusive, of the pay period.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("start_date")
    private JsonNullable<String> startDate;

    /**
     * The end date, inclusive, of the pay period.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("end_date")
    private JsonNullable<String> endDate;

    /**
     * The overview of the payroll totals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private PayrollTotals totals;

    /**
     * An array of compensations for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensations")
    private List<Compensation> compensations;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    @JsonCreator
    public Payroll(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("processed") @Nullable Boolean processed,
            @JsonProperty("processed_date") @Nullable JsonNullable<String> processedDate,
            @JsonProperty("check_date") @Nullable String checkDate,
            @JsonProperty("start_date") @Nullable String startDate,
            @JsonProperty("end_date") @Nullable String endDate,
            @JsonProperty("totals") @Nullable PayrollTotals totals,
            @JsonProperty("compensations") @Nullable List<Compensation> compensations,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings) {
        this.id = JsonNullable.of(id);
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.processed = JsonNullable.of(processed);
        this.processedDate = Optional.ofNullable(processedDate)
            .orElse(JsonNullable.undefined());
        this.checkDate = JsonNullable.of(checkDate);
        this.startDate = JsonNullable.of(startDate);
        this.endDate = JsonNullable.of(endDate);
        this.totals = totals;
        this.compensations = compensations;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
    }
    
    public Payroll() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The unique identifier of the company.
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    public JsonNullable<Boolean> processed() {
        return this.processed;
    }

    /**
     * The date the payroll was processed.
     */
    public JsonNullable<String> processedDate() {
        return this.processedDate;
    }

    /**
     * The date on which employees will be paid for the payroll.
     */
    public JsonNullable<String> checkDate() {
        return this.checkDate;
    }

    /**
     * The start date, inclusive, of the pay period.
     */
    public JsonNullable<String> startDate() {
        return this.startDate;
    }

    /**
     * The end date, inclusive, of the pay period.
     */
    public JsonNullable<String> endDate() {
        return this.endDate;
    }

    /**
     * The overview of the payroll totals.
     */
    public Optional<PayrollTotals> totals() {
        return Optional.ofNullable(this.totals);
    }

    /**
     * An array of compensations for the payroll.
     */
    public Optional<List<Compensation>> compensations() {
        return Optional.ofNullable(this.compensations);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Payroll withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The unique identifier of the company.
     */
    public Payroll withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
     */
    public Payroll withProcessed(@Nullable Boolean processed) {
        this.processed = JsonNullable.of(processed);
        return this;
    }


    /**
     * The date the payroll was processed.
     */
    public Payroll withProcessedDate(@Nullable String processedDate) {
        this.processedDate = JsonNullable.of(processedDate);
        return this;
    }


    /**
     * The date on which employees will be paid for the payroll.
     */
    public Payroll withCheckDate(@Nullable String checkDate) {
        this.checkDate = JsonNullable.of(checkDate);
        return this;
    }


    /**
     * The start date, inclusive, of the pay period.
     */
    public Payroll withStartDate(@Nullable String startDate) {
        this.startDate = JsonNullable.of(startDate);
        return this;
    }


    /**
     * The end date, inclusive, of the pay period.
     */
    public Payroll withEndDate(@Nullable String endDate) {
        this.endDate = JsonNullable.of(endDate);
        return this;
    }


    /**
     * The overview of the payroll totals.
     */
    public Payroll withTotals(@Nullable PayrollTotals totals) {
        this.totals = totals;
        return this;
    }


    /**
     * An array of compensations for the payroll.
     */
    public Payroll withCompensations(@Nullable List<Compensation> compensations) {
        this.compensations = compensations;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Payroll withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Payroll other = (Payroll) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.processed, other.processed) &&
            Utils.enhancedDeepEquals(this.processedDate, other.processedDate) &&
            Utils.enhancedDeepEquals(this.checkDate, other.checkDate) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.totals, other.totals) &&
            Utils.enhancedDeepEquals(this.compensations, other.compensations) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, companyId, processed,
            processedDate, checkDate, startDate,
            endDate, totals, compensations,
            customMappings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Payroll.class,
                "id", id,
                "companyId", companyId,
                "processed", processed,
                "processedDate", processedDate,
                "checkDate", checkDate,
                "startDate", startDate,
                "endDate", endDate,
                "totals", totals,
                "compensations", compensations,
                "customMappings", customMappings);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> companyId;

        private Boolean processed;

        private JsonNullable<String> processedDate;

        private String checkDate;

        private String startDate;

        private String endDate;

        private PayrollTotals totals;

        private List<Compensation> compensations;

        private JsonNullable<Map<String, Object>> customMappings;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The unique identifier of the company.
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
         */
        public Builder processed(@Nullable Boolean processed) {
            this.processed = processed;
            return this;
        }

        /**
         * The date the payroll was processed.
         */
        public Builder processedDate(@Nullable String processedDate) {
            this.processedDate = JsonNullable.of(processedDate);
            return this;
        }

        /**
         * The date on which employees will be paid for the payroll.
         */
        public Builder checkDate(@Nullable String checkDate) {
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The start date, inclusive, of the pay period.
         */
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date, inclusive, of the pay period.
         */
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * The overview of the payroll totals.
         */
        public Builder totals(@Nullable PayrollTotals totals) {
            this.totals = totals;
            return this;
        }

        /**
         * An array of compensations for the payroll.
         */
        public Builder compensations(@Nullable List<Compensation> compensations) {
            this.compensations = compensations;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        public Payroll build() {
            return new Payroll(
                id, companyId, processed,
                processedDate, checkDate, startDate,
                endDate, totals, compensations,
                customMappings);
        }

    }
}
