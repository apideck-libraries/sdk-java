/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PayrollTotals
 * 
 * <p>The overview of the payroll totals.
 */
public class PayrollTotals {
    /**
     * The total company debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_debit")
    private JsonNullable<Double> companyDebit;

    /**
     * The total tax debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_debit")
    private JsonNullable<Double> taxDebit;

    /**
     * The total check amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_amount")
    private JsonNullable<Double> checkAmount;

    /**
     * The net pay amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay")
    private JsonNullable<Double> netPay;

    /**
     * The gross pay amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_pay")
    private JsonNullable<Double> grossPay;

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer_taxes")
    private JsonNullable<Double> employerTaxes;

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_taxes")
    private JsonNullable<Double> employeeTaxes;

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer_benefit_contributions")
    private JsonNullable<Double> employerBenefitContributions;

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_benefit_deductions")
    private JsonNullable<Double> employeeBenefitDeductions;

    @JsonCreator
    public PayrollTotals(
            @JsonProperty("company_debit") @Nullable JsonNullable<Double> companyDebit,
            @JsonProperty("tax_debit") @Nullable JsonNullable<Double> taxDebit,
            @JsonProperty("check_amount") @Nullable JsonNullable<Double> checkAmount,
            @JsonProperty("net_pay") @Nullable JsonNullable<Double> netPay,
            @JsonProperty("gross_pay") @Nullable JsonNullable<Double> grossPay,
            @JsonProperty("employer_taxes") @Nullable JsonNullable<Double> employerTaxes,
            @JsonProperty("employee_taxes") @Nullable JsonNullable<Double> employeeTaxes,
            @JsonProperty("employer_benefit_contributions") @Nullable JsonNullable<Double> employerBenefitContributions,
            @JsonProperty("employee_benefit_deductions") @Nullable JsonNullable<Double> employeeBenefitDeductions) {
        this.companyDebit = Optional.ofNullable(companyDebit)
            .orElse(JsonNullable.undefined());
        this.taxDebit = Optional.ofNullable(taxDebit)
            .orElse(JsonNullable.undefined());
        this.checkAmount = Optional.ofNullable(checkAmount)
            .orElse(JsonNullable.undefined());
        this.netPay = Optional.ofNullable(netPay)
            .orElse(JsonNullable.undefined());
        this.grossPay = Optional.ofNullable(grossPay)
            .orElse(JsonNullable.undefined());
        this.employerTaxes = Optional.ofNullable(employerTaxes)
            .orElse(JsonNullable.undefined());
        this.employeeTaxes = Optional.ofNullable(employeeTaxes)
            .orElse(JsonNullable.undefined());
        this.employerBenefitContributions = Optional.ofNullable(employerBenefitContributions)
            .orElse(JsonNullable.undefined());
        this.employeeBenefitDeductions = Optional.ofNullable(employeeBenefitDeductions)
            .orElse(JsonNullable.undefined());
    }
    
    public PayrollTotals() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The total company debit for the payroll.
     */
    public JsonNullable<Double> companyDebit() {
        return this.companyDebit;
    }

    /**
     * The total tax debit for the payroll.
     */
    public JsonNullable<Double> taxDebit() {
        return this.taxDebit;
    }

    /**
     * The total check amount for the payroll.
     */
    public JsonNullable<Double> checkAmount() {
        return this.checkAmount;
    }

    /**
     * The net pay amount for the payroll.
     */
    public JsonNullable<Double> netPay() {
        return this.netPay;
    }

    /**
     * The gross pay amount for the payroll.
     */
    public JsonNullable<Double> grossPay() {
        return this.grossPay;
    }

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    public JsonNullable<Double> employerTaxes() {
        return this.employerTaxes;
    }

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    public JsonNullable<Double> employeeTaxes() {
        return this.employeeTaxes;
    }

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    public JsonNullable<Double> employerBenefitContributions() {
        return this.employerBenefitContributions;
    }

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    public JsonNullable<Double> employeeBenefitDeductions() {
        return this.employeeBenefitDeductions;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The total company debit for the payroll.
     */
    public PayrollTotals withCompanyDebit(@Nullable Double companyDebit) {
        this.companyDebit = JsonNullable.of(companyDebit);
        return this;
    }


    /**
     * The total tax debit for the payroll.
     */
    public PayrollTotals withTaxDebit(@Nullable Double taxDebit) {
        this.taxDebit = JsonNullable.of(taxDebit);
        return this;
    }


    /**
     * The total check amount for the payroll.
     */
    public PayrollTotals withCheckAmount(@Nullable Double checkAmount) {
        this.checkAmount = JsonNullable.of(checkAmount);
        return this;
    }


    /**
     * The net pay amount for the payroll.
     */
    public PayrollTotals withNetPay(@Nullable Double netPay) {
        this.netPay = JsonNullable.of(netPay);
        return this;
    }


    /**
     * The gross pay amount for the payroll.
     */
    public PayrollTotals withGrossPay(@Nullable Double grossPay) {
        this.grossPay = JsonNullable.of(grossPay);
        return this;
    }


    /**
     * The total amount of employer paid taxes for the payroll.
     */
    public PayrollTotals withEmployerTaxes(@Nullable Double employerTaxes) {
        this.employerTaxes = JsonNullable.of(employerTaxes);
        return this;
    }


    /**
     * The total amount of employee paid taxes for the payroll.
     */
    public PayrollTotals withEmployeeTaxes(@Nullable Double employeeTaxes) {
        this.employeeTaxes = JsonNullable.of(employeeTaxes);
        return this;
    }


    /**
     * The total amount of company contributed benefits for the payroll.
     */
    public PayrollTotals withEmployerBenefitContributions(@Nullable Double employerBenefitContributions) {
        this.employerBenefitContributions = JsonNullable.of(employerBenefitContributions);
        return this;
    }


    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    public PayrollTotals withEmployeeBenefitDeductions(@Nullable Double employeeBenefitDeductions) {
        this.employeeBenefitDeductions = JsonNullable.of(employeeBenefitDeductions);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollTotals other = (PayrollTotals) o;
        return 
            Utils.enhancedDeepEquals(this.companyDebit, other.companyDebit) &&
            Utils.enhancedDeepEquals(this.taxDebit, other.taxDebit) &&
            Utils.enhancedDeepEquals(this.checkAmount, other.checkAmount) &&
            Utils.enhancedDeepEquals(this.netPay, other.netPay) &&
            Utils.enhancedDeepEquals(this.grossPay, other.grossPay) &&
            Utils.enhancedDeepEquals(this.employerTaxes, other.employerTaxes) &&
            Utils.enhancedDeepEquals(this.employeeTaxes, other.employeeTaxes) &&
            Utils.enhancedDeepEquals(this.employerBenefitContributions, other.employerBenefitContributions) &&
            Utils.enhancedDeepEquals(this.employeeBenefitDeductions, other.employeeBenefitDeductions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            companyDebit, taxDebit, checkAmount,
            netPay, grossPay, employerTaxes,
            employeeTaxes, employerBenefitContributions, employeeBenefitDeductions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollTotals.class,
                "companyDebit", companyDebit,
                "taxDebit", taxDebit,
                "checkAmount", checkAmount,
                "netPay", netPay,
                "grossPay", grossPay,
                "employerTaxes", employerTaxes,
                "employeeTaxes", employeeTaxes,
                "employerBenefitContributions", employerBenefitContributions,
                "employeeBenefitDeductions", employeeBenefitDeductions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Double> companyDebit;

        private JsonNullable<Double> taxDebit;

        private JsonNullable<Double> checkAmount;

        private JsonNullable<Double> netPay;

        private JsonNullable<Double> grossPay;

        private JsonNullable<Double> employerTaxes;

        private JsonNullable<Double> employeeTaxes;

        private JsonNullable<Double> employerBenefitContributions;

        private JsonNullable<Double> employeeBenefitDeductions;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total company debit for the payroll.
         */
        public Builder companyDebit(@Nullable Double companyDebit) {
            this.companyDebit = JsonNullable.of(companyDebit);
            return this;
        }

        /**
         * The total tax debit for the payroll.
         */
        public Builder taxDebit(@Nullable Double taxDebit) {
            this.taxDebit = JsonNullable.of(taxDebit);
            return this;
        }

        /**
         * The total check amount for the payroll.
         */
        public Builder checkAmount(@Nullable Double checkAmount) {
            this.checkAmount = JsonNullable.of(checkAmount);
            return this;
        }

        /**
         * The net pay amount for the payroll.
         */
        public Builder netPay(@Nullable Double netPay) {
            this.netPay = JsonNullable.of(netPay);
            return this;
        }

        /**
         * The gross pay amount for the payroll.
         */
        public Builder grossPay(@Nullable Double grossPay) {
            this.grossPay = JsonNullable.of(grossPay);
            return this;
        }

        /**
         * The total amount of employer paid taxes for the payroll.
         */
        public Builder employerTaxes(@Nullable Double employerTaxes) {
            this.employerTaxes = JsonNullable.of(employerTaxes);
            return this;
        }

        /**
         * The total amount of employee paid taxes for the payroll.
         */
        public Builder employeeTaxes(@Nullable Double employeeTaxes) {
            this.employeeTaxes = JsonNullable.of(employeeTaxes);
            return this;
        }

        /**
         * The total amount of company contributed benefits for the payroll.
         */
        public Builder employerBenefitContributions(@Nullable Double employerBenefitContributions) {
            this.employerBenefitContributions = JsonNullable.of(employerBenefitContributions);
            return this;
        }

        /**
         * The total amount of employee deducted benefits for the payroll.
         */
        public Builder employeeBenefitDeductions(@Nullable Double employeeBenefitDeductions) {
            this.employeeBenefitDeductions = JsonNullable.of(employeeBenefitDeductions);
            return this;
        }

        public PayrollTotals build() {
            return new PayrollTotals(
                companyDebit, taxDebit, checkAmount,
                netPay, grossPay, employerTaxes,
                employeeTaxes, employerBenefitContributions, employeeBenefitDeductions);
        }

    }
}
