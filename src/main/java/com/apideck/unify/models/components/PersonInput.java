/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PersonInput {
    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The gender represents the gender identity of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<Gender> gender;

    /**
     * Initials of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<String> initials;

    /**
     * Date of birth
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<LocalDate> birthday;

    /**
     * Date of death
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deceased_on")
    private JsonNullable<LocalDate> deceasedOn;

    @JsonCreator
    public PersonInput(
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("gender") @Nullable JsonNullable<Gender> gender,
            @JsonProperty("initials") @Nullable JsonNullable<String> initials,
            @JsonProperty("birthday") @Nullable JsonNullable<LocalDate> birthday,
            @JsonProperty("deceased_on") @Nullable JsonNullable<LocalDate> deceasedOn) {
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.gender = Optional.ofNullable(gender)
            .orElse(JsonNullable.undefined());
        this.initials = Optional.ofNullable(initials)
            .orElse(JsonNullable.undefined());
        this.birthday = Optional.ofNullable(birthday)
            .orElse(JsonNullable.undefined());
        this.deceasedOn = Optional.ofNullable(deceasedOn)
            .orElse(JsonNullable.undefined());
    }
    
    public PersonInput() {
        this(null, null, null,
            null, null, null,
            null);
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The gender represents the gender identity of a person.
     */
    public JsonNullable<Gender> gender() {
        return this.gender;
    }

    /**
     * Initials of the person
     */
    public JsonNullable<String> initials() {
        return this.initials;
    }

    /**
     * Date of birth
     */
    public JsonNullable<LocalDate> birthday() {
        return this.birthday;
    }

    /**
     * Date of death
     */
    public JsonNullable<LocalDate> deceasedOn() {
        return this.deceasedOn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The first name of the person.
     */
    public PersonInput withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public PersonInput withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * Middle name of the person.
     */
    public PersonInput withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The gender represents the gender identity of a person.
     */
    public PersonInput withGender(@Nullable Gender gender) {
        this.gender = JsonNullable.of(gender);
        return this;
    }


    /**
     * Initials of the person
     */
    public PersonInput withInitials(@Nullable String initials) {
        this.initials = JsonNullable.of(initials);
        return this;
    }


    /**
     * Date of birth
     */
    public PersonInput withBirthday(@Nullable LocalDate birthday) {
        this.birthday = JsonNullable.of(birthday);
        return this;
    }


    /**
     * Date of death
     */
    public PersonInput withDeceasedOn(@Nullable LocalDate deceasedOn) {
        this.deceasedOn = JsonNullable.of(deceasedOn);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonInput other = (PersonInput) o;
        return 
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.initials, other.initials) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.deceasedOn, other.deceasedOn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            firstName, lastName, middleName,
            gender, initials, birthday,
            deceasedOn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PersonInput.class,
                "firstName", firstName,
                "lastName", lastName,
                "middleName", middleName,
                "gender", gender,
                "initials", initials,
                "birthday", birthday,
                "deceasedOn", deceasedOn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> middleName;

        private JsonNullable<Gender> gender;

        private JsonNullable<String> initials;

        private JsonNullable<LocalDate> birthday;

        private JsonNullable<LocalDate> deceasedOn;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The gender represents the gender identity of a person.
         */
        public Builder gender(@Nullable Gender gender) {
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * Initials of the person
         */
        public Builder initials(@Nullable String initials) {
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * Date of birth
         */
        public Builder birthday(@Nullable LocalDate birthday) {
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * Date of death
         */
        public Builder deceasedOn(@Nullable LocalDate deceasedOn) {
            this.deceasedOn = JsonNullable.of(deceasedOn);
            return this;
        }

        public PersonInput build() {
            return new PersonInput(
                firstName, lastName, middleName,
                gender, initials, birthday,
                deceasedOn);
        }

    }
}
