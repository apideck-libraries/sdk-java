/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PhoneNumber {
    /**
     * Unique identifier of the phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The country code of the phone number, e.g. +1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private JsonNullable<String> countryCode;

    /**
     * The area code of the phone number, e.g. 323
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("area_code")
    private JsonNullable<String> areaCode;

    /**
     * The phone number
     */
    @JsonProperty("number")
    private String number;

    /**
     * The extension of the phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    private JsonNullable<String> extension;

    /**
     * The type of phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<PhoneNumberType> type;

    @JsonCreator
    public PhoneNumber(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("country_code") @Nullable JsonNullable<String> countryCode,
            @JsonProperty("area_code") @Nullable JsonNullable<String> areaCode,
            @JsonProperty("number") @Nonnull String number,
            @JsonProperty("extension") @Nullable JsonNullable<String> extension,
            @JsonProperty("type") @Nullable JsonNullable<PhoneNumberType> type) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.countryCode = Optional.ofNullable(countryCode)
            .orElse(JsonNullable.undefined());
        this.areaCode = Optional.ofNullable(areaCode)
            .orElse(JsonNullable.undefined());
        this.number = Optional.ofNullable(number)
            .orElseThrow(() -> new IllegalArgumentException("number cannot be null"));
        this.extension = Optional.ofNullable(extension)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
    }
    
    public PhoneNumber(
            @Nonnull String number) {
        this(null, null, null,
            number, null, null);
    }

    /**
     * Unique identifier of the phone number
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The country code of the phone number, e.g. +1
     */
    public JsonNullable<String> countryCode() {
        return this.countryCode;
    }

    /**
     * The area code of the phone number, e.g. 323
     */
    public JsonNullable<String> areaCode() {
        return this.areaCode;
    }

    /**
     * The phone number
     */
    public String number() {
        return this.number;
    }

    /**
     * The extension of the phone number
     */
    public JsonNullable<String> extension() {
        return this.extension;
    }

    /**
     * The type of phone number
     */
    public JsonNullable<PhoneNumberType> type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier of the phone number
     */
    public PhoneNumber withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The country code of the phone number, e.g. +1
     */
    public PhoneNumber withCountryCode(@Nullable String countryCode) {
        this.countryCode = JsonNullable.of(countryCode);
        return this;
    }


    /**
     * The area code of the phone number, e.g. 323
     */
    public PhoneNumber withAreaCode(@Nullable String areaCode) {
        this.areaCode = JsonNullable.of(areaCode);
        return this;
    }


    /**
     * The phone number
     */
    public PhoneNumber withNumber(@Nonnull String number) {
        this.number = Utils.checkNotNull(number, "number");
        return this;
    }


    /**
     * The extension of the phone number
     */
    public PhoneNumber withExtension(@Nullable String extension) {
        this.extension = JsonNullable.of(extension);
        return this;
    }


    /**
     * The type of phone number
     */
    public PhoneNumber withType(@Nullable PhoneNumberType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PhoneNumber other = (PhoneNumber) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.areaCode, other.areaCode) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.extension, other.extension) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, countryCode, areaCode,
            number, extension, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PhoneNumber.class,
                "id", id,
                "countryCode", countryCode,
                "areaCode", areaCode,
                "number", number,
                "extension", extension,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> countryCode;

        private JsonNullable<String> areaCode;

        private String number;

        private JsonNullable<String> extension;

        private JsonNullable<PhoneNumberType> type;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the phone number
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The country code of the phone number, e.g. +1
         */
        public Builder countryCode(@Nullable String countryCode) {
            this.countryCode = JsonNullable.of(countryCode);
            return this;
        }

        /**
         * The area code of the phone number, e.g. 323
         */
        public Builder areaCode(@Nullable String areaCode) {
            this.areaCode = JsonNullable.of(areaCode);
            return this;
        }

        /**
         * The phone number
         */
        public Builder number(@Nonnull String number) {
            this.number = Utils.checkNotNull(number, "number");
            return this;
        }

        /**
         * The extension of the phone number
         */
        public Builder extension(@Nullable String extension) {
            this.extension = JsonNullable.of(extension);
            return this;
        }

        /**
         * The type of phone number
         */
        public Builder type(@Nullable PhoneNumberType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        public PhoneNumber build() {
            return new PhoneNumber(
                id, countryCode, areaCode,
                number, extension, type);
        }

    }
}
