/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PickupDetails {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accepted_at")
    private JsonNullable<OffsetDateTime> acceptedAt;

    /**
     * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_complete_duration")
    private JsonNullable<String> autoCompleteDuration;

    /**
     * A description of why the pickup was canceled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancel_reason")
    private JsonNullable<String> cancelReason;

    /**
     * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
     * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
     * placed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private Optional<OffsetDateTime> expiresAt;

    /**
     * The schedule type of the pickup fulfillment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule_type")
    private Optional<? extends ScheduleType> scheduleType;

    /**
     * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
     * "2016-09-04T23:59:33.123Z".
     * 
     * For fulfillments with the schedule type `ASAP`, this is automatically set
     * to the current time plus the expected duration to prepare the fulfillment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_at")
    private Optional<OffsetDateTime> pickupAt;

    /**
     * The window of time in which the order should be picked up after the `pickup_at` timestamp.
     * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
     * informational guideline for merchants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_window_duration")
    private Optional<String> pickupWindowDuration;

    /**
     * The duration of time it takes to prepare this fulfillment.
     * The duration must be in RFC 3339 format (for example, "P1W3D").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prep_time_duration")
    private Optional<String> prepTimeDuration;

    /**
     * A note meant to provide additional instructions about the pickup
     * fulfillment displayed in the Square Point of Sale application and set by the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private Optional<String> note;

    /**
     * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placed_at")
    private Optional<OffsetDateTime> placedAt;

    /**
     * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_at")
    private Optional<OffsetDateTime> rejectedAt;

    /**
     * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ready_at")
    private Optional<OffsetDateTime> readyAt;

    /**
     * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expired_at")
    private Optional<OffsetDateTime> expiredAt;

    /**
     * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("picked_up_at")
    private Optional<OffsetDateTime> pickedUpAt;

    /**
     * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_at")
    private Optional<OffsetDateTime> canceledAt;

    /**
     * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_curbside_pickup")
    private Optional<Boolean> isCurbsidePickup;

    /**
     * Specific details for curbside pickup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("curbside_pickup_details")
    private Optional<? extends CurbsidePickupDetails> curbsidePickupDetails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private Optional<? extends Recipient> recipient;

    @JsonCreator
    public PickupDetails(
            @JsonProperty("accepted_at") JsonNullable<OffsetDateTime> acceptedAt,
            @JsonProperty("auto_complete_duration") JsonNullable<String> autoCompleteDuration,
            @JsonProperty("cancel_reason") JsonNullable<String> cancelReason,
            @JsonProperty("expires_at") Optional<OffsetDateTime> expiresAt,
            @JsonProperty("schedule_type") Optional<? extends ScheduleType> scheduleType,
            @JsonProperty("pickup_at") Optional<OffsetDateTime> pickupAt,
            @JsonProperty("pickup_window_duration") Optional<String> pickupWindowDuration,
            @JsonProperty("prep_time_duration") Optional<String> prepTimeDuration,
            @JsonProperty("note") Optional<String> note,
            @JsonProperty("placed_at") Optional<OffsetDateTime> placedAt,
            @JsonProperty("rejected_at") Optional<OffsetDateTime> rejectedAt,
            @JsonProperty("ready_at") Optional<OffsetDateTime> readyAt,
            @JsonProperty("expired_at") Optional<OffsetDateTime> expiredAt,
            @JsonProperty("picked_up_at") Optional<OffsetDateTime> pickedUpAt,
            @JsonProperty("canceled_at") Optional<OffsetDateTime> canceledAt,
            @JsonProperty("is_curbside_pickup") Optional<Boolean> isCurbsidePickup,
            @JsonProperty("curbside_pickup_details") Optional<? extends CurbsidePickupDetails> curbsidePickupDetails,
            @JsonProperty("recipient") Optional<? extends Recipient> recipient) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        Utils.checkNotNull(autoCompleteDuration, "autoCompleteDuration");
        Utils.checkNotNull(cancelReason, "cancelReason");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(scheduleType, "scheduleType");
        Utils.checkNotNull(pickupAt, "pickupAt");
        Utils.checkNotNull(pickupWindowDuration, "pickupWindowDuration");
        Utils.checkNotNull(prepTimeDuration, "prepTimeDuration");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(placedAt, "placedAt");
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        Utils.checkNotNull(readyAt, "readyAt");
        Utils.checkNotNull(expiredAt, "expiredAt");
        Utils.checkNotNull(pickedUpAt, "pickedUpAt");
        Utils.checkNotNull(canceledAt, "canceledAt");
        Utils.checkNotNull(isCurbsidePickup, "isCurbsidePickup");
        Utils.checkNotNull(curbsidePickupDetails, "curbsidePickupDetails");
        Utils.checkNotNull(recipient, "recipient");
        this.acceptedAt = acceptedAt;
        this.autoCompleteDuration = autoCompleteDuration;
        this.cancelReason = cancelReason;
        this.expiresAt = expiresAt;
        this.scheduleType = scheduleType;
        this.pickupAt = pickupAt;
        this.pickupWindowDuration = pickupWindowDuration;
        this.prepTimeDuration = prepTimeDuration;
        this.note = note;
        this.placedAt = placedAt;
        this.rejectedAt = rejectedAt;
        this.readyAt = readyAt;
        this.expiredAt = expiredAt;
        this.pickedUpAt = pickedUpAt;
        this.canceledAt = canceledAt;
        this.isCurbsidePickup = isCurbsidePickup;
        this.curbsidePickupDetails = curbsidePickupDetails;
        this.recipient = recipient;
    }
    
    public PickupDetails() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> acceptedAt() {
        return acceptedAt;
    }

    /**
     * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
     */
    @JsonIgnore
    public JsonNullable<String> autoCompleteDuration() {
        return autoCompleteDuration;
    }

    /**
     * A description of why the pickup was canceled.
     */
    @JsonIgnore
    public JsonNullable<String> cancelReason() {
        return cancelReason;
    }

    /**
     * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
     * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
     * placed.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    /**
     * The schedule type of the pickup fulfillment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScheduleType> scheduleType() {
        return (Optional<ScheduleType>) scheduleType;
    }

    /**
     * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
     * "2016-09-04T23:59:33.123Z".
     * 
     * For fulfillments with the schedule type `ASAP`, this is automatically set
     * to the current time plus the expected duration to prepare the fulfillment.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> pickupAt() {
        return pickupAt;
    }

    /**
     * The window of time in which the order should be picked up after the `pickup_at` timestamp.
     * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
     * informational guideline for merchants.
     */
    @JsonIgnore
    public Optional<String> pickupWindowDuration() {
        return pickupWindowDuration;
    }

    /**
     * The duration of time it takes to prepare this fulfillment.
     * The duration must be in RFC 3339 format (for example, "P1W3D").
     */
    @JsonIgnore
    public Optional<String> prepTimeDuration() {
        return prepTimeDuration;
    }

    /**
     * A note meant to provide additional instructions about the pickup
     * fulfillment displayed in the Square Point of Sale application and set by the API.
     */
    @JsonIgnore
    public Optional<String> note() {
        return note;
    }

    /**
     * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> placedAt() {
        return placedAt;
    }

    /**
     * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> rejectedAt() {
        return rejectedAt;
    }

    /**
     * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> readyAt() {
        return readyAt;
    }

    /**
     * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> expiredAt() {
        return expiredAt;
    }

    /**
     * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> pickedUpAt() {
        return pickedUpAt;
    }

    /**
     * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    @JsonIgnore
    public Optional<OffsetDateTime> canceledAt() {
        return canceledAt;
    }

    /**
     * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
     */
    @JsonIgnore
    public Optional<Boolean> isCurbsidePickup() {
        return isCurbsidePickup;
    }

    /**
     * Specific details for curbside pickup.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CurbsidePickupDetails> curbsidePickupDetails() {
        return (Optional<CurbsidePickupDetails>) curbsidePickupDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Recipient> recipient() {
        return (Optional<Recipient>) recipient;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PickupDetails withAcceptedAt(OffsetDateTime acceptedAt) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        this.acceptedAt = JsonNullable.of(acceptedAt);
        return this;
    }

    public PickupDetails withAcceptedAt(JsonNullable<OffsetDateTime> acceptedAt) {
        Utils.checkNotNull(acceptedAt, "acceptedAt");
        this.acceptedAt = acceptedAt;
        return this;
    }

    /**
     * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
     */
    public PickupDetails withAutoCompleteDuration(String autoCompleteDuration) {
        Utils.checkNotNull(autoCompleteDuration, "autoCompleteDuration");
        this.autoCompleteDuration = JsonNullable.of(autoCompleteDuration);
        return this;
    }

    /**
     * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
     */
    public PickupDetails withAutoCompleteDuration(JsonNullable<String> autoCompleteDuration) {
        Utils.checkNotNull(autoCompleteDuration, "autoCompleteDuration");
        this.autoCompleteDuration = autoCompleteDuration;
        return this;
    }

    /**
     * A description of why the pickup was canceled.
     */
    public PickupDetails withCancelReason(String cancelReason) {
        Utils.checkNotNull(cancelReason, "cancelReason");
        this.cancelReason = JsonNullable.of(cancelReason);
        return this;
    }

    /**
     * A description of why the pickup was canceled.
     */
    public PickupDetails withCancelReason(JsonNullable<String> cancelReason) {
        Utils.checkNotNull(cancelReason, "cancelReason");
        this.cancelReason = cancelReason;
        return this;
    }

    /**
     * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
     * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
     * placed.
     */
    public PickupDetails withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }

    /**
     * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
     * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
     * placed.
     */
    public PickupDetails withExpiresAt(Optional<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * The schedule type of the pickup fulfillment.
     */
    public PickupDetails withScheduleType(ScheduleType scheduleType) {
        Utils.checkNotNull(scheduleType, "scheduleType");
        this.scheduleType = Optional.ofNullable(scheduleType);
        return this;
    }

    /**
     * The schedule type of the pickup fulfillment.
     */
    public PickupDetails withScheduleType(Optional<? extends ScheduleType> scheduleType) {
        Utils.checkNotNull(scheduleType, "scheduleType");
        this.scheduleType = scheduleType;
        return this;
    }

    /**
     * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
     * "2016-09-04T23:59:33.123Z".
     * 
     * For fulfillments with the schedule type `ASAP`, this is automatically set
     * to the current time plus the expected duration to prepare the fulfillment.
     */
    public PickupDetails withPickupAt(OffsetDateTime pickupAt) {
        Utils.checkNotNull(pickupAt, "pickupAt");
        this.pickupAt = Optional.ofNullable(pickupAt);
        return this;
    }

    /**
     * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
     * "2016-09-04T23:59:33.123Z".
     * 
     * For fulfillments with the schedule type `ASAP`, this is automatically set
     * to the current time plus the expected duration to prepare the fulfillment.
     */
    public PickupDetails withPickupAt(Optional<OffsetDateTime> pickupAt) {
        Utils.checkNotNull(pickupAt, "pickupAt");
        this.pickupAt = pickupAt;
        return this;
    }

    /**
     * The window of time in which the order should be picked up after the `pickup_at` timestamp.
     * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
     * informational guideline for merchants.
     */
    public PickupDetails withPickupWindowDuration(String pickupWindowDuration) {
        Utils.checkNotNull(pickupWindowDuration, "pickupWindowDuration");
        this.pickupWindowDuration = Optional.ofNullable(pickupWindowDuration);
        return this;
    }

    /**
     * The window of time in which the order should be picked up after the `pickup_at` timestamp.
     * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
     * informational guideline for merchants.
     */
    public PickupDetails withPickupWindowDuration(Optional<String> pickupWindowDuration) {
        Utils.checkNotNull(pickupWindowDuration, "pickupWindowDuration");
        this.pickupWindowDuration = pickupWindowDuration;
        return this;
    }

    /**
     * The duration of time it takes to prepare this fulfillment.
     * The duration must be in RFC 3339 format (for example, "P1W3D").
     */
    public PickupDetails withPrepTimeDuration(String prepTimeDuration) {
        Utils.checkNotNull(prepTimeDuration, "prepTimeDuration");
        this.prepTimeDuration = Optional.ofNullable(prepTimeDuration);
        return this;
    }

    /**
     * The duration of time it takes to prepare this fulfillment.
     * The duration must be in RFC 3339 format (for example, "P1W3D").
     */
    public PickupDetails withPrepTimeDuration(Optional<String> prepTimeDuration) {
        Utils.checkNotNull(prepTimeDuration, "prepTimeDuration");
        this.prepTimeDuration = prepTimeDuration;
        return this;
    }

    /**
     * A note meant to provide additional instructions about the pickup
     * fulfillment displayed in the Square Point of Sale application and set by the API.
     */
    public PickupDetails withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = Optional.ofNullable(note);
        return this;
    }

    /**
     * A note meant to provide additional instructions about the pickup
     * fulfillment displayed in the Square Point of Sale application and set by the API.
     */
    public PickupDetails withNote(Optional<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withPlacedAt(OffsetDateTime placedAt) {
        Utils.checkNotNull(placedAt, "placedAt");
        this.placedAt = Optional.ofNullable(placedAt);
        return this;
    }

    /**
     * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withPlacedAt(Optional<OffsetDateTime> placedAt) {
        Utils.checkNotNull(placedAt, "placedAt");
        this.placedAt = placedAt;
        return this;
    }

    /**
     * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withRejectedAt(OffsetDateTime rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = Optional.ofNullable(rejectedAt);
        return this;
    }

    /**
     * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withRejectedAt(Optional<OffsetDateTime> rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = rejectedAt;
        return this;
    }

    /**
     * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withReadyAt(OffsetDateTime readyAt) {
        Utils.checkNotNull(readyAt, "readyAt");
        this.readyAt = Optional.ofNullable(readyAt);
        return this;
    }

    /**
     * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withReadyAt(Optional<OffsetDateTime> readyAt) {
        Utils.checkNotNull(readyAt, "readyAt");
        this.readyAt = readyAt;
        return this;
    }

    /**
     * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withExpiredAt(OffsetDateTime expiredAt) {
        Utils.checkNotNull(expiredAt, "expiredAt");
        this.expiredAt = Optional.ofNullable(expiredAt);
        return this;
    }

    /**
     * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withExpiredAt(Optional<OffsetDateTime> expiredAt) {
        Utils.checkNotNull(expiredAt, "expiredAt");
        this.expiredAt = expiredAt;
        return this;
    }

    /**
     * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withPickedUpAt(OffsetDateTime pickedUpAt) {
        Utils.checkNotNull(pickedUpAt, "pickedUpAt");
        this.pickedUpAt = Optional.ofNullable(pickedUpAt);
        return this;
    }

    /**
     * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withPickedUpAt(Optional<OffsetDateTime> pickedUpAt) {
        Utils.checkNotNull(pickedUpAt, "pickedUpAt");
        this.pickedUpAt = pickedUpAt;
        return this;
    }

    /**
     * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withCanceledAt(OffsetDateTime canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = Optional.ofNullable(canceledAt);
        return this;
    }

    /**
     * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
     * (for example, "2016-09-04T23:59:33.123Z").
     */
    public PickupDetails withCanceledAt(Optional<OffsetDateTime> canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = canceledAt;
        return this;
    }

    /**
     * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
     */
    public PickupDetails withIsCurbsidePickup(boolean isCurbsidePickup) {
        Utils.checkNotNull(isCurbsidePickup, "isCurbsidePickup");
        this.isCurbsidePickup = Optional.ofNullable(isCurbsidePickup);
        return this;
    }

    /**
     * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
     */
    public PickupDetails withIsCurbsidePickup(Optional<Boolean> isCurbsidePickup) {
        Utils.checkNotNull(isCurbsidePickup, "isCurbsidePickup");
        this.isCurbsidePickup = isCurbsidePickup;
        return this;
    }

    /**
     * Specific details for curbside pickup.
     */
    public PickupDetails withCurbsidePickupDetails(CurbsidePickupDetails curbsidePickupDetails) {
        Utils.checkNotNull(curbsidePickupDetails, "curbsidePickupDetails");
        this.curbsidePickupDetails = Optional.ofNullable(curbsidePickupDetails);
        return this;
    }

    /**
     * Specific details for curbside pickup.
     */
    public PickupDetails withCurbsidePickupDetails(Optional<? extends CurbsidePickupDetails> curbsidePickupDetails) {
        Utils.checkNotNull(curbsidePickupDetails, "curbsidePickupDetails");
        this.curbsidePickupDetails = curbsidePickupDetails;
        return this;
    }

    public PickupDetails withRecipient(Recipient recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = Optional.ofNullable(recipient);
        return this;
    }

    public PickupDetails withRecipient(Optional<? extends Recipient> recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = recipient;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PickupDetails other = (PickupDetails) o;
        return 
            Objects.deepEquals(this.acceptedAt, other.acceptedAt) &&
            Objects.deepEquals(this.autoCompleteDuration, other.autoCompleteDuration) &&
            Objects.deepEquals(this.cancelReason, other.cancelReason) &&
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.scheduleType, other.scheduleType) &&
            Objects.deepEquals(this.pickupAt, other.pickupAt) &&
            Objects.deepEquals(this.pickupWindowDuration, other.pickupWindowDuration) &&
            Objects.deepEquals(this.prepTimeDuration, other.prepTimeDuration) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.placedAt, other.placedAt) &&
            Objects.deepEquals(this.rejectedAt, other.rejectedAt) &&
            Objects.deepEquals(this.readyAt, other.readyAt) &&
            Objects.deepEquals(this.expiredAt, other.expiredAt) &&
            Objects.deepEquals(this.pickedUpAt, other.pickedUpAt) &&
            Objects.deepEquals(this.canceledAt, other.canceledAt) &&
            Objects.deepEquals(this.isCurbsidePickup, other.isCurbsidePickup) &&
            Objects.deepEquals(this.curbsidePickupDetails, other.curbsidePickupDetails) &&
            Objects.deepEquals(this.recipient, other.recipient);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            acceptedAt,
            autoCompleteDuration,
            cancelReason,
            expiresAt,
            scheduleType,
            pickupAt,
            pickupWindowDuration,
            prepTimeDuration,
            note,
            placedAt,
            rejectedAt,
            readyAt,
            expiredAt,
            pickedUpAt,
            canceledAt,
            isCurbsidePickup,
            curbsidePickupDetails,
            recipient);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PickupDetails.class,
                "acceptedAt", acceptedAt,
                "autoCompleteDuration", autoCompleteDuration,
                "cancelReason", cancelReason,
                "expiresAt", expiresAt,
                "scheduleType", scheduleType,
                "pickupAt", pickupAt,
                "pickupWindowDuration", pickupWindowDuration,
                "prepTimeDuration", prepTimeDuration,
                "note", note,
                "placedAt", placedAt,
                "rejectedAt", rejectedAt,
                "readyAt", readyAt,
                "expiredAt", expiredAt,
                "pickedUpAt", pickedUpAt,
                "canceledAt", canceledAt,
                "isCurbsidePickup", isCurbsidePickup,
                "curbsidePickupDetails", curbsidePickupDetails,
                "recipient", recipient);
    }
    
    public final static class Builder {
 
        private JsonNullable<OffsetDateTime> acceptedAt = JsonNullable.undefined();
 
        private JsonNullable<String> autoCompleteDuration = JsonNullable.undefined();
 
        private JsonNullable<String> cancelReason = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> expiresAt = Optional.empty();
 
        private Optional<? extends ScheduleType> scheduleType = Optional.empty();
 
        private Optional<OffsetDateTime> pickupAt = Optional.empty();
 
        private Optional<String> pickupWindowDuration = Optional.empty();
 
        private Optional<String> prepTimeDuration = Optional.empty();
 
        private Optional<String> note = Optional.empty();
 
        private Optional<OffsetDateTime> placedAt = Optional.empty();
 
        private Optional<OffsetDateTime> rejectedAt = Optional.empty();
 
        private Optional<OffsetDateTime> readyAt = Optional.empty();
 
        private Optional<OffsetDateTime> expiredAt = Optional.empty();
 
        private Optional<OffsetDateTime> pickedUpAt = Optional.empty();
 
        private Optional<OffsetDateTime> canceledAt = Optional.empty();
 
        private Optional<Boolean> isCurbsidePickup = Optional.empty();
 
        private Optional<? extends CurbsidePickupDetails> curbsidePickupDetails = Optional.empty();
 
        private Optional<? extends Recipient> recipient = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder acceptedAt(OffsetDateTime acceptedAt) {
            Utils.checkNotNull(acceptedAt, "acceptedAt");
            this.acceptedAt = JsonNullable.of(acceptedAt);
            return this;
        }

        public Builder acceptedAt(JsonNullable<OffsetDateTime> acceptedAt) {
            Utils.checkNotNull(acceptedAt, "acceptedAt");
            this.acceptedAt = acceptedAt;
            return this;
        }

        /**
         * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
         */
        public Builder autoCompleteDuration(String autoCompleteDuration) {
            Utils.checkNotNull(autoCompleteDuration, "autoCompleteDuration");
            this.autoCompleteDuration = JsonNullable.of(autoCompleteDuration);
            return this;
        }

        /**
         * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
         */
        public Builder autoCompleteDuration(JsonNullable<String> autoCompleteDuration) {
            Utils.checkNotNull(autoCompleteDuration, "autoCompleteDuration");
            this.autoCompleteDuration = autoCompleteDuration;
            return this;
        }

        /**
         * A description of why the pickup was canceled.
         */
        public Builder cancelReason(String cancelReason) {
            Utils.checkNotNull(cancelReason, "cancelReason");
            this.cancelReason = JsonNullable.of(cancelReason);
            return this;
        }

        /**
         * A description of why the pickup was canceled.
         */
        public Builder cancelReason(JsonNullable<String> cancelReason) {
            Utils.checkNotNull(cancelReason, "cancelReason");
            this.cancelReason = cancelReason;
            return this;
        }

        /**
         * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
         * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
         * placed.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
         * If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
         * placed.
         */
        public Builder expiresAt(Optional<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The schedule type of the pickup fulfillment.
         */
        public Builder scheduleType(ScheduleType scheduleType) {
            Utils.checkNotNull(scheduleType, "scheduleType");
            this.scheduleType = Optional.ofNullable(scheduleType);
            return this;
        }

        /**
         * The schedule type of the pickup fulfillment.
         */
        public Builder scheduleType(Optional<? extends ScheduleType> scheduleType) {
            Utils.checkNotNull(scheduleType, "scheduleType");
            this.scheduleType = scheduleType;
            return this;
        }

        /**
         * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
         * "2016-09-04T23:59:33.123Z".
         * 
         * For fulfillments with the schedule type `ASAP`, this is automatically set
         * to the current time plus the expected duration to prepare the fulfillment.
         */
        public Builder pickupAt(OffsetDateTime pickupAt) {
            Utils.checkNotNull(pickupAt, "pickupAt");
            this.pickupAt = Optional.ofNullable(pickupAt);
            return this;
        }

        /**
         * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
         * "2016-09-04T23:59:33.123Z".
         * 
         * For fulfillments with the schedule type `ASAP`, this is automatically set
         * to the current time plus the expected duration to prepare the fulfillment.
         */
        public Builder pickupAt(Optional<OffsetDateTime> pickupAt) {
            Utils.checkNotNull(pickupAt, "pickupAt");
            this.pickupAt = pickupAt;
            return this;
        }

        /**
         * The window of time in which the order should be picked up after the `pickup_at` timestamp.
         * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
         * informational guideline for merchants.
         */
        public Builder pickupWindowDuration(String pickupWindowDuration) {
            Utils.checkNotNull(pickupWindowDuration, "pickupWindowDuration");
            this.pickupWindowDuration = Optional.ofNullable(pickupWindowDuration);
            return this;
        }

        /**
         * The window of time in which the order should be picked up after the `pickup_at` timestamp.
         * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
         * informational guideline for merchants.
         */
        public Builder pickupWindowDuration(Optional<String> pickupWindowDuration) {
            Utils.checkNotNull(pickupWindowDuration, "pickupWindowDuration");
            this.pickupWindowDuration = pickupWindowDuration;
            return this;
        }

        /**
         * The duration of time it takes to prepare this fulfillment.
         * The duration must be in RFC 3339 format (for example, "P1W3D").
         */
        public Builder prepTimeDuration(String prepTimeDuration) {
            Utils.checkNotNull(prepTimeDuration, "prepTimeDuration");
            this.prepTimeDuration = Optional.ofNullable(prepTimeDuration);
            return this;
        }

        /**
         * The duration of time it takes to prepare this fulfillment.
         * The duration must be in RFC 3339 format (for example, "P1W3D").
         */
        public Builder prepTimeDuration(Optional<String> prepTimeDuration) {
            Utils.checkNotNull(prepTimeDuration, "prepTimeDuration");
            this.prepTimeDuration = prepTimeDuration;
            return this;
        }

        /**
         * A note meant to provide additional instructions about the pickup
         * fulfillment displayed in the Square Point of Sale application and set by the API.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * A note meant to provide additional instructions about the pickup
         * fulfillment displayed in the Square Point of Sale application and set by the API.
         */
        public Builder note(Optional<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder placedAt(OffsetDateTime placedAt) {
            Utils.checkNotNull(placedAt, "placedAt");
            this.placedAt = Optional.ofNullable(placedAt);
            return this;
        }

        /**
         * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder placedAt(Optional<OffsetDateTime> placedAt) {
            Utils.checkNotNull(placedAt, "placedAt");
            this.placedAt = placedAt;
            return this;
        }

        /**
         * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder rejectedAt(OffsetDateTime rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = Optional.ofNullable(rejectedAt);
            return this;
        }

        /**
         * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder rejectedAt(Optional<OffsetDateTime> rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = rejectedAt;
            return this;
        }

        /**
         * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder readyAt(OffsetDateTime readyAt) {
            Utils.checkNotNull(readyAt, "readyAt");
            this.readyAt = Optional.ofNullable(readyAt);
            return this;
        }

        /**
         * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder readyAt(Optional<OffsetDateTime> readyAt) {
            Utils.checkNotNull(readyAt, "readyAt");
            this.readyAt = readyAt;
            return this;
        }

        /**
         * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder expiredAt(OffsetDateTime expiredAt) {
            Utils.checkNotNull(expiredAt, "expiredAt");
            this.expiredAt = Optional.ofNullable(expiredAt);
            return this;
        }

        /**
         * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder expiredAt(Optional<OffsetDateTime> expiredAt) {
            Utils.checkNotNull(expiredAt, "expiredAt");
            this.expiredAt = expiredAt;
            return this;
        }

        /**
         * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder pickedUpAt(OffsetDateTime pickedUpAt) {
            Utils.checkNotNull(pickedUpAt, "pickedUpAt");
            this.pickedUpAt = Optional.ofNullable(pickedUpAt);
            return this;
        }

        /**
         * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder pickedUpAt(Optional<OffsetDateTime> pickedUpAt) {
            Utils.checkNotNull(pickedUpAt, "pickedUpAt");
            this.pickedUpAt = pickedUpAt;
            return this;
        }

        /**
         * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder canceledAt(OffsetDateTime canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = Optional.ofNullable(canceledAt);
            return this;
        }

        /**
         * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
         * (for example, "2016-09-04T23:59:33.123Z").
         */
        public Builder canceledAt(Optional<OffsetDateTime> canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = canceledAt;
            return this;
        }

        /**
         * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
         */
        public Builder isCurbsidePickup(boolean isCurbsidePickup) {
            Utils.checkNotNull(isCurbsidePickup, "isCurbsidePickup");
            this.isCurbsidePickup = Optional.ofNullable(isCurbsidePickup);
            return this;
        }

        /**
         * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
         */
        public Builder isCurbsidePickup(Optional<Boolean> isCurbsidePickup) {
            Utils.checkNotNull(isCurbsidePickup, "isCurbsidePickup");
            this.isCurbsidePickup = isCurbsidePickup;
            return this;
        }

        /**
         * Specific details for curbside pickup.
         */
        public Builder curbsidePickupDetails(CurbsidePickupDetails curbsidePickupDetails) {
            Utils.checkNotNull(curbsidePickupDetails, "curbsidePickupDetails");
            this.curbsidePickupDetails = Optional.ofNullable(curbsidePickupDetails);
            return this;
        }

        /**
         * Specific details for curbside pickup.
         */
        public Builder curbsidePickupDetails(Optional<? extends CurbsidePickupDetails> curbsidePickupDetails) {
            Utils.checkNotNull(curbsidePickupDetails, "curbsidePickupDetails");
            this.curbsidePickupDetails = curbsidePickupDetails;
            return this;
        }

        public Builder recipient(Recipient recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = Optional.ofNullable(recipient);
            return this;
        }

        public Builder recipient(Optional<? extends Recipient> recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = recipient;
            return this;
        }
        
        public PickupDetails build() {
            return new PickupDetails(
                acceptedAt,
                autoCompleteDuration,
                cancelReason,
                expiresAt,
                scheduleType,
                pickupAt,
                pickupWindowDuration,
                prepTimeDuration,
                note,
                placedAt,
                rejectedAt,
                readyAt,
                expiredAt,
                pickedUpAt,
                canceledAt,
                isCurbsidePickup,
                curbsidePickupDetails,
                recipient);
        }
    }
}

