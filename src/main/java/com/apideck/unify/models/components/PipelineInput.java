/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PipelineInput {
    /**
     * The unique identifier of the Pipeline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of the Pipeline.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Whether the Pipeline is archived or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Boolean archived;

    /**
     * Whether the Pipeline is active or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Boolean active;

    /**
     * The order in which the Pipeline is displayed in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_order")
    private JsonNullable<Long> displayOrder;

    /**
     * Whether the Pipeline has win probability enabled or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability_enabled")
    private Boolean winProbabilityEnabled;

    /**
     * The Pipeline Stages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stages")
    private List<PipelineStages> stages;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public PipelineInput(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("archived") @Nullable Boolean archived,
            @JsonProperty("active") @Nullable Boolean active,
            @JsonProperty("display_order") @Nullable JsonNullable<Long> displayOrder,
            @JsonProperty("win_probability_enabled") @Nullable Boolean winProbabilityEnabled,
            @JsonProperty("stages") @Nullable List<PipelineStages> stages,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.archived = archived;
        this.active = active;
        this.displayOrder = Optional.ofNullable(displayOrder)
            .orElse(JsonNullable.undefined());
        this.winProbabilityEnabled = winProbabilityEnabled;
        this.stages = stages;
        this.passThrough = passThrough;
    }
    
    public PipelineInput(
            @Nonnull String name) {
        this(null, name, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The unique identifier of the Pipeline.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the Pipeline.
     */
    public String name() {
        return this.name;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Whether the Pipeline is archived or not.
     */
    public Optional<Boolean> archived() {
        return Optional.ofNullable(this.archived);
    }

    /**
     * Whether the Pipeline is active or not.
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * The order in which the Pipeline is displayed in the UI.
     */
    public JsonNullable<Long> displayOrder() {
        return this.displayOrder;
    }

    /**
     * Whether the Pipeline has win probability enabled or not.
     */
    public Optional<Boolean> winProbabilityEnabled() {
        return Optional.ofNullable(this.winProbabilityEnabled);
    }

    /**
     * The Pipeline Stages.
     */
    public Optional<List<PipelineStages>> stages() {
        return Optional.ofNullable(this.stages);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the Pipeline.
     */
    public PipelineInput withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of the Pipeline.
     */
    public PipelineInput withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PipelineInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Whether the Pipeline is archived or not.
     */
    public PipelineInput withArchived(@Nullable Boolean archived) {
        this.archived = archived;
        return this;
    }


    /**
     * Whether the Pipeline is active or not.
     */
    public PipelineInput withActive(@Nullable Boolean active) {
        this.active = active;
        return this;
    }


    /**
     * The order in which the Pipeline is displayed in the UI.
     */
    public PipelineInput withDisplayOrder(@Nullable Long displayOrder) {
        this.displayOrder = JsonNullable.of(displayOrder);
        return this;
    }


    /**
     * Whether the Pipeline has win probability enabled or not.
     */
    public PipelineInput withWinProbabilityEnabled(@Nullable Boolean winProbabilityEnabled) {
        this.winProbabilityEnabled = winProbabilityEnabled;
        return this;
    }


    /**
     * The Pipeline Stages.
     */
    public PipelineInput withStages(@Nullable List<PipelineStages> stages) {
        this.stages = stages;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PipelineInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PipelineInput other = (PipelineInput) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.displayOrder, other.displayOrder) &&
            Utils.enhancedDeepEquals(this.winProbabilityEnabled, other.winProbabilityEnabled) &&
            Utils.enhancedDeepEquals(this.stages, other.stages) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, currency,
            archived, active, displayOrder,
            winProbabilityEnabled, stages, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PipelineInput.class,
                "id", id,
                "name", name,
                "currency", currency,
                "archived", archived,
                "active", active,
                "displayOrder", displayOrder,
                "winProbabilityEnabled", winProbabilityEnabled,
                "stages", stages,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String name;

        private JsonNullable<Currency> currency;

        private Boolean archived;

        private Boolean active;

        private JsonNullable<Long> displayOrder;

        private Boolean winProbabilityEnabled;

        private List<PipelineStages> stages;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the Pipeline.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of the Pipeline.
         */
        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Whether the Pipeline is archived or not.
         */
        public Builder archived(@Nullable Boolean archived) {
            this.archived = archived;
            return this;
        }

        /**
         * Whether the Pipeline is active or not.
         */
        public Builder active(@Nullable Boolean active) {
            this.active = active;
            return this;
        }

        /**
         * The order in which the Pipeline is displayed in the UI.
         */
        public Builder displayOrder(@Nullable Long displayOrder) {
            this.displayOrder = JsonNullable.of(displayOrder);
            return this;
        }

        /**
         * Whether the Pipeline has win probability enabled or not.
         */
        public Builder winProbabilityEnabled(@Nullable Boolean winProbabilityEnabled) {
            this.winProbabilityEnabled = winProbabilityEnabled;
            return this;
        }

        /**
         * The Pipeline Stages.
         */
        public Builder stages(@Nullable List<PipelineStages> stages) {
            this.stages = stages;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public PipelineInput build() {
            return new PipelineInput(
                id, name, currency,
                archived, active, displayOrder,
                winProbabilityEnabled, stages, passThrough);
        }

    }
}
