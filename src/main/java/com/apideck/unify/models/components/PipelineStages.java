/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class PipelineStages {

    /**
     * The name of the Pipeline Stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The value of the Pipeline Stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability")
    private JsonNullable<Long> winProbability;

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_order")
    private JsonNullable<Long> displayOrder;

    @JsonCreator
    public PipelineStages(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("value") JsonNullable<String> value,
            @JsonProperty("win_probability") JsonNullable<Long> winProbability,
            @JsonProperty("display_order") JsonNullable<Long> displayOrder) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(winProbability, "winProbability");
        Utils.checkNotNull(displayOrder, "displayOrder");
        this.name = name;
        this.value = value;
        this.winProbability = winProbability;
        this.displayOrder = displayOrder;
    }
    
    public PipelineStages() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the Pipeline Stage.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The value of the Pipeline Stage.
     */
    @JsonIgnore
    public JsonNullable<String> value() {
        return value;
    }

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    @JsonIgnore
    public JsonNullable<Long> winProbability() {
        return winProbability;
    }

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    @JsonIgnore
    public JsonNullable<Long> displayOrder() {
        return displayOrder;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the Pipeline Stage.
     */
    public PipelineStages withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the Pipeline Stage.
     */
    public PipelineStages withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The value of the Pipeline Stage.
     */
    public PipelineStages withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    /**
     * The value of the Pipeline Stage.
     */
    public PipelineStages withValue(JsonNullable<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    public PipelineStages withWinProbability(long winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = JsonNullable.of(winProbability);
        return this;
    }

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    public PipelineStages withWinProbability(JsonNullable<Long> winProbability) {
        Utils.checkNotNull(winProbability, "winProbability");
        this.winProbability = winProbability;
        return this;
    }

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    public PipelineStages withDisplayOrder(long displayOrder) {
        Utils.checkNotNull(displayOrder, "displayOrder");
        this.displayOrder = JsonNullable.of(displayOrder);
        return this;
    }

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    public PipelineStages withDisplayOrder(JsonNullable<Long> displayOrder) {
        Utils.checkNotNull(displayOrder, "displayOrder");
        this.displayOrder = displayOrder;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PipelineStages other = (PipelineStages) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.winProbability, other.winProbability) &&
            Objects.deepEquals(this.displayOrder, other.displayOrder);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            value,
            winProbability,
            displayOrder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PipelineStages.class,
                "name", name,
                "value", value,
                "winProbability", winProbability,
                "displayOrder", displayOrder);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> value = JsonNullable.undefined();
 
        private JsonNullable<Long> winProbability = JsonNullable.undefined();
 
        private JsonNullable<Long> displayOrder = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the Pipeline Stage.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the Pipeline Stage.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The value of the Pipeline Stage.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * The value of the Pipeline Stage.
         */
        public Builder value(JsonNullable<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
         */
        public Builder winProbability(long winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = JsonNullable.of(winProbability);
            return this;
        }

        /**
         * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
         */
        public Builder winProbability(JsonNullable<Long> winProbability) {
            Utils.checkNotNull(winProbability, "winProbability");
            this.winProbability = winProbability;
            return this;
        }

        /**
         * The order in which the Pipeline Stage is displayed in the UI.
         */
        public Builder displayOrder(long displayOrder) {
            Utils.checkNotNull(displayOrder, "displayOrder");
            this.displayOrder = JsonNullable.of(displayOrder);
            return this;
        }

        /**
         * The order in which the Pipeline Stage is displayed in the UI.
         */
        public Builder displayOrder(JsonNullable<Long> displayOrder) {
            Utils.checkNotNull(displayOrder, "displayOrder");
            this.displayOrder = displayOrder;
            return this;
        }
        
        public PipelineStages build() {
            return new PipelineStages(
                name,
                value,
                winProbability,
                displayOrder);
        }
    }
}

