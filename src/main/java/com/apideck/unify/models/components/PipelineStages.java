/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PipelineStages {
    /**
     * The name of the Pipeline Stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The value of the Pipeline Stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("win_probability")
    private JsonNullable<Long> winProbability;

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_order")
    private JsonNullable<Long> displayOrder;

    @JsonCreator
    public PipelineStages(
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("value") @Nullable JsonNullable<String> value,
            @JsonProperty("win_probability") @Nullable JsonNullable<Long> winProbability,
            @JsonProperty("display_order") @Nullable JsonNullable<Long> displayOrder) {
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.value = Optional.ofNullable(value)
            .orElse(JsonNullable.undefined());
        this.winProbability = Optional.ofNullable(winProbability)
            .orElse(JsonNullable.undefined());
        this.displayOrder = Optional.ofNullable(displayOrder)
            .orElse(JsonNullable.undefined());
    }
    
    public PipelineStages() {
        this(null, null, null,
            null);
    }

    /**
     * The name of the Pipeline Stage.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The value of the Pipeline Stage.
     */
    public JsonNullable<String> value() {
        return this.value;
    }

    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    public JsonNullable<Long> winProbability() {
        return this.winProbability;
    }

    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    public JsonNullable<Long> displayOrder() {
        return this.displayOrder;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the Pipeline Stage.
     */
    public PipelineStages withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The value of the Pipeline Stage.
     */
    public PipelineStages withValue(@Nullable String value) {
        this.value = JsonNullable.of(value);
        return this;
    }


    /**
     * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
     */
    public PipelineStages withWinProbability(@Nullable Long winProbability) {
        this.winProbability = JsonNullable.of(winProbability);
        return this;
    }


    /**
     * The order in which the Pipeline Stage is displayed in the UI.
     */
    public PipelineStages withDisplayOrder(@Nullable Long displayOrder) {
        this.displayOrder = JsonNullable.of(displayOrder);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PipelineStages other = (PipelineStages) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.value, other.value) &&
            Utils.enhancedDeepEquals(this.winProbability, other.winProbability) &&
            Utils.enhancedDeepEquals(this.displayOrder, other.displayOrder);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, value, winProbability,
            displayOrder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PipelineStages.class,
                "name", name,
                "value", value,
                "winProbability", winProbability,
                "displayOrder", displayOrder);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> name;

        private JsonNullable<String> value;

        private JsonNullable<Long> winProbability;

        private JsonNullable<Long> displayOrder;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the Pipeline Stage.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The value of the Pipeline Stage.
         */
        public Builder value(@Nullable String value) {
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
         */
        public Builder winProbability(@Nullable Long winProbability) {
            this.winProbability = JsonNullable.of(winProbability);
            return this;
        }

        /**
         * The order in which the Pipeline Stage is displayed in the UI.
         */
        public Builder displayOrder(@Nullable Long displayOrder) {
            this.displayOrder = JsonNullable.of(displayOrder);
            return this;
        }

        public PipelineStages build() {
            return new PipelineStages(
                name, value, winProbability,
                displayOrder);
        }

    }
}
