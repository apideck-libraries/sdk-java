/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PosBankAccount - Card details for this payment. This field is currently not available. Reach out to our team for more info.
 */

public class PosBankAccount {

    /**
     * The name of the bank associated with the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    private Optional<String> bankName;

    /**
     * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_type")
    private Optional<String> transferType;

    /**
     * The ownership type of the bank account performing the transfer.
     * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_ownership_type")
    private Optional<String> accountOwnershipType;

    /**
     * Uniquely identifies the bank account for this seller and can be used
     * to determine if payments are from the same bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    private Optional<String> fingerprint;

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The statement description as sent to the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_description")
    private Optional<String> statementDescription;

    /**
     * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach_details")
    private Optional<? extends AchDetails> achDetails;

    @JsonCreator
    public PosBankAccount(
            @JsonProperty("bank_name") Optional<String> bankName,
            @JsonProperty("transfer_type") Optional<String> transferType,
            @JsonProperty("account_ownership_type") Optional<String> accountOwnershipType,
            @JsonProperty("fingerprint") Optional<String> fingerprint,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("statement_description") Optional<String> statementDescription,
            @JsonProperty("ach_details") Optional<? extends AchDetails> achDetails) {
        Utils.checkNotNull(bankName, "bankName");
        Utils.checkNotNull(transferType, "transferType");
        Utils.checkNotNull(accountOwnershipType, "accountOwnershipType");
        Utils.checkNotNull(fingerprint, "fingerprint");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(statementDescription, "statementDescription");
        Utils.checkNotNull(achDetails, "achDetails");
        this.bankName = bankName;
        this.transferType = transferType;
        this.accountOwnershipType = accountOwnershipType;
        this.fingerprint = fingerprint;
        this.country = country;
        this.statementDescription = statementDescription;
        this.achDetails = achDetails;
    }
    
    public PosBankAccount() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the bank associated with the bank account.
     */
    @JsonIgnore
    public Optional<String> bankName() {
        return bankName;
    }

    /**
     * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
     */
    @JsonIgnore
    public Optional<String> transferType() {
        return transferType;
    }

    /**
     * The ownership type of the bank account performing the transfer.
     * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
     */
    @JsonIgnore
    public Optional<String> accountOwnershipType() {
        return accountOwnershipType;
    }

    /**
     * Uniquely identifies the bank account for this seller and can be used
     * to determine if payments are from the same bank account.
     */
    @JsonIgnore
    public Optional<String> fingerprint() {
        return fingerprint;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The statement description as sent to the bank.
     */
    @JsonIgnore
    public Optional<String> statementDescription() {
        return statementDescription;
    }

    /**
     * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AchDetails> achDetails() {
        return (Optional<AchDetails>) achDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the bank associated with the bank account.
     */
    public PosBankAccount withBankName(String bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = Optional.ofNullable(bankName);
        return this;
    }

    /**
     * The name of the bank associated with the bank account.
     */
    public PosBankAccount withBankName(Optional<String> bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = bankName;
        return this;
    }

    /**
     * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
     */
    public PosBankAccount withTransferType(String transferType) {
        Utils.checkNotNull(transferType, "transferType");
        this.transferType = Optional.ofNullable(transferType);
        return this;
    }

    /**
     * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
     */
    public PosBankAccount withTransferType(Optional<String> transferType) {
        Utils.checkNotNull(transferType, "transferType");
        this.transferType = transferType;
        return this;
    }

    /**
     * The ownership type of the bank account performing the transfer.
     * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
     */
    public PosBankAccount withAccountOwnershipType(String accountOwnershipType) {
        Utils.checkNotNull(accountOwnershipType, "accountOwnershipType");
        this.accountOwnershipType = Optional.ofNullable(accountOwnershipType);
        return this;
    }

    /**
     * The ownership type of the bank account performing the transfer.
     * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
     */
    public PosBankAccount withAccountOwnershipType(Optional<String> accountOwnershipType) {
        Utils.checkNotNull(accountOwnershipType, "accountOwnershipType");
        this.accountOwnershipType = accountOwnershipType;
        return this;
    }

    /**
     * Uniquely identifies the bank account for this seller and can be used
     * to determine if payments are from the same bank account.
     */
    public PosBankAccount withFingerprint(String fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = Optional.ofNullable(fingerprint);
        return this;
    }

    /**
     * Uniquely identifies the bank account for this seller and can be used
     * to determine if payments are from the same bank account.
     */
    public PosBankAccount withFingerprint(Optional<String> fingerprint) {
        Utils.checkNotNull(fingerprint, "fingerprint");
        this.fingerprint = fingerprint;
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public PosBankAccount withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country code according to ISO 3166-1 alpha-2.
     */
    public PosBankAccount withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The statement description as sent to the bank.
     */
    public PosBankAccount withStatementDescription(String statementDescription) {
        Utils.checkNotNull(statementDescription, "statementDescription");
        this.statementDescription = Optional.ofNullable(statementDescription);
        return this;
    }

    /**
     * The statement description as sent to the bank.
     */
    public PosBankAccount withStatementDescription(Optional<String> statementDescription) {
        Utils.checkNotNull(statementDescription, "statementDescription");
        this.statementDescription = statementDescription;
        return this;
    }

    /**
     * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
     */
    public PosBankAccount withAchDetails(AchDetails achDetails) {
        Utils.checkNotNull(achDetails, "achDetails");
        this.achDetails = Optional.ofNullable(achDetails);
        return this;
    }

    /**
     * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
     */
    public PosBankAccount withAchDetails(Optional<? extends AchDetails> achDetails) {
        Utils.checkNotNull(achDetails, "achDetails");
        this.achDetails = achDetails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PosBankAccount other = (PosBankAccount) o;
        return 
            Objects.deepEquals(this.bankName, other.bankName) &&
            Objects.deepEquals(this.transferType, other.transferType) &&
            Objects.deepEquals(this.accountOwnershipType, other.accountOwnershipType) &&
            Objects.deepEquals(this.fingerprint, other.fingerprint) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.statementDescription, other.statementDescription) &&
            Objects.deepEquals(this.achDetails, other.achDetails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankName,
            transferType,
            accountOwnershipType,
            fingerprint,
            country,
            statementDescription,
            achDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PosBankAccount.class,
                "bankName", bankName,
                "transferType", transferType,
                "accountOwnershipType", accountOwnershipType,
                "fingerprint", fingerprint,
                "country", country,
                "statementDescription", statementDescription,
                "achDetails", achDetails);
    }
    
    public final static class Builder {
 
        private Optional<String> bankName = Optional.empty();
 
        private Optional<String> transferType = Optional.empty();
 
        private Optional<String> accountOwnershipType = Optional.empty();
 
        private Optional<String> fingerprint = Optional.empty();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private Optional<String> statementDescription = Optional.empty();
 
        private Optional<? extends AchDetails> achDetails = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the bank associated with the bank account.
         */
        public Builder bankName(String bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        /**
         * The name of the bank associated with the bank account.
         */
        public Builder bankName(Optional<String> bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = bankName;
            return this;
        }

        /**
         * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
         */
        public Builder transferType(String transferType) {
            Utils.checkNotNull(transferType, "transferType");
            this.transferType = Optional.ofNullable(transferType);
            return this;
        }

        /**
         * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
         */
        public Builder transferType(Optional<String> transferType) {
            Utils.checkNotNull(transferType, "transferType");
            this.transferType = transferType;
            return this;
        }

        /**
         * The ownership type of the bank account performing the transfer.
         * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
         */
        public Builder accountOwnershipType(String accountOwnershipType) {
            Utils.checkNotNull(accountOwnershipType, "accountOwnershipType");
            this.accountOwnershipType = Optional.ofNullable(accountOwnershipType);
            return this;
        }

        /**
         * The ownership type of the bank account performing the transfer.
         * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
         */
        public Builder accountOwnershipType(Optional<String> accountOwnershipType) {
            Utils.checkNotNull(accountOwnershipType, "accountOwnershipType");
            this.accountOwnershipType = accountOwnershipType;
            return this;
        }

        /**
         * Uniquely identifies the bank account for this seller and can be used
         * to determine if payments are from the same bank account.
         */
        public Builder fingerprint(String fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        /**
         * Uniquely identifies the bank account for this seller and can be used
         * to determine if payments are from the same bank account.
         */
        public Builder fingerprint(Optional<String> fingerprint) {
            Utils.checkNotNull(fingerprint, "fingerprint");
            this.fingerprint = fingerprint;
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The statement description as sent to the bank.
         */
        public Builder statementDescription(String statementDescription) {
            Utils.checkNotNull(statementDescription, "statementDescription");
            this.statementDescription = Optional.ofNullable(statementDescription);
            return this;
        }

        /**
         * The statement description as sent to the bank.
         */
        public Builder statementDescription(Optional<String> statementDescription) {
            Utils.checkNotNull(statementDescription, "statementDescription");
            this.statementDescription = statementDescription;
            return this;
        }

        /**
         * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
         */
        public Builder achDetails(AchDetails achDetails) {
            Utils.checkNotNull(achDetails, "achDetails");
            this.achDetails = Optional.ofNullable(achDetails);
            return this;
        }

        /**
         * ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
         */
        public Builder achDetails(Optional<? extends AchDetails> achDetails) {
            Utils.checkNotNull(achDetails, "achDetails");
            this.achDetails = achDetails;
            return this;
        }
        
        public PosBankAccount build() {
            return new PosBankAccount(
                bankName,
                transferType,
                accountOwnershipType,
                fingerprint,
                country,
                statementDescription,
                achDetails);
        }
    }
}

