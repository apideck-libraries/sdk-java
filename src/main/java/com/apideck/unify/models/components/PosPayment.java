/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PosPayment {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
     */
    @JsonProperty("source_id")
    private String sourceId;

    @JsonProperty("order_id")
    private String orderId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_id")
    private Optional<String> merchantId;

    @JsonProperty("customer_id")
    private String customerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private Optional<String> employeeId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private Optional<String> locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_id")
    private Optional<String> deviceId;

    @JsonProperty("tender_id")
    private String tenderId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_payment_id")
    private Optional<String> externalPaymentId;

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    private Optional<String> idempotencyKey;

    @JsonProperty("amount")
    private double amount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("currency")
    private Optional<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tip")
    private Optional<Double> tip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax")
    private Optional<Double> tax;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private Optional<Double> total;

    /**
     * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_fee")
    private Optional<Double> appFee;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("change_back_cash_amount")
    private Optional<Double> changeBackCashAmount;

    /**
     * The initial amount of money approved for this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved")
    private Optional<Double> approved;

    /**
     * The initial amount of money approved for this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded")
    private Optional<Double> refunded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_fees")
    private Optional<? extends List<ProcessingFees>> processingFees;

    /**
     * Source of this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends PosPaymentSource> source;

    /**
     * Status of this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PosPaymentStatusStatus> status;

    /**
     * Cash details for this payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash")
    private Optional<? extends CashDetails> cash;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_details")
    private Optional<? extends CardDetails> cardDetails;

    /**
     * Card details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private Optional<? extends PosBankAccount> bankAccount;

    /**
     * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wallet")
    private Optional<? extends WalletDetails> wallet;

    /**
     * Details about an external payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_details")
    private Optional<? extends ExternalDetails> externalDetails;

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charges")
    private Optional<? extends List<ServiceCharge>> serviceCharges;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public PosPayment(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("source_id") String sourceId,
            @JsonProperty("order_id") String orderId,
            @JsonProperty("merchant_id") Optional<String> merchantId,
            @JsonProperty("customer_id") String customerId,
            @JsonProperty("employee_id") Optional<String> employeeId,
            @JsonProperty("location_id") Optional<String> locationId,
            @JsonProperty("device_id") Optional<String> deviceId,
            @JsonProperty("tender_id") String tenderId,
            @JsonProperty("external_payment_id") Optional<String> externalPaymentId,
            @JsonProperty("idempotency_key") Optional<String> idempotencyKey,
            @JsonProperty("amount") double amount,
            @JsonProperty("currency") Optional<? extends Currency> currency,
            @JsonProperty("tip") Optional<Double> tip,
            @JsonProperty("tax") Optional<Double> tax,
            @JsonProperty("total") Optional<Double> total,
            @JsonProperty("app_fee") Optional<Double> appFee,
            @JsonProperty("change_back_cash_amount") Optional<Double> changeBackCashAmount,
            @JsonProperty("approved") Optional<Double> approved,
            @JsonProperty("refunded") Optional<Double> refunded,
            @JsonProperty("processing_fees") Optional<? extends List<ProcessingFees>> processingFees,
            @JsonProperty("source") Optional<? extends PosPaymentSource> source,
            @JsonProperty("status") Optional<? extends PosPaymentStatusStatus> status,
            @JsonProperty("cash") Optional<? extends CashDetails> cash,
            @JsonProperty("card_details") Optional<? extends CardDetails> cardDetails,
            @JsonProperty("bank_account") Optional<? extends PosBankAccount> bankAccount,
            @JsonProperty("wallet") Optional<? extends WalletDetails> wallet,
            @JsonProperty("external_details") Optional<? extends ExternalDetails> externalDetails,
            @JsonProperty("service_charges") Optional<? extends List<ServiceCharge>> serviceCharges,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("updated_by") JsonNullable<String> updatedBy,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(merchantId, "merchantId");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(tenderId, "tenderId");
        Utils.checkNotNull(externalPaymentId, "externalPaymentId");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(tip, "tip");
        Utils.checkNotNull(tax, "tax");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(appFee, "appFee");
        Utils.checkNotNull(changeBackCashAmount, "changeBackCashAmount");
        Utils.checkNotNull(approved, "approved");
        Utils.checkNotNull(refunded, "refunded");
        Utils.checkNotNull(processingFees, "processingFees");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(cash, "cash");
        Utils.checkNotNull(cardDetails, "cardDetails");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(wallet, "wallet");
        Utils.checkNotNull(externalDetails, "externalDetails");
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(passThrough, "passThrough");
        this.id = id;
        this.sourceId = sourceId;
        this.orderId = orderId;
        this.merchantId = merchantId;
        this.customerId = customerId;
        this.employeeId = employeeId;
        this.locationId = locationId;
        this.deviceId = deviceId;
        this.tenderId = tenderId;
        this.externalPaymentId = externalPaymentId;
        this.idempotencyKey = idempotencyKey;
        this.amount = amount;
        this.currency = currency;
        this.tip = tip;
        this.tax = tax;
        this.total = total;
        this.appFee = appFee;
        this.changeBackCashAmount = changeBackCashAmount;
        this.approved = approved;
        this.refunded = refunded;
        this.processingFees = processingFees;
        this.source = source;
        this.status = status;
        this.cash = cash;
        this.cardDetails = cardDetails;
        this.bankAccount = bankAccount;
        this.wallet = wallet;
        this.externalDetails = externalDetails;
        this.serviceCharges = serviceCharges;
        this.customMappings = customMappings;
        this.updatedBy = updatedBy;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.passThrough = passThrough;
    }
    
    public PosPayment(
            String sourceId,
            String orderId,
            String customerId,
            String tenderId,
            double amount) {
        this(Optional.empty(), sourceId, orderId, Optional.empty(), customerId, Optional.empty(), Optional.empty(), Optional.empty(), tenderId, Optional.empty(), Optional.empty(), amount, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
     */
    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    @JsonIgnore
    public String orderId() {
        return orderId;
    }

    @JsonIgnore
    public Optional<String> merchantId() {
        return merchantId;
    }

    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @JsonIgnore
    public Optional<String> employeeId() {
        return employeeId;
    }

    @JsonIgnore
    public Optional<String> locationId() {
        return locationId;
    }

    @JsonIgnore
    public Optional<String> deviceId() {
        return deviceId;
    }

    @JsonIgnore
    public String tenderId() {
        return tenderId;
    }

    @JsonIgnore
    public Optional<String> externalPaymentId() {
        return externalPaymentId;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public double amount() {
        return amount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Currency> currency() {
        return (Optional<Currency>) currency;
    }

    @JsonIgnore
    public Optional<Double> tip() {
        return tip;
    }

    @JsonIgnore
    public Optional<Double> tax() {
        return tax;
    }

    @JsonIgnore
    public Optional<Double> total() {
        return total;
    }

    /**
     * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
     */
    @JsonIgnore
    public Optional<Double> appFee() {
        return appFee;
    }

    @JsonIgnore
    public Optional<Double> changeBackCashAmount() {
        return changeBackCashAmount;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    @JsonIgnore
    public Optional<Double> approved() {
        return approved;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    @JsonIgnore
    public Optional<Double> refunded() {
        return refunded;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProcessingFees>> processingFees() {
        return (Optional<List<ProcessingFees>>) processingFees;
    }

    /**
     * Source of this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosPaymentSource> source() {
        return (Optional<PosPaymentSource>) source;
    }

    /**
     * Status of this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosPaymentStatusStatus> status() {
        return (Optional<PosPaymentStatusStatus>) status;
    }

    /**
     * Cash details for this payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CashDetails> cash() {
        return (Optional<CashDetails>) cash;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CardDetails> cardDetails() {
        return (Optional<CardDetails>) cardDetails;
    }

    /**
     * Card details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosBankAccount> bankAccount() {
        return (Optional<PosBankAccount>) bankAccount;
    }

    /**
     * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WalletDetails> wallet() {
        return (Optional<WalletDetails>) wallet;
    }

    /**
     * Details about an external payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalDetails> externalDetails() {
        return (Optional<ExternalDetails>) externalDetails;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ServiceCharge>> serviceCharges() {
        return (Optional<List<ServiceCharge>>) serviceCharges;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> updatedBy() {
        return updatedBy;
    }

    /**
     * The user who created the object.
     */
    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public PosPayment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public PosPayment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
     */
    public PosPayment withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public PosPayment withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    public PosPayment withMerchantId(String merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = Optional.ofNullable(merchantId);
        return this;
    }

    public PosPayment withMerchantId(Optional<String> merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = merchantId;
        return this;
    }

    public PosPayment withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public PosPayment withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = Optional.ofNullable(employeeId);
        return this;
    }

    public PosPayment withEmployeeId(Optional<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    public PosPayment withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = Optional.ofNullable(locationId);
        return this;
    }

    public PosPayment withLocationId(Optional<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public PosPayment withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = Optional.ofNullable(deviceId);
        return this;
    }

    public PosPayment withDeviceId(Optional<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    public PosPayment withTenderId(String tenderId) {
        Utils.checkNotNull(tenderId, "tenderId");
        this.tenderId = tenderId;
        return this;
    }

    public PosPayment withExternalPaymentId(String externalPaymentId) {
        Utils.checkNotNull(externalPaymentId, "externalPaymentId");
        this.externalPaymentId = Optional.ofNullable(externalPaymentId);
        return this;
    }

    public PosPayment withExternalPaymentId(Optional<String> externalPaymentId) {
        Utils.checkNotNull(externalPaymentId, "externalPaymentId");
        this.externalPaymentId = externalPaymentId;
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public PosPayment withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A value you specify that uniquely identifies this request among requests you have sent.
     */
    public PosPayment withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public PosPayment withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PosPayment withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PosPayment withCurrency(Optional<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public PosPayment withTip(double tip) {
        Utils.checkNotNull(tip, "tip");
        this.tip = Optional.ofNullable(tip);
        return this;
    }

    public PosPayment withTip(Optional<Double> tip) {
        Utils.checkNotNull(tip, "tip");
        this.tip = tip;
        return this;
    }

    public PosPayment withTax(double tax) {
        Utils.checkNotNull(tax, "tax");
        this.tax = Optional.ofNullable(tax);
        return this;
    }

    public PosPayment withTax(Optional<Double> tax) {
        Utils.checkNotNull(tax, "tax");
        this.tax = tax;
        return this;
    }

    public PosPayment withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }

    public PosPayment withTotal(Optional<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
     */
    public PosPayment withAppFee(double appFee) {
        Utils.checkNotNull(appFee, "appFee");
        this.appFee = Optional.ofNullable(appFee);
        return this;
    }

    /**
     * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
     */
    public PosPayment withAppFee(Optional<Double> appFee) {
        Utils.checkNotNull(appFee, "appFee");
        this.appFee = appFee;
        return this;
    }

    public PosPayment withChangeBackCashAmount(double changeBackCashAmount) {
        Utils.checkNotNull(changeBackCashAmount, "changeBackCashAmount");
        this.changeBackCashAmount = Optional.ofNullable(changeBackCashAmount);
        return this;
    }

    public PosPayment withChangeBackCashAmount(Optional<Double> changeBackCashAmount) {
        Utils.checkNotNull(changeBackCashAmount, "changeBackCashAmount");
        this.changeBackCashAmount = changeBackCashAmount;
        return this;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    public PosPayment withApproved(double approved) {
        Utils.checkNotNull(approved, "approved");
        this.approved = Optional.ofNullable(approved);
        return this;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    public PosPayment withApproved(Optional<Double> approved) {
        Utils.checkNotNull(approved, "approved");
        this.approved = approved;
        return this;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    public PosPayment withRefunded(double refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = Optional.ofNullable(refunded);
        return this;
    }

    /**
     * The initial amount of money approved for this payment.
     */
    public PosPayment withRefunded(Optional<Double> refunded) {
        Utils.checkNotNull(refunded, "refunded");
        this.refunded = refunded;
        return this;
    }

    public PosPayment withProcessingFees(List<ProcessingFees> processingFees) {
        Utils.checkNotNull(processingFees, "processingFees");
        this.processingFees = Optional.ofNullable(processingFees);
        return this;
    }

    public PosPayment withProcessingFees(Optional<? extends List<ProcessingFees>> processingFees) {
        Utils.checkNotNull(processingFees, "processingFees");
        this.processingFees = processingFees;
        return this;
    }

    /**
     * Source of this payment.
     */
    public PosPayment withSource(PosPaymentSource source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * Source of this payment.
     */
    public PosPayment withSource(Optional<? extends PosPaymentSource> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * Status of this payment.
     */
    public PosPayment withStatus(PosPaymentStatusStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of this payment.
     */
    public PosPayment withStatus(Optional<? extends PosPaymentStatusStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Cash details for this payment
     */
    public PosPayment withCash(CashDetails cash) {
        Utils.checkNotNull(cash, "cash");
        this.cash = Optional.ofNullable(cash);
        return this;
    }

    /**
     * Cash details for this payment
     */
    public PosPayment withCash(Optional<? extends CashDetails> cash) {
        Utils.checkNotNull(cash, "cash");
        this.cash = cash;
        return this;
    }

    public PosPayment withCardDetails(CardDetails cardDetails) {
        Utils.checkNotNull(cardDetails, "cardDetails");
        this.cardDetails = Optional.ofNullable(cardDetails);
        return this;
    }

    public PosPayment withCardDetails(Optional<? extends CardDetails> cardDetails) {
        Utils.checkNotNull(cardDetails, "cardDetails");
        this.cardDetails = cardDetails;
        return this;
    }

    /**
     * Card details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    public PosPayment withBankAccount(PosBankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }

    /**
     * Card details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    public PosPayment withBankAccount(Optional<? extends PosBankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    public PosPayment withWallet(WalletDetails wallet) {
        Utils.checkNotNull(wallet, "wallet");
        this.wallet = Optional.ofNullable(wallet);
        return this;
    }

    /**
     * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
     */
    public PosPayment withWallet(Optional<? extends WalletDetails> wallet) {
        Utils.checkNotNull(wallet, "wallet");
        this.wallet = wallet;
        return this;
    }

    /**
     * Details about an external payment.
     */
    public PosPayment withExternalDetails(ExternalDetails externalDetails) {
        Utils.checkNotNull(externalDetails, "externalDetails");
        this.externalDetails = Optional.ofNullable(externalDetails);
        return this;
    }

    /**
     * Details about an external payment.
     */
    public PosPayment withExternalDetails(Optional<? extends ExternalDetails> externalDetails) {
        Utils.checkNotNull(externalDetails, "externalDetails");
        this.externalDetails = externalDetails;
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public PosPayment withServiceCharges(List<ServiceCharge> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = Optional.ofNullable(serviceCharges);
        return this;
    }

    /**
     * Optional service charges or gratuity tip applied to the order.
     */
    public PosPayment withServiceCharges(Optional<? extends List<ServiceCharge>> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = serviceCharges;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public PosPayment withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public PosPayment withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public PosPayment withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public PosPayment withUpdatedBy(JsonNullable<String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * The user who created the object.
     */
    public PosPayment withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public PosPayment withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public PosPayment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public PosPayment withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public PosPayment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public PosPayment withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PosPayment withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PosPayment withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PosPayment other = (PosPayment) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.merchantId, other.merchantId) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.employeeId, other.employeeId) &&
            Objects.deepEquals(this.locationId, other.locationId) &&
            Objects.deepEquals(this.deviceId, other.deviceId) &&
            Objects.deepEquals(this.tenderId, other.tenderId) &&
            Objects.deepEquals(this.externalPaymentId, other.externalPaymentId) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.tip, other.tip) &&
            Objects.deepEquals(this.tax, other.tax) &&
            Objects.deepEquals(this.total, other.total) &&
            Objects.deepEquals(this.appFee, other.appFee) &&
            Objects.deepEquals(this.changeBackCashAmount, other.changeBackCashAmount) &&
            Objects.deepEquals(this.approved, other.approved) &&
            Objects.deepEquals(this.refunded, other.refunded) &&
            Objects.deepEquals(this.processingFees, other.processingFees) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.cash, other.cash) &&
            Objects.deepEquals(this.cardDetails, other.cardDetails) &&
            Objects.deepEquals(this.bankAccount, other.bankAccount) &&
            Objects.deepEquals(this.wallet, other.wallet) &&
            Objects.deepEquals(this.externalDetails, other.externalDetails) &&
            Objects.deepEquals(this.serviceCharges, other.serviceCharges) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            sourceId,
            orderId,
            merchantId,
            customerId,
            employeeId,
            locationId,
            deviceId,
            tenderId,
            externalPaymentId,
            idempotencyKey,
            amount,
            currency,
            tip,
            tax,
            total,
            appFee,
            changeBackCashAmount,
            approved,
            refunded,
            processingFees,
            source,
            status,
            cash,
            cardDetails,
            bankAccount,
            wallet,
            externalDetails,
            serviceCharges,
            customMappings,
            updatedBy,
            createdBy,
            updatedAt,
            createdAt,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PosPayment.class,
                "id", id,
                "sourceId", sourceId,
                "orderId", orderId,
                "merchantId", merchantId,
                "customerId", customerId,
                "employeeId", employeeId,
                "locationId", locationId,
                "deviceId", deviceId,
                "tenderId", tenderId,
                "externalPaymentId", externalPaymentId,
                "idempotencyKey", idempotencyKey,
                "amount", amount,
                "currency", currency,
                "tip", tip,
                "tax", tax,
                "total", total,
                "appFee", appFee,
                "changeBackCashAmount", changeBackCashAmount,
                "approved", approved,
                "refunded", refunded,
                "processingFees", processingFees,
                "source", source,
                "status", status,
                "cash", cash,
                "cardDetails", cardDetails,
                "bankAccount", bankAccount,
                "wallet", wallet,
                "externalDetails", externalDetails,
                "serviceCharges", serviceCharges,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String sourceId;
 
        private String orderId;
 
        private Optional<String> merchantId = Optional.empty();
 
        private String customerId;
 
        private Optional<String> employeeId = Optional.empty();
 
        private Optional<String> locationId = Optional.empty();
 
        private Optional<String> deviceId = Optional.empty();
 
        private String tenderId;
 
        private Optional<String> externalPaymentId = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private Double amount;
 
        private Optional<? extends Currency> currency = Optional.empty();
 
        private Optional<Double> tip = Optional.empty();
 
        private Optional<Double> tax = Optional.empty();
 
        private Optional<Double> total = Optional.empty();
 
        private Optional<Double> appFee = Optional.empty();
 
        private Optional<Double> changeBackCashAmount = Optional.empty();
 
        private Optional<Double> approved = Optional.empty();
 
        private Optional<Double> refunded = Optional.empty();
 
        private Optional<? extends List<ProcessingFees>> processingFees = Optional.empty();
 
        private Optional<? extends PosPaymentSource> source = Optional.empty();
 
        private Optional<? extends PosPaymentStatusStatus> status = Optional.empty();
 
        private Optional<? extends CashDetails> cash = Optional.empty();
 
        private Optional<? extends CardDetails> cardDetails = Optional.empty();
 
        private Optional<? extends PosBankAccount> bankAccount = Optional.empty();
 
        private Optional<? extends WalletDetails> wallet = Optional.empty();
 
        private Optional<? extends ExternalDetails> externalDetails = Optional.empty();
 
        private Optional<? extends List<ServiceCharge>> serviceCharges = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private JsonNullable<String> updatedBy = JsonNullable.undefined();
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Optional<String> merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = merchantId;
            return this;
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        public Builder employeeId(Optional<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }

        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Optional<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        public Builder deviceId(Optional<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }

        public Builder tenderId(String tenderId) {
            Utils.checkNotNull(tenderId, "tenderId");
            this.tenderId = tenderId;
            return this;
        }

        public Builder externalPaymentId(String externalPaymentId) {
            Utils.checkNotNull(externalPaymentId, "externalPaymentId");
            this.externalPaymentId = Optional.ofNullable(externalPaymentId);
            return this;
        }

        public Builder externalPaymentId(Optional<String> externalPaymentId) {
            Utils.checkNotNull(externalPaymentId, "externalPaymentId");
            this.externalPaymentId = externalPaymentId;
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A value you specify that uniquely identifies this request among requests you have sent.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Optional<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder tip(double tip) {
            Utils.checkNotNull(tip, "tip");
            this.tip = Optional.ofNullable(tip);
            return this;
        }

        public Builder tip(Optional<Double> tip) {
            Utils.checkNotNull(tip, "tip");
            this.tip = tip;
            return this;
        }

        public Builder tax(double tax) {
            Utils.checkNotNull(tax, "tax");
            this.tax = Optional.ofNullable(tax);
            return this;
        }

        public Builder tax(Optional<Double> tax) {
            Utils.checkNotNull(tax, "tax");
            this.tax = tax;
            return this;
        }

        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        public Builder total(Optional<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        /**
         * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
         */
        public Builder appFee(double appFee) {
            Utils.checkNotNull(appFee, "appFee");
            this.appFee = Optional.ofNullable(appFee);
            return this;
        }

        /**
         * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
         */
        public Builder appFee(Optional<Double> appFee) {
            Utils.checkNotNull(appFee, "appFee");
            this.appFee = appFee;
            return this;
        }

        public Builder changeBackCashAmount(double changeBackCashAmount) {
            Utils.checkNotNull(changeBackCashAmount, "changeBackCashAmount");
            this.changeBackCashAmount = Optional.ofNullable(changeBackCashAmount);
            return this;
        }

        public Builder changeBackCashAmount(Optional<Double> changeBackCashAmount) {
            Utils.checkNotNull(changeBackCashAmount, "changeBackCashAmount");
            this.changeBackCashAmount = changeBackCashAmount;
            return this;
        }

        /**
         * The initial amount of money approved for this payment.
         */
        public Builder approved(double approved) {
            Utils.checkNotNull(approved, "approved");
            this.approved = Optional.ofNullable(approved);
            return this;
        }

        /**
         * The initial amount of money approved for this payment.
         */
        public Builder approved(Optional<Double> approved) {
            Utils.checkNotNull(approved, "approved");
            this.approved = approved;
            return this;
        }

        /**
         * The initial amount of money approved for this payment.
         */
        public Builder refunded(double refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = Optional.ofNullable(refunded);
            return this;
        }

        /**
         * The initial amount of money approved for this payment.
         */
        public Builder refunded(Optional<Double> refunded) {
            Utils.checkNotNull(refunded, "refunded");
            this.refunded = refunded;
            return this;
        }

        public Builder processingFees(List<ProcessingFees> processingFees) {
            Utils.checkNotNull(processingFees, "processingFees");
            this.processingFees = Optional.ofNullable(processingFees);
            return this;
        }

        public Builder processingFees(Optional<? extends List<ProcessingFees>> processingFees) {
            Utils.checkNotNull(processingFees, "processingFees");
            this.processingFees = processingFees;
            return this;
        }

        /**
         * Source of this payment.
         */
        public Builder source(PosPaymentSource source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * Source of this payment.
         */
        public Builder source(Optional<? extends PosPaymentSource> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * Status of this payment.
         */
        public Builder status(PosPaymentStatusStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of this payment.
         */
        public Builder status(Optional<? extends PosPaymentStatusStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Cash details for this payment
         */
        public Builder cash(CashDetails cash) {
            Utils.checkNotNull(cash, "cash");
            this.cash = Optional.ofNullable(cash);
            return this;
        }

        /**
         * Cash details for this payment
         */
        public Builder cash(Optional<? extends CashDetails> cash) {
            Utils.checkNotNull(cash, "cash");
            this.cash = cash;
            return this;
        }

        public Builder cardDetails(CardDetails cardDetails) {
            Utils.checkNotNull(cardDetails, "cardDetails");
            this.cardDetails = Optional.ofNullable(cardDetails);
            return this;
        }

        public Builder cardDetails(Optional<? extends CardDetails> cardDetails) {
            Utils.checkNotNull(cardDetails, "cardDetails");
            this.cardDetails = cardDetails;
            return this;
        }

        /**
         * Card details for this payment. This field is currently not available. Reach out to our team for more info.
         */
        public Builder bankAccount(PosBankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        /**
         * Card details for this payment. This field is currently not available. Reach out to our team for more info.
         */
        public Builder bankAccount(Optional<? extends PosBankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
         */
        public Builder wallet(WalletDetails wallet) {
            Utils.checkNotNull(wallet, "wallet");
            this.wallet = Optional.ofNullable(wallet);
            return this;
        }

        /**
         * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
         */
        public Builder wallet(Optional<? extends WalletDetails> wallet) {
            Utils.checkNotNull(wallet, "wallet");
            this.wallet = wallet;
            return this;
        }

        /**
         * Details about an external payment.
         */
        public Builder externalDetails(ExternalDetails externalDetails) {
            Utils.checkNotNull(externalDetails, "externalDetails");
            this.externalDetails = Optional.ofNullable(externalDetails);
            return this;
        }

        /**
         * Details about an external payment.
         */
        public Builder externalDetails(Optional<? extends ExternalDetails> externalDetails) {
            Utils.checkNotNull(externalDetails, "externalDetails");
            this.externalDetails = externalDetails;
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(List<ServiceCharge> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }

        /**
         * Optional service charges or gratuity tip applied to the order.
         */
        public Builder serviceCharges(Optional<? extends List<ServiceCharge>> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = serviceCharges;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public PosPayment build() {
            return new PosPayment(
                id,
                sourceId,
                orderId,
                merchantId,
                customerId,
                employeeId,
                locationId,
                deviceId,
                tenderId,
                externalPaymentId,
                idempotencyKey,
                amount,
                currency,
                tip,
                tax,
                total,
                appFee,
                changeBackCashAmount,
                approved,
                refunded,
                processingFees,
                source,
                status,
                cash,
                cardDetails,
                bankAccount,
                wallet,
                externalDetails,
                serviceCharges,
                customMappings,
                updatedBy,
                createdBy,
                updatedAt,
                createdAt,
                passThrough);
        }
    }
}

