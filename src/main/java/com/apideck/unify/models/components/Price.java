/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Price
 * 
 * <p>Price of the message.
 */
public class Price {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("per_unit")
    private String perUnit;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private String totalAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    @JsonCreator
    public Price(
            @JsonProperty("per_unit") @Nullable String perUnit,
            @JsonProperty("total_amount") @Nullable String totalAmount,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency) {
        this.perUnit = perUnit;
        this.totalAmount = totalAmount;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
    }
    
    public Price() {
        this(null, null, null);
    }

    public Optional<String> perUnit() {
        return Optional.ofNullable(this.perUnit);
    }

    public Optional<String> totalAmount() {
        return Optional.ofNullable(this.totalAmount);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Price withPerUnit(@Nullable String perUnit) {
        this.perUnit = perUnit;
        return this;
    }


    public Price withTotalAmount(@Nullable String totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Price withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Price other = (Price) o;
        return 
            Utils.enhancedDeepEquals(this.perUnit, other.perUnit) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.currency, other.currency);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            perUnit, totalAmount, currency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Price.class,
                "perUnit", perUnit,
                "totalAmount", totalAmount,
                "currency", currency);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String perUnit;

        private String totalAmount;

        private JsonNullable<Currency> currency;

        private Builder() {
          // force use of static builder() method
        }

        public Builder perUnit(@Nullable String perUnit) {
            this.perUnit = perUnit;
            return this;
        }

        public Builder totalAmount(@Nullable String totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Price build() {
            return new Price(
                perUnit, totalAmount, currency);
        }

    }
}
