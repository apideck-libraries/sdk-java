/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class ProcessingFees {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_at")
    private Optional<OffsetDateTime> effectiveAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_type")
    private Optional<? extends PosPaymentProcessingFeesType> processingType;

    @JsonCreator
    public ProcessingFees(
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("effective_at") Optional<OffsetDateTime> effectiveAt,
            @JsonProperty("processing_type") Optional<? extends PosPaymentProcessingFeesType> processingType) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(effectiveAt, "effectiveAt");
        Utils.checkNotNull(processingType, "processingType");
        this.amount = amount;
        this.effectiveAt = effectiveAt;
        this.processingType = processingType;
    }
    
    public ProcessingFees() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> effectiveAt() {
        return effectiveAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PosPaymentProcessingFeesType> processingType() {
        return (Optional<PosPaymentProcessingFeesType>) processingType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProcessingFees withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public ProcessingFees withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public ProcessingFees withEffectiveAt(OffsetDateTime effectiveAt) {
        Utils.checkNotNull(effectiveAt, "effectiveAt");
        this.effectiveAt = Optional.ofNullable(effectiveAt);
        return this;
    }

    public ProcessingFees withEffectiveAt(Optional<OffsetDateTime> effectiveAt) {
        Utils.checkNotNull(effectiveAt, "effectiveAt");
        this.effectiveAt = effectiveAt;
        return this;
    }

    public ProcessingFees withProcessingType(PosPaymentProcessingFeesType processingType) {
        Utils.checkNotNull(processingType, "processingType");
        this.processingType = Optional.ofNullable(processingType);
        return this;
    }

    public ProcessingFees withProcessingType(Optional<? extends PosPaymentProcessingFeesType> processingType) {
        Utils.checkNotNull(processingType, "processingType");
        this.processingType = processingType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessingFees other = (ProcessingFees) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.effectiveAt, other.effectiveAt) &&
            Objects.deepEquals(this.processingType, other.processingType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            effectiveAt,
            processingType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProcessingFees.class,
                "amount", amount,
                "effectiveAt", effectiveAt,
                "processingType", processingType);
    }
    
    public final static class Builder {
 
        private Optional<Double> amount = Optional.empty();
 
        private Optional<OffsetDateTime> effectiveAt = Optional.empty();
 
        private Optional<? extends PosPaymentProcessingFeesType> processingType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder effectiveAt(OffsetDateTime effectiveAt) {
            Utils.checkNotNull(effectiveAt, "effectiveAt");
            this.effectiveAt = Optional.ofNullable(effectiveAt);
            return this;
        }

        public Builder effectiveAt(Optional<OffsetDateTime> effectiveAt) {
            Utils.checkNotNull(effectiveAt, "effectiveAt");
            this.effectiveAt = effectiveAt;
            return this;
        }

        public Builder processingType(PosPaymentProcessingFeesType processingType) {
            Utils.checkNotNull(processingType, "processingType");
            this.processingType = Optional.ofNullable(processingType);
            return this;
        }

        public Builder processingType(Optional<? extends PosPaymentProcessingFeesType> processingType) {
            Utils.checkNotNull(processingType, "processingType");
            this.processingType = processingType;
            return this;
        }
        
        public ProcessingFees build() {
            return new ProcessingFees(
                amount,
                effectiveAt,
                processingType);
        }
    }
}

