/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProfitAndLoss {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of the report
     */
    @JsonProperty("report_name")
    private String reportName;

    /**
     * The start date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private String startDate;

    /**
     * The end date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private String endDate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * The operating income accounts
     */
    @JsonProperty("income")
    private Income income;

    /**
     * The cost of goods sold accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_of_goods_sold")
    private CostOfGoodsSold costOfGoodsSold;

    /**
     * The operating expenses accounts
     */
    @JsonProperty("expenses")
    private Expenses expenses;

    /**
     * The other income accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_income")
    private OtherIncome otherIncome;

    /**
     * The other expenses accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_expenses")
    private OtherExpenses otherExpenses;

    /**
     * The accounts not categorized in the other sections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uncategorized_accounts")
    private UncategorizedAccounts uncategorizedAccounts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_profit")
    private ProfitAndLossIndicator grossProfit;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_operating_income")
    private ProfitAndLossIndicator netOperatingIncome;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_income")
    private ProfitAndLossIndicator netIncome;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The customer id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private String customer;

    @JsonCreator
    public ProfitAndLoss(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("report_name") @Nonnull String reportName,
            @JsonProperty("start_date") @Nullable String startDate,
            @JsonProperty("end_date") @Nullable String endDate,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("income") @Nonnull Income income,
            @JsonProperty("cost_of_goods_sold") @Nullable CostOfGoodsSold costOfGoodsSold,
            @JsonProperty("expenses") @Nonnull Expenses expenses,
            @JsonProperty("other_income") @Nullable OtherIncome otherIncome,
            @JsonProperty("other_expenses") @Nullable OtherExpenses otherExpenses,
            @JsonProperty("uncategorized_accounts") @Nullable UncategorizedAccounts uncategorizedAccounts,
            @JsonProperty("gross_profit") @Nullable ProfitAndLossIndicator grossProfit,
            @JsonProperty("net_operating_income") @Nullable ProfitAndLossIndicator netOperatingIncome,
            @JsonProperty("net_income") @Nullable ProfitAndLossIndicator netIncome,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("customer") @Nullable String customer) {
        this.id = id;
        this.reportName = Optional.ofNullable(reportName)
            .orElseThrow(() -> new IllegalArgumentException("reportName cannot be null"));
        this.startDate = startDate;
        this.endDate = endDate;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.income = Optional.ofNullable(income)
            .orElseThrow(() -> new IllegalArgumentException("income cannot be null"));
        this.costOfGoodsSold = costOfGoodsSold;
        this.expenses = Optional.ofNullable(expenses)
            .orElseThrow(() -> new IllegalArgumentException("expenses cannot be null"));
        this.otherIncome = otherIncome;
        this.otherExpenses = otherExpenses;
        this.uncategorizedAccounts = uncategorizedAccounts;
        this.grossProfit = grossProfit;
        this.netOperatingIncome = netOperatingIncome;
        this.netIncome = netIncome;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.customer = customer;
    }
    
    public ProfitAndLoss(
            @Nonnull String reportName,
            @Nonnull Income income,
            @Nonnull Expenses expenses) {
        this(null, reportName, null,
            null, null, income,
            null, expenses, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the report
     */
    public String reportName() {
        return this.reportName;
    }

    /**
     * The start date of the report
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The end date of the report
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * The operating income accounts
     */
    public Income income() {
        return this.income;
    }

    /**
     * The cost of goods sold accounts
     */
    public Optional<CostOfGoodsSold> costOfGoodsSold() {
        return Optional.ofNullable(this.costOfGoodsSold);
    }

    /**
     * The operating expenses accounts
     */
    public Expenses expenses() {
        return this.expenses;
    }

    /**
     * The other income accounts
     */
    public Optional<OtherIncome> otherIncome() {
        return Optional.ofNullable(this.otherIncome);
    }

    /**
     * The other expenses accounts
     */
    public Optional<OtherExpenses> otherExpenses() {
        return Optional.ofNullable(this.otherExpenses);
    }

    /**
     * The accounts not categorized in the other sections
     */
    public Optional<UncategorizedAccounts> uncategorizedAccounts() {
        return Optional.ofNullable(this.uncategorizedAccounts);
    }

    public Optional<ProfitAndLossIndicator> grossProfit() {
        return Optional.ofNullable(this.grossProfit);
    }

    public Optional<ProfitAndLossIndicator> netOperatingIncome() {
        return Optional.ofNullable(this.netOperatingIncome);
    }

    public Optional<ProfitAndLossIndicator> netIncome() {
        return Optional.ofNullable(this.netIncome);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The customer id
     */
    public Optional<String> customer() {
        return Optional.ofNullable(this.customer);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public ProfitAndLoss withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of the report
     */
    public ProfitAndLoss withReportName(@Nonnull String reportName) {
        this.reportName = Utils.checkNotNull(reportName, "reportName");
        return this;
    }


    /**
     * The start date of the report
     */
    public ProfitAndLoss withStartDate(@Nullable String startDate) {
        this.startDate = startDate;
        return this;
    }


    /**
     * The end date of the report
     */
    public ProfitAndLoss withEndDate(@Nullable String endDate) {
        this.endDate = endDate;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ProfitAndLoss withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * The operating income accounts
     */
    public ProfitAndLoss withIncome(@Nonnull Income income) {
        this.income = Utils.checkNotNull(income, "income");
        return this;
    }


    /**
     * The cost of goods sold accounts
     */
    public ProfitAndLoss withCostOfGoodsSold(@Nullable CostOfGoodsSold costOfGoodsSold) {
        this.costOfGoodsSold = costOfGoodsSold;
        return this;
    }


    /**
     * The operating expenses accounts
     */
    public ProfitAndLoss withExpenses(@Nonnull Expenses expenses) {
        this.expenses = Utils.checkNotNull(expenses, "expenses");
        return this;
    }


    /**
     * The other income accounts
     */
    public ProfitAndLoss withOtherIncome(@Nullable OtherIncome otherIncome) {
        this.otherIncome = otherIncome;
        return this;
    }


    /**
     * The other expenses accounts
     */
    public ProfitAndLoss withOtherExpenses(@Nullable OtherExpenses otherExpenses) {
        this.otherExpenses = otherExpenses;
        return this;
    }


    /**
     * The accounts not categorized in the other sections
     */
    public ProfitAndLoss withUncategorizedAccounts(@Nullable UncategorizedAccounts uncategorizedAccounts) {
        this.uncategorizedAccounts = uncategorizedAccounts;
        return this;
    }


    public ProfitAndLoss withGrossProfit(@Nullable ProfitAndLossIndicator grossProfit) {
        this.grossProfit = grossProfit;
        return this;
    }


    public ProfitAndLoss withNetOperatingIncome(@Nullable ProfitAndLossIndicator netOperatingIncome) {
        this.netOperatingIncome = netOperatingIncome;
        return this;
    }


    public ProfitAndLoss withNetIncome(@Nullable ProfitAndLossIndicator netIncome) {
        this.netIncome = netIncome;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public ProfitAndLoss withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The customer id
     */
    public ProfitAndLoss withCustomer(@Nullable String customer) {
        this.customer = customer;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLoss other = (ProfitAndLoss) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reportName, other.reportName) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.income, other.income) &&
            Utils.enhancedDeepEquals(this.costOfGoodsSold, other.costOfGoodsSold) &&
            Utils.enhancedDeepEquals(this.expenses, other.expenses) &&
            Utils.enhancedDeepEquals(this.otherIncome, other.otherIncome) &&
            Utils.enhancedDeepEquals(this.otherExpenses, other.otherExpenses) &&
            Utils.enhancedDeepEquals(this.uncategorizedAccounts, other.uncategorizedAccounts) &&
            Utils.enhancedDeepEquals(this.grossProfit, other.grossProfit) &&
            Utils.enhancedDeepEquals(this.netOperatingIncome, other.netOperatingIncome) &&
            Utils.enhancedDeepEquals(this.netIncome, other.netIncome) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.customer, other.customer);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, reportName, startDate,
            endDate, currency, income,
            costOfGoodsSold, expenses, otherIncome,
            otherExpenses, uncategorizedAccounts, grossProfit,
            netOperatingIncome, netIncome, customMappings,
            customer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLoss.class,
                "id", id,
                "reportName", reportName,
                "startDate", startDate,
                "endDate", endDate,
                "currency", currency,
                "income", income,
                "costOfGoodsSold", costOfGoodsSold,
                "expenses", expenses,
                "otherIncome", otherIncome,
                "otherExpenses", otherExpenses,
                "uncategorizedAccounts", uncategorizedAccounts,
                "grossProfit", grossProfit,
                "netOperatingIncome", netOperatingIncome,
                "netIncome", netIncome,
                "customMappings", customMappings,
                "customer", customer);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String reportName;

        private String startDate;

        private String endDate;

        private JsonNullable<Currency> currency;

        private Income income;

        private CostOfGoodsSold costOfGoodsSold;

        private Expenses expenses;

        private OtherIncome otherIncome;

        private OtherExpenses otherExpenses;

        private UncategorizedAccounts uncategorizedAccounts;

        private ProfitAndLossIndicator grossProfit;

        private ProfitAndLossIndicator netOperatingIncome;

        private ProfitAndLossIndicator netIncome;

        private JsonNullable<Map<String, Object>> customMappings;

        private String customer;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of the report
         */
        public Builder reportName(@Nonnull String reportName) {
            this.reportName = Utils.checkNotNull(reportName, "reportName");
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date of the report
         */
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The operating income accounts
         */
        public Builder income(@Nonnull Income income) {
            this.income = Utils.checkNotNull(income, "income");
            return this;
        }

        /**
         * The cost of goods sold accounts
         */
        public Builder costOfGoodsSold(@Nullable CostOfGoodsSold costOfGoodsSold) {
            this.costOfGoodsSold = costOfGoodsSold;
            return this;
        }

        /**
         * The operating expenses accounts
         */
        public Builder expenses(@Nonnull Expenses expenses) {
            this.expenses = Utils.checkNotNull(expenses, "expenses");
            return this;
        }

        /**
         * The other income accounts
         */
        public Builder otherIncome(@Nullable OtherIncome otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }

        /**
         * The other expenses accounts
         */
        public Builder otherExpenses(@Nullable OtherExpenses otherExpenses) {
            this.otherExpenses = otherExpenses;
            return this;
        }

        /**
         * The accounts not categorized in the other sections
         */
        public Builder uncategorizedAccounts(@Nullable UncategorizedAccounts uncategorizedAccounts) {
            this.uncategorizedAccounts = uncategorizedAccounts;
            return this;
        }

        public Builder grossProfit(@Nullable ProfitAndLossIndicator grossProfit) {
            this.grossProfit = grossProfit;
            return this;
        }

        public Builder netOperatingIncome(@Nullable ProfitAndLossIndicator netOperatingIncome) {
            this.netOperatingIncome = netOperatingIncome;
            return this;
        }

        public Builder netIncome(@Nullable ProfitAndLossIndicator netIncome) {
            this.netIncome = netIncome;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The customer id
         */
        public Builder customer(@Nullable String customer) {
            this.customer = customer;
            return this;
        }

        public ProfitAndLoss build() {
            return new ProfitAndLoss(
                id, reportName, startDate,
                endDate, currency, income,
                costOfGoodsSold, expenses, otherIncome,
                otherExpenses, uncategorizedAccounts, grossProfit,
                netOperatingIncome, netIncome, customMappings,
                customer);
        }

    }
}
