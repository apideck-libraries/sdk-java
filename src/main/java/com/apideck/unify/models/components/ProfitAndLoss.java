/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ProfitAndLoss {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the report
     */
    @JsonProperty("report_name")
    private String reportName;

    /**
     * The start date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * The end date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("currency")
    private Optional<? extends Currency> currency;

    /**
     * The operating income accounts
     */
    @JsonProperty("income")
    private Income income;

    /**
     * The cost of goods sold accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_of_goods_sold")
    private Optional<? extends CostOfGoodsSold> costOfGoodsSold;

    /**
     * The operating expenses accounts
     */
    @JsonProperty("expenses")
    private Expenses expenses;

    /**
     * The other income accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_income")
    private Optional<? extends OtherIncome> otherIncome;

    /**
     * The other expenses accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_expenses")
    private Optional<? extends OtherExpenses> otherExpenses;

    /**
     * The accounts not categorized in the other sections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uncategorized_accounts")
    private Optional<? extends UncategorizedAccounts> uncategorizedAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_profit")
    private Optional<? extends ProfitAndLossIndicator> grossProfit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_operating_income")
    private Optional<? extends ProfitAndLossIndicator> netOperatingIncome;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_income")
    private Optional<? extends ProfitAndLossIndicator> netIncome;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    /**
     * The customer id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<String> customer;

    @JsonCreator
    public ProfitAndLoss(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("report_name") String reportName,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("currency") Optional<? extends Currency> currency,
            @JsonProperty("income") Income income,
            @JsonProperty("cost_of_goods_sold") Optional<? extends CostOfGoodsSold> costOfGoodsSold,
            @JsonProperty("expenses") Expenses expenses,
            @JsonProperty("other_income") Optional<? extends OtherIncome> otherIncome,
            @JsonProperty("other_expenses") Optional<? extends OtherExpenses> otherExpenses,
            @JsonProperty("uncategorized_accounts") Optional<? extends UncategorizedAccounts> uncategorizedAccounts,
            @JsonProperty("gross_profit") Optional<? extends ProfitAndLossIndicator> grossProfit,
            @JsonProperty("net_operating_income") Optional<? extends ProfitAndLossIndicator> netOperatingIncome,
            @JsonProperty("net_income") Optional<? extends ProfitAndLossIndicator> netIncome,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings,
            @JsonProperty("customer") Optional<String> customer) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reportName, "reportName");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(income, "income");
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        Utils.checkNotNull(expenses, "expenses");
        Utils.checkNotNull(otherIncome, "otherIncome");
        Utils.checkNotNull(otherExpenses, "otherExpenses");
        Utils.checkNotNull(uncategorizedAccounts, "uncategorizedAccounts");
        Utils.checkNotNull(grossProfit, "grossProfit");
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        Utils.checkNotNull(netIncome, "netIncome");
        Utils.checkNotNull(customMappings, "customMappings");
        Utils.checkNotNull(customer, "customer");
        this.id = id;
        this.reportName = reportName;
        this.startDate = startDate;
        this.endDate = endDate;
        this.currency = currency;
        this.income = income;
        this.costOfGoodsSold = costOfGoodsSold;
        this.expenses = expenses;
        this.otherIncome = otherIncome;
        this.otherExpenses = otherExpenses;
        this.uncategorizedAccounts = uncategorizedAccounts;
        this.grossProfit = grossProfit;
        this.netOperatingIncome = netOperatingIncome;
        this.netIncome = netIncome;
        this.customMappings = customMappings;
        this.customer = customer;
    }
    
    public ProfitAndLoss(
            String reportName,
            Income income,
            Expenses expenses) {
        this(Optional.empty(), reportName, Optional.empty(), Optional.empty(), Optional.empty(), income, Optional.empty(), expenses, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the report
     */
    @JsonIgnore
    public String reportName() {
        return reportName;
    }

    /**
     * The start date of the report
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The end date of the report
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Currency> currency() {
        return (Optional<Currency>) currency;
    }

    /**
     * The operating income accounts
     */
    @JsonIgnore
    public Income income() {
        return income;
    }

    /**
     * The cost of goods sold accounts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CostOfGoodsSold> costOfGoodsSold() {
        return (Optional<CostOfGoodsSold>) costOfGoodsSold;
    }

    /**
     * The operating expenses accounts
     */
    @JsonIgnore
    public Expenses expenses() {
        return expenses;
    }

    /**
     * The other income accounts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OtherIncome> otherIncome() {
        return (Optional<OtherIncome>) otherIncome;
    }

    /**
     * The other expenses accounts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OtherExpenses> otherExpenses() {
        return (Optional<OtherExpenses>) otherExpenses;
    }

    /**
     * The accounts not categorized in the other sections
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UncategorizedAccounts> uncategorizedAccounts() {
        return (Optional<UncategorizedAccounts>) uncategorizedAccounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProfitAndLossIndicator> grossProfit() {
        return (Optional<ProfitAndLossIndicator>) grossProfit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProfitAndLossIndicator> netOperatingIncome() {
        return (Optional<ProfitAndLossIndicator>) netOperatingIncome;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProfitAndLossIndicator> netIncome() {
        return (Optional<ProfitAndLossIndicator>) netIncome;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    /**
     * The customer id
     */
    @JsonIgnore
    public Optional<String> customer() {
        return customer;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for an object.
     */
    public ProfitAndLoss withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public ProfitAndLoss withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the report
     */
    public ProfitAndLoss withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end date of the report
     */
    public ProfitAndLoss withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The end date of the report
     */
    public ProfitAndLoss withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ProfitAndLoss withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ProfitAndLoss withCurrency(Optional<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The operating income accounts
     */
    public ProfitAndLoss withIncome(Income income) {
        Utils.checkNotNull(income, "income");
        this.income = income;
        return this;
    }

    /**
     * The cost of goods sold accounts
     */
    public ProfitAndLoss withCostOfGoodsSold(CostOfGoodsSold costOfGoodsSold) {
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        this.costOfGoodsSold = Optional.ofNullable(costOfGoodsSold);
        return this;
    }

    /**
     * The cost of goods sold accounts
     */
    public ProfitAndLoss withCostOfGoodsSold(Optional<? extends CostOfGoodsSold> costOfGoodsSold) {
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        this.costOfGoodsSold = costOfGoodsSold;
        return this;
    }

    /**
     * The operating expenses accounts
     */
    public ProfitAndLoss withExpenses(Expenses expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = expenses;
        return this;
    }

    /**
     * The other income accounts
     */
    public ProfitAndLoss withOtherIncome(OtherIncome otherIncome) {
        Utils.checkNotNull(otherIncome, "otherIncome");
        this.otherIncome = Optional.ofNullable(otherIncome);
        return this;
    }

    /**
     * The other income accounts
     */
    public ProfitAndLoss withOtherIncome(Optional<? extends OtherIncome> otherIncome) {
        Utils.checkNotNull(otherIncome, "otherIncome");
        this.otherIncome = otherIncome;
        return this;
    }

    /**
     * The other expenses accounts
     */
    public ProfitAndLoss withOtherExpenses(OtherExpenses otherExpenses) {
        Utils.checkNotNull(otherExpenses, "otherExpenses");
        this.otherExpenses = Optional.ofNullable(otherExpenses);
        return this;
    }

    /**
     * The other expenses accounts
     */
    public ProfitAndLoss withOtherExpenses(Optional<? extends OtherExpenses> otherExpenses) {
        Utils.checkNotNull(otherExpenses, "otherExpenses");
        this.otherExpenses = otherExpenses;
        return this;
    }

    /**
     * The accounts not categorized in the other sections
     */
    public ProfitAndLoss withUncategorizedAccounts(UncategorizedAccounts uncategorizedAccounts) {
        Utils.checkNotNull(uncategorizedAccounts, "uncategorizedAccounts");
        this.uncategorizedAccounts = Optional.ofNullable(uncategorizedAccounts);
        return this;
    }

    /**
     * The accounts not categorized in the other sections
     */
    public ProfitAndLoss withUncategorizedAccounts(Optional<? extends UncategorizedAccounts> uncategorizedAccounts) {
        Utils.checkNotNull(uncategorizedAccounts, "uncategorizedAccounts");
        this.uncategorizedAccounts = uncategorizedAccounts;
        return this;
    }

    public ProfitAndLoss withGrossProfit(ProfitAndLossIndicator grossProfit) {
        Utils.checkNotNull(grossProfit, "grossProfit");
        this.grossProfit = Optional.ofNullable(grossProfit);
        return this;
    }

    public ProfitAndLoss withGrossProfit(Optional<? extends ProfitAndLossIndicator> grossProfit) {
        Utils.checkNotNull(grossProfit, "grossProfit");
        this.grossProfit = grossProfit;
        return this;
    }

    public ProfitAndLoss withNetOperatingIncome(ProfitAndLossIndicator netOperatingIncome) {
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        this.netOperatingIncome = Optional.ofNullable(netOperatingIncome);
        return this;
    }

    public ProfitAndLoss withNetOperatingIncome(Optional<? extends ProfitAndLossIndicator> netOperatingIncome) {
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        this.netOperatingIncome = netOperatingIncome;
        return this;
    }

    public ProfitAndLoss withNetIncome(ProfitAndLossIndicator netIncome) {
        Utils.checkNotNull(netIncome, "netIncome");
        this.netIncome = Optional.ofNullable(netIncome);
        return this;
    }

    public ProfitAndLoss withNetIncome(Optional<? extends ProfitAndLossIndicator> netIncome) {
        Utils.checkNotNull(netIncome, "netIncome");
        this.netIncome = netIncome;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public ProfitAndLoss withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public ProfitAndLoss withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }

    /**
     * The customer id
     */
    public ProfitAndLoss withCustomer(String customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }

    /**
     * The customer id
     */
    public ProfitAndLoss withCustomer(Optional<String> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLoss other = (ProfitAndLoss) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.reportName, other.reportName) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.income, other.income) &&
            Objects.deepEquals(this.costOfGoodsSold, other.costOfGoodsSold) &&
            Objects.deepEquals(this.expenses, other.expenses) &&
            Objects.deepEquals(this.otherIncome, other.otherIncome) &&
            Objects.deepEquals(this.otherExpenses, other.otherExpenses) &&
            Objects.deepEquals(this.uncategorizedAccounts, other.uncategorizedAccounts) &&
            Objects.deepEquals(this.grossProfit, other.grossProfit) &&
            Objects.deepEquals(this.netOperatingIncome, other.netOperatingIncome) &&
            Objects.deepEquals(this.netIncome, other.netIncome) &&
            Objects.deepEquals(this.customMappings, other.customMappings) &&
            Objects.deepEquals(this.customer, other.customer);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            reportName,
            startDate,
            endDate,
            currency,
            income,
            costOfGoodsSold,
            expenses,
            otherIncome,
            otherExpenses,
            uncategorizedAccounts,
            grossProfit,
            netOperatingIncome,
            netIncome,
            customMappings,
            customer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLoss.class,
                "id", id,
                "reportName", reportName,
                "startDate", startDate,
                "endDate", endDate,
                "currency", currency,
                "income", income,
                "costOfGoodsSold", costOfGoodsSold,
                "expenses", expenses,
                "otherIncome", otherIncome,
                "otherExpenses", otherExpenses,
                "uncategorizedAccounts", uncategorizedAccounts,
                "grossProfit", grossProfit,
                "netOperatingIncome", netOperatingIncome,
                "netIncome", netIncome,
                "customMappings", customMappings,
                "customer", customer);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String reportName;
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<? extends Currency> currency = Optional.empty();
 
        private Income income;
 
        private Optional<? extends CostOfGoodsSold> costOfGoodsSold = Optional.empty();
 
        private Expenses expenses;
 
        private Optional<? extends OtherIncome> otherIncome = Optional.empty();
 
        private Optional<? extends OtherExpenses> otherExpenses = Optional.empty();
 
        private Optional<? extends UncategorizedAccounts> uncategorizedAccounts = Optional.empty();
 
        private Optional<? extends ProfitAndLossIndicator> grossProfit = Optional.empty();
 
        private Optional<? extends ProfitAndLossIndicator> netOperatingIncome = Optional.empty();
 
        private Optional<? extends ProfitAndLossIndicator> netIncome = Optional.empty();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();
 
        private Optional<String> customer = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the report
         */
        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date of the report
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The end date of the report
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Optional<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The operating income accounts
         */
        public Builder income(Income income) {
            Utils.checkNotNull(income, "income");
            this.income = income;
            return this;
        }

        /**
         * The cost of goods sold accounts
         */
        public Builder costOfGoodsSold(CostOfGoodsSold costOfGoodsSold) {
            Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
            this.costOfGoodsSold = Optional.ofNullable(costOfGoodsSold);
            return this;
        }

        /**
         * The cost of goods sold accounts
         */
        public Builder costOfGoodsSold(Optional<? extends CostOfGoodsSold> costOfGoodsSold) {
            Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
            this.costOfGoodsSold = costOfGoodsSold;
            return this;
        }

        /**
         * The operating expenses accounts
         */
        public Builder expenses(Expenses expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = expenses;
            return this;
        }

        /**
         * The other income accounts
         */
        public Builder otherIncome(OtherIncome otherIncome) {
            Utils.checkNotNull(otherIncome, "otherIncome");
            this.otherIncome = Optional.ofNullable(otherIncome);
            return this;
        }

        /**
         * The other income accounts
         */
        public Builder otherIncome(Optional<? extends OtherIncome> otherIncome) {
            Utils.checkNotNull(otherIncome, "otherIncome");
            this.otherIncome = otherIncome;
            return this;
        }

        /**
         * The other expenses accounts
         */
        public Builder otherExpenses(OtherExpenses otherExpenses) {
            Utils.checkNotNull(otherExpenses, "otherExpenses");
            this.otherExpenses = Optional.ofNullable(otherExpenses);
            return this;
        }

        /**
         * The other expenses accounts
         */
        public Builder otherExpenses(Optional<? extends OtherExpenses> otherExpenses) {
            Utils.checkNotNull(otherExpenses, "otherExpenses");
            this.otherExpenses = otherExpenses;
            return this;
        }

        /**
         * The accounts not categorized in the other sections
         */
        public Builder uncategorizedAccounts(UncategorizedAccounts uncategorizedAccounts) {
            Utils.checkNotNull(uncategorizedAccounts, "uncategorizedAccounts");
            this.uncategorizedAccounts = Optional.ofNullable(uncategorizedAccounts);
            return this;
        }

        /**
         * The accounts not categorized in the other sections
         */
        public Builder uncategorizedAccounts(Optional<? extends UncategorizedAccounts> uncategorizedAccounts) {
            Utils.checkNotNull(uncategorizedAccounts, "uncategorizedAccounts");
            this.uncategorizedAccounts = uncategorizedAccounts;
            return this;
        }

        public Builder grossProfit(ProfitAndLossIndicator grossProfit) {
            Utils.checkNotNull(grossProfit, "grossProfit");
            this.grossProfit = Optional.ofNullable(grossProfit);
            return this;
        }

        public Builder grossProfit(Optional<? extends ProfitAndLossIndicator> grossProfit) {
            Utils.checkNotNull(grossProfit, "grossProfit");
            this.grossProfit = grossProfit;
            return this;
        }

        public Builder netOperatingIncome(ProfitAndLossIndicator netOperatingIncome) {
            Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
            this.netOperatingIncome = Optional.ofNullable(netOperatingIncome);
            return this;
        }

        public Builder netOperatingIncome(Optional<? extends ProfitAndLossIndicator> netOperatingIncome) {
            Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
            this.netOperatingIncome = netOperatingIncome;
            return this;
        }

        public Builder netIncome(ProfitAndLossIndicator netIncome) {
            Utils.checkNotNull(netIncome, "netIncome");
            this.netIncome = Optional.ofNullable(netIncome);
            return this;
        }

        public Builder netIncome(Optional<? extends ProfitAndLossIndicator> netIncome) {
            Utils.checkNotNull(netIncome, "netIncome");
            this.netIncome = netIncome;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }

        /**
         * The customer id
         */
        public Builder customer(String customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * The customer id
         */
        public Builder customer(Optional<String> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }
        
        public ProfitAndLoss build() {
            return new ProfitAndLoss(
                id,
                reportName,
                startDate,
                endDate,
                currency,
                income,
                costOfGoodsSold,
                expenses,
                otherIncome,
                otherExpenses,
                uncategorizedAccounts,
                grossProfit,
                netOperatingIncome,
                netIncome,
                customMappings,
                customer);
        }
    }
}
