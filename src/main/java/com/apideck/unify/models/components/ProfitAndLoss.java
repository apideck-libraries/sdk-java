/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ProfitAndLoss {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the report
     */
    @JsonProperty("report_name")
    private String reportName;

    /**
     * The start date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * The start date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    @JsonProperty("currency")
    private String currency;

    /**
     * Customer id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    private Optional<String> customerId;

    @JsonProperty("income")
    private Income income;

    @JsonProperty("expenses")
    private Expenses expenses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_income")
    private JsonNullable<? extends NetIncome> netIncome;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_operating_income")
    private JsonNullable<? extends NetOperatingIncome> netOperatingIncome;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_profit")
    private JsonNullable<? extends GrossProfit> grossProfit;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<? extends CustomMappings> customMappings;

    @JsonCreator
    public ProfitAndLoss(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("report_name") String reportName,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("currency") String currency,
            @JsonProperty("customer_id") Optional<String> customerId,
            @JsonProperty("income") Income income,
            @JsonProperty("expenses") Expenses expenses,
            @JsonProperty("net_income") JsonNullable<? extends NetIncome> netIncome,
            @JsonProperty("net_operating_income") JsonNullable<? extends NetOperatingIncome> netOperatingIncome,
            @JsonProperty("gross_profit") JsonNullable<? extends GrossProfit> grossProfit,
            @JsonProperty("custom_mappings") JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reportName, "reportName");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(income, "income");
        Utils.checkNotNull(expenses, "expenses");
        Utils.checkNotNull(netIncome, "netIncome");
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        Utils.checkNotNull(grossProfit, "grossProfit");
        Utils.checkNotNull(customMappings, "customMappings");
        this.id = id;
        this.reportName = reportName;
        this.startDate = startDate;
        this.endDate = endDate;
        this.currency = currency;
        this.customerId = customerId;
        this.income = income;
        this.expenses = expenses;
        this.netIncome = netIncome;
        this.netOperatingIncome = netOperatingIncome;
        this.grossProfit = grossProfit;
        this.customMappings = customMappings;
    }
    
    public ProfitAndLoss(
            String reportName,
            String currency,
            Income income,
            Expenses expenses) {
        this(Optional.empty(), reportName, Optional.empty(), Optional.empty(), currency, Optional.empty(), income, expenses, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the report
     */
    @JsonIgnore
    public String reportName() {
        return reportName;
    }

    /**
     * The start date of the report
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The start date of the report
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * Customer id
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    @JsonIgnore
    public Income income() {
        return income;
    }

    @JsonIgnore
    public Expenses expenses() {
        return expenses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NetIncome> netIncome() {
        return (JsonNullable<NetIncome>) netIncome;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NetOperatingIncome> netOperatingIncome() {
        return (JsonNullable<NetOperatingIncome>) netOperatingIncome;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GrossProfit> grossProfit() {
        return (JsonNullable<GrossProfit>) grossProfit;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomMappings> customMappings() {
        return (JsonNullable<CustomMappings>) customMappings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public ProfitAndLoss withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public ProfitAndLoss withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the report
     */
    public ProfitAndLoss withReportName(String reportName) {
        Utils.checkNotNull(reportName, "reportName");
        this.reportName = reportName;
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The start date of the report
     */
    public ProfitAndLoss withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    public ProfitAndLoss withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Customer id
     */
    public ProfitAndLoss withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }

    /**
     * Customer id
     */
    public ProfitAndLoss withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public ProfitAndLoss withIncome(Income income) {
        Utils.checkNotNull(income, "income");
        this.income = income;
        return this;
    }

    public ProfitAndLoss withExpenses(Expenses expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = expenses;
        return this;
    }

    public ProfitAndLoss withNetIncome(NetIncome netIncome) {
        Utils.checkNotNull(netIncome, "netIncome");
        this.netIncome = JsonNullable.of(netIncome);
        return this;
    }

    public ProfitAndLoss withNetIncome(JsonNullable<? extends NetIncome> netIncome) {
        Utils.checkNotNull(netIncome, "netIncome");
        this.netIncome = netIncome;
        return this;
    }

    public ProfitAndLoss withNetOperatingIncome(NetOperatingIncome netOperatingIncome) {
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        this.netOperatingIncome = JsonNullable.of(netOperatingIncome);
        return this;
    }

    public ProfitAndLoss withNetOperatingIncome(JsonNullable<? extends NetOperatingIncome> netOperatingIncome) {
        Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
        this.netOperatingIncome = netOperatingIncome;
        return this;
    }

    public ProfitAndLoss withGrossProfit(GrossProfit grossProfit) {
        Utils.checkNotNull(grossProfit, "grossProfit");
        this.grossProfit = JsonNullable.of(grossProfit);
        return this;
    }

    public ProfitAndLoss withGrossProfit(JsonNullable<? extends GrossProfit> grossProfit) {
        Utils.checkNotNull(grossProfit, "grossProfit");
        this.grossProfit = grossProfit;
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public ProfitAndLoss withCustomMappings(CustomMappings customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public ProfitAndLoss withCustomMappings(JsonNullable<? extends CustomMappings> customMappings) {
        Utils.checkNotNull(customMappings, "customMappings");
        this.customMappings = customMappings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLoss other = (ProfitAndLoss) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.reportName, other.reportName) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.income, other.income) &&
            Objects.deepEquals(this.expenses, other.expenses) &&
            Objects.deepEquals(this.netIncome, other.netIncome) &&
            Objects.deepEquals(this.netOperatingIncome, other.netOperatingIncome) &&
            Objects.deepEquals(this.grossProfit, other.grossProfit) &&
            Objects.deepEquals(this.customMappings, other.customMappings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            reportName,
            startDate,
            endDate,
            currency,
            customerId,
            income,
            expenses,
            netIncome,
            netOperatingIncome,
            grossProfit,
            customMappings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLoss.class,
                "id", id,
                "reportName", reportName,
                "startDate", startDate,
                "endDate", endDate,
                "currency", currency,
                "customerId", customerId,
                "income", income,
                "expenses", expenses,
                "netIncome", netIncome,
                "netOperatingIncome", netOperatingIncome,
                "grossProfit", grossProfit,
                "customMappings", customMappings);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String reportName;
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private String currency;
 
        private Optional<String> customerId = Optional.empty();
 
        private Income income;
 
        private Expenses expenses;
 
        private JsonNullable<? extends NetIncome> netIncome = JsonNullable.undefined();
 
        private JsonNullable<? extends NetOperatingIncome> netOperatingIncome = JsonNullable.undefined();
 
        private JsonNullable<? extends GrossProfit> grossProfit = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomMappings> customMappings = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the report
         */
        public Builder reportName(String reportName) {
            Utils.checkNotNull(reportName, "reportName");
            this.reportName = reportName;
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Customer id
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * Customer id
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        public Builder income(Income income) {
            Utils.checkNotNull(income, "income");
            this.income = income;
            return this;
        }

        public Builder expenses(Expenses expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = expenses;
            return this;
        }

        public Builder netIncome(NetIncome netIncome) {
            Utils.checkNotNull(netIncome, "netIncome");
            this.netIncome = JsonNullable.of(netIncome);
            return this;
        }

        public Builder netIncome(JsonNullable<? extends NetIncome> netIncome) {
            Utils.checkNotNull(netIncome, "netIncome");
            this.netIncome = netIncome;
            return this;
        }

        public Builder netOperatingIncome(NetOperatingIncome netOperatingIncome) {
            Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
            this.netOperatingIncome = JsonNullable.of(netOperatingIncome);
            return this;
        }

        public Builder netOperatingIncome(JsonNullable<? extends NetOperatingIncome> netOperatingIncome) {
            Utils.checkNotNull(netOperatingIncome, "netOperatingIncome");
            this.netOperatingIncome = netOperatingIncome;
            return this;
        }

        public Builder grossProfit(GrossProfit grossProfit) {
            Utils.checkNotNull(grossProfit, "grossProfit");
            this.grossProfit = JsonNullable.of(grossProfit);
            return this;
        }

        public Builder grossProfit(JsonNullable<? extends GrossProfit> grossProfit) {
            Utils.checkNotNull(grossProfit, "grossProfit");
            this.grossProfit = grossProfit;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(CustomMappings customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(JsonNullable<? extends CustomMappings> customMappings) {
            Utils.checkNotNull(customMappings, "customMappings");
            this.customMappings = customMappings;
            return this;
        }
        
        public ProfitAndLoss build() {
            return new ProfitAndLoss(
                id,
                reportName,
                startDate,
                endDate,
                currency,
                customerId,
                income,
                expenses,
                netIncome,
                netOperatingIncome,
                grossProfit,
                customMappings);
        }
    }
}

