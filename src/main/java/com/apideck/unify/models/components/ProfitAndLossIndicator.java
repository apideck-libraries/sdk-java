/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ProfitAndLossIndicator {

    /**
     * The total amount of the transaction or record
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("total")
    private Optional<Double> total;

    @JsonCreator
    public ProfitAndLossIndicator(
            @JsonProperty("total") Optional<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
    }
    
    public ProfitAndLossIndicator() {
        this(Optional.empty());
    }

    /**
     * The total amount of the transaction or record
     */
    @JsonIgnore
    public Optional<Double> total() {
        return total;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total amount of the transaction or record
     */
    public ProfitAndLossIndicator withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }

    /**
     * The total amount of the transaction or record
     */
    public ProfitAndLossIndicator withTotal(Optional<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLossIndicator other = (ProfitAndLossIndicator) o;
        return 
            Objects.deepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLossIndicator.class,
                "total", total);
    }
    
    public final static class Builder {
 
        private Optional<Double> total = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder total(Optional<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }
        
        public ProfitAndLossIndicator build() {
            return new ProfitAndLossIndicator(
                total);
        }
    }
}

