/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProfitAndLossIndicator {
    /**
     * The total amount of the transaction or record
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    @JsonCreator
    public ProfitAndLossIndicator(
            @JsonProperty("total") @Nullable JsonNullable<Double> total) {
        this.total = Optional.ofNullable(total)
            .orElse(JsonNullable.undefined());
    }
    
    public ProfitAndLossIndicator() {
        this(null);
    }

    /**
     * The total amount of the transaction or record
     */
    public JsonNullable<Double> total() {
        return this.total;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The total amount of the transaction or record
     */
    public ProfitAndLossIndicator withTotal(@Nullable Double total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLossIndicator other = (ProfitAndLossIndicator) o;
        return 
            Utils.enhancedDeepEquals(this.total, other.total);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            total);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLossIndicator.class,
                "total", total);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Double> total;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total amount of the transaction or record
         */
        public Builder total(@Nullable Double total) {
            this.total = JsonNullable.of(total);
            return this;
        }

        public ProfitAndLossIndicator build() {
            return new ProfitAndLossIndicator(
                total);
        }

    }
}
