/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProjectInput {
    /**
     * Name of the project
     */
    @JsonProperty("name")
    private String name;

    /**
     * User-friendly project identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * External reference identifier for the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    private JsonNullable<String> referenceId;

    /**
     * Detailed description of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Current status of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends ProjectProjectStatus> status;

    /**
     * Type or category of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_type")
    private JsonNullable<? extends ProjectType> projectType;

    /**
     * Priority level of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<? extends Priority> priority;

    /**
     * Percentage of project completion (0-100)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completion_percentage")
    private JsonNullable<Double> completionPercentage;

    /**
     * Start date of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<LocalDate> startDate;

    /**
     * Expected or actual end date of the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<LocalDate> endDate;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * Department or organizational unit associated with the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<? extends ProjectDepartment> department;

    /**
     * The company ID the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * ID of the user who owns/manages this project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * Parent project if this is a subproject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_project")
    private JsonNullable<? extends ParentProject> parentProject;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Total budgeted amount for the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budget_amount")
    private JsonNullable<Double> budgetAmount;

    /**
     * Approved budget amount for the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_amount")
    private JsonNullable<Double> approvedAmount;

    /**
     * Total budgeted hours for the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budget_hours")
    private JsonNullable<Double> budgetHours;

    /**
     * Default hourly rate for project work
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_rate")
    private JsonNullable<Double> hourlyRate;

    /**
     * Method used for billing this project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_method")
    private JsonNullable<? extends BillingMethod> billingMethod;

    /**
     * Indicates if the project is billable to the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_billable")
    private JsonNullable<Boolean> isBillable;

    /**
     * Current phase of the project lifecycle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phase")
    private JsonNullable<? extends ProjectPhase> phase;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private Optional<? extends LinkedTaxRateInput> taxRate;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    /**
     * Tags associated with the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    /**
     * Additional notes about the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    /**
     * Contract or agreement number associated with the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contract_number")
    private JsonNullable<String> contractNumber;

    /**
     * Expected profit margin percentage for the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profit_margin")
    private JsonNullable<Double> profitMargin;

    /**
     * Current status of project schedule compared to plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule_status")
    private JsonNullable<? extends ScheduleStatus> scheduleStatus;

    /**
     * An array of addresses associated with the project (billing, job site, etc.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Address>> addresses;

    /**
     * Number of team members assigned to the project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_size")
    private JsonNullable<Long> teamSize;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    @JsonCreator
    public ProjectInput(
            @JsonProperty("name") String name,
            @JsonProperty("display_id") JsonNullable<String> displayId,
            @JsonProperty("reference_id") JsonNullable<String> referenceId,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("status") JsonNullable<? extends ProjectProjectStatus> status,
            @JsonProperty("project_type") JsonNullable<? extends ProjectType> projectType,
            @JsonProperty("priority") JsonNullable<? extends Priority> priority,
            @JsonProperty("completion_percentage") JsonNullable<Double> completionPercentage,
            @JsonProperty("start_date") JsonNullable<LocalDate> startDate,
            @JsonProperty("end_date") JsonNullable<LocalDate> endDate,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("department") JsonNullable<? extends ProjectDepartment> department,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("parent_project") JsonNullable<? extends ParentProject> parentProject,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("budget_amount") JsonNullable<Double> budgetAmount,
            @JsonProperty("approved_amount") JsonNullable<Double> approvedAmount,
            @JsonProperty("budget_hours") JsonNullable<Double> budgetHours,
            @JsonProperty("hourly_rate") JsonNullable<Double> hourlyRate,
            @JsonProperty("billing_method") JsonNullable<? extends BillingMethod> billingMethod,
            @JsonProperty("is_billable") JsonNullable<Boolean> isBillable,
            @JsonProperty("phase") JsonNullable<? extends ProjectPhase> phase,
            @JsonProperty("tax_rate") Optional<? extends LinkedTaxRateInput> taxRate,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("notes") JsonNullable<String> notes,
            @JsonProperty("contract_number") JsonNullable<String> contractNumber,
            @JsonProperty("profit_margin") JsonNullable<Double> profitMargin,
            @JsonProperty("schedule_status") JsonNullable<? extends ScheduleStatus> scheduleStatus,
            @JsonProperty("addresses") Optional<? extends List<Address>> addresses,
            @JsonProperty("team_size") JsonNullable<Long> teamSize,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayId, "displayId");
        Utils.checkNotNull(referenceId, "referenceId");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(projectType, "projectType");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(parentProject, "parentProject");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(budgetAmount, "budgetAmount");
        Utils.checkNotNull(approvedAmount, "approvedAmount");
        Utils.checkNotNull(budgetHours, "budgetHours");
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        Utils.checkNotNull(billingMethod, "billingMethod");
        Utils.checkNotNull(isBillable, "isBillable");
        Utils.checkNotNull(phase, "phase");
        Utils.checkNotNull(taxRate, "taxRate");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(contractNumber, "contractNumber");
        Utils.checkNotNull(profitMargin, "profitMargin");
        Utils.checkNotNull(scheduleStatus, "scheduleStatus");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(teamSize, "teamSize");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.name = name;
        this.displayId = displayId;
        this.referenceId = referenceId;
        this.description = description;
        this.status = status;
        this.projectType = projectType;
        this.priority = priority;
        this.completionPercentage = completionPercentage;
        this.startDate = startDate;
        this.endDate = endDate;
        this.customer = customer;
        this.department = department;
        this.companyId = companyId;
        this.ownerId = ownerId;
        this.parentProject = parentProject;
        this.currency = currency;
        this.budgetAmount = budgetAmount;
        this.approvedAmount = approvedAmount;
        this.budgetHours = budgetHours;
        this.hourlyRate = hourlyRate;
        this.billingMethod = billingMethod;
        this.isBillable = isBillable;
        this.phase = phase;
        this.taxRate = taxRate;
        this.trackingCategories = trackingCategories;
        this.tags = tags;
        this.notes = notes;
        this.contractNumber = contractNumber;
        this.profitMargin = profitMargin;
        this.scheduleStatus = scheduleStatus;
        this.addresses = addresses;
        this.teamSize = teamSize;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
    }
    
    public ProjectInput(
            String name) {
        this(name, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined());
    }

    /**
     * Name of the project
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * User-friendly project identifier
     */
    @JsonIgnore
    public JsonNullable<String> displayId() {
        return displayId;
    }

    /**
     * External reference identifier for the project
     */
    @JsonIgnore
    public JsonNullable<String> referenceId() {
        return referenceId;
    }

    /**
     * Detailed description of the project
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Current status of the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProjectProjectStatus> status() {
        return (JsonNullable<ProjectProjectStatus>) status;
    }

    /**
     * Type or category of the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProjectType> projectType() {
        return (JsonNullable<ProjectType>) projectType;
    }

    /**
     * Priority level of the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Priority> priority() {
        return (JsonNullable<Priority>) priority;
    }

    /**
     * Percentage of project completion (0-100)
     */
    @JsonIgnore
    public JsonNullable<Double> completionPercentage() {
        return completionPercentage;
    }

    /**
     * Start date of the project
     */
    @JsonIgnore
    public JsonNullable<LocalDate> startDate() {
        return startDate;
    }

    /**
     * Expected or actual end date of the project
     */
    @JsonIgnore
    public JsonNullable<LocalDate> endDate() {
        return endDate;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * Department or organizational unit associated with the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProjectDepartment> department() {
        return (JsonNullable<ProjectDepartment>) department;
    }

    /**
     * The company ID the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * ID of the user who owns/manages this project
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * Parent project if this is a subproject
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ParentProject> parentProject() {
        return (JsonNullable<ParentProject>) parentProject;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Total budgeted amount for the project
     */
    @JsonIgnore
    public JsonNullable<Double> budgetAmount() {
        return budgetAmount;
    }

    /**
     * Approved budget amount for the project
     */
    @JsonIgnore
    public JsonNullable<Double> approvedAmount() {
        return approvedAmount;
    }

    /**
     * Total budgeted hours for the project
     */
    @JsonIgnore
    public JsonNullable<Double> budgetHours() {
        return budgetHours;
    }

    /**
     * Default hourly rate for project work
     */
    @JsonIgnore
    public JsonNullable<Double> hourlyRate() {
        return hourlyRate;
    }

    /**
     * Method used for billing this project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BillingMethod> billingMethod() {
        return (JsonNullable<BillingMethod>) billingMethod;
    }

    /**
     * Indicates if the project is billable to the customer
     */
    @JsonIgnore
    public JsonNullable<Boolean> isBillable() {
        return isBillable;
    }

    /**
     * Current phase of the project lifecycle
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ProjectPhase> phase() {
        return (JsonNullable<ProjectPhase>) phase;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LinkedTaxRateInput> taxRate() {
        return (Optional<LinkedTaxRateInput>) taxRate;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    /**
     * Tags associated with the project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    /**
     * Additional notes about the project
     */
    @JsonIgnore
    public JsonNullable<String> notes() {
        return notes;
    }

    /**
     * Contract or agreement number associated with the project
     */
    @JsonIgnore
    public JsonNullable<String> contractNumber() {
        return contractNumber;
    }

    /**
     * Expected profit margin percentage for the project
     */
    @JsonIgnore
    public JsonNullable<Double> profitMargin() {
        return profitMargin;
    }

    /**
     * Current status of project schedule compared to plan
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ScheduleStatus> scheduleStatus() {
        return (JsonNullable<ScheduleStatus>) scheduleStatus;
    }

    /**
     * An array of addresses associated with the project (billing, job site, etc.)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Address>> addresses() {
        return (Optional<List<Address>>) addresses;
    }

    /**
     * Number of team members assigned to the project
     */
    @JsonIgnore
    public JsonNullable<Long> teamSize() {
        return teamSize;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of the project
     */
    public ProjectInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * User-friendly project identifier
     */
    public ProjectInput withDisplayId(String displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = JsonNullable.of(displayId);
        return this;
    }

    /**
     * User-friendly project identifier
     */
    public ProjectInput withDisplayId(JsonNullable<String> displayId) {
        Utils.checkNotNull(displayId, "displayId");
        this.displayId = displayId;
        return this;
    }

    /**
     * External reference identifier for the project
     */
    public ProjectInput withReferenceId(String referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = JsonNullable.of(referenceId);
        return this;
    }

    /**
     * External reference identifier for the project
     */
    public ProjectInput withReferenceId(JsonNullable<String> referenceId) {
        Utils.checkNotNull(referenceId, "referenceId");
        this.referenceId = referenceId;
        return this;
    }

    /**
     * Detailed description of the project
     */
    public ProjectInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Detailed description of the project
     */
    public ProjectInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Current status of the project
     */
    public ProjectInput withStatus(ProjectProjectStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Current status of the project
     */
    public ProjectInput withStatus(JsonNullable<? extends ProjectProjectStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Type or category of the project
     */
    public ProjectInput withProjectType(ProjectType projectType) {
        Utils.checkNotNull(projectType, "projectType");
        this.projectType = JsonNullable.of(projectType);
        return this;
    }

    /**
     * Type or category of the project
     */
    public ProjectInput withProjectType(JsonNullable<? extends ProjectType> projectType) {
        Utils.checkNotNull(projectType, "projectType");
        this.projectType = projectType;
        return this;
    }

    /**
     * Priority level of the project
     */
    public ProjectInput withPriority(Priority priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = JsonNullable.of(priority);
        return this;
    }

    /**
     * Priority level of the project
     */
    public ProjectInput withPriority(JsonNullable<? extends Priority> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    /**
     * Percentage of project completion (0-100)
     */
    public ProjectInput withCompletionPercentage(double completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = JsonNullable.of(completionPercentage);
        return this;
    }

    /**
     * Percentage of project completion (0-100)
     */
    public ProjectInput withCompletionPercentage(JsonNullable<Double> completionPercentage) {
        Utils.checkNotNull(completionPercentage, "completionPercentage");
        this.completionPercentage = completionPercentage;
        return this;
    }

    /**
     * Start date of the project
     */
    public ProjectInput withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * Start date of the project
     */
    public ProjectInput withStartDate(JsonNullable<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Expected or actual end date of the project
     */
    public ProjectInput withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * Expected or actual end date of the project
     */
    public ProjectInput withEndDate(JsonNullable<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public ProjectInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public ProjectInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * Department or organizational unit associated with the project
     */
    public ProjectInput withDepartment(ProjectDepartment department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * Department or organizational unit associated with the project
     */
    public ProjectInput withDepartment(JsonNullable<? extends ProjectDepartment> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public ProjectInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public ProjectInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * ID of the user who owns/manages this project
     */
    public ProjectInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * ID of the user who owns/manages this project
     */
    public ProjectInput withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Parent project if this is a subproject
     */
    public ProjectInput withParentProject(ParentProject parentProject) {
        Utils.checkNotNull(parentProject, "parentProject");
        this.parentProject = JsonNullable.of(parentProject);
        return this;
    }

    /**
     * Parent project if this is a subproject
     */
    public ProjectInput withParentProject(JsonNullable<? extends ParentProject> parentProject) {
        Utils.checkNotNull(parentProject, "parentProject");
        this.parentProject = parentProject;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ProjectInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ProjectInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Total budgeted amount for the project
     */
    public ProjectInput withBudgetAmount(double budgetAmount) {
        Utils.checkNotNull(budgetAmount, "budgetAmount");
        this.budgetAmount = JsonNullable.of(budgetAmount);
        return this;
    }

    /**
     * Total budgeted amount for the project
     */
    public ProjectInput withBudgetAmount(JsonNullable<Double> budgetAmount) {
        Utils.checkNotNull(budgetAmount, "budgetAmount");
        this.budgetAmount = budgetAmount;
        return this;
    }

    /**
     * Approved budget amount for the project
     */
    public ProjectInput withApprovedAmount(double approvedAmount) {
        Utils.checkNotNull(approvedAmount, "approvedAmount");
        this.approvedAmount = JsonNullable.of(approvedAmount);
        return this;
    }

    /**
     * Approved budget amount for the project
     */
    public ProjectInput withApprovedAmount(JsonNullable<Double> approvedAmount) {
        Utils.checkNotNull(approvedAmount, "approvedAmount");
        this.approvedAmount = approvedAmount;
        return this;
    }

    /**
     * Total budgeted hours for the project
     */
    public ProjectInput withBudgetHours(double budgetHours) {
        Utils.checkNotNull(budgetHours, "budgetHours");
        this.budgetHours = JsonNullable.of(budgetHours);
        return this;
    }

    /**
     * Total budgeted hours for the project
     */
    public ProjectInput withBudgetHours(JsonNullable<Double> budgetHours) {
        Utils.checkNotNull(budgetHours, "budgetHours");
        this.budgetHours = budgetHours;
        return this;
    }

    /**
     * Default hourly rate for project work
     */
    public ProjectInput withHourlyRate(double hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = JsonNullable.of(hourlyRate);
        return this;
    }

    /**
     * Default hourly rate for project work
     */
    public ProjectInput withHourlyRate(JsonNullable<Double> hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = hourlyRate;
        return this;
    }

    /**
     * Method used for billing this project
     */
    public ProjectInput withBillingMethod(BillingMethod billingMethod) {
        Utils.checkNotNull(billingMethod, "billingMethod");
        this.billingMethod = JsonNullable.of(billingMethod);
        return this;
    }

    /**
     * Method used for billing this project
     */
    public ProjectInput withBillingMethod(JsonNullable<? extends BillingMethod> billingMethod) {
        Utils.checkNotNull(billingMethod, "billingMethod");
        this.billingMethod = billingMethod;
        return this;
    }

    /**
     * Indicates if the project is billable to the customer
     */
    public ProjectInput withIsBillable(boolean isBillable) {
        Utils.checkNotNull(isBillable, "isBillable");
        this.isBillable = JsonNullable.of(isBillable);
        return this;
    }

    /**
     * Indicates if the project is billable to the customer
     */
    public ProjectInput withIsBillable(JsonNullable<Boolean> isBillable) {
        Utils.checkNotNull(isBillable, "isBillable");
        this.isBillable = isBillable;
        return this;
    }

    /**
     * Current phase of the project lifecycle
     */
    public ProjectInput withPhase(ProjectPhase phase) {
        Utils.checkNotNull(phase, "phase");
        this.phase = JsonNullable.of(phase);
        return this;
    }

    /**
     * Current phase of the project lifecycle
     */
    public ProjectInput withPhase(JsonNullable<? extends ProjectPhase> phase) {
        Utils.checkNotNull(phase, "phase");
        this.phase = phase;
        return this;
    }

    public ProjectInput withTaxRate(LinkedTaxRateInput taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = Optional.ofNullable(taxRate);
        return this;
    }


    public ProjectInput withTaxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
        Utils.checkNotNull(taxRate, "taxRate");
        this.taxRate = taxRate;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public ProjectInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public ProjectInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * Tags associated with the project
     */
    public ProjectInput withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }


    /**
     * Tags associated with the project
     */
    public ProjectInput withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * Additional notes about the project
     */
    public ProjectInput withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    /**
     * Additional notes about the project
     */
    public ProjectInput withNotes(JsonNullable<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * Contract or agreement number associated with the project
     */
    public ProjectInput withContractNumber(String contractNumber) {
        Utils.checkNotNull(contractNumber, "contractNumber");
        this.contractNumber = JsonNullable.of(contractNumber);
        return this;
    }

    /**
     * Contract or agreement number associated with the project
     */
    public ProjectInput withContractNumber(JsonNullable<String> contractNumber) {
        Utils.checkNotNull(contractNumber, "contractNumber");
        this.contractNumber = contractNumber;
        return this;
    }

    /**
     * Expected profit margin percentage for the project
     */
    public ProjectInput withProfitMargin(double profitMargin) {
        Utils.checkNotNull(profitMargin, "profitMargin");
        this.profitMargin = JsonNullable.of(profitMargin);
        return this;
    }

    /**
     * Expected profit margin percentage for the project
     */
    public ProjectInput withProfitMargin(JsonNullable<Double> profitMargin) {
        Utils.checkNotNull(profitMargin, "profitMargin");
        this.profitMargin = profitMargin;
        return this;
    }

    /**
     * Current status of project schedule compared to plan
     */
    public ProjectInput withScheduleStatus(ScheduleStatus scheduleStatus) {
        Utils.checkNotNull(scheduleStatus, "scheduleStatus");
        this.scheduleStatus = JsonNullable.of(scheduleStatus);
        return this;
    }

    /**
     * Current status of project schedule compared to plan
     */
    public ProjectInput withScheduleStatus(JsonNullable<? extends ScheduleStatus> scheduleStatus) {
        Utils.checkNotNull(scheduleStatus, "scheduleStatus");
        this.scheduleStatus = scheduleStatus;
        return this;
    }

    /**
     * An array of addresses associated with the project (billing, job site, etc.)
     */
    public ProjectInput withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }


    /**
     * An array of addresses associated with the project (billing, job site, etc.)
     */
    public ProjectInput withAddresses(Optional<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * Number of team members assigned to the project
     */
    public ProjectInput withTeamSize(long teamSize) {
        Utils.checkNotNull(teamSize, "teamSize");
        this.teamSize = JsonNullable.of(teamSize);
        return this;
    }

    /**
     * Number of team members assigned to the project
     */
    public ProjectInput withTeamSize(JsonNullable<Long> teamSize) {
        Utils.checkNotNull(teamSize, "teamSize");
        this.teamSize = teamSize;
        return this;
    }

    public ProjectInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public ProjectInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public ProjectInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public ProjectInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectInput other = (ProjectInput) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.referenceId, other.referenceId) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.projectType, other.projectType) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.completionPercentage, other.completionPercentage) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.parentProject, other.parentProject) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.budgetAmount, other.budgetAmount) &&
            Utils.enhancedDeepEquals(this.approvedAmount, other.approvedAmount) &&
            Utils.enhancedDeepEquals(this.budgetHours, other.budgetHours) &&
            Utils.enhancedDeepEquals(this.hourlyRate, other.hourlyRate) &&
            Utils.enhancedDeepEquals(this.billingMethod, other.billingMethod) &&
            Utils.enhancedDeepEquals(this.isBillable, other.isBillable) &&
            Utils.enhancedDeepEquals(this.phase, other.phase) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.contractNumber, other.contractNumber) &&
            Utils.enhancedDeepEquals(this.profitMargin, other.profitMargin) &&
            Utils.enhancedDeepEquals(this.scheduleStatus, other.scheduleStatus) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.teamSize, other.teamSize) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, displayId, referenceId,
            description, status, projectType,
            priority, completionPercentage, startDate,
            endDate, customer, department,
            companyId, ownerId, parentProject,
            currency, budgetAmount, approvedAmount,
            budgetHours, hourlyRate, billingMethod,
            isBillable, phase, taxRate,
            trackingCategories, tags, notes,
            contractNumber, profitMargin, scheduleStatus,
            addresses, teamSize, customFields,
            rowVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProjectInput.class,
                "name", name,
                "displayId", displayId,
                "referenceId", referenceId,
                "description", description,
                "status", status,
                "projectType", projectType,
                "priority", priority,
                "completionPercentage", completionPercentage,
                "startDate", startDate,
                "endDate", endDate,
                "customer", customer,
                "department", department,
                "companyId", companyId,
                "ownerId", ownerId,
                "parentProject", parentProject,
                "currency", currency,
                "budgetAmount", budgetAmount,
                "approvedAmount", approvedAmount,
                "budgetHours", budgetHours,
                "hourlyRate", hourlyRate,
                "billingMethod", billingMethod,
                "isBillable", isBillable,
                "phase", phase,
                "taxRate", taxRate,
                "trackingCategories", trackingCategories,
                "tags", tags,
                "notes", notes,
                "contractNumber", contractNumber,
                "profitMargin", profitMargin,
                "scheduleStatus", scheduleStatus,
                "addresses", addresses,
                "teamSize", teamSize,
                "customFields", customFields,
                "rowVersion", rowVersion);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<String> displayId = JsonNullable.undefined();

        private JsonNullable<String> referenceId = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<? extends ProjectProjectStatus> status = JsonNullable.undefined();

        private JsonNullable<? extends ProjectType> projectType = JsonNullable.undefined();

        private JsonNullable<? extends Priority> priority = JsonNullable.undefined();

        private JsonNullable<Double> completionPercentage = JsonNullable.undefined();

        private JsonNullable<LocalDate> startDate = JsonNullable.undefined();

        private JsonNullable<LocalDate> endDate = JsonNullable.undefined();

        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();

        private JsonNullable<? extends ProjectDepartment> department = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<? extends ParentProject> parentProject = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> budgetAmount = JsonNullable.undefined();

        private JsonNullable<Double> approvedAmount = JsonNullable.undefined();

        private JsonNullable<Double> budgetHours = JsonNullable.undefined();

        private JsonNullable<Double> hourlyRate = JsonNullable.undefined();

        private JsonNullable<? extends BillingMethod> billingMethod = JsonNullable.undefined();

        private JsonNullable<Boolean> isBillable;

        private JsonNullable<? extends ProjectPhase> phase = JsonNullable.undefined();

        private Optional<? extends LinkedTaxRateInput> taxRate = Optional.empty();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private Optional<? extends List<String>> tags = Optional.empty();

        private JsonNullable<String> notes = JsonNullable.undefined();

        private JsonNullable<String> contractNumber = JsonNullable.undefined();

        private JsonNullable<Double> profitMargin = JsonNullable.undefined();

        private JsonNullable<? extends ScheduleStatus> scheduleStatus = JsonNullable.undefined();

        private Optional<? extends List<Address>> addresses = Optional.empty();

        private JsonNullable<Long> teamSize = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of the project
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * User-friendly project identifier
         */
        public Builder displayId(String displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * User-friendly project identifier
         */
        public Builder displayId(JsonNullable<String> displayId) {
            Utils.checkNotNull(displayId, "displayId");
            this.displayId = displayId;
            return this;
        }


        /**
         * External reference identifier for the project
         */
        public Builder referenceId(String referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = JsonNullable.of(referenceId);
            return this;
        }

        /**
         * External reference identifier for the project
         */
        public Builder referenceId(JsonNullable<String> referenceId) {
            Utils.checkNotNull(referenceId, "referenceId");
            this.referenceId = referenceId;
            return this;
        }


        /**
         * Detailed description of the project
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Detailed description of the project
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Current status of the project
         */
        public Builder status(ProjectProjectStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Current status of the project
         */
        public Builder status(JsonNullable<? extends ProjectProjectStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Type or category of the project
         */
        public Builder projectType(ProjectType projectType) {
            Utils.checkNotNull(projectType, "projectType");
            this.projectType = JsonNullable.of(projectType);
            return this;
        }

        /**
         * Type or category of the project
         */
        public Builder projectType(JsonNullable<? extends ProjectType> projectType) {
            Utils.checkNotNull(projectType, "projectType");
            this.projectType = projectType;
            return this;
        }


        /**
         * Priority level of the project
         */
        public Builder priority(Priority priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = JsonNullable.of(priority);
            return this;
        }

        /**
         * Priority level of the project
         */
        public Builder priority(JsonNullable<? extends Priority> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }


        /**
         * Percentage of project completion (0-100)
         */
        public Builder completionPercentage(double completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = JsonNullable.of(completionPercentage);
            return this;
        }

        /**
         * Percentage of project completion (0-100)
         */
        public Builder completionPercentage(JsonNullable<Double> completionPercentage) {
            Utils.checkNotNull(completionPercentage, "completionPercentage");
            this.completionPercentage = completionPercentage;
            return this;
        }


        /**
         * Start date of the project
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * Start date of the project
         */
        public Builder startDate(JsonNullable<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * Expected or actual end date of the project
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * Expected or actual end date of the project
         */
        public Builder endDate(JsonNullable<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * Department or organizational unit associated with the project
         */
        public Builder department(ProjectDepartment department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * Department or organizational unit associated with the project
         */
        public Builder department(JsonNullable<? extends ProjectDepartment> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }


        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * ID of the user who owns/manages this project
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * ID of the user who owns/manages this project
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        /**
         * Parent project if this is a subproject
         */
        public Builder parentProject(ParentProject parentProject) {
            Utils.checkNotNull(parentProject, "parentProject");
            this.parentProject = JsonNullable.of(parentProject);
            return this;
        }

        /**
         * Parent project if this is a subproject
         */
        public Builder parentProject(JsonNullable<? extends ParentProject> parentProject) {
            Utils.checkNotNull(parentProject, "parentProject");
            this.parentProject = parentProject;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Total budgeted amount for the project
         */
        public Builder budgetAmount(double budgetAmount) {
            Utils.checkNotNull(budgetAmount, "budgetAmount");
            this.budgetAmount = JsonNullable.of(budgetAmount);
            return this;
        }

        /**
         * Total budgeted amount for the project
         */
        public Builder budgetAmount(JsonNullable<Double> budgetAmount) {
            Utils.checkNotNull(budgetAmount, "budgetAmount");
            this.budgetAmount = budgetAmount;
            return this;
        }


        /**
         * Approved budget amount for the project
         */
        public Builder approvedAmount(double approvedAmount) {
            Utils.checkNotNull(approvedAmount, "approvedAmount");
            this.approvedAmount = JsonNullable.of(approvedAmount);
            return this;
        }

        /**
         * Approved budget amount for the project
         */
        public Builder approvedAmount(JsonNullable<Double> approvedAmount) {
            Utils.checkNotNull(approvedAmount, "approvedAmount");
            this.approvedAmount = approvedAmount;
            return this;
        }


        /**
         * Total budgeted hours for the project
         */
        public Builder budgetHours(double budgetHours) {
            Utils.checkNotNull(budgetHours, "budgetHours");
            this.budgetHours = JsonNullable.of(budgetHours);
            return this;
        }

        /**
         * Total budgeted hours for the project
         */
        public Builder budgetHours(JsonNullable<Double> budgetHours) {
            Utils.checkNotNull(budgetHours, "budgetHours");
            this.budgetHours = budgetHours;
            return this;
        }


        /**
         * Default hourly rate for project work
         */
        public Builder hourlyRate(double hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = JsonNullable.of(hourlyRate);
            return this;
        }

        /**
         * Default hourly rate for project work
         */
        public Builder hourlyRate(JsonNullable<Double> hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = hourlyRate;
            return this;
        }


        /**
         * Method used for billing this project
         */
        public Builder billingMethod(BillingMethod billingMethod) {
            Utils.checkNotNull(billingMethod, "billingMethod");
            this.billingMethod = JsonNullable.of(billingMethod);
            return this;
        }

        /**
         * Method used for billing this project
         */
        public Builder billingMethod(JsonNullable<? extends BillingMethod> billingMethod) {
            Utils.checkNotNull(billingMethod, "billingMethod");
            this.billingMethod = billingMethod;
            return this;
        }


        /**
         * Indicates if the project is billable to the customer
         */
        public Builder isBillable(boolean isBillable) {
            Utils.checkNotNull(isBillable, "isBillable");
            this.isBillable = JsonNullable.of(isBillable);
            return this;
        }

        /**
         * Indicates if the project is billable to the customer
         */
        public Builder isBillable(JsonNullable<Boolean> isBillable) {
            Utils.checkNotNull(isBillable, "isBillable");
            this.isBillable = isBillable;
            return this;
        }


        /**
         * Current phase of the project lifecycle
         */
        public Builder phase(ProjectPhase phase) {
            Utils.checkNotNull(phase, "phase");
            this.phase = JsonNullable.of(phase);
            return this;
        }

        /**
         * Current phase of the project lifecycle
         */
        public Builder phase(JsonNullable<? extends ProjectPhase> phase) {
            Utils.checkNotNull(phase, "phase");
            this.phase = phase;
            return this;
        }


        public Builder taxRate(LinkedTaxRateInput taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = Optional.ofNullable(taxRate);
            return this;
        }

        public Builder taxRate(Optional<? extends LinkedTaxRateInput> taxRate) {
            Utils.checkNotNull(taxRate, "taxRate");
            this.taxRate = taxRate;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        /**
         * Tags associated with the project
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * Tags associated with the project
         */
        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        /**
         * Additional notes about the project
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * Additional notes about the project
         */
        public Builder notes(JsonNullable<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }


        /**
         * Contract or agreement number associated with the project
         */
        public Builder contractNumber(String contractNumber) {
            Utils.checkNotNull(contractNumber, "contractNumber");
            this.contractNumber = JsonNullable.of(contractNumber);
            return this;
        }

        /**
         * Contract or agreement number associated with the project
         */
        public Builder contractNumber(JsonNullable<String> contractNumber) {
            Utils.checkNotNull(contractNumber, "contractNumber");
            this.contractNumber = contractNumber;
            return this;
        }


        /**
         * Expected profit margin percentage for the project
         */
        public Builder profitMargin(double profitMargin) {
            Utils.checkNotNull(profitMargin, "profitMargin");
            this.profitMargin = JsonNullable.of(profitMargin);
            return this;
        }

        /**
         * Expected profit margin percentage for the project
         */
        public Builder profitMargin(JsonNullable<Double> profitMargin) {
            Utils.checkNotNull(profitMargin, "profitMargin");
            this.profitMargin = profitMargin;
            return this;
        }


        /**
         * Current status of project schedule compared to plan
         */
        public Builder scheduleStatus(ScheduleStatus scheduleStatus) {
            Utils.checkNotNull(scheduleStatus, "scheduleStatus");
            this.scheduleStatus = JsonNullable.of(scheduleStatus);
            return this;
        }

        /**
         * Current status of project schedule compared to plan
         */
        public Builder scheduleStatus(JsonNullable<? extends ScheduleStatus> scheduleStatus) {
            Utils.checkNotNull(scheduleStatus, "scheduleStatus");
            this.scheduleStatus = scheduleStatus;
            return this;
        }


        /**
         * An array of addresses associated with the project (billing, job site, etc.)
         */
        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        /**
         * An array of addresses associated with the project (billing, job site, etc.)
         */
        public Builder addresses(Optional<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }


        /**
         * Number of team members assigned to the project
         */
        public Builder teamSize(long teamSize) {
            Utils.checkNotNull(teamSize, "teamSize");
            this.teamSize = JsonNullable.of(teamSize);
            return this;
        }

        /**
         * Number of team members assigned to the project
         */
        public Builder teamSize(JsonNullable<Long> teamSize) {
            Utils.checkNotNull(teamSize, "teamSize");
            this.teamSize = teamSize;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        public ProjectInput build() {
            if (isBillable == null) {
                isBillable = _SINGLETON_VALUE_IsBillable.value();
            }

            return new ProjectInput(
                name, displayId, referenceId,
                description, status, projectType,
                priority, completionPercentage, startDate,
                endDate, customer, department,
                companyId, ownerId, parentProject,
                currency, budgetAmount, approvedAmount,
                budgetHours, hourlyRate, billingMethod,
                isBillable, phase, taxRate,
                trackingCategories, tags, notes,
                contractNumber, profitMargin, scheduleStatus,
                addresses, teamSize, customFields,
                rowVersion);
        }


        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_IsBillable =
                new LazySingletonValue<>(
                        "is_billable",
                        "true",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}
