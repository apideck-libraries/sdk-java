/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ProjectsFilter {
    /**
     * Name of project to search for
     */
    @SpeakeasyMetadata("queryParam:name=name")
    private Optional<String> name;

    /**
     * Status of projects to filter by
     */
    @SpeakeasyMetadata("queryParam:name=status")
    private Optional<? extends ProjectStatus> status;

    /**
     * Filter projects by customer ID
     */
    @SpeakeasyMetadata("queryParam:name=customer_id")
    private Optional<String> customerId;

    /**
     * Return projects modified after this date
     */
    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<OffsetDateTime> updatedSince;

    @JsonCreator
    public ProjectsFilter(
            Optional<String> name,
            Optional<? extends ProjectStatus> status,
            Optional<String> customerId,
            Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.name = name;
        this.status = status;
        this.customerId = customerId;
        this.updatedSince = updatedSince;
    }
    
    public ProjectsFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Name of project to search for
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Status of projects to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProjectStatus> status() {
        return (Optional<ProjectStatus>) status;
    }

    /**
     * Filter projects by customer ID
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * Return projects modified after this date
     */
    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of project to search for
     */
    public ProjectsFilter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * Name of project to search for
     */
    public ProjectsFilter withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Status of projects to filter by
     */
    public ProjectsFilter withStatus(ProjectStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Status of projects to filter by
     */
    public ProjectsFilter withStatus(Optional<? extends ProjectStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Filter projects by customer ID
     */
    public ProjectsFilter withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * Filter projects by customer ID
     */
    public ProjectsFilter withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Return projects modified after this date
     */
    public ProjectsFilter withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }


    /**
     * Return projects modified after this date
     */
    public ProjectsFilter withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectsFilter other = (ProjectsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, status, customerId,
            updatedSince);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProjectsFilter.class,
                "name", name,
                "status", status,
                "customerId", customerId,
                "updatedSince", updatedSince);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<? extends ProjectStatus> status = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<OffsetDateTime> updatedSince = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of project to search for
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of project to search for
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Status of projects to filter by
         */
        public Builder status(ProjectStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of projects to filter by
         */
        public Builder status(Optional<? extends ProjectStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Filter projects by customer ID
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * Filter projects by customer ID
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Return projects modified after this date
         */
        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Return projects modified after this date
         */
        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        public ProjectsFilter build() {

            return new ProjectsFilter(
                name, status, customerId,
                updatedSince);
        }

    }
}
