/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PurchaseOrderInput {
    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional purchase order reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<LinkedSupplierInput> supplier;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<PurchaseOrderStatus> status;

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_date")
    private JsonNullable<LocalDate> issuedDate;

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_date")
    private JsonNullable<LocalDate> deliveryDate;

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_arrival_date")
    private JsonNullable<LocalDate> expectedArrivalDate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Total amount of invoice, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private List<InvoiceLineItemInput> lineItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Address shippingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<LinkedLedgerAccountInput> ledgerAccount;

    /**
     * Optional purchase order template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private JsonNullable<String> templateId;

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private BankAccount bankAccount;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<LocalDate> dueDate;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public PurchaseOrderInput(
            @JsonProperty("po_number") @Nullable JsonNullable<String> poNumber,
            @JsonProperty("reference") @Nullable JsonNullable<String> reference,
            @JsonProperty("supplier") @Nullable JsonNullable<LinkedSupplierInput> supplier,
            @JsonProperty("subsidiary_id") @Nullable JsonNullable<String> subsidiaryId,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("status") @Nullable JsonNullable<PurchaseOrderStatus> status,
            @JsonProperty("issued_date") @Nullable JsonNullable<LocalDate> issuedDate,
            @JsonProperty("delivery_date") @Nullable JsonNullable<LocalDate> deliveryDate,
            @JsonProperty("expected_arrival_date") @Nullable JsonNullable<LocalDate> expectedArrivalDate,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("currency_rate") @Nullable JsonNullable<Double> currencyRate,
            @JsonProperty("sub_total") @Nullable JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") @Nullable JsonNullable<Double> totalTax,
            @JsonProperty("total") @Nullable JsonNullable<Double> total,
            @JsonProperty("tax_inclusive") @Nullable JsonNullable<Boolean> taxInclusive,
            @JsonProperty("line_items") @Nullable List<InvoiceLineItemInput> lineItems,
            @JsonProperty("shipping_address") @Nullable Address shippingAddress,
            @JsonProperty("ledger_account") @Nullable JsonNullable<LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("template_id") @Nullable JsonNullable<String> templateId,
            @JsonProperty("discount_percentage") @Nullable JsonNullable<Double> discountPercentage,
            @JsonProperty("bank_account") @Nullable BankAccount bankAccount,
            @JsonProperty("accounting_by_row") @Nullable JsonNullable<Boolean> accountingByRow,
            @JsonProperty("due_date") @Nullable JsonNullable<LocalDate> dueDate,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("tax_code") @Nullable JsonNullable<String> taxCode,
            @JsonProperty("channel") @Nullable JsonNullable<String> channel,
            @JsonProperty("memo") @Nullable JsonNullable<String> memo,
            @JsonProperty("tracking_categories") @Nullable JsonNullable<List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.poNumber = Optional.ofNullable(poNumber)
            .orElse(JsonNullable.undefined());
        this.reference = Optional.ofNullable(reference)
            .orElse(JsonNullable.undefined());
        this.supplier = Optional.ofNullable(supplier)
            .orElse(JsonNullable.undefined());
        this.subsidiaryId = Optional.ofNullable(subsidiaryId)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.issuedDate = Optional.ofNullable(issuedDate)
            .orElse(JsonNullable.undefined());
        this.deliveryDate = Optional.ofNullable(deliveryDate)
            .orElse(JsonNullable.undefined());
        this.expectedArrivalDate = Optional.ofNullable(expectedArrivalDate)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.currencyRate = Optional.ofNullable(currencyRate)
            .orElse(JsonNullable.undefined());
        this.subTotal = Optional.ofNullable(subTotal)
            .orElse(JsonNullable.undefined());
        this.totalTax = Optional.ofNullable(totalTax)
            .orElse(JsonNullable.undefined());
        this.total = Optional.ofNullable(total)
            .orElse(JsonNullable.undefined());
        this.taxInclusive = Optional.ofNullable(taxInclusive)
            .orElse(JsonNullable.undefined());
        this.lineItems = lineItems;
        this.shippingAddress = shippingAddress;
        this.ledgerAccount = Optional.ofNullable(ledgerAccount)
            .orElse(JsonNullable.undefined());
        this.templateId = Optional.ofNullable(templateId)
            .orElse(JsonNullable.undefined());
        this.discountPercentage = Optional.ofNullable(discountPercentage)
            .orElse(JsonNullable.undefined());
        this.bankAccount = bankAccount;
        this.accountingByRow = Optional.ofNullable(accountingByRow)
            .orElse(JsonNullable.undefined());
        this.dueDate = Optional.ofNullable(dueDate)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.taxCode = Optional.ofNullable(taxCode)
            .orElse(JsonNullable.undefined());
        this.channel = Optional.ofNullable(channel)
            .orElse(JsonNullable.undefined());
        this.memo = Optional.ofNullable(memo)
            .orElse(JsonNullable.undefined());
        this.trackingCategories = Optional.ofNullable(trackingCategories)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public PurchaseOrderInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    public JsonNullable<String> poNumber() {
        return this.poNumber;
    }

    /**
     * Optional purchase order reference.
     */
    public JsonNullable<String> reference() {
        return this.reference;
    }

    /**
     * The supplier this entity is linked to.
     */
    public JsonNullable<LinkedSupplierInput> supplier() {
        return this.supplier;
    }

    /**
     * The ID of the subsidiary
     */
    public JsonNullable<String> subsidiaryId() {
        return this.subsidiaryId;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    public JsonNullable<PurchaseOrderStatus> status() {
        return this.status;
    }

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> issuedDate() {
        return this.issuedDate;
    }

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> deliveryDate() {
        return this.deliveryDate;
    }

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> expectedArrivalDate() {
        return this.expectedArrivalDate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public JsonNullable<Double> currencyRate() {
        return this.currencyRate;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public JsonNullable<Double> subTotal() {
        return this.subTotal;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public JsonNullable<Double> totalTax() {
        return this.totalTax;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public JsonNullable<Double> total() {
        return this.total;
    }

    /**
     * Amounts are including tax
     */
    public JsonNullable<Boolean> taxInclusive() {
        return this.taxInclusive;
    }

    public Optional<List<InvoiceLineItemInput>> lineItems() {
        return Optional.ofNullable(this.lineItems);
    }

    public Optional<Address> shippingAddress() {
        return Optional.ofNullable(this.shippingAddress);
    }

    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return this.ledgerAccount;
    }

    /**
     * Optional purchase order template
     */
    public JsonNullable<String> templateId() {
        return this.templateId;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public JsonNullable<Double> discountPercentage() {
        return this.discountPercentage;
    }

    public Optional<BankAccount> bankAccount() {
        return Optional.ofNullable(this.bankAccount);
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public JsonNullable<Boolean> accountingByRow() {
        return this.accountingByRow;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public JsonNullable<LocalDate> dueDate() {
        return this.dueDate;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public JsonNullable<String> taxCode() {
        return this.taxCode;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public JsonNullable<String> channel() {
        return this.channel;
    }

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    public JsonNullable<String> memo() {
        return this.memo;
    }

    /**
     * A list of linked tracking categories.
     */
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return this.trackingCategories;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    public PurchaseOrderInput withPoNumber(@Nullable String poNumber) {
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }


    /**
     * Optional purchase order reference.
     */
    public PurchaseOrderInput withReference(@Nullable String reference) {
        this.reference = JsonNullable.of(reference);
        return this;
    }


    /**
     * The supplier this entity is linked to.
     */
    public PurchaseOrderInput withSupplier(@Nullable LinkedSupplierInput supplier) {
        this.supplier = JsonNullable.of(supplier);
        return this;
    }


    /**
     * The ID of the subsidiary
     */
    public PurchaseOrderInput withSubsidiaryId(@Nullable String subsidiaryId) {
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public PurchaseOrderInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    public PurchaseOrderInput withStatus(@Nullable PurchaseOrderStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    public PurchaseOrderInput withIssuedDate(@Nullable LocalDate issuedDate) {
        this.issuedDate = JsonNullable.of(issuedDate);
        return this;
    }


    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDeliveryDate(@Nullable LocalDate deliveryDate) {
        this.deliveryDate = JsonNullable.of(deliveryDate);
        return this;
    }


    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    public PurchaseOrderInput withExpectedArrivalDate(@Nullable LocalDate expectedArrivalDate) {
        this.expectedArrivalDate = JsonNullable.of(expectedArrivalDate);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PurchaseOrderInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public PurchaseOrderInput withCurrencyRate(@Nullable Double currencyRate) {
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }


    /**
     * Sub-total amount, normally before tax.
     */
    public PurchaseOrderInput withSubTotal(@Nullable Double subTotal) {
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }


    /**
     * Total tax amount applied to this invoice.
     */
    public PurchaseOrderInput withTotalTax(@Nullable Double totalTax) {
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }


    /**
     * Total amount of invoice, including tax.
     */
    public PurchaseOrderInput withTotal(@Nullable Double total) {
        this.total = JsonNullable.of(total);
        return this;
    }


    /**
     * Amounts are including tax
     */
    public PurchaseOrderInput withTaxInclusive(@Nullable Boolean taxInclusive) {
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }


    public PurchaseOrderInput withLineItems(@Nullable List<InvoiceLineItemInput> lineItems) {
        this.lineItems = lineItems;
        return this;
    }


    public PurchaseOrderInput withShippingAddress(@Nullable Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }


    public PurchaseOrderInput withLedgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }


    /**
     * Optional purchase order template
     */
    public PurchaseOrderInput withTemplateId(@Nullable String templateId) {
        this.templateId = JsonNullable.of(templateId);
        return this;
    }


    /**
     * Discount percentage applied to this transaction.
     */
    public PurchaseOrderInput withDiscountPercentage(@Nullable Double discountPercentage) {
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }


    public PurchaseOrderInput withBankAccount(@Nullable BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }


    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public PurchaseOrderInput withAccountingByRow(@Nullable Boolean accountingByRow) {
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }


    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDueDate(@Nullable LocalDate dueDate) {
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }


    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public PurchaseOrderInput withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public PurchaseOrderInput withTaxCode(@Nullable String taxCode) {
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }


    /**
     * The channel through which the transaction is processed.
     */
    public PurchaseOrderInput withChannel(@Nullable String channel) {
        this.channel = JsonNullable.of(channel);
        return this;
    }


    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    public PurchaseOrderInput withMemo(@Nullable String memo) {
        this.memo = JsonNullable.of(memo);
        return this;
    }


    /**
     * A list of linked tracking categories.
     */
    public PurchaseOrderInput withTrackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }


    public PurchaseOrderInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public PurchaseOrderInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PurchaseOrderInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PurchaseOrderInput other = (PurchaseOrderInput) o;
        return 
            Utils.enhancedDeepEquals(this.poNumber, other.poNumber) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.supplier, other.supplier) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.issuedDate, other.issuedDate) &&
            Utils.enhancedDeepEquals(this.deliveryDate, other.deliveryDate) &&
            Utils.enhancedDeepEquals(this.expectedArrivalDate, other.expectedArrivalDate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.accountingByRow, other.accountingByRow) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            poNumber, reference, supplier,
            subsidiaryId, companyId, status,
            issuedDate, deliveryDate, expectedArrivalDate,
            currency, currencyRate, subTotal,
            totalTax, total, taxInclusive,
            lineItems, shippingAddress, ledgerAccount,
            templateId, discountPercentage, bankAccount,
            accountingByRow, dueDate, paymentMethod,
            taxCode, channel, memo,
            trackingCategories, customFields, rowVersion,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PurchaseOrderInput.class,
                "poNumber", poNumber,
                "reference", reference,
                "supplier", supplier,
                "subsidiaryId", subsidiaryId,
                "companyId", companyId,
                "status", status,
                "issuedDate", issuedDate,
                "deliveryDate", deliveryDate,
                "expectedArrivalDate", expectedArrivalDate,
                "currency", currency,
                "currencyRate", currencyRate,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "total", total,
                "taxInclusive", taxInclusive,
                "lineItems", lineItems,
                "shippingAddress", shippingAddress,
                "ledgerAccount", ledgerAccount,
                "templateId", templateId,
                "discountPercentage", discountPercentage,
                "bankAccount", bankAccount,
                "accountingByRow", accountingByRow,
                "dueDate", dueDate,
                "paymentMethod", paymentMethod,
                "taxCode", taxCode,
                "channel", channel,
                "memo", memo,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> poNumber;

        private JsonNullable<String> reference;

        private JsonNullable<LinkedSupplierInput> supplier;

        private JsonNullable<String> subsidiaryId;

        private JsonNullable<String> companyId;

        private JsonNullable<PurchaseOrderStatus> status;

        private JsonNullable<LocalDate> issuedDate;

        private JsonNullable<LocalDate> deliveryDate;

        private JsonNullable<LocalDate> expectedArrivalDate;

        private JsonNullable<Currency> currency;

        private JsonNullable<Double> currencyRate;

        private JsonNullable<Double> subTotal;

        private JsonNullable<Double> totalTax;

        private JsonNullable<Double> total;

        private JsonNullable<Boolean> taxInclusive;

        private List<InvoiceLineItemInput> lineItems;

        private Address shippingAddress;

        private JsonNullable<LinkedLedgerAccountInput> ledgerAccount;

        private JsonNullable<String> templateId;

        private JsonNullable<Double> discountPercentage;

        private BankAccount bankAccount;

        private JsonNullable<Boolean> accountingByRow;

        private JsonNullable<LocalDate> dueDate;

        private JsonNullable<String> paymentMethod;

        private JsonNullable<String> taxCode;

        private JsonNullable<String> channel;

        private JsonNullable<String> memo;

        private JsonNullable<List<LinkedTrackingCategory>> trackingCategories;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
         */
        public Builder poNumber(@Nullable String poNumber) {
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * Optional purchase order reference.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(@Nullable LinkedSupplierInput supplier) {
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(@Nullable String subsidiaryId) {
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        public Builder status(@Nullable PurchaseOrderStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Date purchase order was issued - YYYY-MM-DD.
         */
        public Builder issuedDate(@Nullable LocalDate issuedDate) {
            this.issuedDate = JsonNullable.of(issuedDate);
            return this;
        }

        /**
         * The date on which the purchase order is to be delivered - YYYY-MM-DD.
         */
        public Builder deliveryDate(@Nullable LocalDate deliveryDate) {
            this.deliveryDate = JsonNullable.of(deliveryDate);
            return this;
        }

        /**
         * The date on which the order is expected to arrive - YYYY-MM-DD.
         */
        public Builder expectedArrivalDate(@Nullable LocalDate expectedArrivalDate) {
            this.expectedArrivalDate = JsonNullable.of(expectedArrivalDate);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(@Nullable Double currencyRate) {
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(@Nullable Double subTotal) {
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(@Nullable Double totalTax) {
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(@Nullable Double total) {
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(@Nullable Boolean taxInclusive) {
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        public Builder lineItems(@Nullable List<InvoiceLineItemInput> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        public Builder shippingAddress(@Nullable Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder ledgerAccount(@Nullable LinkedLedgerAccountInput ledgerAccount) {
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        /**
         * Optional purchase order template
         */
        public Builder templateId(@Nullable String templateId) {
            this.templateId = JsonNullable.of(templateId);
            return this;
        }

        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(@Nullable Double discountPercentage) {
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        public Builder bankAccount(@Nullable BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(@Nullable Boolean accountingByRow) {
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(@Nullable LocalDate dueDate) {
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(@Nullable String taxCode) {
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(@Nullable String channel) {
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * Message for the supplier. This text appears on the Purchase Order.
         */
        public Builder memo(@Nullable String memo) {
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(@Nullable List<LinkedTrackingCategory> trackingCategories) {
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public PurchaseOrderInput build() {
            return new PurchaseOrderInput(
                poNumber, reference, supplier,
                subsidiaryId, companyId, status,
                issuedDate, deliveryDate, expectedArrivalDate,
                currency, currencyRate, subTotal,
                totalTax, total, taxInclusive,
                lineItems, shippingAddress, ledgerAccount,
                templateId, discountPercentage, bankAccount,
                accountingByRow, dueDate, paymentMethod,
                taxCode, channel, memo,
                trackingCategories, customFields, rowVersion,
                passThrough);
        }

    }
}
