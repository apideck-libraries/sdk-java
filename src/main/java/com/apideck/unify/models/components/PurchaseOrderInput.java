/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PurchaseOrderInput {
    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private JsonNullable<String> poNumber;

    /**
     * Optional purchase order reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    private JsonNullable<? extends LinkedSupplierInput> supplier;

    /**
     * The ID of the subsidiary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private JsonNullable<String> subsidiaryId;

    /**
     * The company ID the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends PurchaseOrderStatus> status;

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_date")
    private JsonNullable<LocalDate> issuedDate;

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_date")
    private JsonNullable<LocalDate> deliveryDate;

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_arrival_date")
    private JsonNullable<LocalDate> expectedArrivalDate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Total amount of invoice, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<InvoiceLineItemInput>> lineItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends Address> billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends Address> shippingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger_account")
    private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount;

    /**
     * Optional purchase order template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private JsonNullable<String> templateId;

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_account")
    private Optional<? extends BankAccount> bankAccount;

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_by_row")
    private JsonNullable<Boolean> accountingByRow;

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<LocalDate> dueDate;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * Type of amortization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amortization_type")
    private JsonNullable<? extends PurchaseOrderAmortizationType> amortizationType;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Method of tax calculation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_method")
    private JsonNullable<String> taxMethod;

    /**
     * Method of issuance of the purchase order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_method")
    private JsonNullable<String> issuedMethod;

    /**
     * Email address of the person who issued the purchase order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_email")
    private JsonNullable<String> issuedEmail;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * Internal notes for the purchase order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public PurchaseOrderInput(
            @JsonProperty("po_number") JsonNullable<String> poNumber,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("supplier") JsonNullable<? extends LinkedSupplierInput> supplier,
            @JsonProperty("subsidiary_id") JsonNullable<String> subsidiaryId,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("status") JsonNullable<? extends PurchaseOrderStatus> status,
            @JsonProperty("issued_date") JsonNullable<LocalDate> issuedDate,
            @JsonProperty("delivery_date") JsonNullable<LocalDate> deliveryDate,
            @JsonProperty("expected_arrival_date") JsonNullable<LocalDate> expectedArrivalDate,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") JsonNullable<Double> totalTax,
            @JsonProperty("total") JsonNullable<Double> total,
            @JsonProperty("tax_inclusive") JsonNullable<Boolean> taxInclusive,
            @JsonProperty("line_items") Optional<? extends List<InvoiceLineItemInput>> lineItems,
            @JsonProperty("billing_address") Optional<? extends Address> billingAddress,
            @JsonProperty("shipping_address") Optional<? extends Address> shippingAddress,
            @JsonProperty("ledger_account") JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount,
            @JsonProperty("template_id") JsonNullable<String> templateId,
            @JsonProperty("discount_percentage") JsonNullable<Double> discountPercentage,
            @JsonProperty("bank_account") Optional<? extends BankAccount> bankAccount,
            @JsonProperty("accounting_by_row") JsonNullable<Boolean> accountingByRow,
            @JsonProperty("due_date") JsonNullable<LocalDate> dueDate,
            @JsonProperty("payment_method") JsonNullable<String> paymentMethod,
            @JsonProperty("terms") JsonNullable<String> terms,
            @JsonProperty("amortization_type") JsonNullable<? extends PurchaseOrderAmortizationType> amortizationType,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("tax_method") JsonNullable<String> taxMethod,
            @JsonProperty("issued_method") JsonNullable<String> issuedMethod,
            @JsonProperty("issued_email") JsonNullable<String> issuedEmail,
            @JsonProperty("channel") JsonNullable<String> channel,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("notes") JsonNullable<String> notes,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(poNumber, "poNumber");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(supplier, "supplier");
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(issuedDate, "issuedDate");
        Utils.checkNotNull(deliveryDate, "deliveryDate");
        Utils.checkNotNull(expectedArrivalDate, "expectedArrivalDate");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(terms, "terms");
        Utils.checkNotNull(amortizationType, "amortizationType");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(taxMethod, "taxMethod");
        Utils.checkNotNull(issuedMethod, "issuedMethod");
        Utils.checkNotNull(issuedEmail, "issuedEmail");
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.poNumber = poNumber;
        this.reference = reference;
        this.supplier = supplier;
        this.subsidiaryId = subsidiaryId;
        this.companyId = companyId;
        this.departmentId = departmentId;
        this.status = status;
        this.issuedDate = issuedDate;
        this.deliveryDate = deliveryDate;
        this.expectedArrivalDate = expectedArrivalDate;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.subTotal = subTotal;
        this.totalTax = totalTax;
        this.total = total;
        this.taxInclusive = taxInclusive;
        this.lineItems = lineItems;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.ledgerAccount = ledgerAccount;
        this.templateId = templateId;
        this.discountPercentage = discountPercentage;
        this.bankAccount = bankAccount;
        this.accountingByRow = accountingByRow;
        this.dueDate = dueDate;
        this.paymentMethod = paymentMethod;
        this.terms = terms;
        this.amortizationType = amortizationType;
        this.taxCode = taxCode;
        this.taxMethod = taxMethod;
        this.issuedMethod = issuedMethod;
        this.issuedEmail = issuedEmail;
        this.channel = channel;
        this.memo = memo;
        this.notes = notes;
        this.trackingCategories = trackingCategories;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public PurchaseOrderInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    @JsonIgnore
    public JsonNullable<String> poNumber() {
        return poNumber;
    }

    /**
     * Optional purchase order reference.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * The supplier this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedSupplierInput> supplier() {
        return (JsonNullable<LinkedSupplierInput>) supplier;
    }

    /**
     * The ID of the subsidiary
     */
    @JsonIgnore
    public JsonNullable<String> subsidiaryId() {
        return subsidiaryId;
    }

    /**
     * The company ID the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The ID of the department
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PurchaseOrderStatus> status() {
        return (JsonNullable<PurchaseOrderStatus>) status;
    }

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> issuedDate() {
        return issuedDate;
    }

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> deliveryDate() {
        return deliveryDate;
    }

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> expectedArrivalDate() {
        return expectedArrivalDate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    @JsonIgnore
    public JsonNullable<Double> totalTax() {
        return totalTax;
    }

    /**
     * Total amount of invoice, including tax.
     */
    @JsonIgnore
    public JsonNullable<Double> total() {
        return total;
    }

    /**
     * Amounts are including tax
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxInclusive() {
        return taxInclusive;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<InvoiceLineItemInput>> lineItems() {
        return (Optional<List<InvoiceLineItemInput>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> billingAddress() {
        return (Optional<Address>) billingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> shippingAddress() {
        return (Optional<Address>) shippingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedLedgerAccountInput> ledgerAccount() {
        return (JsonNullable<LinkedLedgerAccountInput>) ledgerAccount;
    }

    /**
     * Optional purchase order template
     */
    @JsonIgnore
    public JsonNullable<String> templateId() {
        return templateId;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    @JsonIgnore
    public JsonNullable<Double> discountPercentage() {
        return discountPercentage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankAccount> bankAccount() {
        return (Optional<BankAccount>) bankAccount;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    @JsonIgnore
    public JsonNullable<Boolean> accountingByRow() {
        return accountingByRow;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> dueDate() {
        return dueDate;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonIgnore
    public JsonNullable<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * Terms of payment.
     */
    @JsonIgnore
    public JsonNullable<String> terms() {
        return terms;
    }

    /**
     * Type of amortization
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PurchaseOrderAmortizationType> amortizationType() {
        return (JsonNullable<PurchaseOrderAmortizationType>) amortizationType;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    /**
     * Method of tax calculation
     */
    @JsonIgnore
    public JsonNullable<String> taxMethod() {
        return taxMethod;
    }

    /**
     * Method of issuance of the purchase order
     */
    @JsonIgnore
    public JsonNullable<String> issuedMethod() {
        return issuedMethod;
    }

    /**
     * Email address of the person who issued the purchase order
     */
    @JsonIgnore
    public JsonNullable<String> issuedEmail() {
        return issuedEmail;
    }

    /**
     * The channel through which the transaction is processed.
     */
    @JsonIgnore
    public JsonNullable<String> channel() {
        return channel;
    }

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * Internal notes for the purchase order.
     */
    @JsonIgnore
    public JsonNullable<String> notes() {
        return notes;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    public PurchaseOrderInput withPoNumber(String poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = JsonNullable.of(poNumber);
        return this;
    }

    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
     */
    public PurchaseOrderInput withPoNumber(JsonNullable<String> poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Optional purchase order reference.
     */
    public PurchaseOrderInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional purchase order reference.
     */
    public PurchaseOrderInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public PurchaseOrderInput withSupplier(LinkedSupplierInput supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = JsonNullable.of(supplier);
        return this;
    }

    /**
     * The supplier this entity is linked to.
     */
    public PurchaseOrderInput withSupplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
        Utils.checkNotNull(supplier, "supplier");
        this.supplier = supplier;
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public PurchaseOrderInput withSubsidiaryId(String subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = JsonNullable.of(subsidiaryId);
        return this;
    }

    /**
     * The ID of the subsidiary
     */
    public PurchaseOrderInput withSubsidiaryId(JsonNullable<String> subsidiaryId) {
        Utils.checkNotNull(subsidiaryId, "subsidiaryId");
        this.subsidiaryId = subsidiaryId;
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public PurchaseOrderInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public PurchaseOrderInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The ID of the department
     */
    public PurchaseOrderInput withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The ID of the department
     */
    public PurchaseOrderInput withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    public PurchaseOrderInput withStatus(PurchaseOrderStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public PurchaseOrderInput withStatus(JsonNullable<? extends PurchaseOrderStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    public PurchaseOrderInput withIssuedDate(LocalDate issuedDate) {
        Utils.checkNotNull(issuedDate, "issuedDate");
        this.issuedDate = JsonNullable.of(issuedDate);
        return this;
    }

    /**
     * Date purchase order was issued - YYYY-MM-DD.
     */
    public PurchaseOrderInput withIssuedDate(JsonNullable<LocalDate> issuedDate) {
        Utils.checkNotNull(issuedDate, "issuedDate");
        this.issuedDate = issuedDate;
        return this;
    }

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDeliveryDate(LocalDate deliveryDate) {
        Utils.checkNotNull(deliveryDate, "deliveryDate");
        this.deliveryDate = JsonNullable.of(deliveryDate);
        return this;
    }

    /**
     * The date on which the purchase order is to be delivered - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDeliveryDate(JsonNullable<LocalDate> deliveryDate) {
        Utils.checkNotNull(deliveryDate, "deliveryDate");
        this.deliveryDate = deliveryDate;
        return this;
    }

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    public PurchaseOrderInput withExpectedArrivalDate(LocalDate expectedArrivalDate) {
        Utils.checkNotNull(expectedArrivalDate, "expectedArrivalDate");
        this.expectedArrivalDate = JsonNullable.of(expectedArrivalDate);
        return this;
    }

    /**
     * The date on which the order is expected to arrive - YYYY-MM-DD.
     */
    public PurchaseOrderInput withExpectedArrivalDate(JsonNullable<LocalDate> expectedArrivalDate) {
        Utils.checkNotNull(expectedArrivalDate, "expectedArrivalDate");
        this.expectedArrivalDate = expectedArrivalDate;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PurchaseOrderInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public PurchaseOrderInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public PurchaseOrderInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public PurchaseOrderInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public PurchaseOrderInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public PurchaseOrderInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public PurchaseOrderInput withTotalTax(double totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax amount applied to this invoice.
     */
    public PurchaseOrderInput withTotalTax(JsonNullable<Double> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public PurchaseOrderInput withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = JsonNullable.of(total);
        return this;
    }

    /**
     * Total amount of invoice, including tax.
     */
    public PurchaseOrderInput withTotal(JsonNullable<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * Amounts are including tax
     */
    public PurchaseOrderInput withTaxInclusive(boolean taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }

    /**
     * Amounts are including tax
     */
    public PurchaseOrderInput withTaxInclusive(JsonNullable<Boolean> taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = taxInclusive;
        return this;
    }

    public PurchaseOrderInput withLineItems(List<InvoiceLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }


    public PurchaseOrderInput withLineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public PurchaseOrderInput withBillingAddress(Address billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    public PurchaseOrderInput withBillingAddress(Optional<? extends Address> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public PurchaseOrderInput withShippingAddress(Address shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    public PurchaseOrderInput withShippingAddress(Optional<? extends Address> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    public PurchaseOrderInput withLedgerAccount(LinkedLedgerAccountInput ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = JsonNullable.of(ledgerAccount);
        return this;
    }

    public PurchaseOrderInput withLedgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
        Utils.checkNotNull(ledgerAccount, "ledgerAccount");
        this.ledgerAccount = ledgerAccount;
        return this;
    }

    /**
     * Optional purchase order template
     */
    public PurchaseOrderInput withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = JsonNullable.of(templateId);
        return this;
    }

    /**
     * Optional purchase order template
     */
    public PurchaseOrderInput withTemplateId(JsonNullable<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public PurchaseOrderInput withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Discount percentage applied to this transaction.
     */
    public PurchaseOrderInput withDiscountPercentage(JsonNullable<Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    public PurchaseOrderInput withBankAccount(BankAccount bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }


    public PurchaseOrderInput withBankAccount(Optional<? extends BankAccount> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public PurchaseOrderInput withAccountingByRow(boolean accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = JsonNullable.of(accountingByRow);
        return this;
    }

    /**
     * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
     */
    public PurchaseOrderInput withAccountingByRow(JsonNullable<Boolean> accountingByRow) {
        Utils.checkNotNull(accountingByRow, "accountingByRow");
        this.accountingByRow = accountingByRow;
        return this;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDueDate(LocalDate dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }

    /**
     * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
     */
    public PurchaseOrderInput withDueDate(JsonNullable<LocalDate> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public PurchaseOrderInput withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public PurchaseOrderInput withPaymentMethod(JsonNullable<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Terms of payment.
     */
    public PurchaseOrderInput withTerms(String terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = JsonNullable.of(terms);
        return this;
    }

    /**
     * Terms of payment.
     */
    public PurchaseOrderInput withTerms(JsonNullable<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    /**
     * Type of amortization
     */
    public PurchaseOrderInput withAmortizationType(PurchaseOrderAmortizationType amortizationType) {
        Utils.checkNotNull(amortizationType, "amortizationType");
        this.amortizationType = JsonNullable.of(amortizationType);
        return this;
    }

    /**
     * Type of amortization
     */
    public PurchaseOrderInput withAmortizationType(JsonNullable<? extends PurchaseOrderAmortizationType> amortizationType) {
        Utils.checkNotNull(amortizationType, "amortizationType");
        this.amortizationType = amortizationType;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public PurchaseOrderInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public PurchaseOrderInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    /**
     * Method of tax calculation
     */
    public PurchaseOrderInput withTaxMethod(String taxMethod) {
        Utils.checkNotNull(taxMethod, "taxMethod");
        this.taxMethod = JsonNullable.of(taxMethod);
        return this;
    }

    /**
     * Method of tax calculation
     */
    public PurchaseOrderInput withTaxMethod(JsonNullable<String> taxMethod) {
        Utils.checkNotNull(taxMethod, "taxMethod");
        this.taxMethod = taxMethod;
        return this;
    }

    /**
     * Method of issuance of the purchase order
     */
    public PurchaseOrderInput withIssuedMethod(String issuedMethod) {
        Utils.checkNotNull(issuedMethod, "issuedMethod");
        this.issuedMethod = JsonNullable.of(issuedMethod);
        return this;
    }

    /**
     * Method of issuance of the purchase order
     */
    public PurchaseOrderInput withIssuedMethod(JsonNullable<String> issuedMethod) {
        Utils.checkNotNull(issuedMethod, "issuedMethod");
        this.issuedMethod = issuedMethod;
        return this;
    }

    /**
     * Email address of the person who issued the purchase order
     */
    public PurchaseOrderInput withIssuedEmail(String issuedEmail) {
        Utils.checkNotNull(issuedEmail, "issuedEmail");
        this.issuedEmail = JsonNullable.of(issuedEmail);
        return this;
    }

    /**
     * Email address of the person who issued the purchase order
     */
    public PurchaseOrderInput withIssuedEmail(JsonNullable<String> issuedEmail) {
        Utils.checkNotNull(issuedEmail, "issuedEmail");
        this.issuedEmail = issuedEmail;
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public PurchaseOrderInput withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = JsonNullable.of(channel);
        return this;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public PurchaseOrderInput withChannel(JsonNullable<String> channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    public PurchaseOrderInput withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * Message for the supplier. This text appears on the Purchase Order.
     */
    public PurchaseOrderInput withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * Internal notes for the purchase order.
     */
    public PurchaseOrderInput withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    /**
     * Internal notes for the purchase order.
     */
    public PurchaseOrderInput withNotes(JsonNullable<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public PurchaseOrderInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public PurchaseOrderInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    public PurchaseOrderInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public PurchaseOrderInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public PurchaseOrderInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public PurchaseOrderInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PurchaseOrderInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public PurchaseOrderInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PurchaseOrderInput other = (PurchaseOrderInput) o;
        return 
            Utils.enhancedDeepEquals(this.poNumber, other.poNumber) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.supplier, other.supplier) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.issuedDate, other.issuedDate) &&
            Utils.enhancedDeepEquals(this.deliveryDate, other.deliveryDate) &&
            Utils.enhancedDeepEquals(this.expectedArrivalDate, other.expectedArrivalDate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.ledgerAccount, other.ledgerAccount) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.accountingByRow, other.accountingByRow) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.amortizationType, other.amortizationType) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.taxMethod, other.taxMethod) &&
            Utils.enhancedDeepEquals(this.issuedMethod, other.issuedMethod) &&
            Utils.enhancedDeepEquals(this.issuedEmail, other.issuedEmail) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            poNumber, reference, supplier,
            subsidiaryId, companyId, departmentId,
            status, issuedDate, deliveryDate,
            expectedArrivalDate, currency, currencyRate,
            subTotal, totalTax, total,
            taxInclusive, lineItems, billingAddress,
            shippingAddress, ledgerAccount, templateId,
            discountPercentage, bankAccount, accountingByRow,
            dueDate, paymentMethod, terms,
            amortizationType, taxCode, taxMethod,
            issuedMethod, issuedEmail, channel,
            memo, notes, trackingCategories,
            customFields, rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PurchaseOrderInput.class,
                "poNumber", poNumber,
                "reference", reference,
                "supplier", supplier,
                "subsidiaryId", subsidiaryId,
                "companyId", companyId,
                "departmentId", departmentId,
                "status", status,
                "issuedDate", issuedDate,
                "deliveryDate", deliveryDate,
                "expectedArrivalDate", expectedArrivalDate,
                "currency", currency,
                "currencyRate", currencyRate,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "total", total,
                "taxInclusive", taxInclusive,
                "lineItems", lineItems,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "ledgerAccount", ledgerAccount,
                "templateId", templateId,
                "discountPercentage", discountPercentage,
                "bankAccount", bankAccount,
                "accountingByRow", accountingByRow,
                "dueDate", dueDate,
                "paymentMethod", paymentMethod,
                "terms", terms,
                "amortizationType", amortizationType,
                "taxCode", taxCode,
                "taxMethod", taxMethod,
                "issuedMethod", issuedMethod,
                "issuedEmail", issuedEmail,
                "channel", channel,
                "memo", memo,
                "notes", notes,
                "trackingCategories", trackingCategories,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> poNumber = JsonNullable.undefined();

        private JsonNullable<String> reference = JsonNullable.undefined();

        private JsonNullable<? extends LinkedSupplierInput> supplier = JsonNullable.undefined();

        private JsonNullable<String> subsidiaryId = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private JsonNullable<? extends PurchaseOrderStatus> status = JsonNullable.undefined();

        private JsonNullable<LocalDate> issuedDate = JsonNullable.undefined();

        private JsonNullable<LocalDate> deliveryDate = JsonNullable.undefined();

        private JsonNullable<LocalDate> expectedArrivalDate = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> currencyRate = JsonNullable.undefined();

        private JsonNullable<Double> subTotal = JsonNullable.undefined();

        private JsonNullable<Double> totalTax = JsonNullable.undefined();

        private JsonNullable<Double> total = JsonNullable.undefined();

        private JsonNullable<Boolean> taxInclusive = JsonNullable.undefined();

        private Optional<? extends List<InvoiceLineItemInput>> lineItems = Optional.empty();

        private Optional<? extends Address> billingAddress = Optional.empty();

        private Optional<? extends Address> shippingAddress = Optional.empty();

        private JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount = JsonNullable.undefined();

        private JsonNullable<String> templateId = JsonNullable.undefined();

        private JsonNullable<Double> discountPercentage = JsonNullable.undefined();

        private Optional<? extends BankAccount> bankAccount = Optional.empty();

        private JsonNullable<Boolean> accountingByRow = JsonNullable.undefined();

        private JsonNullable<LocalDate> dueDate = JsonNullable.undefined();

        private JsonNullable<String> paymentMethod = JsonNullable.undefined();

        private JsonNullable<String> terms = JsonNullable.undefined();

        private JsonNullable<? extends PurchaseOrderAmortizationType> amortizationType = JsonNullable.undefined();

        private JsonNullable<String> taxCode = JsonNullable.undefined();

        private JsonNullable<String> taxMethod = JsonNullable.undefined();

        private JsonNullable<String> issuedMethod = JsonNullable.undefined();

        private JsonNullable<String> issuedEmail = JsonNullable.undefined();

        private JsonNullable<String> channel = JsonNullable.undefined();

        private JsonNullable<String> memo = JsonNullable.undefined();

        private JsonNullable<String> notes = JsonNullable.undefined();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
         */
        public Builder poNumber(String poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = JsonNullable.of(poNumber);
            return this;
        }

        /**
         * A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
         */
        public Builder poNumber(JsonNullable<String> poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = poNumber;
            return this;
        }


        /**
         * Optional purchase order reference.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional purchase order reference.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(LinkedSupplierInput supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = JsonNullable.of(supplier);
            return this;
        }

        /**
         * The supplier this entity is linked to.
         */
        public Builder supplier(JsonNullable<? extends LinkedSupplierInput> supplier) {
            Utils.checkNotNull(supplier, "supplier");
            this.supplier = supplier;
            return this;
        }


        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(String subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = JsonNullable.of(subsidiaryId);
            return this;
        }

        /**
         * The ID of the subsidiary
         */
        public Builder subsidiaryId(JsonNullable<String> subsidiaryId) {
            Utils.checkNotNull(subsidiaryId, "subsidiaryId");
            this.subsidiaryId = subsidiaryId;
            return this;
        }


        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The ID of the department
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        public Builder status(PurchaseOrderStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<? extends PurchaseOrderStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Date purchase order was issued - YYYY-MM-DD.
         */
        public Builder issuedDate(LocalDate issuedDate) {
            Utils.checkNotNull(issuedDate, "issuedDate");
            this.issuedDate = JsonNullable.of(issuedDate);
            return this;
        }

        /**
         * Date purchase order was issued - YYYY-MM-DD.
         */
        public Builder issuedDate(JsonNullable<LocalDate> issuedDate) {
            Utils.checkNotNull(issuedDate, "issuedDate");
            this.issuedDate = issuedDate;
            return this;
        }


        /**
         * The date on which the purchase order is to be delivered - YYYY-MM-DD.
         */
        public Builder deliveryDate(LocalDate deliveryDate) {
            Utils.checkNotNull(deliveryDate, "deliveryDate");
            this.deliveryDate = JsonNullable.of(deliveryDate);
            return this;
        }

        /**
         * The date on which the purchase order is to be delivered - YYYY-MM-DD.
         */
        public Builder deliveryDate(JsonNullable<LocalDate> deliveryDate) {
            Utils.checkNotNull(deliveryDate, "deliveryDate");
            this.deliveryDate = deliveryDate;
            return this;
        }


        /**
         * The date on which the order is expected to arrive - YYYY-MM-DD.
         */
        public Builder expectedArrivalDate(LocalDate expectedArrivalDate) {
            Utils.checkNotNull(expectedArrivalDate, "expectedArrivalDate");
            this.expectedArrivalDate = JsonNullable.of(expectedArrivalDate);
            return this;
        }

        /**
         * The date on which the order is expected to arrive - YYYY-MM-DD.
         */
        public Builder expectedArrivalDate(JsonNullable<LocalDate> expectedArrivalDate) {
            Utils.checkNotNull(expectedArrivalDate, "expectedArrivalDate");
            this.expectedArrivalDate = expectedArrivalDate;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }


        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }


        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(double totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax amount applied to this invoice.
         */
        public Builder totalTax(JsonNullable<Double> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }


        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Total amount of invoice, including tax.
         */
        public Builder total(JsonNullable<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }


        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(boolean taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(JsonNullable<Boolean> taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = taxInclusive;
            return this;
        }


        public Builder lineItems(List<InvoiceLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<InvoiceLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }


        public Builder billingAddress(Address billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends Address> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        public Builder shippingAddress(Address shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends Address> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        public Builder ledgerAccount(LinkedLedgerAccountInput ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = JsonNullable.of(ledgerAccount);
            return this;
        }

        public Builder ledgerAccount(JsonNullable<? extends LinkedLedgerAccountInput> ledgerAccount) {
            Utils.checkNotNull(ledgerAccount, "ledgerAccount");
            this.ledgerAccount = ledgerAccount;
            return this;
        }


        /**
         * Optional purchase order template
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = JsonNullable.of(templateId);
            return this;
        }

        /**
         * Optional purchase order template
         */
        public Builder templateId(JsonNullable<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }


        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount percentage applied to this transaction.
         */
        public Builder discountPercentage(JsonNullable<Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }


        public Builder bankAccount(BankAccount bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        public Builder bankAccount(Optional<? extends BankAccount> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }


        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(boolean accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = JsonNullable.of(accountingByRow);
            return this;
        }

        /**
         * Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
         */
        public Builder accountingByRow(JsonNullable<Boolean> accountingByRow) {
            Utils.checkNotNull(accountingByRow, "accountingByRow");
            this.accountingByRow = accountingByRow;
            return this;
        }


        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(LocalDate dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
         */
        public Builder dueDate(JsonNullable<LocalDate> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(JsonNullable<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }


        /**
         * Terms of payment.
         */
        public Builder terms(String terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(JsonNullable<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }


        /**
         * Type of amortization
         */
        public Builder amortizationType(PurchaseOrderAmortizationType amortizationType) {
            Utils.checkNotNull(amortizationType, "amortizationType");
            this.amortizationType = JsonNullable.of(amortizationType);
            return this;
        }

        /**
         * Type of amortization
         */
        public Builder amortizationType(JsonNullable<? extends PurchaseOrderAmortizationType> amortizationType) {
            Utils.checkNotNull(amortizationType, "amortizationType");
            this.amortizationType = amortizationType;
            return this;
        }


        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }


        /**
         * Method of tax calculation
         */
        public Builder taxMethod(String taxMethod) {
            Utils.checkNotNull(taxMethod, "taxMethod");
            this.taxMethod = JsonNullable.of(taxMethod);
            return this;
        }

        /**
         * Method of tax calculation
         */
        public Builder taxMethod(JsonNullable<String> taxMethod) {
            Utils.checkNotNull(taxMethod, "taxMethod");
            this.taxMethod = taxMethod;
            return this;
        }


        /**
         * Method of issuance of the purchase order
         */
        public Builder issuedMethod(String issuedMethod) {
            Utils.checkNotNull(issuedMethod, "issuedMethod");
            this.issuedMethod = JsonNullable.of(issuedMethod);
            return this;
        }

        /**
         * Method of issuance of the purchase order
         */
        public Builder issuedMethod(JsonNullable<String> issuedMethod) {
            Utils.checkNotNull(issuedMethod, "issuedMethod");
            this.issuedMethod = issuedMethod;
            return this;
        }


        /**
         * Email address of the person who issued the purchase order
         */
        public Builder issuedEmail(String issuedEmail) {
            Utils.checkNotNull(issuedEmail, "issuedEmail");
            this.issuedEmail = JsonNullable.of(issuedEmail);
            return this;
        }

        /**
         * Email address of the person who issued the purchase order
         */
        public Builder issuedEmail(JsonNullable<String> issuedEmail) {
            Utils.checkNotNull(issuedEmail, "issuedEmail");
            this.issuedEmail = issuedEmail;
            return this;
        }


        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = JsonNullable.of(channel);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(JsonNullable<String> channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }


        /**
         * Message for the supplier. This text appears on the Purchase Order.
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * Message for the supplier. This text appears on the Purchase Order.
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }


        /**
         * Internal notes for the purchase order.
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * Internal notes for the purchase order.
         */
        public Builder notes(JsonNullable<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public PurchaseOrderInput build() {

            return new PurchaseOrderInput(
                poNumber, reference, supplier,
                subsidiaryId, companyId, departmentId,
                status, issuedDate, deliveryDate,
                expectedArrivalDate, currency, currencyRate,
                subTotal, totalTax, total,
                taxInclusive, lineItems, billingAddress,
                shippingAddress, ledgerAccount, templateId,
                discountPercentage, bankAccount, accountingByRow,
                dueDate, paymentMethod, terms,
                amortizationType, taxCode, taxMethod,
                issuedMethod, issuedEmail, channel,
                memo, notes, trackingCategories,
                customFields, rowVersion, passThrough);
        }

    }
}
