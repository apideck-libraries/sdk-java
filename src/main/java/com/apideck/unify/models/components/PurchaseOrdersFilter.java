/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class PurchaseOrdersFilter {

    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<OffsetDateTime> updatedSince;

    @SpeakeasyMetadata("queryParam:name=supplier_id")
    private Optional<String> supplierId;

    @JsonCreator
    public PurchaseOrdersFilter(
            Optional<OffsetDateTime> updatedSince,
            Optional<String> supplierId) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(supplierId, "supplierId");
        this.updatedSince = updatedSince;
        this.supplierId = supplierId;
    }
    
    public PurchaseOrdersFilter() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    @JsonIgnore
    public Optional<String> supplierId() {
        return supplierId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PurchaseOrdersFilter withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    public PurchaseOrdersFilter withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    public PurchaseOrdersFilter withSupplierId(String supplierId) {
        Utils.checkNotNull(supplierId, "supplierId");
        this.supplierId = Optional.ofNullable(supplierId);
        return this;
    }

    public PurchaseOrdersFilter withSupplierId(Optional<String> supplierId) {
        Utils.checkNotNull(supplierId, "supplierId");
        this.supplierId = supplierId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PurchaseOrdersFilter other = (PurchaseOrdersFilter) o;
        return 
            Objects.deepEquals(this.updatedSince, other.updatedSince) &&
            Objects.deepEquals(this.supplierId, other.supplierId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            updatedSince,
            supplierId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PurchaseOrdersFilter.class,
                "updatedSince", updatedSince,
                "supplierId", supplierId);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> updatedSince = Optional.empty();
 
        private Optional<String> supplierId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        public Builder supplierId(String supplierId) {
            Utils.checkNotNull(supplierId, "supplierId");
            this.supplierId = Optional.ofNullable(supplierId);
            return this;
        }

        public Builder supplierId(Optional<String> supplierId) {
            Utils.checkNotNull(supplierId, "supplierId");
            this.supplierId = supplierId;
            return this;
        }
        
        public PurchaseOrdersFilter build() {
            return new PurchaseOrdersFilter(
                updatedSince,
                supplierId);
        }
    }
}
