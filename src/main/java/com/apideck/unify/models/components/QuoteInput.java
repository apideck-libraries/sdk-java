/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class QuoteInput {
    /**
     * Quote number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends LinkedCustomerInput> customer;

    /**
     * The unique identifier for the sales order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales_order_id")
    private JsonNullable<String> salesOrderId;

    /**
     * The company ID the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The ID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The unique identifier for the linked project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    private Optional<String> projectId;

    /**
     * Date quote was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quote_date")
    private JsonNullable<LocalDate> quoteDate;

    /**
     * The date until which the quote is valid - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiry_date")
    private JsonNullable<LocalDate> expiryDate;

    /**
     * Terms of the quote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * Quote status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends QuoteStatus> status;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    private JsonNullable<Double> currencyRate;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    private JsonNullable<Double> subTotal;

    /**
     * Total tax amount applied to this quote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private JsonNullable<Double> totalTax;

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    private JsonNullable<String> taxCode;

    /**
     * Discount percentage applied to this quote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    private JsonNullable<Double> discountPercentage;

    /**
     * Discount amount applied to this quote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private JsonNullable<Double> discountAmount;

    /**
     * Total amount of quote, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private JsonNullable<Double> total;

    /**
     * Customer memo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_memo")
    private JsonNullable<String> customerMemo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    private Optional<? extends List<QuoteLineItemInput>> lineItems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends Address> billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends Address> shippingAddress;

    /**
     * A list of linked tracking categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_categories")
    private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories;

    /**
     * Optional quote template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private JsonNullable<String> templateId;

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_document_url")
    private JsonNullable<String> sourceDocumentUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<CustomField>> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public QuoteInput(
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("customer") JsonNullable<? extends LinkedCustomerInput> customer,
            @JsonProperty("sales_order_id") JsonNullable<String> salesOrderId,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("project_id") Optional<String> projectId,
            @JsonProperty("quote_date") JsonNullable<LocalDate> quoteDate,
            @JsonProperty("expiry_date") JsonNullable<LocalDate> expiryDate,
            @JsonProperty("terms") JsonNullable<String> terms,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("status") JsonNullable<? extends QuoteStatus> status,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("currency_rate") JsonNullable<Double> currencyRate,
            @JsonProperty("tax_inclusive") JsonNullable<Boolean> taxInclusive,
            @JsonProperty("sub_total") JsonNullable<Double> subTotal,
            @JsonProperty("total_tax") JsonNullable<Double> totalTax,
            @JsonProperty("tax_code") JsonNullable<String> taxCode,
            @JsonProperty("discount_percentage") JsonNullable<Double> discountPercentage,
            @JsonProperty("discount_amount") JsonNullable<Double> discountAmount,
            @JsonProperty("total") JsonNullable<Double> total,
            @JsonProperty("customer_memo") JsonNullable<String> customerMemo,
            @JsonProperty("line_items") Optional<? extends List<QuoteLineItemInput>> lineItems,
            @JsonProperty("billing_address") Optional<? extends Address> billingAddress,
            @JsonProperty("shipping_address") Optional<? extends Address> shippingAddress,
            @JsonProperty("tracking_categories") JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories,
            @JsonProperty("template_id") JsonNullable<String> templateId,
            @JsonProperty("source_document_url") JsonNullable<String> sourceDocumentUrl,
            @JsonProperty("custom_fields") Optional<? extends List<CustomField>> customFields,
            @JsonProperty("row_version") JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(salesOrderId, "salesOrderId");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(quoteDate, "quoteDate");
        Utils.checkNotNull(expiryDate, "expiryDate");
        Utils.checkNotNull(terms, "terms");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(taxCode, "taxCode");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(customerMemo, "customerMemo");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(passThrough, "passThrough");
        this.number = number;
        this.customer = customer;
        this.salesOrderId = salesOrderId;
        this.companyId = companyId;
        this.departmentId = departmentId;
        this.projectId = projectId;
        this.quoteDate = quoteDate;
        this.expiryDate = expiryDate;
        this.terms = terms;
        this.reference = reference;
        this.status = status;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.taxInclusive = taxInclusive;
        this.subTotal = subTotal;
        this.totalTax = totalTax;
        this.taxCode = taxCode;
        this.discountPercentage = discountPercentage;
        this.discountAmount = discountAmount;
        this.total = total;
        this.customerMemo = customerMemo;
        this.lineItems = lineItems;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.trackingCategories = trackingCategories;
        this.templateId = templateId;
        this.sourceDocumentUrl = sourceDocumentUrl;
        this.customFields = customFields;
        this.rowVersion = rowVersion;
        this.passThrough = passThrough;
    }
    
    public QuoteInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Quote number.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * The customer this entity is linked to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LinkedCustomerInput> customer() {
        return (JsonNullable<LinkedCustomerInput>) customer;
    }

    /**
     * The unique identifier for the sales order.
     */
    @JsonIgnore
    public JsonNullable<String> salesOrderId() {
        return salesOrderId;
    }

    /**
     * The company ID the transaction belongs to
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The ID of the department
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The unique identifier for the linked project.
     */
    @JsonIgnore
    public Optional<String> projectId() {
        return projectId;
    }

    /**
     * Date quote was issued - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> quoteDate() {
        return quoteDate;
    }

    /**
     * The date until which the quote is valid - YYYY-MM-DD.
     */
    @JsonIgnore
    public JsonNullable<LocalDate> expiryDate() {
        return expiryDate;
    }

    /**
     * Terms of the quote.
     */
    @JsonIgnore
    public JsonNullable<String> terms() {
        return terms;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * Quote status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<QuoteStatus> status() {
        return (JsonNullable<QuoteStatus>) status;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonIgnore
    public JsonNullable<Double> currencyRate() {
        return currencyRate;
    }

    /**
     * Amounts are including tax
     */
    @JsonIgnore
    public JsonNullable<Boolean> taxInclusive() {
        return taxInclusive;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    @JsonIgnore
    public JsonNullable<Double> subTotal() {
        return subTotal;
    }

    /**
     * Total tax amount applied to this quote.
     */
    @JsonIgnore
    public JsonNullable<Double> totalTax() {
        return totalTax;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonIgnore
    public JsonNullable<String> taxCode() {
        return taxCode;
    }

    /**
     * Discount percentage applied to this quote.
     */
    @JsonIgnore
    public JsonNullable<Double> discountPercentage() {
        return discountPercentage;
    }

    /**
     * Discount amount applied to this quote.
     */
    @JsonIgnore
    public JsonNullable<Double> discountAmount() {
        return discountAmount;
    }

    /**
     * Total amount of quote, including tax.
     */
    @JsonIgnore
    public JsonNullable<Double> total() {
        return total;
    }

    /**
     * Customer memo
     */
    @JsonIgnore
    public JsonNullable<String> customerMemo() {
        return customerMemo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<QuoteLineItemInput>> lineItems() {
        return (Optional<List<QuoteLineItemInput>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> billingAddress() {
        return (Optional<Address>) billingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> shippingAddress() {
        return (Optional<Address>) shippingAddress;
    }

    /**
     * A list of linked tracking categories.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LinkedTrackingCategory>> trackingCategories() {
        return (JsonNullable<List<LinkedTrackingCategory>>) trackingCategories;
    }

    /**
     * Optional quote template
     */
    @JsonIgnore
    public JsonNullable<String> templateId() {
        return templateId;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
     */
    @JsonIgnore
    public JsonNullable<String> sourceDocumentUrl() {
        return sourceDocumentUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CustomField>> customFields() {
        return (Optional<List<CustomField>>) customFields;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    @JsonIgnore
    public JsonNullable<String> rowVersion() {
        return rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Quote number.
     */
    public QuoteInput withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * Quote number.
     */
    public QuoteInput withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public QuoteInput withCustomer(LinkedCustomerInput customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The customer this entity is linked to.
     */
    public QuoteInput withCustomer(JsonNullable<? extends LinkedCustomerInput> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The unique identifier for the sales order.
     */
    public QuoteInput withSalesOrderId(String salesOrderId) {
        Utils.checkNotNull(salesOrderId, "salesOrderId");
        this.salesOrderId = JsonNullable.of(salesOrderId);
        return this;
    }

    /**
     * The unique identifier for the sales order.
     */
    public QuoteInput withSalesOrderId(JsonNullable<String> salesOrderId) {
        Utils.checkNotNull(salesOrderId, "salesOrderId");
        this.salesOrderId = salesOrderId;
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public QuoteInput withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The company ID the transaction belongs to
     */
    public QuoteInput withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The ID of the department
     */
    public QuoteInput withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The ID of the department
     */
    public QuoteInput withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The unique identifier for the linked project.
     */
    public QuoteInput withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }


    /**
     * The unique identifier for the linked project.
     */
    public QuoteInput withProjectId(Optional<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * Date quote was issued - YYYY-MM-DD.
     */
    public QuoteInput withQuoteDate(LocalDate quoteDate) {
        Utils.checkNotNull(quoteDate, "quoteDate");
        this.quoteDate = JsonNullable.of(quoteDate);
        return this;
    }

    /**
     * Date quote was issued - YYYY-MM-DD.
     */
    public QuoteInput withQuoteDate(JsonNullable<LocalDate> quoteDate) {
        Utils.checkNotNull(quoteDate, "quoteDate");
        this.quoteDate = quoteDate;
        return this;
    }

    /**
     * The date until which the quote is valid - YYYY-MM-DD.
     */
    public QuoteInput withExpiryDate(LocalDate expiryDate) {
        Utils.checkNotNull(expiryDate, "expiryDate");
        this.expiryDate = JsonNullable.of(expiryDate);
        return this;
    }

    /**
     * The date until which the quote is valid - YYYY-MM-DD.
     */
    public QuoteInput withExpiryDate(JsonNullable<LocalDate> expiryDate) {
        Utils.checkNotNull(expiryDate, "expiryDate");
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Terms of the quote.
     */
    public QuoteInput withTerms(String terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = JsonNullable.of(terms);
        return this;
    }

    /**
     * Terms of the quote.
     */
    public QuoteInput withTerms(JsonNullable<String> terms) {
        Utils.checkNotNull(terms, "terms");
        this.terms = terms;
        return this;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public QuoteInput withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Optional reference identifier for the transaction.
     */
    public QuoteInput withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Quote status
     */
    public QuoteInput withStatus(QuoteStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Quote status
     */
    public QuoteInput withStatus(JsonNullable<? extends QuoteStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public QuoteInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO
     * 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public QuoteInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public QuoteInput withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    public QuoteInput withCurrencyRate(JsonNullable<Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    /**
     * Amounts are including tax
     */
    public QuoteInput withTaxInclusive(boolean taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }

    /**
     * Amounts are including tax
     */
    public QuoteInput withTaxInclusive(JsonNullable<Boolean> taxInclusive) {
        Utils.checkNotNull(taxInclusive, "taxInclusive");
        this.taxInclusive = taxInclusive;
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public QuoteInput withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Sub-total amount, normally before tax.
     */
    public QuoteInput withSubTotal(JsonNullable<Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Total tax amount applied to this quote.
     */
    public QuoteInput withTotalTax(double totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = JsonNullable.of(totalTax);
        return this;
    }

    /**
     * Total tax amount applied to this quote.
     */
    public QuoteInput withTotalTax(JsonNullable<Double> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public QuoteInput withTaxCode(String taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = JsonNullable.of(taxCode);
        return this;
    }

    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    public QuoteInput withTaxCode(JsonNullable<String> taxCode) {
        Utils.checkNotNull(taxCode, "taxCode");
        this.taxCode = taxCode;
        return this;
    }

    /**
     * Discount percentage applied to this quote.
     */
    public QuoteInput withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Discount percentage applied to this quote.
     */
    public QuoteInput withDiscountPercentage(JsonNullable<Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Discount amount applied to this quote.
     */
    public QuoteInput withDiscountAmount(double discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * Discount amount applied to this quote.
     */
    public QuoteInput withDiscountAmount(JsonNullable<Double> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * Total amount of quote, including tax.
     */
    public QuoteInput withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = JsonNullable.of(total);
        return this;
    }

    /**
     * Total amount of quote, including tax.
     */
    public QuoteInput withTotal(JsonNullable<Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * Customer memo
     */
    public QuoteInput withCustomerMemo(String customerMemo) {
        Utils.checkNotNull(customerMemo, "customerMemo");
        this.customerMemo = JsonNullable.of(customerMemo);
        return this;
    }

    /**
     * Customer memo
     */
    public QuoteInput withCustomerMemo(JsonNullable<String> customerMemo) {
        Utils.checkNotNull(customerMemo, "customerMemo");
        this.customerMemo = customerMemo;
        return this;
    }

    public QuoteInput withLineItems(List<QuoteLineItemInput> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = Optional.ofNullable(lineItems);
        return this;
    }


    public QuoteInput withLineItems(Optional<? extends List<QuoteLineItemInput>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public QuoteInput withBillingAddress(Address billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    public QuoteInput withBillingAddress(Optional<? extends Address> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public QuoteInput withShippingAddress(Address shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    public QuoteInput withShippingAddress(Optional<? extends Address> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public QuoteInput withTrackingCategories(List<LinkedTrackingCategory> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = JsonNullable.of(trackingCategories);
        return this;
    }

    /**
     * A list of linked tracking categories.
     */
    public QuoteInput withTrackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * Optional quote template
     */
    public QuoteInput withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = JsonNullable.of(templateId);
        return this;
    }

    /**
     * Optional quote template
     */
    public QuoteInput withTemplateId(JsonNullable<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
     */
    public QuoteInput withSourceDocumentUrl(String sourceDocumentUrl) {
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
        return this;
    }

    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
     */
    public QuoteInput withSourceDocumentUrl(JsonNullable<String> sourceDocumentUrl) {
        Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
        this.sourceDocumentUrl = sourceDocumentUrl;
        return this;
    }

    public QuoteInput withCustomFields(List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }


    public QuoteInput withCustomFields(Optional<? extends List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public QuoteInput withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
     * time an update is made to the object.
     */
    public QuoteInput withRowVersion(JsonNullable<String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public QuoteInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications
     * in request body when creating or updating resources.
     */
    public QuoteInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuoteInput other = (QuoteInput) o;
        return 
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.salesOrderId, other.salesOrderId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.projectId, other.projectId) &&
            Utils.enhancedDeepEquals(this.quoteDate, other.quoteDate) &&
            Utils.enhancedDeepEquals(this.expiryDate, other.expiryDate) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.currencyRate, other.currencyRate) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.subTotal, other.subTotal) &&
            Utils.enhancedDeepEquals(this.totalTax, other.totalTax) &&
            Utils.enhancedDeepEquals(this.taxCode, other.taxCode) &&
            Utils.enhancedDeepEquals(this.discountPercentage, other.discountPercentage) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.total, other.total) &&
            Utils.enhancedDeepEquals(this.customerMemo, other.customerMemo) &&
            Utils.enhancedDeepEquals(this.lineItems, other.lineItems) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.trackingCategories, other.trackingCategories) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.sourceDocumentUrl, other.sourceDocumentUrl) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            number, customer, salesOrderId,
            companyId, departmentId, projectId,
            quoteDate, expiryDate, terms,
            reference, status, currency,
            currencyRate, taxInclusive, subTotal,
            totalTax, taxCode, discountPercentage,
            discountAmount, total, customerMemo,
            lineItems, billingAddress, shippingAddress,
            trackingCategories, templateId, sourceDocumentUrl,
            customFields, rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QuoteInput.class,
                "number", number,
                "customer", customer,
                "salesOrderId", salesOrderId,
                "companyId", companyId,
                "departmentId", departmentId,
                "projectId", projectId,
                "quoteDate", quoteDate,
                "expiryDate", expiryDate,
                "terms", terms,
                "reference", reference,
                "status", status,
                "currency", currency,
                "currencyRate", currencyRate,
                "taxInclusive", taxInclusive,
                "subTotal", subTotal,
                "totalTax", totalTax,
                "taxCode", taxCode,
                "discountPercentage", discountPercentage,
                "discountAmount", discountAmount,
                "total", total,
                "customerMemo", customerMemo,
                "lineItems", lineItems,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "trackingCategories", trackingCategories,
                "templateId", templateId,
                "sourceDocumentUrl", sourceDocumentUrl,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> number = JsonNullable.undefined();

        private JsonNullable<? extends LinkedCustomerInput> customer = JsonNullable.undefined();

        private JsonNullable<String> salesOrderId = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<String> departmentId = JsonNullable.undefined();

        private Optional<String> projectId = Optional.empty();

        private JsonNullable<LocalDate> quoteDate = JsonNullable.undefined();

        private JsonNullable<LocalDate> expiryDate = JsonNullable.undefined();

        private JsonNullable<String> terms = JsonNullable.undefined();

        private JsonNullable<String> reference = JsonNullable.undefined();

        private JsonNullable<? extends QuoteStatus> status = JsonNullable.undefined();

        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();

        private JsonNullable<Double> currencyRate = JsonNullable.undefined();

        private JsonNullable<Boolean> taxInclusive = JsonNullable.undefined();

        private JsonNullable<Double> subTotal = JsonNullable.undefined();

        private JsonNullable<Double> totalTax = JsonNullable.undefined();

        private JsonNullable<String> taxCode = JsonNullable.undefined();

        private JsonNullable<Double> discountPercentage = JsonNullable.undefined();

        private JsonNullable<Double> discountAmount = JsonNullable.undefined();

        private JsonNullable<Double> total = JsonNullable.undefined();

        private JsonNullable<String> customerMemo = JsonNullable.undefined();

        private Optional<? extends List<QuoteLineItemInput>> lineItems = Optional.empty();

        private Optional<? extends Address> billingAddress = Optional.empty();

        private Optional<? extends Address> shippingAddress = Optional.empty();

        private JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories = JsonNullable.undefined();

        private JsonNullable<String> templateId = JsonNullable.undefined();

        private JsonNullable<String> sourceDocumentUrl = JsonNullable.undefined();

        private Optional<? extends List<CustomField>> customFields = Optional.empty();

        private JsonNullable<String> rowVersion = JsonNullable.undefined();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Quote number.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * Quote number.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }


        /**
         * The customer this entity is linked to.
         */
        public Builder customer(LinkedCustomerInput customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The customer this entity is linked to.
         */
        public Builder customer(JsonNullable<? extends LinkedCustomerInput> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * The unique identifier for the sales order.
         */
        public Builder salesOrderId(String salesOrderId) {
            Utils.checkNotNull(salesOrderId, "salesOrderId");
            this.salesOrderId = JsonNullable.of(salesOrderId);
            return this;
        }

        /**
         * The unique identifier for the sales order.
         */
        public Builder salesOrderId(JsonNullable<String> salesOrderId) {
            Utils.checkNotNull(salesOrderId, "salesOrderId");
            this.salesOrderId = salesOrderId;
            return this;
        }


        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The company ID the transaction belongs to
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The ID of the department
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The ID of the department
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * The unique identifier for the linked project.
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        /**
         * The unique identifier for the linked project.
         */
        public Builder projectId(Optional<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }


        /**
         * Date quote was issued - YYYY-MM-DD.
         */
        public Builder quoteDate(LocalDate quoteDate) {
            Utils.checkNotNull(quoteDate, "quoteDate");
            this.quoteDate = JsonNullable.of(quoteDate);
            return this;
        }

        /**
         * Date quote was issued - YYYY-MM-DD.
         */
        public Builder quoteDate(JsonNullable<LocalDate> quoteDate) {
            Utils.checkNotNull(quoteDate, "quoteDate");
            this.quoteDate = quoteDate;
            return this;
        }


        /**
         * The date until which the quote is valid - YYYY-MM-DD.
         */
        public Builder expiryDate(LocalDate expiryDate) {
            Utils.checkNotNull(expiryDate, "expiryDate");
            this.expiryDate = JsonNullable.of(expiryDate);
            return this;
        }

        /**
         * The date until which the quote is valid - YYYY-MM-DD.
         */
        public Builder expiryDate(JsonNullable<LocalDate> expiryDate) {
            Utils.checkNotNull(expiryDate, "expiryDate");
            this.expiryDate = expiryDate;
            return this;
        }


        /**
         * Terms of the quote.
         */
        public Builder terms(String terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * Terms of the quote.
         */
        public Builder terms(JsonNullable<String> terms) {
            Utils.checkNotNull(terms, "terms");
            this.terms = terms;
            return this;
        }


        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Optional reference identifier for the transaction.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * Quote status
         */
        public Builder status(QuoteStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Quote status
         */
        public Builder status(JsonNullable<? extends QuoteStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO
         * 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Currency Exchange Rate at the time entity was recorded/generated.
         */
        public Builder currencyRate(JsonNullable<Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }


        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(boolean taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(JsonNullable<Boolean> taxInclusive) {
            Utils.checkNotNull(taxInclusive, "taxInclusive");
            this.taxInclusive = taxInclusive;
            return this;
        }


        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Sub-total amount, normally before tax.
         */
        public Builder subTotal(JsonNullable<Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }


        /**
         * Total tax amount applied to this quote.
         */
        public Builder totalTax(double totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = JsonNullable.of(totalTax);
            return this;
        }

        /**
         * Total tax amount applied to this quote.
         */
        public Builder totalTax(JsonNullable<Double> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }


        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(String taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = JsonNullable.of(taxCode);
            return this;
        }

        /**
         * Applicable tax id/code override if tax is not supplied on a line item basis.
         */
        public Builder taxCode(JsonNullable<String> taxCode) {
            Utils.checkNotNull(taxCode, "taxCode");
            this.taxCode = taxCode;
            return this;
        }


        /**
         * Discount percentage applied to this quote.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Discount percentage applied to this quote.
         */
        public Builder discountPercentage(JsonNullable<Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }


        /**
         * Discount amount applied to this quote.
         */
        public Builder discountAmount(double discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Discount amount applied to this quote.
         */
        public Builder discountAmount(JsonNullable<Double> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }


        /**
         * Total amount of quote, including tax.
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = JsonNullable.of(total);
            return this;
        }

        /**
         * Total amount of quote, including tax.
         */
        public Builder total(JsonNullable<Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }


        /**
         * Customer memo
         */
        public Builder customerMemo(String customerMemo) {
            Utils.checkNotNull(customerMemo, "customerMemo");
            this.customerMemo = JsonNullable.of(customerMemo);
            return this;
        }

        /**
         * Customer memo
         */
        public Builder customerMemo(JsonNullable<String> customerMemo) {
            Utils.checkNotNull(customerMemo, "customerMemo");
            this.customerMemo = customerMemo;
            return this;
        }


        public Builder lineItems(List<QuoteLineItemInput> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        public Builder lineItems(Optional<? extends List<QuoteLineItemInput>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }


        public Builder billingAddress(Address billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends Address> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        public Builder shippingAddress(Address shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends Address> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(List<LinkedTrackingCategory> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = JsonNullable.of(trackingCategories);
            return this;
        }

        /**
         * A list of linked tracking categories.
         */
        public Builder trackingCategories(JsonNullable<? extends List<LinkedTrackingCategory>> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }


        /**
         * Optional quote template
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = JsonNullable.of(templateId);
            return this;
        }

        /**
         * Optional quote template
         */
        public Builder templateId(JsonNullable<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }


        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
         */
        public Builder sourceDocumentUrl(String sourceDocumentUrl) {
            Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
            this.sourceDocumentUrl = JsonNullable.of(sourceDocumentUrl);
            return this;
        }

        /**
         * URL link to a source document - shown as 'Go to [appName]' in the downstream app.
         */
        public Builder sourceDocumentUrl(JsonNullable<String> sourceDocumentUrl) {
            Utils.checkNotNull(sourceDocumentUrl, "sourceDocumentUrl");
            this.sourceDocumentUrl = sourceDocumentUrl;
            return this;
        }


        public Builder customFields(List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each
         * time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications
         * in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        public QuoteInput build() {

            return new QuoteInput(
                number, customer, salesOrderId,
                companyId, departmentId, projectId,
                quoteDate, expiryDate, terms,
                reference, status, currency,
                currencyRate, taxInclusive, subTotal,
                totalTax, taxCode, discountPercentage,
                discountAmount, total, customerMemo,
                lineItems, billingAddress, shippingAddress,
                trackingCategories, templateId, sourceDocumentUrl,
                customFields, rowVersion, passThrough);
        }

    }
}
