/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Rebilling
 * 
 * <p>Rebilling metadata for this line item.
 */
public class Rebilling {
    /**
     * Whether this line item is eligible for rebilling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rebillable")
    private Optional<Boolean> rebillable;

    /**
     * Status of the rebilling process for this line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rebill_status")
    private JsonNullable<? extends RebillStatus> rebillStatus;

    /**
     * The ID of the transaction this line item was rebilled to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linked_transaction_id")
    private JsonNullable<String> linkedTransactionId;

    /**
     * The ID of the line item in the rebilled transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linked_transaction_line_id")
    private JsonNullable<String> linkedTransactionLineId;

    @JsonCreator
    public Rebilling(
            @JsonProperty("rebillable") Optional<Boolean> rebillable,
            @JsonProperty("rebill_status") JsonNullable<? extends RebillStatus> rebillStatus,
            @JsonProperty("linked_transaction_id") JsonNullable<String> linkedTransactionId,
            @JsonProperty("linked_transaction_line_id") JsonNullable<String> linkedTransactionLineId) {
        Utils.checkNotNull(rebillable, "rebillable");
        Utils.checkNotNull(rebillStatus, "rebillStatus");
        Utils.checkNotNull(linkedTransactionId, "linkedTransactionId");
        Utils.checkNotNull(linkedTransactionLineId, "linkedTransactionLineId");
        this.rebillable = rebillable;
        this.rebillStatus = rebillStatus;
        this.linkedTransactionId = linkedTransactionId;
        this.linkedTransactionLineId = linkedTransactionLineId;
    }
    
    public Rebilling() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * Whether this line item is eligible for rebilling.
     */
    @JsonIgnore
    public Optional<Boolean> rebillable() {
        return rebillable;
    }

    /**
     * Status of the rebilling process for this line item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<RebillStatus> rebillStatus() {
        return (JsonNullable<RebillStatus>) rebillStatus;
    }

    /**
     * The ID of the transaction this line item was rebilled to.
     */
    @JsonIgnore
    public JsonNullable<String> linkedTransactionId() {
        return linkedTransactionId;
    }

    /**
     * The ID of the line item in the rebilled transaction.
     */
    @JsonIgnore
    public JsonNullable<String> linkedTransactionLineId() {
        return linkedTransactionLineId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether this line item is eligible for rebilling.
     */
    public Rebilling withRebillable(boolean rebillable) {
        Utils.checkNotNull(rebillable, "rebillable");
        this.rebillable = Optional.ofNullable(rebillable);
        return this;
    }


    /**
     * Whether this line item is eligible for rebilling.
     */
    public Rebilling withRebillable(Optional<Boolean> rebillable) {
        Utils.checkNotNull(rebillable, "rebillable");
        this.rebillable = rebillable;
        return this;
    }

    /**
     * Status of the rebilling process for this line item.
     */
    public Rebilling withRebillStatus(RebillStatus rebillStatus) {
        Utils.checkNotNull(rebillStatus, "rebillStatus");
        this.rebillStatus = JsonNullable.of(rebillStatus);
        return this;
    }

    /**
     * Status of the rebilling process for this line item.
     */
    public Rebilling withRebillStatus(JsonNullable<? extends RebillStatus> rebillStatus) {
        Utils.checkNotNull(rebillStatus, "rebillStatus");
        this.rebillStatus = rebillStatus;
        return this;
    }

    /**
     * The ID of the transaction this line item was rebilled to.
     */
    public Rebilling withLinkedTransactionId(String linkedTransactionId) {
        Utils.checkNotNull(linkedTransactionId, "linkedTransactionId");
        this.linkedTransactionId = JsonNullable.of(linkedTransactionId);
        return this;
    }

    /**
     * The ID of the transaction this line item was rebilled to.
     */
    public Rebilling withLinkedTransactionId(JsonNullable<String> linkedTransactionId) {
        Utils.checkNotNull(linkedTransactionId, "linkedTransactionId");
        this.linkedTransactionId = linkedTransactionId;
        return this;
    }

    /**
     * The ID of the line item in the rebilled transaction.
     */
    public Rebilling withLinkedTransactionLineId(String linkedTransactionLineId) {
        Utils.checkNotNull(linkedTransactionLineId, "linkedTransactionLineId");
        this.linkedTransactionLineId = JsonNullable.of(linkedTransactionLineId);
        return this;
    }

    /**
     * The ID of the line item in the rebilled transaction.
     */
    public Rebilling withLinkedTransactionLineId(JsonNullable<String> linkedTransactionLineId) {
        Utils.checkNotNull(linkedTransactionLineId, "linkedTransactionLineId");
        this.linkedTransactionLineId = linkedTransactionLineId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rebilling other = (Rebilling) o;
        return 
            Utils.enhancedDeepEquals(this.rebillable, other.rebillable) &&
            Utils.enhancedDeepEquals(this.rebillStatus, other.rebillStatus) &&
            Utils.enhancedDeepEquals(this.linkedTransactionId, other.linkedTransactionId) &&
            Utils.enhancedDeepEquals(this.linkedTransactionLineId, other.linkedTransactionLineId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            rebillable, rebillStatus, linkedTransactionId,
            linkedTransactionLineId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Rebilling.class,
                "rebillable", rebillable,
                "rebillStatus", rebillStatus,
                "linkedTransactionId", linkedTransactionId,
                "linkedTransactionLineId", linkedTransactionLineId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> rebillable = Optional.empty();

        private JsonNullable<? extends RebillStatus> rebillStatus = JsonNullable.undefined();

        private JsonNullable<String> linkedTransactionId = JsonNullable.undefined();

        private JsonNullable<String> linkedTransactionLineId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether this line item is eligible for rebilling.
         */
        public Builder rebillable(boolean rebillable) {
            Utils.checkNotNull(rebillable, "rebillable");
            this.rebillable = Optional.ofNullable(rebillable);
            return this;
        }

        /**
         * Whether this line item is eligible for rebilling.
         */
        public Builder rebillable(Optional<Boolean> rebillable) {
            Utils.checkNotNull(rebillable, "rebillable");
            this.rebillable = rebillable;
            return this;
        }


        /**
         * Status of the rebilling process for this line item.
         */
        public Builder rebillStatus(RebillStatus rebillStatus) {
            Utils.checkNotNull(rebillStatus, "rebillStatus");
            this.rebillStatus = JsonNullable.of(rebillStatus);
            return this;
        }

        /**
         * Status of the rebilling process for this line item.
         */
        public Builder rebillStatus(JsonNullable<? extends RebillStatus> rebillStatus) {
            Utils.checkNotNull(rebillStatus, "rebillStatus");
            this.rebillStatus = rebillStatus;
            return this;
        }


        /**
         * The ID of the transaction this line item was rebilled to.
         */
        public Builder linkedTransactionId(String linkedTransactionId) {
            Utils.checkNotNull(linkedTransactionId, "linkedTransactionId");
            this.linkedTransactionId = JsonNullable.of(linkedTransactionId);
            return this;
        }

        /**
         * The ID of the transaction this line item was rebilled to.
         */
        public Builder linkedTransactionId(JsonNullable<String> linkedTransactionId) {
            Utils.checkNotNull(linkedTransactionId, "linkedTransactionId");
            this.linkedTransactionId = linkedTransactionId;
            return this;
        }


        /**
         * The ID of the line item in the rebilled transaction.
         */
        public Builder linkedTransactionLineId(String linkedTransactionLineId) {
            Utils.checkNotNull(linkedTransactionLineId, "linkedTransactionLineId");
            this.linkedTransactionLineId = JsonNullable.of(linkedTransactionLineId);
            return this;
        }

        /**
         * The ID of the line item in the rebilled transaction.
         */
        public Builder linkedTransactionLineId(JsonNullable<String> linkedTransactionLineId) {
            Utils.checkNotNull(linkedTransactionLineId, "linkedTransactionLineId");
            this.linkedTransactionLineId = linkedTransactionLineId;
            return this;
        }

        public Rebilling build() {

            return new Rebilling(
                rebillable, rebillStatus, linkedTransactionId,
                linkedTransactionLineId);
        }

    }
}
