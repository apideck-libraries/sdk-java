/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Refunds {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private Optional<String> locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Long> amount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends OrderRefundsStatus> status;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tender_id")
    private Optional<String> tenderId;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_id")
    private Optional<String> transactionId;

    @JsonCreator
    public Refunds(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("location_id") Optional<String> locationId,
            @JsonProperty("amount") Optional<Long> amount,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("reason") Optional<String> reason,
            @JsonProperty("status") Optional<? extends OrderRefundsStatus> status,
            @JsonProperty("tender_id") Optional<String> tenderId,
            @JsonProperty("transaction_id") Optional<String> transactionId) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(tenderId, "tenderId");
        Utils.checkNotNull(transactionId, "transactionId");
        this.id = id;
        this.locationId = locationId;
        this.amount = amount;
        this.currency = currency;
        this.reason = reason;
        this.status = status;
        this.tenderId = tenderId;
        this.transactionId = transactionId;
    }
    
    public Refunds() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> locationId() {
        return locationId;
    }

    @JsonIgnore
    public Optional<Long> amount() {
        return amount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderRefundsStatus> status() {
        return (Optional<OrderRefundsStatus>) status;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> tenderId() {
        return tenderId;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = Optional.ofNullable(locationId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withLocationId(Optional<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public Refunds withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public Refunds withAmount(Optional<Long> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Refunds withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Refunds withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Refunds withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    public Refunds withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    public Refunds withStatus(OrderRefundsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public Refunds withStatus(Optional<? extends OrderRefundsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withTenderId(String tenderId) {
        Utils.checkNotNull(tenderId, "tenderId");
        this.tenderId = Optional.ofNullable(tenderId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withTenderId(Optional<String> tenderId) {
        Utils.checkNotNull(tenderId, "tenderId");
        this.tenderId = tenderId;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Refunds withTransactionId(Optional<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Refunds other = (Refunds) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.locationId, other.locationId) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.reason, other.reason) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.tenderId, other.tenderId) &&
            Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            locationId,
            amount,
            currency,
            reason,
            status,
            tenderId,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Refunds.class,
                "id", id,
                "locationId", locationId,
                "amount", amount,
                "currency", currency,
                "reason", reason,
                "status", status,
                "tenderId", tenderId,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> locationId = Optional.empty();
 
        private Optional<Long> amount = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private Optional<String> reason = Optional.empty();
 
        private Optional<? extends OrderRefundsStatus> status = Optional.empty();
 
        private Optional<String> tenderId = Optional.empty();
 
        private Optional<String> transactionId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder locationId(Optional<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Long> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        public Builder status(OrderRefundsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends OrderRefundsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder tenderId(String tenderId) {
            Utils.checkNotNull(tenderId, "tenderId");
            this.tenderId = Optional.ofNullable(tenderId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder tenderId(Optional<String> tenderId) {
            Utils.checkNotNull(tenderId, "tenderId");
            this.tenderId = tenderId;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder transactionId(Optional<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public Refunds build() {
            return new Refunds(
                id,
                locationId,
                amount,
                currency,
                reason,
                status,
                tenderId,
                transactionId);
        }
    }
}

