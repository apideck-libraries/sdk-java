/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Reports {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The name of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_name")
    private String reportName;

    /**
     * The start date of the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private String startDate;

    /**
     * The start date of the report
     */
    @JsonProperty("end_date")
    private String endDate;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;

    /**
     * A balance sheet assets account represents the financial position of a company at a specific point in time.
     */
    @JsonProperty("assets")
    private BalanceSheetAssetsAccount assets;

    /**
     * A balance sheet liabilities account represents the financial position of a company at a specific point in time.
     */
    @JsonProperty("liabilities")
    private BalanceSheetLiabilitiesAccount liabilities;

    /**
     * A balance sheet equity account represents the financial position of a company at a specific point in time.
     */
    @JsonProperty("equity")
    private BalanceSheetEquityAccount equity;

    /**
     * The net assets of the balance sheet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_assets")
    private Double netAssets;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * A balance sheet uncategorized items account represents the financial position of a company at a specific point in time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uncategorized_items")
    private BalanceSheetUncategorizedItemsAccount uncategorizedItems;

    @JsonCreator
    public Reports(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("report_name") @Nullable String reportName,
            @JsonProperty("start_date") @Nullable String startDate,
            @JsonProperty("end_date") @Nonnull String endDate,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("assets") @Nonnull BalanceSheetAssetsAccount assets,
            @JsonProperty("liabilities") @Nonnull BalanceSheetLiabilitiesAccount liabilities,
            @JsonProperty("equity") @Nonnull BalanceSheetEquityAccount equity,
            @JsonProperty("net_assets") @Nullable Double netAssets,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("uncategorized_items") @Nullable BalanceSheetUncategorizedItemsAccount uncategorizedItems) {
        this.id = id;
        this.reportName = reportName;
        this.startDate = startDate;
        this.endDate = Optional.ofNullable(endDate)
            .orElseThrow(() -> new IllegalArgumentException("endDate cannot be null"));
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.assets = Optional.ofNullable(assets)
            .orElseThrow(() -> new IllegalArgumentException("assets cannot be null"));
        this.liabilities = Optional.ofNullable(liabilities)
            .orElseThrow(() -> new IllegalArgumentException("liabilities cannot be null"));
        this.equity = Optional.ofNullable(equity)
            .orElseThrow(() -> new IllegalArgumentException("equity cannot be null"));
        this.netAssets = netAssets;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.uncategorizedItems = uncategorizedItems;
    }
    
    public Reports(
            @Nonnull String endDate,
            @Nonnull BalanceSheetAssetsAccount assets,
            @Nonnull BalanceSheetLiabilitiesAccount liabilities,
            @Nonnull BalanceSheetEquityAccount equity) {
        this(null, null, null,
            endDate, null, assets,
            liabilities, equity, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the report
     */
    public Optional<String> reportName() {
        return Optional.ofNullable(this.reportName);
    }

    /**
     * The start date of the report
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The start date of the report
     */
    public String endDate() {
        return this.endDate;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    /**
     * A balance sheet assets account represents the financial position of a company at a specific point in time.
     */
    public BalanceSheetAssetsAccount assets() {
        return this.assets;
    }

    /**
     * A balance sheet liabilities account represents the financial position of a company at a specific point in time.
     */
    public BalanceSheetLiabilitiesAccount liabilities() {
        return this.liabilities;
    }

    /**
     * A balance sheet equity account represents the financial position of a company at a specific point in time.
     */
    public BalanceSheetEquityAccount equity() {
        return this.equity;
    }

    /**
     * The net assets of the balance sheet
     */
    public Optional<Double> netAssets() {
        return Optional.ofNullable(this.netAssets);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * A balance sheet uncategorized items account represents the financial position of a company at a specific point in time.
     */
    public Optional<BalanceSheetUncategorizedItemsAccount> uncategorizedItems() {
        return Optional.ofNullable(this.uncategorizedItems);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Reports withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The name of the report
     */
    public Reports withReportName(@Nullable String reportName) {
        this.reportName = reportName;
        return this;
    }


    /**
     * The start date of the report
     */
    public Reports withStartDate(@Nullable String startDate) {
        this.startDate = startDate;
        return this;
    }


    /**
     * The start date of the report
     */
    public Reports withEndDate(@Nonnull String endDate) {
        this.endDate = Utils.checkNotNull(endDate, "endDate");
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Reports withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    /**
     * A balance sheet assets account represents the financial position of a company at a specific point in time.
     */
    public Reports withAssets(@Nonnull BalanceSheetAssetsAccount assets) {
        this.assets = Utils.checkNotNull(assets, "assets");
        return this;
    }


    /**
     * A balance sheet liabilities account represents the financial position of a company at a specific point in time.
     */
    public Reports withLiabilities(@Nonnull BalanceSheetLiabilitiesAccount liabilities) {
        this.liabilities = Utils.checkNotNull(liabilities, "liabilities");
        return this;
    }


    /**
     * A balance sheet equity account represents the financial position of a company at a specific point in time.
     */
    public Reports withEquity(@Nonnull BalanceSheetEquityAccount equity) {
        this.equity = Utils.checkNotNull(equity, "equity");
        return this;
    }


    /**
     * The net assets of the balance sheet
     */
    public Reports withNetAssets(@Nullable Double netAssets) {
        this.netAssets = netAssets;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Reports withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public Reports withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Reports withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Reports withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Reports withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * A balance sheet uncategorized items account represents the financial position of a company at a specific point in time.
     */
    public Reports withUncategorizedItems(@Nullable BalanceSheetUncategorizedItemsAccount uncategorizedItems) {
        this.uncategorizedItems = uncategorizedItems;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reports other = (Reports) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reportName, other.reportName) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.assets, other.assets) &&
            Utils.enhancedDeepEquals(this.liabilities, other.liabilities) &&
            Utils.enhancedDeepEquals(this.equity, other.equity) &&
            Utils.enhancedDeepEquals(this.netAssets, other.netAssets) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.uncategorizedItems, other.uncategorizedItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, reportName, startDate,
            endDate, currency, assets,
            liabilities, equity, netAssets,
            customMappings, updatedBy, createdBy,
            updatedAt, createdAt, uncategorizedItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Reports.class,
                "id", id,
                "reportName", reportName,
                "startDate", startDate,
                "endDate", endDate,
                "currency", currency,
                "assets", assets,
                "liabilities", liabilities,
                "equity", equity,
                "netAssets", netAssets,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "uncategorizedItems", uncategorizedItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String reportName;

        private String startDate;

        private String endDate;

        private JsonNullable<Currency> currency;

        private BalanceSheetAssetsAccount assets;

        private BalanceSheetLiabilitiesAccount liabilities;

        private BalanceSheetEquityAccount equity;

        private Double netAssets;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private BalanceSheetUncategorizedItemsAccount uncategorizedItems;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The name of the report
         */
        public Builder reportName(@Nullable String reportName) {
            this.reportName = reportName;
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * The start date of the report
         */
        public Builder endDate(@Nonnull String endDate) {
            this.endDate = Utils.checkNotNull(endDate, "endDate");
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * A balance sheet assets account represents the financial position of a company at a specific point in time.
         */
        public Builder assets(@Nonnull BalanceSheetAssetsAccount assets) {
            this.assets = Utils.checkNotNull(assets, "assets");
            return this;
        }

        /**
         * A balance sheet liabilities account represents the financial position of a company at a specific point in time.
         */
        public Builder liabilities(@Nonnull BalanceSheetLiabilitiesAccount liabilities) {
            this.liabilities = Utils.checkNotNull(liabilities, "liabilities");
            return this;
        }

        /**
         * A balance sheet equity account represents the financial position of a company at a specific point in time.
         */
        public Builder equity(@Nonnull BalanceSheetEquityAccount equity) {
            this.equity = Utils.checkNotNull(equity, "equity");
            return this;
        }

        /**
         * The net assets of the balance sheet
         */
        public Builder netAssets(@Nullable Double netAssets) {
            this.netAssets = netAssets;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * A balance sheet uncategorized items account represents the financial position of a company at a specific point in time.
         */
        public Builder uncategorizedItems(@Nullable BalanceSheetUncategorizedItemsAccount uncategorizedItems) {
            this.uncategorizedItems = uncategorizedItems;
            return this;
        }

        public Reports build() {
            return new Reports(
                id, reportName, startDate,
                endDate, currency, assets,
                liabilities, equity, netAssets,
                customMappings, updatedBy, createdBy,
                updatedAt, createdAt, uncategorizedItems);
        }

    }
}
