/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class RequestCountAllocation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unify")
    private Double unify;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy")
    private Double proxy;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vault")
    private Double vault;

    @JsonCreator
    public RequestCountAllocation(
            @JsonProperty("unify") @Nullable Double unify,
            @JsonProperty("proxy") @Nullable Double proxy,
            @JsonProperty("vault") @Nullable Double vault) {
        this.unify = unify;
        this.proxy = proxy;
        this.vault = vault;
    }
    
    public RequestCountAllocation() {
        this(null, null, null);
    }

    public Optional<Double> unify() {
        return Optional.ofNullable(this.unify);
    }

    public Optional<Double> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    public Optional<Double> vault() {
        return Optional.ofNullable(this.vault);
    }

    public static Builder builder() {
        return new Builder();
    }


    public RequestCountAllocation withUnify(@Nullable Double unify) {
        this.unify = unify;
        return this;
    }


    public RequestCountAllocation withProxy(@Nullable Double proxy) {
        this.proxy = proxy;
        return this;
    }


    public RequestCountAllocation withVault(@Nullable Double vault) {
        this.vault = vault;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestCountAllocation other = (RequestCountAllocation) o;
        return 
            Utils.enhancedDeepEquals(this.unify, other.unify) &&
            Utils.enhancedDeepEquals(this.proxy, other.proxy) &&
            Utils.enhancedDeepEquals(this.vault, other.vault);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unify, proxy, vault);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestCountAllocation.class,
                "unify", unify,
                "proxy", proxy,
                "vault", vault);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Double unify;

        private Double proxy;

        private Double vault;

        private Builder() {
          // force use of static builder() method
        }

        public Builder unify(@Nullable Double unify) {
            this.unify = unify;
            return this;
        }

        public Builder proxy(@Nullable Double proxy) {
            this.proxy = proxy;
            return this;
        }

        public Builder vault(@Nullable Double vault) {
            this.vault = vault;
            return this;
        }

        public RequestCountAllocation build() {
            return new RequestCountAllocation(
                unify, proxy, vault);
        }

    }
}
