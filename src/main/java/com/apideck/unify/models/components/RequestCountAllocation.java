/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class RequestCountAllocation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unify")
    private Optional<Double> unify;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy")
    private Optional<Double> proxy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vault")
    private Optional<Double> vault;

    @JsonCreator
    public RequestCountAllocation(
            @JsonProperty("unify") Optional<Double> unify,
            @JsonProperty("proxy") Optional<Double> proxy,
            @JsonProperty("vault") Optional<Double> vault) {
        Utils.checkNotNull(unify, "unify");
        Utils.checkNotNull(proxy, "proxy");
        Utils.checkNotNull(vault, "vault");
        this.unify = unify;
        this.proxy = proxy;
        this.vault = vault;
    }
    
    public RequestCountAllocation() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> unify() {
        return unify;
    }

    @JsonIgnore
    public Optional<Double> proxy() {
        return proxy;
    }

    @JsonIgnore
    public Optional<Double> vault() {
        return vault;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public RequestCountAllocation withUnify(double unify) {
        Utils.checkNotNull(unify, "unify");
        this.unify = Optional.ofNullable(unify);
        return this;
    }

    public RequestCountAllocation withUnify(Optional<Double> unify) {
        Utils.checkNotNull(unify, "unify");
        this.unify = unify;
        return this;
    }

    public RequestCountAllocation withProxy(double proxy) {
        Utils.checkNotNull(proxy, "proxy");
        this.proxy = Optional.ofNullable(proxy);
        return this;
    }

    public RequestCountAllocation withProxy(Optional<Double> proxy) {
        Utils.checkNotNull(proxy, "proxy");
        this.proxy = proxy;
        return this;
    }

    public RequestCountAllocation withVault(double vault) {
        Utils.checkNotNull(vault, "vault");
        this.vault = Optional.ofNullable(vault);
        return this;
    }

    public RequestCountAllocation withVault(Optional<Double> vault) {
        Utils.checkNotNull(vault, "vault");
        this.vault = vault;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestCountAllocation other = (RequestCountAllocation) o;
        return 
            Objects.deepEquals(this.unify, other.unify) &&
            Objects.deepEquals(this.proxy, other.proxy) &&
            Objects.deepEquals(this.vault, other.vault);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            unify,
            proxy,
            vault);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestCountAllocation.class,
                "unify", unify,
                "proxy", proxy,
                "vault", vault);
    }
    
    public final static class Builder {
 
        private Optional<Double> unify = Optional.empty();
 
        private Optional<Double> proxy = Optional.empty();
 
        private Optional<Double> vault = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder unify(double unify) {
            Utils.checkNotNull(unify, "unify");
            this.unify = Optional.ofNullable(unify);
            return this;
        }

        public Builder unify(Optional<Double> unify) {
            Utils.checkNotNull(unify, "unify");
            this.unify = unify;
            return this;
        }

        public Builder proxy(double proxy) {
            Utils.checkNotNull(proxy, "proxy");
            this.proxy = Optional.ofNullable(proxy);
            return this;
        }

        public Builder proxy(Optional<Double> proxy) {
            Utils.checkNotNull(proxy, "proxy");
            this.proxy = proxy;
            return this;
        }

        public Builder vault(double vault) {
            Utils.checkNotNull(vault, "vault");
            this.vault = Optional.ofNullable(vault);
            return this;
        }

        public Builder vault(Optional<Double> vault) {
            Utils.checkNotNull(vault, "vault");
            this.vault = vault;
            return this;
        }
        
        public RequestCountAllocation build() {
            return new RequestCountAllocation(
                unify,
                proxy,
                vault);
        }
    }
}
