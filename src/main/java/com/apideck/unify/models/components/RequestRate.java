/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * RequestRate
 * 
 * <p>The rate at which requests for resources will be made to downstream.
 */
public class RequestRate {
    /**
     * The number of requests per window unit.
     */
    @JsonProperty("rate")
    private long rate;

    /**
     * Size of request window.
     */
    @JsonProperty("size")
    private long size;

    /**
     * The window unit for the rate.
     */
    @JsonProperty("unit")
    private Unit unit;

    @JsonCreator
    public RequestRate(
            @JsonProperty("rate") long rate,
            @JsonProperty("size") long size,
            @JsonProperty("unit") @Nonnull Unit unit) {
        this.rate = rate;
        this.size = size;
        this.unit = Optional.ofNullable(unit)
            .orElseThrow(() -> new IllegalArgumentException("unit cannot be null"));
    }

    /**
     * The number of requests per window unit.
     */
    public long rate() {
        return this.rate;
    }

    /**
     * Size of request window.
     */
    public long size() {
        return this.size;
    }

    /**
     * The window unit for the rate.
     */
    public Unit unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The number of requests per window unit.
     */
    public RequestRate withRate(long rate) {
        this.rate = rate;
        return this;
    }


    /**
     * Size of request window.
     */
    public RequestRate withSize(long size) {
        this.size = size;
        return this;
    }


    /**
     * The window unit for the rate.
     */
    public RequestRate withUnit(@Nonnull Unit unit) {
        this.unit = Utils.checkNotNull(unit, "unit");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestRate other = (RequestRate) o;
        return 
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.unit, other.unit);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            rate, size, unit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestRate.class,
                "rate", rate,
                "size", size,
                "unit", unit);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long rate;

        private long size;

        private Unit unit;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of requests per window unit.
         */
        public Builder rate(long rate) {
            this.rate = rate;
            return this;
        }

        /**
         * Size of request window.
         */
        public Builder size(long size) {
            this.size = size;
            return this;
        }

        /**
         * The window unit for the rate.
         */
        public Builder unit(@Nonnull Unit unit) {
            this.unit = Utils.checkNotNull(unit, "unit");
            return this;
        }

        public RequestRate build() {
            return new RequestRate(
                rate, size, unit);
        }

    }
}
