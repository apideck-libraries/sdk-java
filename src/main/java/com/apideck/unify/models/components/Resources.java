/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Resources {

    /**
     * ID of the resource, typically a lowercased version of its name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Name of the resource (plural)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ResourceStatus> status;

    /**
     * Exclude from mapping coverage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excluded_from_coverage")
    private Optional<Boolean> excludedFromCoverage;

    @JsonCreator
    public Resources(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("status") Optional<? extends ResourceStatus> status,
            @JsonProperty("excluded_from_coverage") Optional<Boolean> excludedFromCoverage) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(excludedFromCoverage, "excludedFromCoverage");
        this.id = id;
        this.name = name;
        this.status = status;
        this.excludedFromCoverage = excludedFromCoverage;
    }
    
    public Resources() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * ID of the resource, typically a lowercased version of its name.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Name of the resource (plural)
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceStatus> status() {
        return (Optional<ResourceStatus>) status;
    }

    /**
     * Exclude from mapping coverage
     */
    @JsonIgnore
    public Optional<Boolean> excludedFromCoverage() {
        return excludedFromCoverage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the resource, typically a lowercased version of its name.
     */
    public Resources withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * ID of the resource, typically a lowercased version of its name.
     */
    public Resources withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the resource (plural)
     */
    public Resources withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the resource (plural)
     */
    public Resources withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    public Resources withStatus(ResourceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the resource. Resources with status live or beta are callable.
     */
    public Resources withStatus(Optional<? extends ResourceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Exclude from mapping coverage
     */
    public Resources withExcludedFromCoverage(boolean excludedFromCoverage) {
        Utils.checkNotNull(excludedFromCoverage, "excludedFromCoverage");
        this.excludedFromCoverage = Optional.ofNullable(excludedFromCoverage);
        return this;
    }

    /**
     * Exclude from mapping coverage
     */
    public Resources withExcludedFromCoverage(Optional<Boolean> excludedFromCoverage) {
        Utils.checkNotNull(excludedFromCoverage, "excludedFromCoverage");
        this.excludedFromCoverage = excludedFromCoverage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Resources other = (Resources) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.excludedFromCoverage, other.excludedFromCoverage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            status,
            excludedFromCoverage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Resources.class,
                "id", id,
                "name", name,
                "status", status,
                "excludedFromCoverage", excludedFromCoverage);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends ResourceStatus> status = Optional.empty();
 
        private Optional<Boolean> excludedFromCoverage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the resource, typically a lowercased version of its name.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * ID of the resource, typically a lowercased version of its name.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the resource (plural)
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the resource (plural)
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Status of the resource. Resources with status live or beta are callable.
         */
        public Builder status(ResourceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the resource. Resources with status live or beta are callable.
         */
        public Builder status(Optional<? extends ResourceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Exclude from mapping coverage
         */
        public Builder excludedFromCoverage(boolean excludedFromCoverage) {
            Utils.checkNotNull(excludedFromCoverage, "excludedFromCoverage");
            this.excludedFromCoverage = Optional.ofNullable(excludedFromCoverage);
            return this;
        }

        /**
         * Exclude from mapping coverage
         */
        public Builder excludedFromCoverage(Optional<Boolean> excludedFromCoverage) {
            Utils.checkNotNull(excludedFromCoverage, "excludedFromCoverage");
            this.excludedFromCoverage = excludedFromCoverage;
            return this;
        }
        
        public Resources build() {
            return new Resources(
                id,
                name,
                status,
                excludedFromCoverage);
        }
    }
}

