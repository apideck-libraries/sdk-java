/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Salary {
    /**
     * Minimum salary payable for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    private Long min;

    /**
     * Maximum salary payable for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    private Long max;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private JsonNullable<String> interval;

    @JsonCreator
    public Salary(
            @JsonProperty("min") @Nullable Long min,
            @JsonProperty("max") @Nullable Long max,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("interval") @Nullable JsonNullable<String> interval) {
        this.min = min;
        this.max = max;
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.interval = Optional.ofNullable(interval)
            .orElse(JsonNullable.undefined());
    }
    
    public Salary() {
        this(null, null, null,
            null);
    }

    /**
     * Minimum salary payable for the job role.
     */
    public Optional<Long> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * Maximum salary payable for the job role.
     */
    public Optional<Long> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public JsonNullable<String> interval() {
        return this.interval;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Minimum salary payable for the job role.
     */
    public Salary withMin(@Nullable Long min) {
        this.min = min;
        return this;
    }


    /**
     * Maximum salary payable for the job role.
     */
    public Salary withMax(@Nullable Long max) {
        this.max = max;
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Salary withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    public Salary withInterval(@Nullable String interval) {
        this.interval = JsonNullable.of(interval);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Salary other = (Salary) o;
        return 
            Utils.enhancedDeepEquals(this.min, other.min) &&
            Utils.enhancedDeepEquals(this.max, other.max) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.interval, other.interval);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            min, max, currency,
            interval);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Salary.class,
                "min", min,
                "max", max,
                "currency", currency,
                "interval", interval);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long min;

        private Long max;

        private JsonNullable<Currency> currency;

        private JsonNullable<String> interval;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Minimum salary payable for the job role.
         */
        public Builder min(@Nullable Long min) {
            this.min = min;
            return this;
        }

        /**
         * Maximum salary payable for the job role.
         */
        public Builder max(@Nullable Long max) {
            this.max = max;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder interval(@Nullable String interval) {
            this.interval = JsonNullable.of(interval);
            return this;
        }

        public Salary build() {
            return new Salary(
                min, max, currency,
                interval);
        }

    }
}
