/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SalesDetails {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_price")
    private JsonNullable<Double> unitPrice;

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_of_measure")
    private JsonNullable<String> unitOfMeasure;

    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    private JsonNullable<Boolean> taxInclusive;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRate taxRate;

    @JsonCreator
    public SalesDetails(
            @JsonProperty("unit_price") @Nullable JsonNullable<Double> unitPrice,
            @JsonProperty("unit_of_measure") @Nullable JsonNullable<String> unitOfMeasure,
            @JsonProperty("tax_inclusive") @Nullable JsonNullable<Boolean> taxInclusive,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRate taxRate) {
        this.unitPrice = Optional.ofNullable(unitPrice)
            .orElse(JsonNullable.undefined());
        this.unitOfMeasure = Optional.ofNullable(unitOfMeasure)
            .orElse(JsonNullable.undefined());
        this.taxInclusive = Optional.ofNullable(taxInclusive)
            .orElse(JsonNullable.undefined());
        this.taxRate = taxRate;
    }
    
    public SalesDetails() {
        this(null, null, null,
            null);
    }

    public JsonNullable<Double> unitPrice() {
        return this.unitPrice;
    }

    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public JsonNullable<String> unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Amounts are including tax
     */
    public JsonNullable<Boolean> taxInclusive() {
        return this.taxInclusive;
    }

    public Optional<LinkedTaxRate> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SalesDetails withUnitPrice(@Nullable Double unitPrice) {
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }


    /**
     * Description of the unit type the item is sold as, ie: kg, hour.
     */
    public SalesDetails withUnitOfMeasure(@Nullable String unitOfMeasure) {
        this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
        return this;
    }


    /**
     * Amounts are including tax
     */
    public SalesDetails withTaxInclusive(@Nullable Boolean taxInclusive) {
        this.taxInclusive = JsonNullable.of(taxInclusive);
        return this;
    }


    public SalesDetails withTaxRate(@Nullable LinkedTaxRate taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SalesDetails other = (SalesDetails) o;
        return 
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.unitOfMeasure, other.unitOfMeasure) &&
            Utils.enhancedDeepEquals(this.taxInclusive, other.taxInclusive) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unitPrice, unitOfMeasure, taxInclusive,
            taxRate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SalesDetails.class,
                "unitPrice", unitPrice,
                "unitOfMeasure", unitOfMeasure,
                "taxInclusive", taxInclusive,
                "taxRate", taxRate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Double> unitPrice;

        private JsonNullable<String> unitOfMeasure;

        private JsonNullable<Boolean> taxInclusive;

        private LinkedTaxRate taxRate;

        private Builder() {
          // force use of static builder() method
        }

        public Builder unitPrice(@Nullable Double unitPrice) {
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        /**
         * Description of the unit type the item is sold as, ie: kg, hour.
         */
        public Builder unitOfMeasure(@Nullable String unitOfMeasure) {
            this.unitOfMeasure = JsonNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * Amounts are including tax
         */
        public Builder taxInclusive(@Nullable Boolean taxInclusive) {
            this.taxInclusive = JsonNullable.of(taxInclusive);
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRate taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        public SalesDetails build() {
            return new SalesDetails(
                unitPrice, unitOfMeasure, taxInclusive,
                taxRate);
        }

    }
}
