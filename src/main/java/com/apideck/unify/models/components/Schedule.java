/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class Schedule {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The start date, inclusive, of the schedule period.
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * The end date, inclusive, of the schedule period.
     */
    @JsonProperty("end_date")
    private String endDate;


    @JsonProperty("work_pattern")
    private WorkPattern workPattern;

    @JsonCreator
    public Schedule(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("start_date") @Nonnull String startDate,
            @JsonProperty("end_date") @Nonnull String endDate,
            @JsonProperty("work_pattern") @Nonnull WorkPattern workPattern) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.startDate = Optional.ofNullable(startDate)
            .orElseThrow(() -> new IllegalArgumentException("startDate cannot be null"));
        this.endDate = Optional.ofNullable(endDate)
            .orElseThrow(() -> new IllegalArgumentException("endDate cannot be null"));
        this.workPattern = Optional.ofNullable(workPattern)
            .orElseThrow(() -> new IllegalArgumentException("workPattern cannot be null"));
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The start date, inclusive, of the schedule period.
     */
    public String startDate() {
        return this.startDate;
    }

    /**
     * The end date, inclusive, of the schedule period.
     */
    public String endDate() {
        return this.endDate;
    }

    public WorkPattern workPattern() {
        return this.workPattern;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Schedule withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The start date, inclusive, of the schedule period.
     */
    public Schedule withStartDate(@Nonnull String startDate) {
        this.startDate = Utils.checkNotNull(startDate, "startDate");
        return this;
    }


    /**
     * The end date, inclusive, of the schedule period.
     */
    public Schedule withEndDate(@Nonnull String endDate) {
        this.endDate = Utils.checkNotNull(endDate, "endDate");
        return this;
    }


    public Schedule withWorkPattern(@Nonnull WorkPattern workPattern) {
        this.workPattern = Utils.checkNotNull(workPattern, "workPattern");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Schedule other = (Schedule) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.workPattern, other.workPattern);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, startDate, endDate,
            workPattern);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Schedule.class,
                "id", id,
                "startDate", startDate,
                "endDate", endDate,
                "workPattern", workPattern);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String startDate;

        private String endDate;

        private WorkPattern workPattern;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The start date, inclusive, of the schedule period.
         */
        public Builder startDate(@Nonnull String startDate) {
            this.startDate = Utils.checkNotNull(startDate, "startDate");
            return this;
        }

        /**
         * The end date, inclusive, of the schedule period.
         */
        public Builder endDate(@Nonnull String endDate) {
            this.endDate = Utils.checkNotNull(endDate, "endDate");
            return this;
        }

        public Builder workPattern(@Nonnull WorkPattern workPattern) {
            this.workPattern = Utils.checkNotNull(workPattern, "workPattern");
            return this;
        }

        public Schedule build() {
            return new Schedule(
                id, startDate, endDate,
                workPattern);
        }

    }
}
