/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ServiceChargeInput {

    /**
     * Service charge name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;

    /**
     * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    private Optional<Double> percentage;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The type of the service charge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ServiceChargeType> type;

    @JsonCreator
    public ServiceChargeInput(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("percentage") Optional<Double> percentage,
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("type") Optional<? extends ServiceChargeType> type) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(percentage, "percentage");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(type, "type");
        this.name = name;
        this.amount = amount;
        this.percentage = percentage;
        this.currency = currency;
        this.active = active;
        this.type = type;
    }
    
    public ServiceChargeInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Service charge name
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    /**
     * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
     */
    @JsonIgnore
    public Optional<Double> percentage() {
        return percentage;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> currency() {
        return (JsonNullable<Currency>) currency;
    }

    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The type of the service charge.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ServiceChargeType> type() {
        return (Optional<ServiceChargeType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service charge name
     */
    public ServiceChargeInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Service charge name
     */
    public ServiceChargeInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ServiceChargeInput withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public ServiceChargeInput withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
     */
    public ServiceChargeInput withPercentage(double percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = Optional.ofNullable(percentage);
        return this;
    }

    /**
     * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
     */
    public ServiceChargeInput withPercentage(Optional<Double> percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = percentage;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ServiceChargeInput withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public ServiceChargeInput withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public ServiceChargeInput withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    public ServiceChargeInput withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The type of the service charge.
     */
    public ServiceChargeInput withType(ServiceChargeType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of the service charge.
     */
    public ServiceChargeInput withType(Optional<? extends ServiceChargeType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceChargeInput other = (ServiceChargeInput) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.percentage, other.percentage) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            amount,
            percentage,
            currency,
            active,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServiceChargeInput.class,
                "name", name,
                "amount", amount,
                "percentage", percentage,
                "currency", currency,
                "active", active,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Double> amount = Optional.empty();
 
        private Optional<Double> percentage = Optional.empty();
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private Optional<? extends ServiceChargeType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service charge name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Service charge name
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
         */
        public Builder percentage(double percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        /**
         * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
         */
        public Builder percentage(Optional<Double> percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = percentage;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The type of the service charge.
         */
        public Builder type(ServiceChargeType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of the service charge.
         */
        public Builder type(Optional<? extends ServiceChargeType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ServiceChargeInput build() {
            return new ServiceChargeInput(
                name,
                amount,
                percentage,
                currency,
                active,
                type);
        }
    }
}

