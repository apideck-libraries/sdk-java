/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;


public class Session {
    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_metadata")
    private ConsumerMetadata consumerMetadata;

    /**
     * The URL to redirect the user to after the session has been configured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uri")
    private String redirectUri;

    /**
     * Settings to change the way the Vault is displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private Settings settings;

    /**
     * Theming options to change the look and feel of Vault.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("theme")
    private Theme theme;

    /**
     * Custom consumer settings that are passed as part of the session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_consumer_settings")
    private Map<String, Object> customConsumerSettings;

    @JsonCreator
    public Session(
            @JsonProperty("consumer_metadata") @Nullable ConsumerMetadata consumerMetadata,
            @JsonProperty("redirect_uri") @Nullable String redirectUri,
            @JsonProperty("settings") @Nullable Settings settings,
            @JsonProperty("theme") @Nullable Theme theme,
            @JsonProperty("custom_consumer_settings") @Nullable Map<String, Object> customConsumerSettings) {
        this.consumerMetadata = consumerMetadata;
        this.redirectUri = redirectUri;
        this.settings = settings;
        this.theme = theme;
        this.customConsumerSettings = customConsumerSettings;
    }
    
    public Session() {
        this(null, null, null,
            null, null);
    }

    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Optional<ConsumerMetadata> consumerMetadata() {
        return Optional.ofNullable(this.consumerMetadata);
    }

    /**
     * The URL to redirect the user to after the session has been configured.
     */
    public Optional<String> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }

    /**
     * Settings to change the way the Vault is displayed.
     */
    public Optional<Settings> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Theming options to change the look and feel of Vault.
     */
    public Optional<Theme> theme() {
        return Optional.ofNullable(this.theme);
    }

    /**
     * Custom consumer settings that are passed as part of the session.
     */
    public Optional<Map<String, Object>> customConsumerSettings() {
        return Optional.ofNullable(this.customConsumerSettings);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
     */
    public Session withConsumerMetadata(@Nullable ConsumerMetadata consumerMetadata) {
        this.consumerMetadata = consumerMetadata;
        return this;
    }


    /**
     * The URL to redirect the user to after the session has been configured.
     */
    public Session withRedirectUri(@Nullable String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }


    /**
     * Settings to change the way the Vault is displayed.
     */
    public Session withSettings(@Nullable Settings settings) {
        this.settings = settings;
        return this;
    }


    /**
     * Theming options to change the look and feel of Vault.
     */
    public Session withTheme(@Nullable Theme theme) {
        this.theme = theme;
        return this;
    }


    /**
     * Custom consumer settings that are passed as part of the session.
     */
    public Session withCustomConsumerSettings(@Nullable Map<String, Object> customConsumerSettings) {
        this.customConsumerSettings = customConsumerSettings;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Session other = (Session) o;
        return 
            Utils.enhancedDeepEquals(this.consumerMetadata, other.consumerMetadata) &&
            Utils.enhancedDeepEquals(this.redirectUri, other.redirectUri) &&
            Utils.enhancedDeepEquals(this.settings, other.settings) &&
            Utils.enhancedDeepEquals(this.theme, other.theme) &&
            Utils.enhancedDeepEquals(this.customConsumerSettings, other.customConsumerSettings);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            consumerMetadata, redirectUri, settings,
            theme, customConsumerSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Session.class,
                "consumerMetadata", consumerMetadata,
                "redirectUri", redirectUri,
                "settings", settings,
                "theme", theme,
                "customConsumerSettings", customConsumerSettings);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ConsumerMetadata consumerMetadata;

        private String redirectUri;

        private Settings settings;

        private Theme theme;

        private Map<String, Object> customConsumerSettings;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
         */
        public Builder consumerMetadata(@Nullable ConsumerMetadata consumerMetadata) {
            this.consumerMetadata = consumerMetadata;
            return this;
        }

        /**
         * The URL to redirect the user to after the session has been configured.
         */
        public Builder redirectUri(@Nullable String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }

        /**
         * Settings to change the way the Vault is displayed.
         */
        public Builder settings(@Nullable Settings settings) {
            this.settings = settings;
            return this;
        }

        /**
         * Theming options to change the look and feel of Vault.
         */
        public Builder theme(@Nullable Theme theme) {
            this.theme = theme;
            return this;
        }

        /**
         * Custom consumer settings that are passed as part of the session.
         */
        public Builder customConsumerSettings(@Nullable Map<String, Object> customConsumerSettings) {
            this.customConsumerSettings = customConsumerSettings;
            return this;
        }

        public Session build() {
            return new Session(
                consumerMetadata, redirectUri, settings,
                theme, customConsumerSettings);
        }

    }
}
