/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SharedLink {
    /**
     * The URL that can be used to view the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The URL that can be used to download the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    private JsonNullable<String> downloadUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    private SharedLinkTarget target;

    /**
     * The scope of the shared link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    private JsonNullable<Scope> scope;

    /**
     * Indicated if the shared link is password protected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_protected")
    private JsonNullable<Boolean> passwordProtected;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private JsonNullable<OffsetDateTime> expiresAt;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public SharedLink(
            @JsonProperty("url") @Nullable JsonNullable<String> url,
            @JsonProperty("download_url") @Nullable JsonNullable<String> downloadUrl,
            @JsonProperty("target") @Nullable SharedLinkTarget target,
            @JsonProperty("scope") @Nullable JsonNullable<Scope> scope,
            @JsonProperty("password_protected") @Nullable JsonNullable<Boolean> passwordProtected,
            @JsonProperty("expires_at") @Nullable JsonNullable<OffsetDateTime> expiresAt,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.url = Optional.ofNullable(url)
            .orElse(JsonNullable.undefined());
        this.downloadUrl = Optional.ofNullable(downloadUrl)
            .orElse(JsonNullable.undefined());
        this.target = target;
        this.scope = Optional.ofNullable(scope)
            .orElse(JsonNullable.undefined());
        this.passwordProtected = Optional.ofNullable(passwordProtected)
            .orElse(JsonNullable.undefined());
        this.expiresAt = Optional.ofNullable(expiresAt)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public SharedLink() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The URL that can be used to view the file.
     */
    public JsonNullable<String> url() {
        return this.url;
    }

    /**
     * The URL that can be used to download the file.
     */
    public JsonNullable<String> downloadUrl() {
        return this.downloadUrl;
    }

    public Optional<SharedLinkTarget> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The scope of the shared link.
     */
    public JsonNullable<Scope> scope() {
        return this.scope;
    }

    /**
     * Indicated if the shared link is password protected.
     */
    public JsonNullable<Boolean> passwordProtected() {
        return this.passwordProtected;
    }

    public JsonNullable<OffsetDateTime> expiresAt() {
        return this.expiresAt;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL that can be used to view the file.
     */
    public SharedLink withUrl(@Nullable String url) {
        this.url = JsonNullable.of(url);
        return this;
    }


    /**
     * The URL that can be used to download the file.
     */
    public SharedLink withDownloadUrl(@Nullable String downloadUrl) {
        this.downloadUrl = JsonNullable.of(downloadUrl);
        return this;
    }


    public SharedLink withTarget(@Nullable SharedLinkTarget target) {
        this.target = target;
        return this;
    }


    /**
     * The scope of the shared link.
     */
    public SharedLink withScope(@Nullable Scope scope) {
        this.scope = JsonNullable.of(scope);
        return this;
    }


    /**
     * Indicated if the shared link is password protected.
     */
    public SharedLink withPasswordProtected(@Nullable Boolean passwordProtected) {
        this.passwordProtected = JsonNullable.of(passwordProtected);
        return this;
    }


    public SharedLink withExpiresAt(@Nullable OffsetDateTime expiresAt) {
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public SharedLink withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public SharedLink withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public SharedLink withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SharedLink other = (SharedLink) o;
        return 
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.downloadUrl, other.downloadUrl) &&
            Utils.enhancedDeepEquals(this.target, other.target) &&
            Utils.enhancedDeepEquals(this.scope, other.scope) &&
            Utils.enhancedDeepEquals(this.passwordProtected, other.passwordProtected) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            url, downloadUrl, target,
            scope, passwordProtected, expiresAt,
            updatedAt, createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SharedLink.class,
                "url", url,
                "downloadUrl", downloadUrl,
                "target", target,
                "scope", scope,
                "passwordProtected", passwordProtected,
                "expiresAt", expiresAt,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> url;

        private JsonNullable<String> downloadUrl;

        private SharedLinkTarget target;

        private JsonNullable<Scope> scope;

        private JsonNullable<Boolean> passwordProtected;

        private JsonNullable<OffsetDateTime> expiresAt;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The URL that can be used to view the file.
         */
        public Builder url(@Nullable String url) {
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The URL that can be used to download the file.
         */
        public Builder downloadUrl(@Nullable String downloadUrl) {
            this.downloadUrl = JsonNullable.of(downloadUrl);
            return this;
        }

        public Builder target(@Nullable SharedLinkTarget target) {
            this.target = target;
            return this;
        }

        /**
         * The scope of the shared link.
         */
        public Builder scope(@Nullable Scope scope) {
            this.scope = JsonNullable.of(scope);
            return this;
        }

        /**
         * Indicated if the shared link is password protected.
         */
        public Builder passwordProtected(@Nullable Boolean passwordProtected) {
            this.passwordProtected = JsonNullable.of(passwordProtected);
            return this;
        }

        public Builder expiresAt(@Nullable OffsetDateTime expiresAt) {
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public SharedLink build() {
            return new SharedLink(
                url, downloadUrl, target,
                scope, passwordProtected, expiresAt,
                updatedAt, createdAt, passThrough);
        }

    }
}
