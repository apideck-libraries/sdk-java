/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SimpleFormFieldOption implements FormFieldOption {

    @JsonProperty("label")
    private String label;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends SimpleFormFieldOptionValue> value;

    @JsonProperty("option_type")
    private OptionType optionType;

    @JsonCreator
    public SimpleFormFieldOption(
            @JsonProperty("label") String label,
            @JsonProperty("value") Optional<? extends SimpleFormFieldOptionValue> value,
            @JsonProperty("option_type") OptionType optionType) {
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(optionType, "optionType");
        this.label = label;
        this.value = value;
        this.optionType = optionType;
    }
    
    public SimpleFormFieldOption(
            String label,
            OptionType optionType) {
        this(label, Optional.empty(), optionType);
    }

    @JsonIgnore
    public String label() {
        return label;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleFormFieldOptionValue> value() {
        return (Optional<SimpleFormFieldOptionValue>) value;
    }

    @JsonIgnore
    @Override
    public String optionType() {
        return Utils.discriminatorToString(optionType);
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SimpleFormFieldOption withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public SimpleFormFieldOption withValue(SimpleFormFieldOptionValue value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public SimpleFormFieldOption withValue(Optional<? extends SimpleFormFieldOptionValue> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public SimpleFormFieldOption withOptionType(OptionType optionType) {
        Utils.checkNotNull(optionType, "optionType");
        this.optionType = optionType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleFormFieldOption other = (SimpleFormFieldOption) o;
        return 
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.optionType, other.optionType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            label,
            value,
            optionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimpleFormFieldOption.class,
                "label", label,
                "value", value,
                "optionType", optionType);
    }
    
    public final static class Builder {
 
        private String label;
 
        private Optional<? extends SimpleFormFieldOptionValue> value = Optional.empty();
 
        private OptionType optionType;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder value(SimpleFormFieldOptionValue value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends SimpleFormFieldOptionValue> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder optionType(OptionType optionType) {
            Utils.checkNotNull(optionType, "optionType");
            this.optionType = optionType;
            return this;
        }
        
        public SimpleFormFieldOption build() {
            return new SimpleFormFieldOption(
                label,
                value,
                optionType);
        }
    }
}
