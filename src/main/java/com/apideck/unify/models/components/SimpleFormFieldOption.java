/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class SimpleFormFieldOption implements FormFieldOption {

    @JsonProperty("label")
    private String label;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private SimpleFormFieldOptionValue value;


    @JsonProperty("option_type")
    private OptionType optionType;

    @JsonCreator
    public SimpleFormFieldOption(
            @JsonProperty("label") @Nonnull String label,
            @JsonProperty("value") @Nullable SimpleFormFieldOptionValue value,
            @JsonProperty("option_type") @Nonnull OptionType optionType) {
        this.label = Optional.ofNullable(label)
            .orElseThrow(() -> new IllegalArgumentException("label cannot be null"));
        this.value = value;
        this.optionType = Optional.ofNullable(optionType)
            .orElseThrow(() -> new IllegalArgumentException("optionType cannot be null"));
    }
    
    public SimpleFormFieldOption(
            @Nonnull String label,
            @Nonnull OptionType optionType) {
        this(label, null, optionType);
    }

    public String label() {
        return this.label;
    }

    public Optional<SimpleFormFieldOptionValue> value() {
        return Optional.ofNullable(this.value);
    }

    @Override
    public String optionType() {
        return Utils.discriminatorToString(optionType);
    }

    public static Builder builder() {
        return new Builder();
    }


    public SimpleFormFieldOption withLabel(@Nonnull String label) {
        this.label = Utils.checkNotNull(label, "label");
        return this;
    }


    public SimpleFormFieldOption withValue(@Nullable SimpleFormFieldOptionValue value) {
        this.value = value;
        return this;
    }


    public SimpleFormFieldOption withOptionType(@Nonnull OptionType optionType) {
        this.optionType = Utils.checkNotNull(optionType, "optionType");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleFormFieldOption other = (SimpleFormFieldOption) o;
        return 
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.value, other.value) &&
            Utils.enhancedDeepEquals(this.optionType, other.optionType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            label, value, optionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimpleFormFieldOption.class,
                "label", label,
                "value", value,
                "optionType", optionType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String label;

        private SimpleFormFieldOptionValue value;

        private OptionType optionType;

        private Builder() {
          // force use of static builder() method
        }

        public Builder label(@Nonnull String label) {
            this.label = Utils.checkNotNull(label, "label");
            return this;
        }

        public Builder value(@Nullable SimpleFormFieldOptionValue value) {
            this.value = value;
            return this;
        }

        public Builder optionType(@Nonnull OptionType optionType) {
            this.optionType = Utils.checkNotNull(optionType, "optionType");
            return this;
        }

        public SimpleFormFieldOption build() {
            return new SimpleFormFieldOption(
                label, value, optionType);
        }

    }
}
