/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SubAccounts {

    /**
     * The ID of the sub account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The name of the sub account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sub_name")
    private Optional<String> accountSubName;

    @JsonCreator
    public SubAccounts(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("account_sub_name") Optional<String> accountSubName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(accountSubName, "accountSubName");
        this.id = id;
        this.accountSubName = accountSubName;
    }
    
    public SubAccounts() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the sub account.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The name of the sub account.
     */
    @JsonIgnore
    public Optional<String> accountSubName() {
        return accountSubName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the sub account.
     */
    public SubAccounts withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the sub account.
     */
    public SubAccounts withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the sub account.
     */
    public SubAccounts withAccountSubName(String accountSubName) {
        Utils.checkNotNull(accountSubName, "accountSubName");
        this.accountSubName = Optional.ofNullable(accountSubName);
        return this;
    }

    /**
     * The name of the sub account.
     */
    public SubAccounts withAccountSubName(Optional<String> accountSubName) {
        Utils.checkNotNull(accountSubName, "accountSubName");
        this.accountSubName = accountSubName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubAccounts other = (SubAccounts) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.accountSubName, other.accountSubName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            accountSubName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubAccounts.class,
                "id", id,
                "accountSubName", accountSubName);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> accountSubName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the sub account.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the sub account.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the sub account.
         */
        public Builder accountSubName(String accountSubName) {
            Utils.checkNotNull(accountSubName, "accountSubName");
            this.accountSubName = Optional.ofNullable(accountSubName);
            return this;
        }

        /**
         * The name of the sub account.
         */
        public Builder accountSubName(Optional<String> accountSubName) {
            Utils.checkNotNull(accountSubName, "accountSubName");
            this.accountSubName = accountSubName;
            return this;
        }
        
        public SubAccounts build() {
            return new SubAccounts(
                id,
                accountSubName);
        }
    }
}

