/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SubsidiaryInput {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private SubsidiaryStatus status;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public SubsidiaryInput(
            @JsonProperty("parent_id") @Nullable JsonNullable<String> parentId,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("status") @Nullable SubsidiaryStatus status,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.parentId = Optional.ofNullable(parentId)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.status = status;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public SubsidiaryInput() {
        this(null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public Optional<SubsidiaryStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public SubsidiaryInput withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The name of the company.
     */
    public SubsidiaryInput withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * Based on the status some functionality is enabled or disabled.
     */
    public SubsidiaryInput withStatus(@Nullable SubsidiaryStatus status) {
        this.status = status;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public SubsidiaryInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public SubsidiaryInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubsidiaryInput other = (SubsidiaryInput) o;
        return 
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parentId, name, status,
            rowVersion, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubsidiaryInput.class,
                "parentId", parentId,
                "name", name,
                "status", status,
                "rowVersion", rowVersion,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> parentId;

        private JsonNullable<String> name;

        private SubsidiaryStatus status;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Based on the status some functionality is enabled or disabled.
         */
        public Builder status(@Nullable SubsidiaryStatus status) {
            this.status = status;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public SubsidiaryInput build() {
            return new SubsidiaryInput(
                parentId, name, status,
                rowVersion, passThrough);
        }

    }
}
