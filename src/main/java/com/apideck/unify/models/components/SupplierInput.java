/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SupplierInput {
    /**
     * Display ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    private JsonNullable<String> displayId;

    /**
     * Display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * The company or subsidiary id the transaction belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The category/type of the supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier_category")
    private JsonNullable<String> supplierCategory;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<String> middleName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    private JsonNullable<String> suffix;

    /**
     * Is this an individual or business supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual")
    private JsonNullable<Boolean> individual;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private List<Email> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private List<Website> websites;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_accounts")
    private List<BankAccount> bankAccounts;

    /**
     * Some notes about this supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<String> notes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    private LinkedTaxRateInput taxRate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_number")
    private JsonNullable<String> taxNumber;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<Currency> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private JsonNullable<LinkedLedgerAccountInput> account;

    /**
     * Supplier status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<SupplierStatus> status;

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<String> paymentMethod;

    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    private JsonNullable<String> terms;

    /**
     * The channel through which the transaction is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    private JsonNullable<String> channel;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    /**
     * The subsidiary the supplier belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiary_id")
    private String subsidiaryId;

    @JsonCreator
    public SupplierInput(
            @JsonProperty("display_id") @Nullable JsonNullable<String> displayId,
            @JsonProperty("display_name") @Nullable JsonNullable<String> displayName,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("company_id") @Nullable JsonNullable<String> companyId,
            @JsonProperty("supplier_category") @Nullable JsonNullable<String> supplierCategory,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("middle_name") @Nullable JsonNullable<String> middleName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("suffix") @Nullable JsonNullable<String> suffix,
            @JsonProperty("individual") @Nullable JsonNullable<Boolean> individual,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nullable List<Email> emails,
            @JsonProperty("websites") @Nullable List<Website> websites,
            @JsonProperty("bank_accounts") @Nullable List<BankAccount> bankAccounts,
            @JsonProperty("notes") @Nullable JsonNullable<String> notes,
            @JsonProperty("tax_rate") @Nullable LinkedTaxRateInput taxRate,
            @JsonProperty("tax_number") @Nullable JsonNullable<String> taxNumber,
            @JsonProperty("currency") @Nullable JsonNullable<Currency> currency,
            @JsonProperty("account") @Nullable JsonNullable<LinkedLedgerAccountInput> account,
            @JsonProperty("status") @Nullable JsonNullable<SupplierStatus> status,
            @JsonProperty("payment_method") @Nullable JsonNullable<String> paymentMethod,
            @JsonProperty("terms") @Nullable JsonNullable<String> terms,
            @JsonProperty("channel") @Nullable JsonNullable<String> channel,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough,
            @JsonProperty("subsidiary_id") @Nullable String subsidiaryId) {
        this.displayId = Optional.ofNullable(displayId)
            .orElse(JsonNullable.undefined());
        this.displayName = Optional.ofNullable(displayName)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.companyId = Optional.ofNullable(companyId)
            .orElse(JsonNullable.undefined());
        this.supplierCategory = Optional.ofNullable(supplierCategory)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.middleName = Optional.ofNullable(middleName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.suffix = Optional.ofNullable(suffix)
            .orElse(JsonNullable.undefined());
        this.individual = Optional.ofNullable(individual)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = emails;
        this.websites = websites;
        this.bankAccounts = bankAccounts;
        this.notes = Optional.ofNullable(notes)
            .orElse(JsonNullable.undefined());
        this.taxRate = taxRate;
        this.taxNumber = Optional.ofNullable(taxNumber)
            .orElse(JsonNullable.undefined());
        this.currency = Optional.ofNullable(currency)
            .orElse(JsonNullable.undefined());
        this.account = Optional.ofNullable(account)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.paymentMethod = Optional.ofNullable(paymentMethod)
            .orElse(JsonNullable.undefined());
        this.terms = Optional.ofNullable(terms)
            .orElse(JsonNullable.undefined());
        this.channel = Optional.ofNullable(channel)
            .orElse(JsonNullable.undefined());
        this.customFields = customFields;
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
        this.subsidiaryId = subsidiaryId;
    }
    
    public SupplierInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Display ID
     */
    public JsonNullable<String> displayId() {
        return this.displayId;
    }

    /**
     * Display name
     */
    public JsonNullable<String> displayName() {
        return this.displayName;
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * The company or subsidiary id the transaction belongs to
     */
    public JsonNullable<String> companyId() {
        return this.companyId;
    }

    /**
     * The category/type of the supplier
     */
    public JsonNullable<String> supplierCategory() {
        return this.supplierCategory;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<String> middleName() {
        return this.middleName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    public JsonNullable<String> suffix() {
        return this.suffix;
    }

    /**
     * Is this an individual or business supplier
     */
    public JsonNullable<Boolean> individual() {
        return this.individual;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public Optional<List<Email>> emails() {
        return Optional.ofNullable(this.emails);
    }

    public Optional<List<Website>> websites() {
        return Optional.ofNullable(this.websites);
    }

    public Optional<List<BankAccount>> bankAccounts() {
        return Optional.ofNullable(this.bankAccounts);
    }

    /**
     * Some notes about this supplier
     */
    public JsonNullable<String> notes() {
        return this.notes;
    }

    public Optional<LinkedTaxRateInput> taxRate() {
        return Optional.ofNullable(this.taxRate);
    }

    public JsonNullable<String> taxNumber() {
        return this.taxNumber;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<Currency> currency() {
        return this.currency;
    }

    public JsonNullable<LinkedLedgerAccountInput> account() {
        return this.account;
    }

    /**
     * Supplier status
     */
    public JsonNullable<SupplierStatus> status() {
        return this.status;
    }

    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public JsonNullable<String> paymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Terms of payment.
     */
    public JsonNullable<String> terms() {
        return this.terms;
    }

    /**
     * The channel through which the transaction is processed.
     */
    public JsonNullable<String> channel() {
        return this.channel;
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    /**
     * The subsidiary the supplier belongs to.
     */
    public Optional<String> subsidiaryId() {
        return Optional.ofNullable(this.subsidiaryId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Display ID
     */
    public SupplierInput withDisplayId(@Nullable String displayId) {
        this.displayId = JsonNullable.of(displayId);
        return this;
    }


    /**
     * Display name
     */
    public SupplierInput withDisplayName(@Nullable String displayName) {
        this.displayName = JsonNullable.of(displayName);
        return this;
    }


    /**
     * The name of the company.
     */
    public SupplierInput withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * The company or subsidiary id the transaction belongs to
     */
    public SupplierInput withCompanyId(@Nullable String companyId) {
        this.companyId = JsonNullable.of(companyId);
        return this;
    }


    /**
     * The category/type of the supplier
     */
    public SupplierInput withSupplierCategory(@Nullable String supplierCategory) {
        this.supplierCategory = JsonNullable.of(supplierCategory);
        return this;
    }


    /**
     * The job title of the person.
     */
    public SupplierInput withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The first name of the person.
     */
    public SupplierInput withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * Middle name of the person.
     */
    public SupplierInput withMiddleName(@Nullable String middleName) {
        this.middleName = JsonNullable.of(middleName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public SupplierInput withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    public SupplierInput withSuffix(@Nullable String suffix) {
        this.suffix = JsonNullable.of(suffix);
        return this;
    }


    /**
     * Is this an individual or business supplier
     */
    public SupplierInput withIndividual(@Nullable Boolean individual) {
        this.individual = JsonNullable.of(individual);
        return this;
    }


    public SupplierInput withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public SupplierInput withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public SupplierInput withEmails(@Nullable List<Email> emails) {
        this.emails = emails;
        return this;
    }


    public SupplierInput withWebsites(@Nullable List<Website> websites) {
        this.websites = websites;
        return this;
    }


    public SupplierInput withBankAccounts(@Nullable List<BankAccount> bankAccounts) {
        this.bankAccounts = bankAccounts;
        return this;
    }


    /**
     * Some notes about this supplier
     */
    public SupplierInput withNotes(@Nullable String notes) {
        this.notes = JsonNullable.of(notes);
        return this;
    }


    public SupplierInput withTaxRate(@Nullable LinkedTaxRateInput taxRate) {
        this.taxRate = taxRate;
        return this;
    }


    public SupplierInput withTaxNumber(@Nullable String taxNumber) {
        this.taxNumber = JsonNullable.of(taxNumber);
        return this;
    }


    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public SupplierInput withCurrency(@Nullable Currency currency) {
        this.currency = JsonNullable.of(currency);
        return this;
    }


    public SupplierInput withAccount(@Nullable LinkedLedgerAccountInput account) {
        this.account = JsonNullable.of(account);
        return this;
    }


    /**
     * Supplier status
     */
    public SupplierInput withStatus(@Nullable SupplierStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
     */
    public SupplierInput withPaymentMethod(@Nullable String paymentMethod) {
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }


    /**
     * Terms of payment.
     */
    public SupplierInput withTerms(@Nullable String terms) {
        this.terms = JsonNullable.of(terms);
        return this;
    }


    /**
     * The channel through which the transaction is processed.
     */
    public SupplierInput withChannel(@Nullable String channel) {
        this.channel = JsonNullable.of(channel);
        return this;
    }


    public SupplierInput withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public SupplierInput withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public SupplierInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    /**
     * The subsidiary the supplier belongs to.
     */
    public SupplierInput withSubsidiaryId(@Nullable String subsidiaryId) {
        this.subsidiaryId = subsidiaryId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplierInput other = (SupplierInput) o;
        return 
            Utils.enhancedDeepEquals(this.displayId, other.displayId) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.supplierCategory, other.supplierCategory) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.middleName, other.middleName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.suffix, other.suffix) &&
            Utils.enhancedDeepEquals(this.individual, other.individual) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.websites, other.websites) &&
            Utils.enhancedDeepEquals(this.bankAccounts, other.bankAccounts) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.taxRate, other.taxRate) &&
            Utils.enhancedDeepEquals(this.taxNumber, other.taxNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.account, other.account) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.paymentMethod, other.paymentMethod) &&
            Utils.enhancedDeepEquals(this.terms, other.terms) &&
            Utils.enhancedDeepEquals(this.channel, other.channel) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough) &&
            Utils.enhancedDeepEquals(this.subsidiaryId, other.subsidiaryId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            displayId, displayName, companyName,
            companyId, supplierCategory, title,
            firstName, middleName, lastName,
            suffix, individual, addresses,
            phoneNumbers, emails, websites,
            bankAccounts, notes, taxRate,
            taxNumber, currency, account,
            status, paymentMethod, terms,
            channel, customFields, rowVersion,
            passThrough, subsidiaryId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplierInput.class,
                "displayId", displayId,
                "displayName", displayName,
                "companyName", companyName,
                "companyId", companyId,
                "supplierCategory", supplierCategory,
                "title", title,
                "firstName", firstName,
                "middleName", middleName,
                "lastName", lastName,
                "suffix", suffix,
                "individual", individual,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "websites", websites,
                "bankAccounts", bankAccounts,
                "notes", notes,
                "taxRate", taxRate,
                "taxNumber", taxNumber,
                "currency", currency,
                "account", account,
                "status", status,
                "paymentMethod", paymentMethod,
                "terms", terms,
                "channel", channel,
                "customFields", customFields,
                "rowVersion", rowVersion,
                "passThrough", passThrough,
                "subsidiaryId", subsidiaryId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> displayId;

        private JsonNullable<String> displayName;

        private JsonNullable<String> companyName;

        private JsonNullable<String> companyId;

        private JsonNullable<String> supplierCategory;

        private JsonNullable<String> title;

        private JsonNullable<String> firstName;

        private JsonNullable<String> middleName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> suffix;

        private JsonNullable<Boolean> individual;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private List<Website> websites;

        private List<BankAccount> bankAccounts;

        private JsonNullable<String> notes;

        private LinkedTaxRateInput taxRate;

        private JsonNullable<String> taxNumber;

        private JsonNullable<Currency> currency;

        private JsonNullable<LinkedLedgerAccountInput> account;

        private JsonNullable<SupplierStatus> status;

        private JsonNullable<String> paymentMethod;

        private JsonNullable<String> terms;

        private JsonNullable<String> channel;

        private List<CustomField> customFields;

        private JsonNullable<String> rowVersion;

        private List<PassThroughBody> passThrough;

        private String subsidiaryId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Display ID
         */
        public Builder displayId(@Nullable String displayId) {
            this.displayId = JsonNullable.of(displayId);
            return this;
        }

        /**
         * Display name
         */
        public Builder displayName(@Nullable String displayName) {
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The company or subsidiary id the transaction belongs to
         */
        public Builder companyId(@Nullable String companyId) {
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The category/type of the supplier
         */
        public Builder supplierCategory(@Nullable String supplierCategory) {
            this.supplierCategory = JsonNullable.of(supplierCategory);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(@Nullable String middleName) {
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder suffix(@Nullable String suffix) {
            this.suffix = JsonNullable.of(suffix);
            return this;
        }

        /**
         * Is this an individual or business supplier
         */
        public Builder individual(@Nullable Boolean individual) {
            this.individual = JsonNullable.of(individual);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nullable List<Email> emails) {
            this.emails = emails;
            return this;
        }

        public Builder websites(@Nullable List<Website> websites) {
            this.websites = websites;
            return this;
        }

        public Builder bankAccounts(@Nullable List<BankAccount> bankAccounts) {
            this.bankAccounts = bankAccounts;
            return this;
        }

        /**
         * Some notes about this supplier
         */
        public Builder notes(@Nullable String notes) {
            this.notes = JsonNullable.of(notes);
            return this;
        }

        public Builder taxRate(@Nullable LinkedTaxRateInput taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        public Builder taxNumber(@Nullable String taxNumber) {
            this.taxNumber = JsonNullable.of(taxNumber);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(@Nullable Currency currency) {
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder account(@Nullable LinkedLedgerAccountInput account) {
            this.account = JsonNullable.of(account);
            return this;
        }

        /**
         * Supplier status
         */
        public Builder status(@Nullable SupplierStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Payment method used for the transaction, such as cash, credit card, bank transfer, or check
         */
        public Builder paymentMethod(@Nullable String paymentMethod) {
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * Terms of payment.
         */
        public Builder terms(@Nullable String terms) {
            this.terms = JsonNullable.of(terms);
            return this;
        }

        /**
         * The channel through which the transaction is processed.
         */
        public Builder channel(@Nullable String channel) {
            this.channel = JsonNullable.of(channel);
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        /**
         * The subsidiary the supplier belongs to.
         */
        public Builder subsidiaryId(@Nullable String subsidiaryId) {
            this.subsidiaryId = subsidiaryId;
            return this;
        }

        public SupplierInput build() {
            return new SupplierInput(
                displayId, displayName, companyName,
                companyId, supplierCategory, title,
                firstName, middleName, lastName,
                suffix, individual, addresses,
                phoneNumbers, emails, websites,
                bankAccounts, notes, taxRate,
                taxNumber, currency, account,
                status, paymentMethod, terms,
                channel, customFields, rowVersion,
                passThrough, subsidiaryId);
        }

    }
}
