/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SuppliersFilter {

    /**
     * Company Name of supplier to search for
     */
    @SpeakeasyMetadata("queryParam:name=company_name")
    private Optional<String> companyName;

    /**
     * Display Name of supplier to search for
     */
    @SpeakeasyMetadata("queryParam:name=display_name")
    private Optional<String> displayName;

    /**
     * First name of supplier to search for
     */
    @SpeakeasyMetadata("queryParam:name=first_name")
    private Optional<String> firstName;

    /**
     * Last name of supplier to search for
     */
    @SpeakeasyMetadata("queryParam:name=last_name")
    private Optional<String> lastName;

    /**
     * Email of supplier to search for
     */
    @SpeakeasyMetadata("queryParam:name=email")
    private Optional<String> email;

    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<OffsetDateTime> updatedSince;

    @JsonCreator
    public SuppliersFilter(
            Optional<String> companyName,
            Optional<String> displayName,
            Optional<String> firstName,
            Optional<String> lastName,
            Optional<String> email,
            Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.companyName = companyName;
        this.displayName = displayName;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.updatedSince = updatedSince;
    }
    
    public SuppliersFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Company Name of supplier to search for
     */
    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    /**
     * Display Name of supplier to search for
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    /**
     * First name of supplier to search for
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * Last name of supplier to search for
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * Email of supplier to search for
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Company Name of supplier to search for
     */
    public SuppliersFilter withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    /**
     * Company Name of supplier to search for
     */
    public SuppliersFilter withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * Display Name of supplier to search for
     */
    public SuppliersFilter withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * Display Name of supplier to search for
     */
    public SuppliersFilter withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * First name of supplier to search for
     */
    public SuppliersFilter withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * First name of supplier to search for
     */
    public SuppliersFilter withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Last name of supplier to search for
     */
    public SuppliersFilter withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * Last name of supplier to search for
     */
    public SuppliersFilter withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Email of supplier to search for
     */
    public SuppliersFilter withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * Email of supplier to search for
     */
    public SuppliersFilter withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public SuppliersFilter withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    public SuppliersFilter withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuppliersFilter other = (SuppliersFilter) o;
        return 
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyName,
            displayName,
            firstName,
            lastName,
            email,
            updatedSince);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuppliersFilter.class,
                "companyName", companyName,
                "displayName", displayName,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "updatedSince", updatedSince);
    }
    
    public final static class Builder {
 
        private Optional<String> companyName = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<OffsetDateTime> updatedSince = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Company Name of supplier to search for
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * Company Name of supplier to search for
         */
        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * Display Name of supplier to search for
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * Display Name of supplier to search for
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * First name of supplier to search for
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * First name of supplier to search for
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Last name of supplier to search for
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * Last name of supplier to search for
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Email of supplier to search for
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Email of supplier to search for
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }
        
        public SuppliersFilter build() {
            return new SuppliersFilter(
                companyName,
                displayName,
                firstName,
                lastName,
                email,
                updatedSince);
        }
    }
}

