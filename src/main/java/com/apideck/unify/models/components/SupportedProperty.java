/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class SupportedProperty {
    /**
     * Name of the property in our Unified API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_property")
    private Optional<String> unifiedProperty;

    /**
     * List of child properties of the unified property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_properties")
    private Optional<? extends List<SupportedProperty>> childProperties;

    @JsonCreator
    public SupportedProperty(
            @JsonProperty("unified_property") Optional<String> unifiedProperty,
            @JsonProperty("child_properties") Optional<? extends List<SupportedProperty>> childProperties) {
        Utils.checkNotNull(unifiedProperty, "unifiedProperty");
        Utils.checkNotNull(childProperties, "childProperties");
        this.unifiedProperty = unifiedProperty;
        this.childProperties = childProperties;
    }
    
    public SupportedProperty() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Name of the property in our Unified API.
     */
    @JsonIgnore
    public Optional<String> unifiedProperty() {
        return unifiedProperty;
    }

    /**
     * List of child properties of the unified property.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SupportedProperty>> childProperties() {
        return (Optional<List<SupportedProperty>>) childProperties;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of the property in our Unified API.
     */
    public SupportedProperty withUnifiedProperty(String unifiedProperty) {
        Utils.checkNotNull(unifiedProperty, "unifiedProperty");
        this.unifiedProperty = Optional.ofNullable(unifiedProperty);
        return this;
    }


    /**
     * Name of the property in our Unified API.
     */
    public SupportedProperty withUnifiedProperty(Optional<String> unifiedProperty) {
        Utils.checkNotNull(unifiedProperty, "unifiedProperty");
        this.unifiedProperty = unifiedProperty;
        return this;
    }

    /**
     * List of child properties of the unified property.
     */
    public SupportedProperty withChildProperties(List<SupportedProperty> childProperties) {
        Utils.checkNotNull(childProperties, "childProperties");
        this.childProperties = Optional.ofNullable(childProperties);
        return this;
    }


    /**
     * List of child properties of the unified property.
     */
    public SupportedProperty withChildProperties(Optional<? extends List<SupportedProperty>> childProperties) {
        Utils.checkNotNull(childProperties, "childProperties");
        this.childProperties = childProperties;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupportedProperty other = (SupportedProperty) o;
        return 
            Utils.enhancedDeepEquals(this.unifiedProperty, other.unifiedProperty) &&
            Utils.enhancedDeepEquals(this.childProperties, other.childProperties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unifiedProperty, childProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupportedProperty.class,
                "unifiedProperty", unifiedProperty,
                "childProperties", childProperties);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> unifiedProperty = Optional.empty();

        private Optional<? extends List<SupportedProperty>> childProperties = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of the property in our Unified API.
         */
        public Builder unifiedProperty(String unifiedProperty) {
            Utils.checkNotNull(unifiedProperty, "unifiedProperty");
            this.unifiedProperty = Optional.ofNullable(unifiedProperty);
            return this;
        }

        /**
         * Name of the property in our Unified API.
         */
        public Builder unifiedProperty(Optional<String> unifiedProperty) {
            Utils.checkNotNull(unifiedProperty, "unifiedProperty");
            this.unifiedProperty = unifiedProperty;
            return this;
        }


        /**
         * List of child properties of the unified property.
         */
        public Builder childProperties(List<SupportedProperty> childProperties) {
            Utils.checkNotNull(childProperties, "childProperties");
            this.childProperties = Optional.ofNullable(childProperties);
            return this;
        }

        /**
         * List of child properties of the unified property.
         */
        public Builder childProperties(Optional<? extends List<SupportedProperty>> childProperties) {
            Utils.checkNotNull(childProperties, "childProperties");
            this.childProperties = childProperties;
            return this;
        }

        public SupportedProperty build() {

            return new SupportedProperty(
                unifiedProperty, childProperties);
        }

    }
}
