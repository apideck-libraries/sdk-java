/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TaxRate {
    /**
     * ID assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Name assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Tax code assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    /**
     * Description of tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Effective tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_tax_rate")
    private JsonNullable<Double> effectiveTaxRate;

    /**
     * Not compounded sum of the components of a tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_rate")
    private JsonNullable<Double> totalTaxRate;

    /**
     * Unique identifier for the account for tax collected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_payable_account_id")
    private JsonNullable<String> taxPayableAccountId;

    /**
     * Unique identifier for the account for tax remitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_remitted_account_id")
    private JsonNullable<String> taxRemittedAccountId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private JsonNullable<List<Components>> components;

    /**
     * Tax type used to indicate the source of tax collected or paid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * Report Tax type to aggregate tax collected or paid for reporting purposes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_tax_type")
    private JsonNullable<String> reportTaxType;

    /**
     * ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_tax_rate_id")
    private JsonNullable<String> originalTaxRateId;

    /**
     * Tax rate status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<TaxRateStatus> status;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<String> rowVersion;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    /**
     * The subsidiaries this belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsidiaries")
    private List<Subsidiaries> subsidiaries;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private List<CustomField> customFields;

    @JsonCreator
    public TaxRate(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("code") @Nullable JsonNullable<String> code,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("effective_tax_rate") @Nullable JsonNullable<Double> effectiveTaxRate,
            @JsonProperty("total_tax_rate") @Nullable JsonNullable<Double> totalTaxRate,
            @JsonProperty("tax_payable_account_id") @Nullable JsonNullable<String> taxPayableAccountId,
            @JsonProperty("tax_remitted_account_id") @Nullable JsonNullable<String> taxRemittedAccountId,
            @JsonProperty("components") @Nullable JsonNullable<List<Components>> components,
            @JsonProperty("type") @Nullable JsonNullable<String> type,
            @JsonProperty("report_tax_type") @Nullable JsonNullable<String> reportTaxType,
            @JsonProperty("original_tax_rate_id") @Nullable JsonNullable<String> originalTaxRateId,
            @JsonProperty("status") @Nullable JsonNullable<TaxRateStatus> status,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("row_version") @Nullable JsonNullable<String> rowVersion,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough,
            @JsonProperty("subsidiaries") @Nullable List<Subsidiaries> subsidiaries,
            @JsonProperty("custom_fields") @Nullable List<CustomField> customFields) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.name = name;
        this.code = Optional.ofNullable(code)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.effectiveTaxRate = Optional.ofNullable(effectiveTaxRate)
            .orElse(JsonNullable.undefined());
        this.totalTaxRate = Optional.ofNullable(totalTaxRate)
            .orElse(JsonNullable.undefined());
        this.taxPayableAccountId = Optional.ofNullable(taxPayableAccountId)
            .orElse(JsonNullable.undefined());
        this.taxRemittedAccountId = Optional.ofNullable(taxRemittedAccountId)
            .orElse(JsonNullable.undefined());
        this.components = Optional.ofNullable(components)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.reportTaxType = Optional.ofNullable(reportTaxType)
            .orElse(JsonNullable.undefined());
        this.originalTaxRateId = Optional.ofNullable(originalTaxRateId)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.rowVersion = Optional.ofNullable(rowVersion)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
        this.subsidiaries = subsidiaries;
        this.customFields = customFields;
    }
    
    public TaxRate() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * ID assigned to identify this tax rate.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Name assigned to identify this tax rate.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tax code assigned to identify this tax rate.
     */
    public JsonNullable<String> code() {
        return this.code;
    }

    /**
     * Description of tax rate
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * Effective tax rate
     */
    public JsonNullable<Double> effectiveTaxRate() {
        return this.effectiveTaxRate;
    }

    /**
     * Not compounded sum of the components of a tax rate
     */
    public JsonNullable<Double> totalTaxRate() {
        return this.totalTaxRate;
    }

    /**
     * Unique identifier for the account for tax collected.
     */
    public JsonNullable<String> taxPayableAccountId() {
        return this.taxPayableAccountId;
    }

    /**
     * Unique identifier for the account for tax remitted.
     */
    public JsonNullable<String> taxRemittedAccountId() {
        return this.taxRemittedAccountId;
    }

    public JsonNullable<List<Components>> components() {
        return this.components;
    }

    /**
     * Tax type used to indicate the source of tax collected or paid
     */
    public JsonNullable<String> type() {
        return this.type;
    }

    /**
     * Report Tax type to aggregate tax collected or paid for reporting purposes
     */
    public JsonNullable<String> reportTaxType() {
        return this.reportTaxType;
    }

    /**
     * ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
     */
    public JsonNullable<String> originalTaxRateId() {
        return this.originalTaxRateId;
    }

    /**
     * Tax rate status
     */
    public JsonNullable<TaxRateStatus> status() {
        return this.status;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<String> rowVersion() {
        return this.rowVersion;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    /**
     * The subsidiaries this belongs to.
     */
    public Optional<List<Subsidiaries>> subsidiaries() {
        return Optional.ofNullable(this.subsidiaries);
    }

    public Optional<List<CustomField>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID assigned to identify this tax rate.
     */
    public TaxRate withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Name assigned to identify this tax rate.
     */
    public TaxRate withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Tax code assigned to identify this tax rate.
     */
    public TaxRate withCode(@Nullable String code) {
        this.code = JsonNullable.of(code);
        return this;
    }


    /**
     * Description of tax rate
     */
    public TaxRate withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * Effective tax rate
     */
    public TaxRate withEffectiveTaxRate(@Nullable Double effectiveTaxRate) {
        this.effectiveTaxRate = JsonNullable.of(effectiveTaxRate);
        return this;
    }


    /**
     * Not compounded sum of the components of a tax rate
     */
    public TaxRate withTotalTaxRate(@Nullable Double totalTaxRate) {
        this.totalTaxRate = JsonNullable.of(totalTaxRate);
        return this;
    }


    /**
     * Unique identifier for the account for tax collected.
     */
    public TaxRate withTaxPayableAccountId(@Nullable String taxPayableAccountId) {
        this.taxPayableAccountId = JsonNullable.of(taxPayableAccountId);
        return this;
    }


    /**
     * Unique identifier for the account for tax remitted.
     */
    public TaxRate withTaxRemittedAccountId(@Nullable String taxRemittedAccountId) {
        this.taxRemittedAccountId = JsonNullable.of(taxRemittedAccountId);
        return this;
    }


    public TaxRate withComponents(@Nullable List<Components> components) {
        this.components = JsonNullable.of(components);
        return this;
    }


    /**
     * Tax type used to indicate the source of tax collected or paid
     */
    public TaxRate withType(@Nullable String type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * Report Tax type to aggregate tax collected or paid for reporting purposes
     */
    public TaxRate withReportTaxType(@Nullable String reportTaxType) {
        this.reportTaxType = JsonNullable.of(reportTaxType);
        return this;
    }


    /**
     * ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
     */
    public TaxRate withOriginalTaxRateId(@Nullable String originalTaxRateId) {
        this.originalTaxRateId = JsonNullable.of(originalTaxRateId);
        return this;
    }


    /**
     * Tax rate status
     */
    public TaxRate withStatus(@Nullable TaxRateStatus status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public TaxRate withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public TaxRate withRowVersion(@Nullable String rowVersion) {
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public TaxRate withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public TaxRate withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public TaxRate withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public TaxRate withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TaxRate withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    /**
     * The subsidiaries this belongs to.
     */
    public TaxRate withSubsidiaries(@Nullable List<Subsidiaries> subsidiaries) {
        this.subsidiaries = subsidiaries;
        return this;
    }


    public TaxRate withCustomFields(@Nullable List<CustomField> customFields) {
        this.customFields = customFields;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRate other = (TaxRate) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.effectiveTaxRate, other.effectiveTaxRate) &&
            Utils.enhancedDeepEquals(this.totalTaxRate, other.totalTaxRate) &&
            Utils.enhancedDeepEquals(this.taxPayableAccountId, other.taxPayableAccountId) &&
            Utils.enhancedDeepEquals(this.taxRemittedAccountId, other.taxRemittedAccountId) &&
            Utils.enhancedDeepEquals(this.components, other.components) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.reportTaxType, other.reportTaxType) &&
            Utils.enhancedDeepEquals(this.originalTaxRateId, other.originalTaxRateId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.rowVersion, other.rowVersion) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough) &&
            Utils.enhancedDeepEquals(this.subsidiaries, other.subsidiaries) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, code,
            description, effectiveTaxRate, totalTaxRate,
            taxPayableAccountId, taxRemittedAccountId, components,
            type, reportTaxType, originalTaxRateId,
            status, customMappings, rowVersion,
            updatedBy, createdBy, updatedAt,
            createdAt, passThrough, subsidiaries,
            customFields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRate.class,
                "id", id,
                "name", name,
                "code", code,
                "description", description,
                "effectiveTaxRate", effectiveTaxRate,
                "totalTaxRate", totalTaxRate,
                "taxPayableAccountId", taxPayableAccountId,
                "taxRemittedAccountId", taxRemittedAccountId,
                "components", components,
                "type", type,
                "reportTaxType", reportTaxType,
                "originalTaxRateId", originalTaxRateId,
                "status", status,
                "customMappings", customMappings,
                "rowVersion", rowVersion,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough,
                "subsidiaries", subsidiaries,
                "customFields", customFields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private String name;

        private JsonNullable<String> code;

        private JsonNullable<String> description;

        private JsonNullable<Double> effectiveTaxRate;

        private JsonNullable<Double> totalTaxRate;

        private JsonNullable<String> taxPayableAccountId;

        private JsonNullable<String> taxRemittedAccountId;

        private JsonNullable<List<Components>> components;

        private JsonNullable<String> type;

        private JsonNullable<String> reportTaxType;

        private JsonNullable<String> originalTaxRateId;

        private JsonNullable<TaxRateStatus> status;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> rowVersion;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private List<PassThroughBody> passThrough;

        private List<Subsidiaries> subsidiaries;

        private List<CustomField> customFields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID assigned to identify this tax rate.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Name assigned to identify this tax rate.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Tax code assigned to identify this tax rate.
         */
        public Builder code(@Nullable String code) {
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * Description of tax rate
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Effective tax rate
         */
        public Builder effectiveTaxRate(@Nullable Double effectiveTaxRate) {
            this.effectiveTaxRate = JsonNullable.of(effectiveTaxRate);
            return this;
        }

        /**
         * Not compounded sum of the components of a tax rate
         */
        public Builder totalTaxRate(@Nullable Double totalTaxRate) {
            this.totalTaxRate = JsonNullable.of(totalTaxRate);
            return this;
        }

        /**
         * Unique identifier for the account for tax collected.
         */
        public Builder taxPayableAccountId(@Nullable String taxPayableAccountId) {
            this.taxPayableAccountId = JsonNullable.of(taxPayableAccountId);
            return this;
        }

        /**
         * Unique identifier for the account for tax remitted.
         */
        public Builder taxRemittedAccountId(@Nullable String taxRemittedAccountId) {
            this.taxRemittedAccountId = JsonNullable.of(taxRemittedAccountId);
            return this;
        }

        public Builder components(@Nullable List<Components> components) {
            this.components = JsonNullable.of(components);
            return this;
        }

        /**
         * Tax type used to indicate the source of tax collected or paid
         */
        public Builder type(@Nullable String type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Report Tax type to aggregate tax collected or paid for reporting purposes
         */
        public Builder reportTaxType(@Nullable String reportTaxType) {
            this.reportTaxType = JsonNullable.of(reportTaxType);
            return this;
        }

        /**
         * ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
         */
        public Builder originalTaxRateId(@Nullable String originalTaxRateId) {
            this.originalTaxRateId = JsonNullable.of(originalTaxRateId);
            return this;
        }

        /**
         * Tax rate status
         */
        public Builder status(@Nullable TaxRateStatus status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(@Nullable String rowVersion) {
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        /**
         * The subsidiaries this belongs to.
         */
        public Builder subsidiaries(@Nullable List<Subsidiaries> subsidiaries) {
            this.subsidiaries = subsidiaries;
            return this;
        }

        public Builder customFields(@Nullable List<CustomField> customFields) {
            this.customFields = customFields;
            return this;
        }

        public TaxRate build() {
            return new TaxRate(
                id, name, code,
                description, effectiveTaxRate, totalTaxRate,
                taxPayableAccountId, taxRemittedAccountId, components,
                type, reportTaxType, originalTaxRateId,
                status, customMappings, rowVersion,
                updatedBy, createdBy, updatedAt,
                createdAt, passThrough, subsidiaries,
                customFields);
        }

    }
}
