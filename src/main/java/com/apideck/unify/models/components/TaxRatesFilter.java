/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class TaxRatesFilter {
    /**
     * Boolean to describe if tax rate can be used for asset accounts
     */
    @SpeakeasyMetadata("queryParam:name=assets")
    private Optional<Boolean> assets;

    /**
     * Boolean to describe if tax rate can be used for equity accounts
     */
    @SpeakeasyMetadata("queryParam:name=equity")
    private Optional<Boolean> equity;

    /**
     * Boolean to describe if tax rate can be used for expense accounts
     */
    @SpeakeasyMetadata("queryParam:name=expenses")
    private Optional<Boolean> expenses;

    /**
     * Boolean to describe if tax rate can be used for liability accounts
     */
    @SpeakeasyMetadata("queryParam:name=liabilities")
    private Optional<Boolean> liabilities;

    /**
     * Boolean to describe if tax rate can be used for revenue accounts
     */
    @SpeakeasyMetadata("queryParam:name=revenue")
    private Optional<Boolean> revenue;

    @JsonCreator
    public TaxRatesFilter(
            Optional<Boolean> assets,
            Optional<Boolean> equity,
            Optional<Boolean> expenses,
            Optional<Boolean> liabilities,
            Optional<Boolean> revenue) {
        Utils.checkNotNull(assets, "assets");
        Utils.checkNotNull(equity, "equity");
        Utils.checkNotNull(expenses, "expenses");
        Utils.checkNotNull(liabilities, "liabilities");
        Utils.checkNotNull(revenue, "revenue");
        this.assets = assets;
        this.equity = equity;
        this.expenses = expenses;
        this.liabilities = liabilities;
        this.revenue = revenue;
    }
    
    public TaxRatesFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Boolean to describe if tax rate can be used for asset accounts
     */
    @JsonIgnore
    public Optional<Boolean> assets() {
        return assets;
    }

    /**
     * Boolean to describe if tax rate can be used for equity accounts
     */
    @JsonIgnore
    public Optional<Boolean> equity() {
        return equity;
    }

    /**
     * Boolean to describe if tax rate can be used for expense accounts
     */
    @JsonIgnore
    public Optional<Boolean> expenses() {
        return expenses;
    }

    /**
     * Boolean to describe if tax rate can be used for liability accounts
     */
    @JsonIgnore
    public Optional<Boolean> liabilities() {
        return liabilities;
    }

    /**
     * Boolean to describe if tax rate can be used for revenue accounts
     */
    @JsonIgnore
    public Optional<Boolean> revenue() {
        return revenue;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Boolean to describe if tax rate can be used for asset accounts
     */
    public TaxRatesFilter withAssets(boolean assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = Optional.ofNullable(assets);
        return this;
    }


    /**
     * Boolean to describe if tax rate can be used for asset accounts
     */
    public TaxRatesFilter withAssets(Optional<Boolean> assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = assets;
        return this;
    }

    /**
     * Boolean to describe if tax rate can be used for equity accounts
     */
    public TaxRatesFilter withEquity(boolean equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = Optional.ofNullable(equity);
        return this;
    }


    /**
     * Boolean to describe if tax rate can be used for equity accounts
     */
    public TaxRatesFilter withEquity(Optional<Boolean> equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = equity;
        return this;
    }

    /**
     * Boolean to describe if tax rate can be used for expense accounts
     */
    public TaxRatesFilter withExpenses(boolean expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = Optional.ofNullable(expenses);
        return this;
    }


    /**
     * Boolean to describe if tax rate can be used for expense accounts
     */
    public TaxRatesFilter withExpenses(Optional<Boolean> expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = expenses;
        return this;
    }

    /**
     * Boolean to describe if tax rate can be used for liability accounts
     */
    public TaxRatesFilter withLiabilities(boolean liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = Optional.ofNullable(liabilities);
        return this;
    }


    /**
     * Boolean to describe if tax rate can be used for liability accounts
     */
    public TaxRatesFilter withLiabilities(Optional<Boolean> liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = liabilities;
        return this;
    }

    /**
     * Boolean to describe if tax rate can be used for revenue accounts
     */
    public TaxRatesFilter withRevenue(boolean revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = Optional.ofNullable(revenue);
        return this;
    }


    /**
     * Boolean to describe if tax rate can be used for revenue accounts
     */
    public TaxRatesFilter withRevenue(Optional<Boolean> revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = revenue;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRatesFilter other = (TaxRatesFilter) o;
        return 
            Utils.enhancedDeepEquals(this.assets, other.assets) &&
            Utils.enhancedDeepEquals(this.equity, other.equity) &&
            Utils.enhancedDeepEquals(this.expenses, other.expenses) &&
            Utils.enhancedDeepEquals(this.liabilities, other.liabilities) &&
            Utils.enhancedDeepEquals(this.revenue, other.revenue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            assets, equity, expenses,
            liabilities, revenue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRatesFilter.class,
                "assets", assets,
                "equity", equity,
                "expenses", expenses,
                "liabilities", liabilities,
                "revenue", revenue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> assets = Optional.empty();

        private Optional<Boolean> equity = Optional.empty();

        private Optional<Boolean> expenses = Optional.empty();

        private Optional<Boolean> liabilities = Optional.empty();

        private Optional<Boolean> revenue = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Boolean to describe if tax rate can be used for asset accounts
         */
        public Builder assets(boolean assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = Optional.ofNullable(assets);
            return this;
        }

        /**
         * Boolean to describe if tax rate can be used for asset accounts
         */
        public Builder assets(Optional<Boolean> assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = assets;
            return this;
        }


        /**
         * Boolean to describe if tax rate can be used for equity accounts
         */
        public Builder equity(boolean equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = Optional.ofNullable(equity);
            return this;
        }

        /**
         * Boolean to describe if tax rate can be used for equity accounts
         */
        public Builder equity(Optional<Boolean> equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = equity;
            return this;
        }


        /**
         * Boolean to describe if tax rate can be used for expense accounts
         */
        public Builder expenses(boolean expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = Optional.ofNullable(expenses);
            return this;
        }

        /**
         * Boolean to describe if tax rate can be used for expense accounts
         */
        public Builder expenses(Optional<Boolean> expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = expenses;
            return this;
        }


        /**
         * Boolean to describe if tax rate can be used for liability accounts
         */
        public Builder liabilities(boolean liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = Optional.ofNullable(liabilities);
            return this;
        }

        /**
         * Boolean to describe if tax rate can be used for liability accounts
         */
        public Builder liabilities(Optional<Boolean> liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = liabilities;
            return this;
        }


        /**
         * Boolean to describe if tax rate can be used for revenue accounts
         */
        public Builder revenue(boolean revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = Optional.ofNullable(revenue);
            return this;
        }

        /**
         * Boolean to describe if tax rate can be used for revenue accounts
         */
        public Builder revenue(Optional<Boolean> revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = revenue;
            return this;
        }

        public TaxRatesFilter build() {

            return new TaxRatesFilter(
                assets, equity, expenses,
                liabilities, revenue);
        }

    }
}
