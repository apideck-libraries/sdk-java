/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TenderInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private JsonNullable<String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<String> label;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private JsonNullable<Boolean> hidden;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editable")
    private JsonNullable<Boolean> editable;

    /**
     * If this tender opens the cash drawer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opens_cash_drawer")
    private Optional<Boolean> opensCashDrawer;

    /**
     * Allow tipping on payment from tender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allows_tipping")
    private Optional<Boolean> allowsTipping;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    @JsonCreator
    public TenderInput(
            @JsonProperty("key") JsonNullable<String> key,
            @JsonProperty("label") JsonNullable<String> label,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("hidden") JsonNullable<Boolean> hidden,
            @JsonProperty("editable") JsonNullable<Boolean> editable,
            @JsonProperty("opens_cash_drawer") Optional<Boolean> opensCashDrawer,
            @JsonProperty("allows_tipping") Optional<Boolean> allowsTipping,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(hidden, "hidden");
        Utils.checkNotNull(editable, "editable");
        Utils.checkNotNull(opensCashDrawer, "opensCashDrawer");
        Utils.checkNotNull(allowsTipping, "allowsTipping");
        Utils.checkNotNull(passThrough, "passThrough");
        this.key = key;
        this.label = label;
        this.active = active;
        this.hidden = hidden;
        this.editable = editable;
        this.opensCashDrawer = opensCashDrawer;
        this.allowsTipping = allowsTipping;
        this.passThrough = passThrough;
    }
    
    public TenderInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public JsonNullable<String> key() {
        return key;
    }

    @JsonIgnore
    public JsonNullable<String> label() {
        return label;
    }

    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    @JsonIgnore
    public JsonNullable<Boolean> hidden() {
        return hidden;
    }

    @JsonIgnore
    public JsonNullable<Boolean> editable() {
        return editable;
    }

    /**
     * If this tender opens the cash drawer
     */
    @JsonIgnore
    public Optional<Boolean> opensCashDrawer() {
        return opensCashDrawer;
    }

    /**
     * Allow tipping on payment from tender
     */
    @JsonIgnore
    public Optional<Boolean> allowsTipping() {
        return allowsTipping;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TenderInput withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = JsonNullable.of(key);
        return this;
    }

    public TenderInput withKey(JsonNullable<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public TenderInput withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    public TenderInput withLabel(JsonNullable<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public TenderInput withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    public TenderInput withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public TenderInput withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = JsonNullable.of(hidden);
        return this;
    }

    public TenderInput withHidden(JsonNullable<Boolean> hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }

    public TenderInput withEditable(boolean editable) {
        Utils.checkNotNull(editable, "editable");
        this.editable = JsonNullable.of(editable);
        return this;
    }

    public TenderInput withEditable(JsonNullable<Boolean> editable) {
        Utils.checkNotNull(editable, "editable");
        this.editable = editable;
        return this;
    }

    /**
     * If this tender opens the cash drawer
     */
    public TenderInput withOpensCashDrawer(boolean opensCashDrawer) {
        Utils.checkNotNull(opensCashDrawer, "opensCashDrawer");
        this.opensCashDrawer = Optional.ofNullable(opensCashDrawer);
        return this;
    }

    /**
     * If this tender opens the cash drawer
     */
    public TenderInput withOpensCashDrawer(Optional<Boolean> opensCashDrawer) {
        Utils.checkNotNull(opensCashDrawer, "opensCashDrawer");
        this.opensCashDrawer = opensCashDrawer;
        return this;
    }

    /**
     * Allow tipping on payment from tender
     */
    public TenderInput withAllowsTipping(boolean allowsTipping) {
        Utils.checkNotNull(allowsTipping, "allowsTipping");
        this.allowsTipping = Optional.ofNullable(allowsTipping);
        return this;
    }

    /**
     * Allow tipping on payment from tender
     */
    public TenderInput withAllowsTipping(Optional<Boolean> allowsTipping) {
        Utils.checkNotNull(allowsTipping, "allowsTipping");
        this.allowsTipping = allowsTipping;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TenderInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TenderInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TenderInput other = (TenderInput) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.hidden, other.hidden) &&
            Objects.deepEquals(this.editable, other.editable) &&
            Objects.deepEquals(this.opensCashDrawer, other.opensCashDrawer) &&
            Objects.deepEquals(this.allowsTipping, other.allowsTipping) &&
            Objects.deepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            label,
            active,
            hidden,
            editable,
            opensCashDrawer,
            allowsTipping,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TenderInput.class,
                "key", key,
                "label", label,
                "active", active,
                "hidden", hidden,
                "editable", editable,
                "opensCashDrawer", opensCashDrawer,
                "allowsTipping", allowsTipping,
                "passThrough", passThrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> key = JsonNullable.undefined();
 
        private JsonNullable<String> label = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private JsonNullable<Boolean> hidden = JsonNullable.undefined();
 
        private JsonNullable<Boolean> editable = JsonNullable.undefined();
 
        private Optional<Boolean> opensCashDrawer;
 
        private Optional<Boolean> allowsTipping;
 
        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = JsonNullable.of(key);
            return this;
        }

        public Builder key(JsonNullable<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        public Builder label(JsonNullable<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = JsonNullable.of(hidden);
            return this;
        }

        public Builder hidden(JsonNullable<Boolean> hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }

        public Builder editable(boolean editable) {
            Utils.checkNotNull(editable, "editable");
            this.editable = JsonNullable.of(editable);
            return this;
        }

        public Builder editable(JsonNullable<Boolean> editable) {
            Utils.checkNotNull(editable, "editable");
            this.editable = editable;
            return this;
        }

        /**
         * If this tender opens the cash drawer
         */
        public Builder opensCashDrawer(boolean opensCashDrawer) {
            Utils.checkNotNull(opensCashDrawer, "opensCashDrawer");
            this.opensCashDrawer = Optional.ofNullable(opensCashDrawer);
            return this;
        }

        /**
         * If this tender opens the cash drawer
         */
        public Builder opensCashDrawer(Optional<Boolean> opensCashDrawer) {
            Utils.checkNotNull(opensCashDrawer, "opensCashDrawer");
            this.opensCashDrawer = opensCashDrawer;
            return this;
        }

        /**
         * Allow tipping on payment from tender
         */
        public Builder allowsTipping(boolean allowsTipping) {
            Utils.checkNotNull(allowsTipping, "allowsTipping");
            this.allowsTipping = Optional.ofNullable(allowsTipping);
            return this;
        }

        /**
         * Allow tipping on payment from tender
         */
        public Builder allowsTipping(Optional<Boolean> allowsTipping) {
            Utils.checkNotNull(allowsTipping, "allowsTipping");
            this.allowsTipping = allowsTipping;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }
        
        public TenderInput build() {
            if (opensCashDrawer == null) {
                opensCashDrawer = _SINGLETON_VALUE_OpensCashDrawer.value();
            }
            if (allowsTipping == null) {
                allowsTipping = _SINGLETON_VALUE_AllowsTipping.value();
            }            return new TenderInput(
                key,
                label,
                active,
                hidden,
                editable,
                opensCashDrawer,
                allowsTipping,
                passThrough);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_OpensCashDrawer =
                new LazySingletonValue<>(
                        "opens_cash_drawer",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_AllowsTipping =
                new LazySingletonValue<>(
                        "allows_tipping",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

