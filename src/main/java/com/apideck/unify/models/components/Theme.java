/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * Theme
 * 
 * <p>Theming options to change the look and feel of Vault.
 */
public class Theme {
    /**
     * The URL to the favicon to use for Vault.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favicon")
    private Optional<String> favicon;

    /**
     * The URL to the logo to use for Vault.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private Optional<String> logo;

    /**
     * The primary color to use for Vault.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_color")
    private Optional<String> primaryColor;

    /**
     * The background color to use for the sidebar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sidepanel_background_color")
    private Optional<String> sidepanelBackgroundColor;

    /**
     * The text color to use for the sidebar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sidepanel_text_color")
    private Optional<String> sidepanelTextColor;

    /**
     * The name that will be shown in the sidebar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vault_name")
    private Optional<String> vaultName;

    /**
     * The URL to the privacy policy that will be shown in the sidebar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privacy_url")
    private Optional<String> privacyUrl;

    /**
     * The URL to the terms and conditions that will be shown in the sidebar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms_url")
    private Optional<String> termsUrl;

    @JsonCreator
    public Theme(
            @JsonProperty("favicon") Optional<String> favicon,
            @JsonProperty("logo") Optional<String> logo,
            @JsonProperty("primary_color") Optional<String> primaryColor,
            @JsonProperty("sidepanel_background_color") Optional<String> sidepanelBackgroundColor,
            @JsonProperty("sidepanel_text_color") Optional<String> sidepanelTextColor,
            @JsonProperty("vault_name") Optional<String> vaultName,
            @JsonProperty("privacy_url") Optional<String> privacyUrl,
            @JsonProperty("terms_url") Optional<String> termsUrl) {
        Utils.checkNotNull(favicon, "favicon");
        Utils.checkNotNull(logo, "logo");
        Utils.checkNotNull(primaryColor, "primaryColor");
        Utils.checkNotNull(sidepanelBackgroundColor, "sidepanelBackgroundColor");
        Utils.checkNotNull(sidepanelTextColor, "sidepanelTextColor");
        Utils.checkNotNull(vaultName, "vaultName");
        Utils.checkNotNull(privacyUrl, "privacyUrl");
        Utils.checkNotNull(termsUrl, "termsUrl");
        this.favicon = favicon;
        this.logo = logo;
        this.primaryColor = primaryColor;
        this.sidepanelBackgroundColor = sidepanelBackgroundColor;
        this.sidepanelTextColor = sidepanelTextColor;
        this.vaultName = vaultName;
        this.privacyUrl = privacyUrl;
        this.termsUrl = termsUrl;
    }
    
    public Theme() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The URL to the favicon to use for Vault.
     */
    @JsonIgnore
    public Optional<String> favicon() {
        return favicon;
    }

    /**
     * The URL to the logo to use for Vault.
     */
    @JsonIgnore
    public Optional<String> logo() {
        return logo;
    }

    /**
     * The primary color to use for Vault.
     */
    @JsonIgnore
    public Optional<String> primaryColor() {
        return primaryColor;
    }

    /**
     * The background color to use for the sidebar.
     */
    @JsonIgnore
    public Optional<String> sidepanelBackgroundColor() {
        return sidepanelBackgroundColor;
    }

    /**
     * The text color to use for the sidebar.
     */
    @JsonIgnore
    public Optional<String> sidepanelTextColor() {
        return sidepanelTextColor;
    }

    /**
     * The name that will be shown in the sidebar.
     */
    @JsonIgnore
    public Optional<String> vaultName() {
        return vaultName;
    }

    /**
     * The URL to the privacy policy that will be shown in the sidebar.
     */
    @JsonIgnore
    public Optional<String> privacyUrl() {
        return privacyUrl;
    }

    /**
     * The URL to the terms and conditions that will be shown in the sidebar.
     */
    @JsonIgnore
    public Optional<String> termsUrl() {
        return termsUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL to the favicon to use for Vault.
     */
    public Theme withFavicon(String favicon) {
        Utils.checkNotNull(favicon, "favicon");
        this.favicon = Optional.ofNullable(favicon);
        return this;
    }


    /**
     * The URL to the favicon to use for Vault.
     */
    public Theme withFavicon(Optional<String> favicon) {
        Utils.checkNotNull(favicon, "favicon");
        this.favicon = favicon;
        return this;
    }

    /**
     * The URL to the logo to use for Vault.
     */
    public Theme withLogo(String logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = Optional.ofNullable(logo);
        return this;
    }


    /**
     * The URL to the logo to use for Vault.
     */
    public Theme withLogo(Optional<String> logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = logo;
        return this;
    }

    /**
     * The primary color to use for Vault.
     */
    public Theme withPrimaryColor(String primaryColor) {
        Utils.checkNotNull(primaryColor, "primaryColor");
        this.primaryColor = Optional.ofNullable(primaryColor);
        return this;
    }


    /**
     * The primary color to use for Vault.
     */
    public Theme withPrimaryColor(Optional<String> primaryColor) {
        Utils.checkNotNull(primaryColor, "primaryColor");
        this.primaryColor = primaryColor;
        return this;
    }

    /**
     * The background color to use for the sidebar.
     */
    public Theme withSidepanelBackgroundColor(String sidepanelBackgroundColor) {
        Utils.checkNotNull(sidepanelBackgroundColor, "sidepanelBackgroundColor");
        this.sidepanelBackgroundColor = Optional.ofNullable(sidepanelBackgroundColor);
        return this;
    }


    /**
     * The background color to use for the sidebar.
     */
    public Theme withSidepanelBackgroundColor(Optional<String> sidepanelBackgroundColor) {
        Utils.checkNotNull(sidepanelBackgroundColor, "sidepanelBackgroundColor");
        this.sidepanelBackgroundColor = sidepanelBackgroundColor;
        return this;
    }

    /**
     * The text color to use for the sidebar.
     */
    public Theme withSidepanelTextColor(String sidepanelTextColor) {
        Utils.checkNotNull(sidepanelTextColor, "sidepanelTextColor");
        this.sidepanelTextColor = Optional.ofNullable(sidepanelTextColor);
        return this;
    }


    /**
     * The text color to use for the sidebar.
     */
    public Theme withSidepanelTextColor(Optional<String> sidepanelTextColor) {
        Utils.checkNotNull(sidepanelTextColor, "sidepanelTextColor");
        this.sidepanelTextColor = sidepanelTextColor;
        return this;
    }

    /**
     * The name that will be shown in the sidebar.
     */
    public Theme withVaultName(String vaultName) {
        Utils.checkNotNull(vaultName, "vaultName");
        this.vaultName = Optional.ofNullable(vaultName);
        return this;
    }


    /**
     * The name that will be shown in the sidebar.
     */
    public Theme withVaultName(Optional<String> vaultName) {
        Utils.checkNotNull(vaultName, "vaultName");
        this.vaultName = vaultName;
        return this;
    }

    /**
     * The URL to the privacy policy that will be shown in the sidebar.
     */
    public Theme withPrivacyUrl(String privacyUrl) {
        Utils.checkNotNull(privacyUrl, "privacyUrl");
        this.privacyUrl = Optional.ofNullable(privacyUrl);
        return this;
    }


    /**
     * The URL to the privacy policy that will be shown in the sidebar.
     */
    public Theme withPrivacyUrl(Optional<String> privacyUrl) {
        Utils.checkNotNull(privacyUrl, "privacyUrl");
        this.privacyUrl = privacyUrl;
        return this;
    }

    /**
     * The URL to the terms and conditions that will be shown in the sidebar.
     */
    public Theme withTermsUrl(String termsUrl) {
        Utils.checkNotNull(termsUrl, "termsUrl");
        this.termsUrl = Optional.ofNullable(termsUrl);
        return this;
    }


    /**
     * The URL to the terms and conditions that will be shown in the sidebar.
     */
    public Theme withTermsUrl(Optional<String> termsUrl) {
        Utils.checkNotNull(termsUrl, "termsUrl");
        this.termsUrl = termsUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Theme other = (Theme) o;
        return 
            Utils.enhancedDeepEquals(this.favicon, other.favicon) &&
            Utils.enhancedDeepEquals(this.logo, other.logo) &&
            Utils.enhancedDeepEquals(this.primaryColor, other.primaryColor) &&
            Utils.enhancedDeepEquals(this.sidepanelBackgroundColor, other.sidepanelBackgroundColor) &&
            Utils.enhancedDeepEquals(this.sidepanelTextColor, other.sidepanelTextColor) &&
            Utils.enhancedDeepEquals(this.vaultName, other.vaultName) &&
            Utils.enhancedDeepEquals(this.privacyUrl, other.privacyUrl) &&
            Utils.enhancedDeepEquals(this.termsUrl, other.termsUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            favicon, logo, primaryColor,
            sidepanelBackgroundColor, sidepanelTextColor, vaultName,
            privacyUrl, termsUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Theme.class,
                "favicon", favicon,
                "logo", logo,
                "primaryColor", primaryColor,
                "sidepanelBackgroundColor", sidepanelBackgroundColor,
                "sidepanelTextColor", sidepanelTextColor,
                "vaultName", vaultName,
                "privacyUrl", privacyUrl,
                "termsUrl", termsUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> favicon = Optional.empty();

        private Optional<String> logo = Optional.empty();

        private Optional<String> primaryColor = Optional.empty();

        private Optional<String> sidepanelBackgroundColor = Optional.empty();

        private Optional<String> sidepanelTextColor = Optional.empty();

        private Optional<String> vaultName = Optional.empty();

        private Optional<String> privacyUrl = Optional.empty();

        private Optional<String> termsUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The URL to the favicon to use for Vault.
         */
        public Builder favicon(String favicon) {
            Utils.checkNotNull(favicon, "favicon");
            this.favicon = Optional.ofNullable(favicon);
            return this;
        }

        /**
         * The URL to the favicon to use for Vault.
         */
        public Builder favicon(Optional<String> favicon) {
            Utils.checkNotNull(favicon, "favicon");
            this.favicon = favicon;
            return this;
        }


        /**
         * The URL to the logo to use for Vault.
         */
        public Builder logo(String logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        /**
         * The URL to the logo to use for Vault.
         */
        public Builder logo(Optional<String> logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = logo;
            return this;
        }


        /**
         * The primary color to use for Vault.
         */
        public Builder primaryColor(String primaryColor) {
            Utils.checkNotNull(primaryColor, "primaryColor");
            this.primaryColor = Optional.ofNullable(primaryColor);
            return this;
        }

        /**
         * The primary color to use for Vault.
         */
        public Builder primaryColor(Optional<String> primaryColor) {
            Utils.checkNotNull(primaryColor, "primaryColor");
            this.primaryColor = primaryColor;
            return this;
        }


        /**
         * The background color to use for the sidebar.
         */
        public Builder sidepanelBackgroundColor(String sidepanelBackgroundColor) {
            Utils.checkNotNull(sidepanelBackgroundColor, "sidepanelBackgroundColor");
            this.sidepanelBackgroundColor = Optional.ofNullable(sidepanelBackgroundColor);
            return this;
        }

        /**
         * The background color to use for the sidebar.
         */
        public Builder sidepanelBackgroundColor(Optional<String> sidepanelBackgroundColor) {
            Utils.checkNotNull(sidepanelBackgroundColor, "sidepanelBackgroundColor");
            this.sidepanelBackgroundColor = sidepanelBackgroundColor;
            return this;
        }


        /**
         * The text color to use for the sidebar.
         */
        public Builder sidepanelTextColor(String sidepanelTextColor) {
            Utils.checkNotNull(sidepanelTextColor, "sidepanelTextColor");
            this.sidepanelTextColor = Optional.ofNullable(sidepanelTextColor);
            return this;
        }

        /**
         * The text color to use for the sidebar.
         */
        public Builder sidepanelTextColor(Optional<String> sidepanelTextColor) {
            Utils.checkNotNull(sidepanelTextColor, "sidepanelTextColor");
            this.sidepanelTextColor = sidepanelTextColor;
            return this;
        }


        /**
         * The name that will be shown in the sidebar.
         */
        public Builder vaultName(String vaultName) {
            Utils.checkNotNull(vaultName, "vaultName");
            this.vaultName = Optional.ofNullable(vaultName);
            return this;
        }

        /**
         * The name that will be shown in the sidebar.
         */
        public Builder vaultName(Optional<String> vaultName) {
            Utils.checkNotNull(vaultName, "vaultName");
            this.vaultName = vaultName;
            return this;
        }


        /**
         * The URL to the privacy policy that will be shown in the sidebar.
         */
        public Builder privacyUrl(String privacyUrl) {
            Utils.checkNotNull(privacyUrl, "privacyUrl");
            this.privacyUrl = Optional.ofNullable(privacyUrl);
            return this;
        }

        /**
         * The URL to the privacy policy that will be shown in the sidebar.
         */
        public Builder privacyUrl(Optional<String> privacyUrl) {
            Utils.checkNotNull(privacyUrl, "privacyUrl");
            this.privacyUrl = privacyUrl;
            return this;
        }


        /**
         * The URL to the terms and conditions that will be shown in the sidebar.
         */
        public Builder termsUrl(String termsUrl) {
            Utils.checkNotNull(termsUrl, "termsUrl");
            this.termsUrl = Optional.ofNullable(termsUrl);
            return this;
        }

        /**
         * The URL to the terms and conditions that will be shown in the sidebar.
         */
        public Builder termsUrl(Optional<String> termsUrl) {
            Utils.checkNotNull(termsUrl, "termsUrl");
            this.termsUrl = termsUrl;
            return this;
        }

        public Theme build() {

            return new Theme(
                favicon, logo, primaryColor,
                sidepanelBackgroundColor, sidepanelTextColor, vaultName,
                privacyUrl, termsUrl);
        }

    }
}
