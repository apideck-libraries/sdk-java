/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Ticket {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The ticket's parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The ticket's collection ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection_id")
    private JsonNullable<String> collectionId;

    /**
     * The ticket's type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * Subject of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<String> subject;

    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * Priority of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<Priority> priority;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    private List<Assignee> assignees;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * Due date of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<OffsetDateTime> dueDate;

    /**
     * When the ticket was completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_at")
    private JsonNullable<OffsetDateTime> completedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private List<CollectionTag> tags;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public Ticket(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("parent_id") @Nullable JsonNullable<String> parentId,
            @JsonProperty("collection_id") @Nullable JsonNullable<String> collectionId,
            @JsonProperty("type") @Nullable JsonNullable<String> type,
            @JsonProperty("subject") @Nullable JsonNullable<String> subject,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("priority") @Nullable JsonNullable<Priority> priority,
            @JsonProperty("assignees") @Nullable List<Assignee> assignees,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("due_date") @Nullable JsonNullable<OffsetDateTime> dueDate,
            @JsonProperty("completed_at") @Nullable JsonNullable<OffsetDateTime> completedAt,
            @JsonProperty("tags") @Nullable List<CollectionTag> tags,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.parentId = Optional.ofNullable(parentId)
            .orElse(JsonNullable.undefined());
        this.collectionId = Optional.ofNullable(collectionId)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.subject = Optional.ofNullable(subject)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.priority = Optional.ofNullable(priority)
            .orElse(JsonNullable.undefined());
        this.assignees = assignees;
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.dueDate = Optional.ofNullable(dueDate)
            .orElse(JsonNullable.undefined());
        this.completedAt = Optional.ofNullable(completedAt)
            .orElse(JsonNullable.undefined());
        this.tags = tags;
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public Ticket(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The ticket's parent ID
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The ticket's collection ID
     */
    public JsonNullable<String> collectionId() {
        return this.collectionId;
    }

    /**
     * The ticket's type
     */
    public JsonNullable<String> type() {
        return this.type;
    }

    /**
     * Subject of the ticket
     */
    public JsonNullable<String> subject() {
        return this.subject;
    }

    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * Priority of the ticket
     */
    public JsonNullable<Priority> priority() {
        return this.priority;
    }

    public Optional<List<Assignee>> assignees() {
        return Optional.ofNullable(this.assignees);
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * Due date of the ticket
     */
    public JsonNullable<OffsetDateTime> dueDate() {
        return this.dueDate;
    }

    /**
     * When the ticket was completed
     */
    public JsonNullable<OffsetDateTime> completedAt() {
        return this.completedAt;
    }

    public Optional<List<CollectionTag>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public Ticket withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The ticket's parent ID
     */
    public Ticket withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The ticket's collection ID
     */
    public Ticket withCollectionId(@Nullable String collectionId) {
        this.collectionId = JsonNullable.of(collectionId);
        return this;
    }


    /**
     * The ticket's type
     */
    public Ticket withType(@Nullable String type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * Subject of the ticket
     */
    public Ticket withSubject(@Nullable String subject) {
        this.subject = JsonNullable.of(subject);
        return this;
    }


    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    public Ticket withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    public Ticket withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Priority of the ticket
     */
    public Ticket withPriority(@Nullable Priority priority) {
        this.priority = JsonNullable.of(priority);
        return this;
    }


    public Ticket withAssignees(@Nullable List<Assignee> assignees) {
        this.assignees = assignees;
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public Ticket withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public Ticket withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The user who created the object.
     */
    public Ticket withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * Due date of the ticket
     */
    public Ticket withDueDate(@Nullable OffsetDateTime dueDate) {
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }


    /**
     * When the ticket was completed
     */
    public Ticket withCompletedAt(@Nullable OffsetDateTime completedAt) {
        this.completedAt = JsonNullable.of(completedAt);
        return this;
    }


    public Ticket withTags(@Nullable List<CollectionTag> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public Ticket withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Ticket withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Ticket other = (Ticket) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.collectionId, other.collectionId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.assignees, other.assignees) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.completedAt, other.completedAt) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, parentId, collectionId,
            type, subject, description,
            status, priority, assignees,
            updatedAt, createdAt, createdBy,
            dueDate, completedAt, tags,
            customMappings, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Ticket.class,
                "id", id,
                "parentId", parentId,
                "collectionId", collectionId,
                "type", type,
                "subject", subject,
                "description", description,
                "status", status,
                "priority", priority,
                "assignees", assignees,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "dueDate", dueDate,
                "completedAt", completedAt,
                "tags", tags,
                "customMappings", customMappings,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> parentId;

        private JsonNullable<String> collectionId;

        private JsonNullable<String> type;

        private JsonNullable<String> subject;

        private JsonNullable<String> description;

        private JsonNullable<String> status;

        private JsonNullable<Priority> priority;

        private List<Assignee> assignees;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> dueDate;

        private JsonNullable<OffsetDateTime> completedAt;

        private List<CollectionTag> tags;

        private JsonNullable<Map<String, Object>> customMappings;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The ticket's parent ID
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The ticket's collection ID
         */
        public Builder collectionId(@Nullable String collectionId) {
            this.collectionId = JsonNullable.of(collectionId);
            return this;
        }

        /**
         * The ticket's type
         */
        public Builder type(@Nullable String type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Subject of the ticket
         */
        public Builder subject(@Nullable String subject) {
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * The ticket's description. HTML version of description is mapped if supported by the third-party platform
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Priority of the ticket
         */
        public Builder priority(@Nullable Priority priority) {
            this.priority = JsonNullable.of(priority);
            return this;
        }

        public Builder assignees(@Nullable List<Assignee> assignees) {
            this.assignees = assignees;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * Due date of the ticket
         */
        public Builder dueDate(@Nullable OffsetDateTime dueDate) {
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * When the ticket was completed
         */
        public Builder completedAt(@Nullable OffsetDateTime completedAt) {
            this.completedAt = JsonNullable.of(completedAt);
            return this;
        }

        public Builder tags(@Nullable List<CollectionTag> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public Ticket build() {
            return new Ticket(
                id, parentId, collectionId,
                type, subject, description,
                status, priority, assignees,
                updatedAt, createdAt, createdBy,
                dueDate, completedAt, tags,
                customMappings, passThrough);
        }

    }
}
