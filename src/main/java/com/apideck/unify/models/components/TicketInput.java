/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TicketInput {
    /**
     * The ticket's parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The ticket's type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * Subject of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<String> subject;

    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * Priority of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<Priority> priority;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    private List<AssigneeInput> assignees;

    /**
     * Due date of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<OffsetDateTime> dueDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private List<CollectionTagInput> tags;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public TicketInput(
            @JsonProperty("parent_id") @Nullable JsonNullable<String> parentId,
            @JsonProperty("type") @Nullable JsonNullable<String> type,
            @JsonProperty("subject") @Nullable JsonNullable<String> subject,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("priority") @Nullable JsonNullable<Priority> priority,
            @JsonProperty("assignees") @Nullable List<AssigneeInput> assignees,
            @JsonProperty("due_date") @Nullable JsonNullable<OffsetDateTime> dueDate,
            @JsonProperty("tags") @Nullable List<CollectionTagInput> tags,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.parentId = Optional.ofNullable(parentId)
            .orElse(JsonNullable.undefined());
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
        this.subject = Optional.ofNullable(subject)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.priority = Optional.ofNullable(priority)
            .orElse(JsonNullable.undefined());
        this.assignees = assignees;
        this.dueDate = Optional.ofNullable(dueDate)
            .orElse(JsonNullable.undefined());
        this.tags = tags;
        this.passThrough = passThrough;
    }
    
    public TicketInput() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The ticket's parent ID
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The ticket's type
     */
    public JsonNullable<String> type() {
        return this.type;
    }

    /**
     * Subject of the ticket
     */
    public JsonNullable<String> subject() {
        return this.subject;
    }

    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    /**
     * Priority of the ticket
     */
    public JsonNullable<Priority> priority() {
        return this.priority;
    }

    public Optional<List<AssigneeInput>> assignees() {
        return Optional.ofNullable(this.assignees);
    }

    /**
     * Due date of the ticket
     */
    public JsonNullable<OffsetDateTime> dueDate() {
        return this.dueDate;
    }

    public Optional<List<CollectionTagInput>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ticket's parent ID
     */
    public TicketInput withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The ticket's type
     */
    public TicketInput withType(@Nullable String type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * Subject of the ticket
     */
    public TicketInput withSubject(@Nullable String subject) {
        this.subject = JsonNullable.of(subject);
        return this;
    }


    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    public TicketInput withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    public TicketInput withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    /**
     * Priority of the ticket
     */
    public TicketInput withPriority(@Nullable Priority priority) {
        this.priority = JsonNullable.of(priority);
        return this;
    }


    public TicketInput withAssignees(@Nullable List<AssigneeInput> assignees) {
        this.assignees = assignees;
        return this;
    }


    /**
     * Due date of the ticket
     */
    public TicketInput withDueDate(@Nullable OffsetDateTime dueDate) {
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }


    public TicketInput withTags(@Nullable List<CollectionTagInput> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TicketInput withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TicketInput other = (TicketInput) o;
        return 
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.assignees, other.assignees) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parentId, type, subject,
            description, status, priority,
            assignees, dueDate, tags,
            passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TicketInput.class,
                "parentId", parentId,
                "type", type,
                "subject", subject,
                "description", description,
                "status", status,
                "priority", priority,
                "assignees", assignees,
                "dueDate", dueDate,
                "tags", tags,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> parentId;

        private JsonNullable<String> type;

        private JsonNullable<String> subject;

        private JsonNullable<String> description;

        private JsonNullable<String> status;

        private JsonNullable<Priority> priority;

        private List<AssigneeInput> assignees;

        private JsonNullable<OffsetDateTime> dueDate;

        private List<CollectionTagInput> tags;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ticket's parent ID
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The ticket's type
         */
        public Builder type(@Nullable String type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Subject of the ticket
         */
        public Builder subject(@Nullable String subject) {
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * The ticket's description. HTML version of description is mapped if supported by the third-party platform
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Priority of the ticket
         */
        public Builder priority(@Nullable Priority priority) {
            this.priority = JsonNullable.of(priority);
            return this;
        }

        public Builder assignees(@Nullable List<AssigneeInput> assignees) {
            this.assignees = assignees;
            return this;
        }

        /**
         * Due date of the ticket
         */
        public Builder dueDate(@Nullable OffsetDateTime dueDate) {
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        public Builder tags(@Nullable List<CollectionTagInput> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public TicketInput build() {
            return new TicketInput(
                parentId, type, subject,
                description, status, priority,
                assignees, dueDate, tags,
                passThrough);
        }

    }
}
