/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TimeOffRequestInput {
    /**
     * ID of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private JsonNullable<String> employeeId;

    /**
     * ID of the policy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy_id")
    private JsonNullable<String> policyId;

    /**
     * The status of the time off request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends TimeOffRequestStatusStatus> status;

    /**
     * Description of the time off request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The start date of the time off request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<String> startDate;

    /**
     * The end date of the time off request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<String> endDate;

    /**
     * The date the request was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_date")
    private JsonNullable<String> requestDate;

    /**
     * The type of request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_type")
    private JsonNullable<? extends RequestType> requestType;

    /**
     * The date the request was approved
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_date")
    private JsonNullable<String> approvalDate;

    /**
     * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("units")
    private JsonNullable<? extends Units> units;

    /**
     * The amount of time off requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<Double> amount;

    /**
     * The day part of the time off request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("day_part")
    private JsonNullable<String> dayPart;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<? extends Notes> notes;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private Optional<? extends List<PassThroughBody>> passThrough;

    /**
     * The policy type of the time off request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy_type")
    private Optional<String> policyType;

    @JsonCreator
    public TimeOffRequestInput(
            @JsonProperty("employee_id") JsonNullable<String> employeeId,
            @JsonProperty("policy_id") JsonNullable<String> policyId,
            @JsonProperty("status") JsonNullable<? extends TimeOffRequestStatusStatus> status,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("start_date") JsonNullable<String> startDate,
            @JsonProperty("end_date") JsonNullable<String> endDate,
            @JsonProperty("request_date") JsonNullable<String> requestDate,
            @JsonProperty("request_type") JsonNullable<? extends RequestType> requestType,
            @JsonProperty("approval_date") JsonNullable<String> approvalDate,
            @JsonProperty("units") JsonNullable<? extends Units> units,
            @JsonProperty("amount") JsonNullable<Double> amount,
            @JsonProperty("day_part") JsonNullable<String> dayPart,
            @JsonProperty("notes") Optional<? extends Notes> notes,
            @JsonProperty("pass_through") Optional<? extends List<PassThroughBody>> passThrough,
            @JsonProperty("policy_type") Optional<String> policyType) {
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(policyId, "policyId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(requestDate, "requestDate");
        Utils.checkNotNull(requestType, "requestType");
        Utils.checkNotNull(approvalDate, "approvalDate");
        Utils.checkNotNull(units, "units");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(dayPart, "dayPart");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(passThrough, "passThrough");
        Utils.checkNotNull(policyType, "policyType");
        this.employeeId = employeeId;
        this.policyId = policyId;
        this.status = status;
        this.description = description;
        this.startDate = startDate;
        this.endDate = endDate;
        this.requestDate = requestDate;
        this.requestType = requestType;
        this.approvalDate = approvalDate;
        this.units = units;
        this.amount = amount;
        this.dayPart = dayPart;
        this.notes = notes;
        this.passThrough = passThrough;
        this.policyType = policyType;
    }
    
    public TimeOffRequestInput() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * ID of the employee
     */
    @JsonIgnore
    public JsonNullable<String> employeeId() {
        return employeeId;
    }

    /**
     * ID of the policy
     */
    @JsonIgnore
    public JsonNullable<String> policyId() {
        return policyId;
    }

    /**
     * The status of the time off request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TimeOffRequestStatusStatus> status() {
        return (JsonNullable<TimeOffRequestStatusStatus>) status;
    }

    /**
     * Description of the time off request.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The start date of the time off request.
     */
    @JsonIgnore
    public JsonNullable<String> startDate() {
        return startDate;
    }

    /**
     * The end date of the time off request.
     */
    @JsonIgnore
    public JsonNullable<String> endDate() {
        return endDate;
    }

    /**
     * The date the request was made.
     */
    @JsonIgnore
    public JsonNullable<String> requestDate() {
        return requestDate;
    }

    /**
     * The type of request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<RequestType> requestType() {
        return (JsonNullable<RequestType>) requestType;
    }

    /**
     * The date the request was approved
     */
    @JsonIgnore
    public JsonNullable<String> approvalDate() {
        return approvalDate;
    }

    /**
     * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Units> units() {
        return (JsonNullable<Units>) units;
    }

    /**
     * The amount of time off requested.
     */
    @JsonIgnore
    public JsonNullable<Double> amount() {
        return amount;
    }

    /**
     * The day part of the time off request.
     */
    @JsonIgnore
    public JsonNullable<String> dayPart() {
        return dayPart;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Notes> notes() {
        return (Optional<Notes>) notes;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PassThroughBody>> passThrough() {
        return (Optional<List<PassThroughBody>>) passThrough;
    }

    /**
     * The policy type of the time off request
     */
    @JsonIgnore
    public Optional<String> policyType() {
        return policyType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the employee
     */
    public TimeOffRequestInput withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = JsonNullable.of(employeeId);
        return this;
    }

    /**
     * ID of the employee
     */
    public TimeOffRequestInput withEmployeeId(JsonNullable<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    /**
     * ID of the policy
     */
    public TimeOffRequestInput withPolicyId(String policyId) {
        Utils.checkNotNull(policyId, "policyId");
        this.policyId = JsonNullable.of(policyId);
        return this;
    }

    /**
     * ID of the policy
     */
    public TimeOffRequestInput withPolicyId(JsonNullable<String> policyId) {
        Utils.checkNotNull(policyId, "policyId");
        this.policyId = policyId;
        return this;
    }

    /**
     * The status of the time off request.
     */
    public TimeOffRequestInput withStatus(TimeOffRequestStatusStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the time off request.
     */
    public TimeOffRequestInput withStatus(JsonNullable<? extends TimeOffRequestStatusStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Description of the time off request.
     */
    public TimeOffRequestInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description of the time off request.
     */
    public TimeOffRequestInput withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The start date of the time off request.
     */
    public TimeOffRequestInput withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The start date of the time off request.
     */
    public TimeOffRequestInput withStartDate(JsonNullable<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end date of the time off request.
     */
    public TimeOffRequestInput withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * The end date of the time off request.
     */
    public TimeOffRequestInput withEndDate(JsonNullable<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The date the request was made.
     */
    public TimeOffRequestInput withRequestDate(String requestDate) {
        Utils.checkNotNull(requestDate, "requestDate");
        this.requestDate = JsonNullable.of(requestDate);
        return this;
    }

    /**
     * The date the request was made.
     */
    public TimeOffRequestInput withRequestDate(JsonNullable<String> requestDate) {
        Utils.checkNotNull(requestDate, "requestDate");
        this.requestDate = requestDate;
        return this;
    }

    /**
     * The type of request
     */
    public TimeOffRequestInput withRequestType(RequestType requestType) {
        Utils.checkNotNull(requestType, "requestType");
        this.requestType = JsonNullable.of(requestType);
        return this;
    }

    /**
     * The type of request
     */
    public TimeOffRequestInput withRequestType(JsonNullable<? extends RequestType> requestType) {
        Utils.checkNotNull(requestType, "requestType");
        this.requestType = requestType;
        return this;
    }

    /**
     * The date the request was approved
     */
    public TimeOffRequestInput withApprovalDate(String approvalDate) {
        Utils.checkNotNull(approvalDate, "approvalDate");
        this.approvalDate = JsonNullable.of(approvalDate);
        return this;
    }

    /**
     * The date the request was approved
     */
    public TimeOffRequestInput withApprovalDate(JsonNullable<String> approvalDate) {
        Utils.checkNotNull(approvalDate, "approvalDate");
        this.approvalDate = approvalDate;
        return this;
    }

    /**
     * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
     */
    public TimeOffRequestInput withUnits(Units units) {
        Utils.checkNotNull(units, "units");
        this.units = JsonNullable.of(units);
        return this;
    }

    /**
     * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
     */
    public TimeOffRequestInput withUnits(JsonNullable<? extends Units> units) {
        Utils.checkNotNull(units, "units");
        this.units = units;
        return this;
    }

    /**
     * The amount of time off requested.
     */
    public TimeOffRequestInput withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount of time off requested.
     */
    public TimeOffRequestInput withAmount(JsonNullable<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The day part of the time off request.
     */
    public TimeOffRequestInput withDayPart(String dayPart) {
        Utils.checkNotNull(dayPart, "dayPart");
        this.dayPart = JsonNullable.of(dayPart);
        return this;
    }

    /**
     * The day part of the time off request.
     */
    public TimeOffRequestInput withDayPart(JsonNullable<String> dayPart) {
        Utils.checkNotNull(dayPart, "dayPart");
        this.dayPart = dayPart;
        return this;
    }

    public TimeOffRequestInput withNotes(Notes notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }


    public TimeOffRequestInput withNotes(Optional<? extends Notes> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TimeOffRequestInput withPassThrough(List<PassThroughBody> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public TimeOffRequestInput withPassThrough(Optional<? extends List<PassThroughBody>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    /**
     * The policy type of the time off request
     */
    public TimeOffRequestInput withPolicyType(String policyType) {
        Utils.checkNotNull(policyType, "policyType");
        this.policyType = Optional.ofNullable(policyType);
        return this;
    }


    /**
     * The policy type of the time off request
     */
    public TimeOffRequestInput withPolicyType(Optional<String> policyType) {
        Utils.checkNotNull(policyType, "policyType");
        this.policyType = policyType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeOffRequestInput other = (TimeOffRequestInput) o;
        return 
            Utils.enhancedDeepEquals(this.employeeId, other.employeeId) &&
            Utils.enhancedDeepEquals(this.policyId, other.policyId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.requestDate, other.requestDate) &&
            Utils.enhancedDeepEquals(this.requestType, other.requestType) &&
            Utils.enhancedDeepEquals(this.approvalDate, other.approvalDate) &&
            Utils.enhancedDeepEquals(this.units, other.units) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.dayPart, other.dayPart) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough) &&
            Utils.enhancedDeepEquals(this.policyType, other.policyType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            employeeId, policyId, status,
            description, startDate, endDate,
            requestDate, requestType, approvalDate,
            units, amount, dayPart,
            notes, passThrough, policyType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeOffRequestInput.class,
                "employeeId", employeeId,
                "policyId", policyId,
                "status", status,
                "description", description,
                "startDate", startDate,
                "endDate", endDate,
                "requestDate", requestDate,
                "requestType", requestType,
                "approvalDate", approvalDate,
                "units", units,
                "amount", amount,
                "dayPart", dayPart,
                "notes", notes,
                "passThrough", passThrough,
                "policyType", policyType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> employeeId = JsonNullable.undefined();

        private JsonNullable<String> policyId = JsonNullable.undefined();

        private JsonNullable<? extends TimeOffRequestStatusStatus> status = JsonNullable.undefined();

        private JsonNullable<String> description = JsonNullable.undefined();

        private JsonNullable<String> startDate = JsonNullable.undefined();

        private JsonNullable<String> endDate = JsonNullable.undefined();

        private JsonNullable<String> requestDate = JsonNullable.undefined();

        private JsonNullable<? extends RequestType> requestType = JsonNullable.undefined();

        private JsonNullable<String> approvalDate = JsonNullable.undefined();

        private JsonNullable<? extends Units> units = JsonNullable.undefined();

        private JsonNullable<Double> amount = JsonNullable.undefined();

        private JsonNullable<String> dayPart = JsonNullable.undefined();

        private Optional<? extends Notes> notes = Optional.empty();

        private Optional<? extends List<PassThroughBody>> passThrough = Optional.empty();

        private Optional<String> policyType = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * ID of the employee
         */
        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = JsonNullable.of(employeeId);
            return this;
        }

        /**
         * ID of the employee
         */
        public Builder employeeId(JsonNullable<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }


        /**
         * ID of the policy
         */
        public Builder policyId(String policyId) {
            Utils.checkNotNull(policyId, "policyId");
            this.policyId = JsonNullable.of(policyId);
            return this;
        }

        /**
         * ID of the policy
         */
        public Builder policyId(JsonNullable<String> policyId) {
            Utils.checkNotNull(policyId, "policyId");
            this.policyId = policyId;
            return this;
        }


        /**
         * The status of the time off request.
         */
        public Builder status(TimeOffRequestStatusStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the time off request.
         */
        public Builder status(JsonNullable<? extends TimeOffRequestStatusStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Description of the time off request.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description of the time off request.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The start date of the time off request.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The start date of the time off request.
         */
        public Builder startDate(JsonNullable<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * The end date of the time off request.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * The end date of the time off request.
         */
        public Builder endDate(JsonNullable<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * The date the request was made.
         */
        public Builder requestDate(String requestDate) {
            Utils.checkNotNull(requestDate, "requestDate");
            this.requestDate = JsonNullable.of(requestDate);
            return this;
        }

        /**
         * The date the request was made.
         */
        public Builder requestDate(JsonNullable<String> requestDate) {
            Utils.checkNotNull(requestDate, "requestDate");
            this.requestDate = requestDate;
            return this;
        }


        /**
         * The type of request
         */
        public Builder requestType(RequestType requestType) {
            Utils.checkNotNull(requestType, "requestType");
            this.requestType = JsonNullable.of(requestType);
            return this;
        }

        /**
         * The type of request
         */
        public Builder requestType(JsonNullable<? extends RequestType> requestType) {
            Utils.checkNotNull(requestType, "requestType");
            this.requestType = requestType;
            return this;
        }


        /**
         * The date the request was approved
         */
        public Builder approvalDate(String approvalDate) {
            Utils.checkNotNull(approvalDate, "approvalDate");
            this.approvalDate = JsonNullable.of(approvalDate);
            return this;
        }

        /**
         * The date the request was approved
         */
        public Builder approvalDate(JsonNullable<String> approvalDate) {
            Utils.checkNotNull(approvalDate, "approvalDate");
            this.approvalDate = approvalDate;
            return this;
        }


        /**
         * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
         */
        public Builder units(Units units) {
            Utils.checkNotNull(units, "units");
            this.units = JsonNullable.of(units);
            return this;
        }

        /**
         * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
         */
        public Builder units(JsonNullable<? extends Units> units) {
            Utils.checkNotNull(units, "units");
            this.units = units;
            return this;
        }


        /**
         * The amount of time off requested.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount of time off requested.
         */
        public Builder amount(JsonNullable<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The day part of the time off request.
         */
        public Builder dayPart(String dayPart) {
            Utils.checkNotNull(dayPart, "dayPart");
            this.dayPart = JsonNullable.of(dayPart);
            return this;
        }

        /**
         * The day part of the time off request.
         */
        public Builder dayPart(JsonNullable<String> dayPart) {
            Utils.checkNotNull(dayPart, "dayPart");
            this.dayPart = dayPart;
            return this;
        }


        public Builder notes(Notes notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Optional<? extends Notes> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }


        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(List<PassThroughBody> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(Optional<? extends List<PassThroughBody>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }


        /**
         * The policy type of the time off request
         */
        public Builder policyType(String policyType) {
            Utils.checkNotNull(policyType, "policyType");
            this.policyType = Optional.ofNullable(policyType);
            return this;
        }

        /**
         * The policy type of the time off request
         */
        public Builder policyType(Optional<String> policyType) {
            Utils.checkNotNull(policyType, "policyType");
            this.policyType = policyType;
            return this;
        }

        public TimeOffRequestInput build() {

            return new TimeOffRequestInput(
                employeeId, policyId, status,
                description, startDate, endDate,
                requestDate, requestType, approvalDate,
                units, amount, dayPart,
                notes, passThrough, policyType);
        }

    }
}
