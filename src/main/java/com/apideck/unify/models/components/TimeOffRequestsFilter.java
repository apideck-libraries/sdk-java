/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class TimeOffRequestsFilter {
    /**
     * Start date of the date range to filter time off requests. When used with end_date, filters for
     * requests within the specified date range.
     */
    @SpeakeasyMetadata("queryParam:name=start_date")
    private Optional<String> startDate;

    /**
     * End date of the date range to filter time off requests. When used with start_date, filters for
     * requests within the specified date range.
     */
    @SpeakeasyMetadata("queryParam:name=end_date")
    private Optional<String> endDate;

    /**
     * Minimum date the time off request was last created or modified
     */
    @SpeakeasyMetadata("queryParam:name=updated_since")
    private Optional<String> updatedSince;

    /**
     * Employee ID
     */
    @SpeakeasyMetadata("queryParam:name=employee_id")
    private Optional<String> employeeId;

    /**
     * Time off request status to filter on
     */
    @SpeakeasyMetadata("queryParam:name=time_off_request_status")
    private Optional<? extends TimeOffRequestStatus> timeOffRequestStatus;

    /**
     * Company ID
     */
    @SpeakeasyMetadata("queryParam:name=company_id")
    private Optional<String> companyId;

    @JsonCreator
    public TimeOffRequestsFilter(
            Optional<String> startDate,
            Optional<String> endDate,
            Optional<String> updatedSince,
            Optional<String> employeeId,
            Optional<? extends TimeOffRequestStatus> timeOffRequestStatus,
            Optional<String> companyId) {
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(timeOffRequestStatus, "timeOffRequestStatus");
        Utils.checkNotNull(companyId, "companyId");
        this.startDate = startDate;
        this.endDate = endDate;
        this.updatedSince = updatedSince;
        this.employeeId = employeeId;
        this.timeOffRequestStatus = timeOffRequestStatus;
        this.companyId = companyId;
    }
    
    public TimeOffRequestsFilter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Start date of the date range to filter time off requests. When used with end_date, filters for
     * requests within the specified date range.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * End date of the date range to filter time off requests. When used with start_date, filters for
     * requests within the specified date range.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Minimum date the time off request was last created or modified
     */
    @JsonIgnore
    public Optional<String> updatedSince() {
        return updatedSince;
    }

    /**
     * Employee ID
     */
    @JsonIgnore
    public Optional<String> employeeId() {
        return employeeId;
    }

    /**
     * Time off request status to filter on
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeOffRequestStatus> timeOffRequestStatus() {
        return (Optional<TimeOffRequestStatus>) timeOffRequestStatus;
    }

    /**
     * Company ID
     */
    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Start date of the date range to filter time off requests. When used with end_date, filters for
     * requests within the specified date range.
     */
    public TimeOffRequestsFilter withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * Start date of the date range to filter time off requests. When used with end_date, filters for
     * requests within the specified date range.
     */
    public TimeOffRequestsFilter withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * End date of the date range to filter time off requests. When used with start_date, filters for
     * requests within the specified date range.
     */
    public TimeOffRequestsFilter withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }


    /**
     * End date of the date range to filter time off requests. When used with start_date, filters for
     * requests within the specified date range.
     */
    public TimeOffRequestsFilter withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Minimum date the time off request was last created or modified
     */
    public TimeOffRequestsFilter withUpdatedSince(String updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }


    /**
     * Minimum date the time off request was last created or modified
     */
    public TimeOffRequestsFilter withUpdatedSince(Optional<String> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Employee ID
     */
    public TimeOffRequestsFilter withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = Optional.ofNullable(employeeId);
        return this;
    }


    /**
     * Employee ID
     */
    public TimeOffRequestsFilter withEmployeeId(Optional<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    /**
     * Time off request status to filter on
     */
    public TimeOffRequestsFilter withTimeOffRequestStatus(TimeOffRequestStatus timeOffRequestStatus) {
        Utils.checkNotNull(timeOffRequestStatus, "timeOffRequestStatus");
        this.timeOffRequestStatus = Optional.ofNullable(timeOffRequestStatus);
        return this;
    }


    /**
     * Time off request status to filter on
     */
    public TimeOffRequestsFilter withTimeOffRequestStatus(Optional<? extends TimeOffRequestStatus> timeOffRequestStatus) {
        Utils.checkNotNull(timeOffRequestStatus, "timeOffRequestStatus");
        this.timeOffRequestStatus = timeOffRequestStatus;
        return this;
    }

    /**
     * Company ID
     */
    public TimeOffRequestsFilter withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }


    /**
     * Company ID
     */
    public TimeOffRequestsFilter withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeOffRequestsFilter other = (TimeOffRequestsFilter) o;
        return 
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.updatedSince, other.updatedSince) &&
            Utils.enhancedDeepEquals(this.employeeId, other.employeeId) &&
            Utils.enhancedDeepEquals(this.timeOffRequestStatus, other.timeOffRequestStatus) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            startDate, endDate, updatedSince,
            employeeId, timeOffRequestStatus, companyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeOffRequestsFilter.class,
                "startDate", startDate,
                "endDate", endDate,
                "updatedSince", updatedSince,
                "employeeId", employeeId,
                "timeOffRequestStatus", timeOffRequestStatus,
                "companyId", companyId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> updatedSince = Optional.empty();

        private Optional<String> employeeId = Optional.empty();

        private Optional<? extends TimeOffRequestStatus> timeOffRequestStatus = Optional.empty();

        private Optional<String> companyId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Start date of the date range to filter time off requests. When used with end_date, filters for
         * requests within the specified date range.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Start date of the date range to filter time off requests. When used with end_date, filters for
         * requests within the specified date range.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * End date of the date range to filter time off requests. When used with start_date, filters for
         * requests within the specified date range.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * End date of the date range to filter time off requests. When used with start_date, filters for
         * requests within the specified date range.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Minimum date the time off request was last created or modified
         */
        public Builder updatedSince(String updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Minimum date the time off request was last created or modified
         */
        public Builder updatedSince(Optional<String> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }


        /**
         * Employee ID
         */
        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        /**
         * Employee ID
         */
        public Builder employeeId(Optional<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }


        /**
         * Time off request status to filter on
         */
        public Builder timeOffRequestStatus(TimeOffRequestStatus timeOffRequestStatus) {
            Utils.checkNotNull(timeOffRequestStatus, "timeOffRequestStatus");
            this.timeOffRequestStatus = Optional.ofNullable(timeOffRequestStatus);
            return this;
        }

        /**
         * Time off request status to filter on
         */
        public Builder timeOffRequestStatus(Optional<? extends TimeOffRequestStatus> timeOffRequestStatus) {
            Utils.checkNotNull(timeOffRequestStatus, "timeOffRequestStatus");
            this.timeOffRequestStatus = timeOffRequestStatus;
            return this;
        }


        /**
         * Company ID
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        /**
         * Company ID
         */
        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        public TimeOffRequestsFilter build() {

            return new TimeOffRequestsFilter(
                startDate, endDate, updatedSince,
                employeeId, timeOffRequestStatus, companyId);
        }

    }
}
