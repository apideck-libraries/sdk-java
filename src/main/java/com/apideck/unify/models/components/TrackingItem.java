/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TrackingItem
 * 
 * <p>Represents the tracking information associated with an ecommerce order.
 */
public class TrackingItem {
    /**
     * The name or code of the carrier or shipping company that is handling the shipment.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("provider")
    private Optional<String> provider;

    /**
     * The tracking number associated with the shipment, which can be used to track the progress of the
     * delivery.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("number")
    private Optional<String> number;

    /**
     * The URL of the carrier's tracking page, which can be used to view detailed information about the
     * shipment's progress.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public TrackingItem(
            @JsonProperty("provider") Optional<String> provider,
            @JsonProperty("number") Optional<String> number,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.provider = provider;
        this.number = number;
        this.url = url;
        this.updatedAt = updatedAt;
    }
    
    public TrackingItem() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The name or code of the carrier or shipping company that is handling the shipment.
     */
    @JsonIgnore
    public Optional<String> provider() {
        return provider;
    }

    /**
     * The tracking number associated with the shipment, which can be used to track the progress of the
     * delivery.
     */
    @JsonIgnore
    public Optional<String> number() {
        return number;
    }

    /**
     * The URL of the carrier's tracking page, which can be used to view detailed information about the
     * shipment's progress.
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name or code of the carrier or shipping company that is handling the shipment.
     */
    public TrackingItem withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }


    /**
     * The name or code of the carrier or shipping company that is handling the shipment.
     */
    public TrackingItem withProvider(Optional<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The tracking number associated with the shipment, which can be used to track the progress of the
     * delivery.
     */
    public TrackingItem withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = Optional.ofNullable(number);
        return this;
    }


    /**
     * The tracking number associated with the shipment, which can be used to track the progress of the
     * delivery.
     */
    public TrackingItem withNumber(Optional<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The URL of the carrier's tracking page, which can be used to view detailed information about the
     * shipment's progress.
     */
    public TrackingItem withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The URL of the carrier's tracking page, which can be used to view detailed information about the
     * shipment's progress.
     */
    public TrackingItem withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public TrackingItem withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public TrackingItem withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingItem other = (TrackingItem) o;
        return 
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            provider, number, url,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingItem.class,
                "provider", provider,
                "number", number,
                "url", url,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> provider = Optional.empty();

        private Optional<String> number = Optional.empty();

        private JsonNullable<String> url = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name or code of the carrier or shipping company that is handling the shipment.
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        /**
         * The name or code of the carrier or shipping company that is handling the shipment.
         */
        public Builder provider(Optional<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        /**
         * The tracking number associated with the shipment, which can be used to track the progress of the
         * delivery.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = Optional.ofNullable(number);
            return this;
        }

        /**
         * The tracking number associated with the shipment, which can be used to track the progress of the
         * delivery.
         */
        public Builder number(Optional<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }


        /**
         * The URL of the carrier's tracking page, which can be used to view detailed information about the
         * shipment's progress.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The URL of the carrier's tracking page, which can be used to view detailed information about the
         * shipment's progress.
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public TrackingItem build() {

            return new TrackingItem(
                provider, number, url,
                updatedAt);
        }

    }
}
