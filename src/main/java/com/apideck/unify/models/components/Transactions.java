/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Transactions {
    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonProperty("posted_date")
    private OffsetDateTime postedDate;

    /**
     * A description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount of the transaction.
     */
    @JsonProperty("amount")
    private double amount;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonProperty("credit_or_debit")
    private CreditOrDebit creditOrDebit;

    /**
     * The ID of the source transaction.
     */
    @JsonProperty("source_transaction_id")
    private String sourceTransactionId;

    /**
     * The counterparty of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counterparty")
    private Optional<String> counterparty;

    /**
     * The reference of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    /**
     * Type of transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_type")
    private Optional<? extends BankFeedStatementTransactionType> transactionType;

    @JsonCreator
    public Transactions(
            @JsonProperty("posted_date") OffsetDateTime postedDate,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") double amount,
            @JsonProperty("credit_or_debit") CreditOrDebit creditOrDebit,
            @JsonProperty("source_transaction_id") String sourceTransactionId,
            @JsonProperty("counterparty") Optional<String> counterparty,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("transaction_type") Optional<? extends BankFeedStatementTransactionType> transactionType) {
        Utils.checkNotNull(postedDate, "postedDate");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(creditOrDebit, "creditOrDebit");
        Utils.checkNotNull(sourceTransactionId, "sourceTransactionId");
        Utils.checkNotNull(counterparty, "counterparty");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(transactionType, "transactionType");
        this.postedDate = postedDate;
        this.description = description;
        this.amount = amount;
        this.creditOrDebit = creditOrDebit;
        this.sourceTransactionId = sourceTransactionId;
        this.counterparty = counterparty;
        this.reference = reference;
        this.transactionType = transactionType;
    }
    
    public Transactions(
            OffsetDateTime postedDate,
            double amount,
            CreditOrDebit creditOrDebit,
            String sourceTransactionId) {
        this(postedDate, Optional.empty(), amount,
            creditOrDebit, sourceTransactionId, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonIgnore
    public OffsetDateTime postedDate() {
        return postedDate;
    }

    /**
     * A description of the transaction.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount of the transaction.
     */
    @JsonIgnore
    public double amount() {
        return amount;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonIgnore
    public CreditOrDebit creditOrDebit() {
        return creditOrDebit;
    }

    /**
     * The ID of the source transaction.
     */
    @JsonIgnore
    public String sourceTransactionId() {
        return sourceTransactionId;
    }

    /**
     * The counterparty of the transaction.
     */
    @JsonIgnore
    public Optional<String> counterparty() {
        return counterparty;
    }

    /**
     * The reference of the transaction.
     */
    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    /**
     * Type of transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BankFeedStatementTransactionType> transactionType() {
        return (Optional<BankFeedStatementTransactionType>) transactionType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public Transactions withPostedDate(OffsetDateTime postedDate) {
        Utils.checkNotNull(postedDate, "postedDate");
        this.postedDate = postedDate;
        return this;
    }

    /**
     * A description of the transaction.
     */
    public Transactions withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A description of the transaction.
     */
    public Transactions withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount of the transaction.
     */
    public Transactions withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public Transactions withCreditOrDebit(CreditOrDebit creditOrDebit) {
        Utils.checkNotNull(creditOrDebit, "creditOrDebit");
        this.creditOrDebit = creditOrDebit;
        return this;
    }

    /**
     * The ID of the source transaction.
     */
    public Transactions withSourceTransactionId(String sourceTransactionId) {
        Utils.checkNotNull(sourceTransactionId, "sourceTransactionId");
        this.sourceTransactionId = sourceTransactionId;
        return this;
    }

    /**
     * The counterparty of the transaction.
     */
    public Transactions withCounterparty(String counterparty) {
        Utils.checkNotNull(counterparty, "counterparty");
        this.counterparty = Optional.ofNullable(counterparty);
        return this;
    }


    /**
     * The counterparty of the transaction.
     */
    public Transactions withCounterparty(Optional<String> counterparty) {
        Utils.checkNotNull(counterparty, "counterparty");
        this.counterparty = counterparty;
        return this;
    }

    /**
     * The reference of the transaction.
     */
    public Transactions withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }


    /**
     * The reference of the transaction.
     */
    public Transactions withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * Type of transaction.
     */
    public Transactions withTransactionType(BankFeedStatementTransactionType transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = Optional.ofNullable(transactionType);
        return this;
    }


    /**
     * Type of transaction.
     */
    public Transactions withTransactionType(Optional<? extends BankFeedStatementTransactionType> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transactions other = (Transactions) o;
        return 
            Utils.enhancedDeepEquals(this.postedDate, other.postedDate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.creditOrDebit, other.creditOrDebit) &&
            Utils.enhancedDeepEquals(this.sourceTransactionId, other.sourceTransactionId) &&
            Utils.enhancedDeepEquals(this.counterparty, other.counterparty) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            postedDate, description, amount,
            creditOrDebit, sourceTransactionId, counterparty,
            reference, transactionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transactions.class,
                "postedDate", postedDate,
                "description", description,
                "amount", amount,
                "creditOrDebit", creditOrDebit,
                "sourceTransactionId", sourceTransactionId,
                "counterparty", counterparty,
                "reference", reference,
                "transactionType", transactionType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime postedDate;

        private Optional<String> description = Optional.empty();

        private Double amount;

        private CreditOrDebit creditOrDebit;

        private String sourceTransactionId;

        private Optional<String> counterparty = Optional.empty();

        private Optional<String> reference = Optional.empty();

        private Optional<? extends BankFeedStatementTransactionType> transactionType = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder postedDate(OffsetDateTime postedDate) {
            Utils.checkNotNull(postedDate, "postedDate");
            this.postedDate = postedDate;
            return this;
        }


        /**
         * A description of the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the transaction.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount of the transaction.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Whether the amount is a credit or debit.
         */
        public Builder creditOrDebit(CreditOrDebit creditOrDebit) {
            Utils.checkNotNull(creditOrDebit, "creditOrDebit");
            this.creditOrDebit = creditOrDebit;
            return this;
        }


        /**
         * The ID of the source transaction.
         */
        public Builder sourceTransactionId(String sourceTransactionId) {
            Utils.checkNotNull(sourceTransactionId, "sourceTransactionId");
            this.sourceTransactionId = sourceTransactionId;
            return this;
        }


        /**
         * The counterparty of the transaction.
         */
        public Builder counterparty(String counterparty) {
            Utils.checkNotNull(counterparty, "counterparty");
            this.counterparty = Optional.ofNullable(counterparty);
            return this;
        }

        /**
         * The counterparty of the transaction.
         */
        public Builder counterparty(Optional<String> counterparty) {
            Utils.checkNotNull(counterparty, "counterparty");
            this.counterparty = counterparty;
            return this;
        }


        /**
         * The reference of the transaction.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * The reference of the transaction.
         */
        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * Type of transaction.
         */
        public Builder transactionType(BankFeedStatementTransactionType transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = Optional.ofNullable(transactionType);
            return this;
        }

        /**
         * Type of transaction.
         */
        public Builder transactionType(Optional<? extends BankFeedStatementTransactionType> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }

        public Transactions build() {

            return new Transactions(
                postedDate, description, amount,
                creditOrDebit, sourceTransactionId, counterparty,
                reference, transactionType);
        }

    }
}
