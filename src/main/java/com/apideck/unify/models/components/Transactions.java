/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Transactions {
    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonProperty("posted_date")
    private OffsetDateTime postedDate;

    /**
     * A description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private String description;

    /**
     * The amount of the transaction.
     */
    @JsonProperty("amount")
    private double amount;

    /**
     * Whether the amount is a credit or debit.
     */
    @JsonProperty("credit_or_debit")
    private CreditOrDebit creditOrDebit;

    /**
     * The ID of the source transaction.
     */
    @JsonProperty("source_transaction_id")
    private String sourceTransactionId;

    /**
     * The counterparty of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counterparty")
    private String counterparty;

    /**
     * The reference of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private String reference;

    /**
     * Type of transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_type")
    private BankFeedStatementTransactionType transactionType;

    @JsonCreator
    public Transactions(
            @JsonProperty("posted_date") @Nonnull OffsetDateTime postedDate,
            @JsonProperty("description") @Nullable String description,
            @JsonProperty("amount") double amount,
            @JsonProperty("credit_or_debit") @Nonnull CreditOrDebit creditOrDebit,
            @JsonProperty("source_transaction_id") @Nonnull String sourceTransactionId,
            @JsonProperty("counterparty") @Nullable String counterparty,
            @JsonProperty("reference") @Nullable String reference,
            @JsonProperty("transaction_type") @Nullable BankFeedStatementTransactionType transactionType) {
        this.postedDate = Optional.ofNullable(postedDate)
            .orElseThrow(() -> new IllegalArgumentException("postedDate cannot be null"));
        this.description = description;
        this.amount = amount;
        this.creditOrDebit = Optional.ofNullable(creditOrDebit)
            .orElseThrow(() -> new IllegalArgumentException("creditOrDebit cannot be null"));
        this.sourceTransactionId = Optional.ofNullable(sourceTransactionId)
            .orElseThrow(() -> new IllegalArgumentException("sourceTransactionId cannot be null"));
        this.counterparty = counterparty;
        this.reference = reference;
        this.transactionType = transactionType;
    }
    
    public Transactions(
            @Nonnull OffsetDateTime postedDate,
            double amount,
            @Nonnull CreditOrDebit creditOrDebit,
            @Nonnull String sourceTransactionId) {
        this(postedDate, null, amount,
            creditOrDebit, sourceTransactionId, null,
            null, null);
    }

    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public OffsetDateTime postedDate() {
        return this.postedDate;
    }

    /**
     * A description of the transaction.
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The amount of the transaction.
     */
    public double amount() {
        return this.amount;
    }

    /**
     * Whether the amount is a credit or debit.
     */
    public CreditOrDebit creditOrDebit() {
        return this.creditOrDebit;
    }

    /**
     * The ID of the source transaction.
     */
    public String sourceTransactionId() {
        return this.sourceTransactionId;
    }

    /**
     * The counterparty of the transaction.
     */
    public Optional<String> counterparty() {
        return Optional.ofNullable(this.counterparty);
    }

    /**
     * The reference of the transaction.
     */
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }

    /**
     * Type of transaction.
     */
    public Optional<BankFeedStatementTransactionType> transactionType() {
        return Optional.ofNullable(this.transactionType);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
     */
    public Transactions withPostedDate(@Nonnull OffsetDateTime postedDate) {
        this.postedDate = Utils.checkNotNull(postedDate, "postedDate");
        return this;
    }


    /**
     * A description of the transaction.
     */
    public Transactions withDescription(@Nullable String description) {
        this.description = description;
        return this;
    }


    /**
     * The amount of the transaction.
     */
    public Transactions withAmount(double amount) {
        this.amount = amount;
        return this;
    }


    /**
     * Whether the amount is a credit or debit.
     */
    public Transactions withCreditOrDebit(@Nonnull CreditOrDebit creditOrDebit) {
        this.creditOrDebit = Utils.checkNotNull(creditOrDebit, "creditOrDebit");
        return this;
    }


    /**
     * The ID of the source transaction.
     */
    public Transactions withSourceTransactionId(@Nonnull String sourceTransactionId) {
        this.sourceTransactionId = Utils.checkNotNull(sourceTransactionId, "sourceTransactionId");
        return this;
    }


    /**
     * The counterparty of the transaction.
     */
    public Transactions withCounterparty(@Nullable String counterparty) {
        this.counterparty = counterparty;
        return this;
    }


    /**
     * The reference of the transaction.
     */
    public Transactions withReference(@Nullable String reference) {
        this.reference = reference;
        return this;
    }


    /**
     * Type of transaction.
     */
    public Transactions withTransactionType(@Nullable BankFeedStatementTransactionType transactionType) {
        this.transactionType = transactionType;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transactions other = (Transactions) o;
        return 
            Utils.enhancedDeepEquals(this.postedDate, other.postedDate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.creditOrDebit, other.creditOrDebit) &&
            Utils.enhancedDeepEquals(this.sourceTransactionId, other.sourceTransactionId) &&
            Utils.enhancedDeepEquals(this.counterparty, other.counterparty) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            postedDate, description, amount,
            creditOrDebit, sourceTransactionId, counterparty,
            reference, transactionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transactions.class,
                "postedDate", postedDate,
                "description", description,
                "amount", amount,
                "creditOrDebit", creditOrDebit,
                "sourceTransactionId", sourceTransactionId,
                "counterparty", counterparty,
                "reference", reference,
                "transactionType", transactionType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OffsetDateTime postedDate;

        private String description;

        private double amount;

        private CreditOrDebit creditOrDebit;

        private String sourceTransactionId;

        private String counterparty;

        private String reference;

        private BankFeedStatementTransactionType transactionType;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
         */
        public Builder postedDate(@Nonnull OffsetDateTime postedDate) {
            this.postedDate = Utils.checkNotNull(postedDate, "postedDate");
            return this;
        }

        /**
         * A description of the transaction.
         */
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * The amount of the transaction.
         */
        public Builder amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Whether the amount is a credit or debit.
         */
        public Builder creditOrDebit(@Nonnull CreditOrDebit creditOrDebit) {
            this.creditOrDebit = Utils.checkNotNull(creditOrDebit, "creditOrDebit");
            return this;
        }

        /**
         * The ID of the source transaction.
         */
        public Builder sourceTransactionId(@Nonnull String sourceTransactionId) {
            this.sourceTransactionId = Utils.checkNotNull(sourceTransactionId, "sourceTransactionId");
            return this;
        }

        /**
         * The counterparty of the transaction.
         */
        public Builder counterparty(@Nullable String counterparty) {
            this.counterparty = counterparty;
            return this;
        }

        /**
         * The reference of the transaction.
         */
        public Builder reference(@Nullable String reference) {
            this.reference = reference;
            return this;
        }

        /**
         * Type of transaction.
         */
        public Builder transactionType(@Nullable BankFeedStatementTransactionType transactionType) {
            this.transactionType = transactionType;
            return this;
        }

        public Transactions build() {
            return new Transactions(
                postedDate, description, amount,
                creditOrDebit, sourceTransactionId, counterparty,
                reference, transactionType);
        }

    }
}
