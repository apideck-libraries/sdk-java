/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class UnifiedApis {
    /**
     * Name of Apideck Unified API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private UnifiedApiId id;

    /**
     * Name of the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_only")
    private Boolean authOnly;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_scopes")
    private List<ConnectorOauthScopes> oauthScopes;

    /**
     * List of resources that are supported on the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_resources")
    private List<LinkedConnectorResource> supportedResources;

    /**
     * List of resources that are not supported on the downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_unsupported_resources")
    private List<String> downstreamUnsupportedResources;

    /**
     * List of events that are supported on the connector for this Unified API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_events")
    private List<ConnectorEvent> supportedEvents;

    @JsonCreator
    public UnifiedApis(
            @JsonProperty("id") @Nullable UnifiedApiId id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("auth_only") @Nullable Boolean authOnly,
            @JsonProperty("oauth_scopes") @Nullable List<ConnectorOauthScopes> oauthScopes,
            @JsonProperty("supported_resources") @Nullable List<LinkedConnectorResource> supportedResources,
            @JsonProperty("downstream_unsupported_resources") @Nullable List<String> downstreamUnsupportedResources,
            @JsonProperty("supported_events") @Nullable List<ConnectorEvent> supportedEvents) {
        this.id = id;
        this.name = name;
        this.authOnly = authOnly;
        this.oauthScopes = oauthScopes;
        this.supportedResources = supportedResources;
        this.downstreamUnsupportedResources = downstreamUnsupportedResources;
        this.supportedEvents = supportedEvents;
    }
    
    public UnifiedApis() {
        this(null, null, null,
            null, null, null,
            null);
    }

    /**
     * Name of Apideck Unified API
     */
    public Optional<UnifiedApiId> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the API.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
     */
    public Optional<Boolean> authOnly() {
        return Optional.ofNullable(this.authOnly);
    }

    public Optional<List<ConnectorOauthScopes>> oauthScopes() {
        return Optional.ofNullable(this.oauthScopes);
    }

    /**
     * List of resources that are supported on the connector.
     */
    public Optional<List<LinkedConnectorResource>> supportedResources() {
        return Optional.ofNullable(this.supportedResources);
    }

    /**
     * List of resources that are not supported on the downstream.
     */
    public Optional<List<String>> downstreamUnsupportedResources() {
        return Optional.ofNullable(this.downstreamUnsupportedResources);
    }

    /**
     * List of events that are supported on the connector for this Unified API.
     */
    public Optional<List<ConnectorEvent>> supportedEvents() {
        return Optional.ofNullable(this.supportedEvents);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of Apideck Unified API
     */
    public UnifiedApis withId(@Nullable UnifiedApiId id) {
        this.id = id;
        return this;
    }


    /**
     * Name of the API.
     */
    public UnifiedApis withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
     */
    public UnifiedApis withAuthOnly(@Nullable Boolean authOnly) {
        this.authOnly = authOnly;
        return this;
    }


    public UnifiedApis withOauthScopes(@Nullable List<ConnectorOauthScopes> oauthScopes) {
        this.oauthScopes = oauthScopes;
        return this;
    }


    /**
     * List of resources that are supported on the connector.
     */
    public UnifiedApis withSupportedResources(@Nullable List<LinkedConnectorResource> supportedResources) {
        this.supportedResources = supportedResources;
        return this;
    }


    /**
     * List of resources that are not supported on the downstream.
     */
    public UnifiedApis withDownstreamUnsupportedResources(@Nullable List<String> downstreamUnsupportedResources) {
        this.downstreamUnsupportedResources = downstreamUnsupportedResources;
        return this;
    }


    /**
     * List of events that are supported on the connector for this Unified API.
     */
    public UnifiedApis withSupportedEvents(@Nullable List<ConnectorEvent> supportedEvents) {
        this.supportedEvents = supportedEvents;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedApis other = (UnifiedApis) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.authOnly, other.authOnly) &&
            Utils.enhancedDeepEquals(this.oauthScopes, other.oauthScopes) &&
            Utils.enhancedDeepEquals(this.supportedResources, other.supportedResources) &&
            Utils.enhancedDeepEquals(this.downstreamUnsupportedResources, other.downstreamUnsupportedResources) &&
            Utils.enhancedDeepEquals(this.supportedEvents, other.supportedEvents);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, authOnly,
            oauthScopes, supportedResources, downstreamUnsupportedResources,
            supportedEvents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnifiedApis.class,
                "id", id,
                "name", name,
                "authOnly", authOnly,
                "oauthScopes", oauthScopes,
                "supportedResources", supportedResources,
                "downstreamUnsupportedResources", downstreamUnsupportedResources,
                "supportedEvents", supportedEvents);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private UnifiedApiId id;

        private String name;

        private Boolean authOnly;

        private List<ConnectorOauthScopes> oauthScopes;

        private List<LinkedConnectorResource> supportedResources;

        private List<String> downstreamUnsupportedResources;

        private List<ConnectorEvent> supportedEvents;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of Apideck Unified API
         */
        public Builder id(@Nullable UnifiedApiId id) {
            this.id = id;
            return this;
        }

        /**
         * Name of the API.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
         */
        public Builder authOnly(@Nullable Boolean authOnly) {
            this.authOnly = authOnly;
            return this;
        }

        public Builder oauthScopes(@Nullable List<ConnectorOauthScopes> oauthScopes) {
            this.oauthScopes = oauthScopes;
            return this;
        }

        /**
         * List of resources that are supported on the connector.
         */
        public Builder supportedResources(@Nullable List<LinkedConnectorResource> supportedResources) {
            this.supportedResources = supportedResources;
            return this;
        }

        /**
         * List of resources that are not supported on the downstream.
         */
        public Builder downstreamUnsupportedResources(@Nullable List<String> downstreamUnsupportedResources) {
            this.downstreamUnsupportedResources = downstreamUnsupportedResources;
            return this;
        }

        /**
         * List of events that are supported on the connector for this Unified API.
         */
        public Builder supportedEvents(@Nullable List<ConnectorEvent> supportedEvents) {
            this.supportedEvents = supportedEvents;
            return this;
        }

        public UnifiedApis build() {
            return new UnifiedApis(
                id, name, authOnly,
                oauthScopes, supportedResources, downstreamUnsupportedResources,
                supportedEvents);
        }

    }
}
