/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UnifiedFile {
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    private JsonNullable<String> downstreamId;

    /**
     * The name of the file
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Optional description of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The type of resource. Could be file, folder or url
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("type")
    private JsonNullable<FileType> type;

    /**
     * The full path of the file or folder (includes the file name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private JsonNullable<String> path;

    /**
     * The MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    private JsonNullable<String> mimeType;

    /**
     * Whether the current user can download this file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadable")
    private Boolean downloadable;

    /**
     * The size of the file in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Owner owner;

    /**
     * The parent folders of the file, starting from the root
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders")
    private List<LinkedFolder> parentFolders;

    /**
     * Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders_complete")
    private Boolean parentFoldersComplete;

    /**
     * Permissions the current user has on this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    private Permissions permissions;

    /**
     * Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exportable")
    private Boolean exportable;

    /**
     * The available file formats when exporting this file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("export_formats")
    private JsonNullable<List<String>> exportFormats;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<String> updatedBy;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public UnifiedFile(
            @JsonProperty("id") @Nonnull String id,
            @JsonProperty("downstream_id") @Nullable JsonNullable<String> downstreamId,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("type") @Nullable FileType type,
            @JsonProperty("path") @Nullable JsonNullable<String> path,
            @JsonProperty("mime_type") @Nullable JsonNullable<String> mimeType,
            @JsonProperty("downloadable") @Nullable Boolean downloadable,
            @JsonProperty("size") @Nullable JsonNullable<Long> size,
            @JsonProperty("owner") @Nullable Owner owner,
            @JsonProperty("parent_folders") @Nullable List<LinkedFolder> parentFolders,
            @JsonProperty("parent_folders_complete") @Nullable Boolean parentFoldersComplete,
            @JsonProperty("permissions") @Nullable Permissions permissions,
            @JsonProperty("exportable") @Nullable Boolean exportable,
            @JsonProperty("export_formats") @Nullable JsonNullable<List<String>> exportFormats,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_by") @Nullable JsonNullable<String> updatedBy,
            @JsonProperty("created_by") @Nullable JsonNullable<String> createdBy,
            @JsonProperty("updated_at") @Nullable JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<OffsetDateTime> createdAt) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.downstreamId = Optional.ofNullable(downstreamId)
            .orElse(JsonNullable.undefined());
        this.name = JsonNullable.of(name);
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.type = JsonNullable.of(type);
        this.path = Optional.ofNullable(path)
            .orElse(JsonNullable.undefined());
        this.mimeType = Optional.ofNullable(mimeType)
            .orElse(JsonNullable.undefined());
        this.downloadable = downloadable;
        this.size = Optional.ofNullable(size)
            .orElse(JsonNullable.undefined());
        this.owner = owner;
        this.parentFolders = parentFolders;
        this.parentFoldersComplete = parentFoldersComplete;
        this.permissions = permissions;
        this.exportable = exportable;
        this.exportFormats = Optional.ofNullable(exportFormats)
            .orElse(JsonNullable.undefined());
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedBy = Optional.ofNullable(updatedBy)
            .orElse(JsonNullable.undefined());
        this.createdBy = Optional.ofNullable(createdBy)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
    }
    
    public UnifiedFile(
            @Nonnull String id) {
        this(id, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public String id() {
        return this.id;
    }

    /**
     * The third-party API ID of original entity
     */
    public JsonNullable<String> downstreamId() {
        return this.downstreamId;
    }

    /**
     * The name of the file
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * Optional description of the file
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The type of resource. Could be file, folder or url
     */
    public JsonNullable<FileType> type() {
        return this.type;
    }

    /**
     * The full path of the file or folder (includes the file name)
     */
    public JsonNullable<String> path() {
        return this.path;
    }

    /**
     * The MIME type of the file.
     */
    public JsonNullable<String> mimeType() {
        return this.mimeType;
    }

    /**
     * Whether the current user can download this file
     */
    public Optional<Boolean> downloadable() {
        return Optional.ofNullable(this.downloadable);
    }

    /**
     * The size of the file in bytes
     */
    public JsonNullable<Long> size() {
        return this.size;
    }

    public Optional<Owner> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The parent folders of the file, starting from the root
     */
    public Optional<List<LinkedFolder>> parentFolders() {
        return Optional.ofNullable(this.parentFolders);
    }

    /**
     * Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
     */
    public Optional<Boolean> parentFoldersComplete() {
        return Optional.ofNullable(this.parentFoldersComplete);
    }

    /**
     * Permissions the current user has on this file.
     */
    public Optional<Permissions> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
     */
    public Optional<Boolean> exportable() {
        return Optional.ofNullable(this.exportable);
    }

    /**
     * The available file formats when exporting this file.
     */
    public JsonNullable<List<String>> exportFormats() {
        return this.exportFormats;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<OffsetDateTime> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<OffsetDateTime> createdAt() {
        return this.createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public UnifiedFile withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * The third-party API ID of original entity
     */
    public UnifiedFile withDownstreamId(@Nullable String downstreamId) {
        this.downstreamId = JsonNullable.of(downstreamId);
        return this;
    }


    /**
     * The name of the file
     */
    public UnifiedFile withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * Optional description of the file
     */
    public UnifiedFile withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The type of resource. Could be file, folder or url
     */
    public UnifiedFile withType(@Nullable FileType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    /**
     * The full path of the file or folder (includes the file name)
     */
    public UnifiedFile withPath(@Nullable String path) {
        this.path = JsonNullable.of(path);
        return this;
    }


    /**
     * The MIME type of the file.
     */
    public UnifiedFile withMimeType(@Nullable String mimeType) {
        this.mimeType = JsonNullable.of(mimeType);
        return this;
    }


    /**
     * Whether the current user can download this file
     */
    public UnifiedFile withDownloadable(@Nullable Boolean downloadable) {
        this.downloadable = downloadable;
        return this;
    }


    /**
     * The size of the file in bytes
     */
    public UnifiedFile withSize(@Nullable Long size) {
        this.size = JsonNullable.of(size);
        return this;
    }


    public UnifiedFile withOwner(@Nullable Owner owner) {
        this.owner = owner;
        return this;
    }


    /**
     * The parent folders of the file, starting from the root
     */
    public UnifiedFile withParentFolders(@Nullable List<LinkedFolder> parentFolders) {
        this.parentFolders = parentFolders;
        return this;
    }


    /**
     * Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
     */
    public UnifiedFile withParentFoldersComplete(@Nullable Boolean parentFoldersComplete) {
        this.parentFoldersComplete = parentFoldersComplete;
        return this;
    }


    /**
     * Permissions the current user has on this file.
     */
    public UnifiedFile withPermissions(@Nullable Permissions permissions) {
        this.permissions = permissions;
        return this;
    }


    /**
     * Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
     */
    public UnifiedFile withExportable(@Nullable Boolean exportable) {
        this.exportable = exportable;
        return this;
    }


    /**
     * The available file formats when exporting this file.
     */
    public UnifiedFile withExportFormats(@Nullable List<String> exportFormats) {
        this.exportFormats = JsonNullable.of(exportFormats);
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public UnifiedFile withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The user who last updated the object.
     */
    public UnifiedFile withUpdatedBy(@Nullable String updatedBy) {
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }


    /**
     * The user who created the object.
     */
    public UnifiedFile withCreatedBy(@Nullable String createdBy) {
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }


    /**
     * The date and time when the object was last updated.
     */
    public UnifiedFile withUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the object was created.
     */
    public UnifiedFile withCreatedAt(@Nullable OffsetDateTime createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedFile other = (UnifiedFile) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.downstreamId, other.downstreamId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.mimeType, other.mimeType) &&
            Utils.enhancedDeepEquals(this.downloadable, other.downloadable) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.owner, other.owner) &&
            Utils.enhancedDeepEquals(this.parentFolders, other.parentFolders) &&
            Utils.enhancedDeepEquals(this.parentFoldersComplete, other.parentFoldersComplete) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.exportable, other.exportable) &&
            Utils.enhancedDeepEquals(this.exportFormats, other.exportFormats) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedBy, other.updatedBy) &&
            Utils.enhancedDeepEquals(this.createdBy, other.createdBy) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, downstreamId, name,
            description, type, path,
            mimeType, downloadable, size,
            owner, parentFolders, parentFoldersComplete,
            permissions, exportable, exportFormats,
            customMappings, updatedBy, createdBy,
            updatedAt, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnifiedFile.class,
                "id", id,
                "downstreamId", downstreamId,
                "name", name,
                "description", description,
                "type", type,
                "path", path,
                "mimeType", mimeType,
                "downloadable", downloadable,
                "size", size,
                "owner", owner,
                "parentFolders", parentFolders,
                "parentFoldersComplete", parentFoldersComplete,
                "permissions", permissions,
                "exportable", exportable,
                "exportFormats", exportFormats,
                "customMappings", customMappings,
                "updatedBy", updatedBy,
                "createdBy", createdBy,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> downstreamId;

        private String name;

        private JsonNullable<String> description;

        private FileType type;

        private JsonNullable<String> path;

        private JsonNullable<String> mimeType;

        private Boolean downloadable;

        private JsonNullable<Long> size;

        private Owner owner;

        private List<LinkedFolder> parentFolders;

        private Boolean parentFoldersComplete;

        private Permissions permissions;

        private Boolean exportable;

        private JsonNullable<List<String>> exportFormats;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedBy;

        private JsonNullable<String> createdBy;

        private JsonNullable<OffsetDateTime> updatedAt;

        private JsonNullable<OffsetDateTime> createdAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * The third-party API ID of original entity
         */
        public Builder downstreamId(@Nullable String downstreamId) {
            this.downstreamId = JsonNullable.of(downstreamId);
            return this;
        }

        /**
         * The name of the file
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Optional description of the file
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The type of resource. Could be file, folder or url
         */
        public Builder type(@Nullable FileType type) {
            this.type = type;
            return this;
        }

        /**
         * The full path of the file or folder (includes the file name)
         */
        public Builder path(@Nullable String path) {
            this.path = JsonNullable.of(path);
            return this;
        }

        /**
         * The MIME type of the file.
         */
        public Builder mimeType(@Nullable String mimeType) {
            this.mimeType = JsonNullable.of(mimeType);
            return this;
        }

        /**
         * Whether the current user can download this file
         */
        public Builder downloadable(@Nullable Boolean downloadable) {
            this.downloadable = downloadable;
            return this;
        }

        /**
         * The size of the file in bytes
         */
        public Builder size(@Nullable Long size) {
            this.size = JsonNullable.of(size);
            return this;
        }

        public Builder owner(@Nullable Owner owner) {
            this.owner = owner;
            return this;
        }

        /**
         * The parent folders of the file, starting from the root
         */
        public Builder parentFolders(@Nullable List<LinkedFolder> parentFolders) {
            this.parentFolders = parentFolders;
            return this;
        }

        /**
         * Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
         */
        public Builder parentFoldersComplete(@Nullable Boolean parentFoldersComplete) {
            this.parentFoldersComplete = parentFoldersComplete;
            return this;
        }

        /**
         * Permissions the current user has on this file.
         */
        public Builder permissions(@Nullable Permissions permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
         */
        public Builder exportable(@Nullable Boolean exportable) {
            this.exportable = exportable;
            return this;
        }

        /**
         * The available file formats when exporting this file.
         */
        public Builder exportFormats(@Nullable List<String> exportFormats) {
            this.exportFormats = JsonNullable.of(exportFormats);
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(@Nullable OffsetDateTime updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(@Nullable OffsetDateTime createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        public UnifiedFile build() {
            return new UnifiedFile(
                id, downstreamId, name,
                description, type, path,
                mimeType, downloadable, size,
                owner, parentFolders, parentFoldersComplete,
                permissions, exportable, exportFormats,
                customMappings, updatedBy, createdBy,
                updatedAt, createdAt);
        }

    }
}
