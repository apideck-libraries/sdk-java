/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * UnifiedId
 * 
 * <p>A object containing a unique identifier for the resource that was created, updated, or deleted.
 */
public class UnifiedId {
    /**
     * The unique identifier of the resource
     */
    @JsonProperty("id")
    private String id;

    @JsonCreator
    public UnifiedId(
            @JsonProperty("id") @Nonnull String id) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
    }

    /**
     * The unique identifier of the resource
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the resource
     */
    public UnifiedId withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedId other = (UnifiedId) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnifiedId.class,
                "id", id);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the resource
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        public UnifiedId build() {
            return new UnifiedId(
                id);
        }

    }
}
