/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * UpdateConsumerResponse
 * 
 * <p>Consumer updated
 */
public class UpdateConsumerResponse {
    /**
     * HTTP Response Status Code
     */
    @JsonProperty("status_code")
    private long statusCode;

    /**
     * HTTP Response Status
     */
    @JsonProperty("status")
    private String status;


    @JsonProperty("data")
    private Consumer data;

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_raw")
    private JsonNullable<Map<String, Object>> raw;

    @JsonCreator
    public UpdateConsumerResponse(
            @JsonProperty("status_code") long statusCode,
            @JsonProperty("status") @Nonnull String status,
            @JsonProperty("data") @Nonnull Consumer data,
            @JsonProperty("_raw") @Nullable JsonNullable<Map<String, Object>> raw) {
        this.statusCode = statusCode;
        this.status = Optional.ofNullable(status)
            .orElseThrow(() -> new IllegalArgumentException("status cannot be null"));
        this.data = Optional.ofNullable(data)
            .orElseThrow(() -> new IllegalArgumentException("data cannot be null"));
        this.raw = Optional.ofNullable(raw)
            .orElse(JsonNullable.undefined());
    }
    
    public UpdateConsumerResponse(
            long statusCode,
            @Nonnull String status,
            @Nonnull Consumer data) {
        this(statusCode, status, data,
            null);
    }

    /**
     * HTTP Response Status Code
     */
    public long statusCode() {
        return this.statusCode;
    }

    /**
     * HTTP Response Status
     */
    public String status() {
        return this.status;
    }

    public Consumer data() {
        return this.data;
    }

    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public JsonNullable<Map<String, Object>> raw() {
        return this.raw;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP Response Status Code
     */
    public UpdateConsumerResponse withStatusCode(long statusCode) {
        this.statusCode = statusCode;
        return this;
    }


    /**
     * HTTP Response Status
     */
    public UpdateConsumerResponse withStatus(@Nonnull String status) {
        this.status = Utils.checkNotNull(status, "status");
        return this;
    }


    public UpdateConsumerResponse withData(@Nonnull Consumer data) {
        this.data = Utils.checkNotNull(data, "data");
        return this;
    }


    /**
     * Raw response from the integration when raw=true query param is provided
     */
    public UpdateConsumerResponse withRaw(@Nullable Map<String, Object> raw) {
        this.raw = JsonNullable.of(raw);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateConsumerResponse other = (UpdateConsumerResponse) o;
        return 
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.data, other.data) &&
            Utils.enhancedDeepEquals(this.raw, other.raw);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusCode, status, data,
            raw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateConsumerResponse.class,
                "statusCode", statusCode,
                "status", status,
                "data", data,
                "raw", raw);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long statusCode;

        private String status;

        private Consumer data;

        private JsonNullable<Map<String, Object>> raw;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP Response Status Code
         */
        public Builder statusCode(long statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * HTTP Response Status
         */
        public Builder status(@Nonnull String status) {
            this.status = Utils.checkNotNull(status, "status");
            return this;
        }

        public Builder data(@Nonnull Consumer data) {
            this.data = Utils.checkNotNull(data, "data");
            return this;
        }

        /**
         * Raw response from the integration when raw=true query param is provided
         */
        public Builder raw(@Nullable Map<String, Object> raw) {
            this.raw = JsonNullable.of(raw);
            return this;
        }

        public UpdateConsumerResponse build() {
            return new UpdateConsumerResponse(
                statusCode, status, data,
                raw);
        }

    }
}
