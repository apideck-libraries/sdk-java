/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateWebhookRequest {

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The status of the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_url")
    private Optional<String> deliveryUrl;

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private Optional<? extends List<WebhookEventType>> events;

    @JsonCreator
    public UpdateWebhookRequest(
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("delivery_url") Optional<String> deliveryUrl,
            @JsonProperty("events") Optional<? extends List<WebhookEventType>> events) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        Utils.checkNotNull(events, "events");
        this.description = description;
        this.status = status;
        this.deliveryUrl = deliveryUrl;
        this.events = events;
    }
    
    public UpdateWebhookRequest() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A description of the object.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The status of the webhook.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonIgnore
    public Optional<String> deliveryUrl() {
        return deliveryUrl;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<WebhookEventType>> events() {
        return (Optional<List<WebhookEventType>>) events;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A description of the object.
     */
    public UpdateWebhookRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public UpdateWebhookRequest withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the webhook.
     */
    public UpdateWebhookRequest withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the webhook.
     */
    public UpdateWebhookRequest withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    public UpdateWebhookRequest withDeliveryUrl(String deliveryUrl) {
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        this.deliveryUrl = Optional.ofNullable(deliveryUrl);
        return this;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    public UpdateWebhookRequest withDeliveryUrl(Optional<String> deliveryUrl) {
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        this.deliveryUrl = deliveryUrl;
        return this;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public UpdateWebhookRequest withEvents(List<WebhookEventType> events) {
        Utils.checkNotNull(events, "events");
        this.events = Optional.ofNullable(events);
        return this;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public UpdateWebhookRequest withEvents(Optional<? extends List<WebhookEventType>> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateWebhookRequest other = (UpdateWebhookRequest) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.deliveryUrl, other.deliveryUrl) &&
            Objects.deepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            status,
            deliveryUrl,
            events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateWebhookRequest.class,
                "description", description,
                "status", status,
                "deliveryUrl", deliveryUrl,
                "events", events);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<? extends Status> status = Optional.empty();
 
        private Optional<String> deliveryUrl = Optional.empty();
 
        private Optional<? extends List<WebhookEventType>> events = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The status of the webhook.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the webhook.
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The delivery url of the webhook endpoint.
         */
        public Builder deliveryUrl(String deliveryUrl) {
            Utils.checkNotNull(deliveryUrl, "deliveryUrl");
            this.deliveryUrl = Optional.ofNullable(deliveryUrl);
            return this;
        }

        /**
         * The delivery url of the webhook endpoint.
         */
        public Builder deliveryUrl(Optional<String> deliveryUrl) {
            Utils.checkNotNull(deliveryUrl, "deliveryUrl");
            this.deliveryUrl = deliveryUrl;
            return this;
        }

        /**
         * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
         */
        public Builder events(List<WebhookEventType> events) {
            Utils.checkNotNull(events, "events");
            this.events = Optional.ofNullable(events);
            return this;
        }

        /**
         * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
         */
        public Builder events(Optional<? extends List<WebhookEventType>> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }
        
        public UpdateWebhookRequest build() {
            return new UpdateWebhookRequest(
                description,
                status,
                deliveryUrl,
                events);
        }
    }
}
