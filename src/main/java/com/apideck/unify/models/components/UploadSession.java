/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UploadSession {
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Indicates if the upload session was completed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Boolean success;

    /**
     * Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("part_size")
    private Double partSize;

    /**
     * Indicates if parts of the file can uploaded in parallel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parallel_upload_supported")
    private Boolean parallelUploadSupported;

    /**
     * The range of bytes that was successfully uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploaded_byte_range")
    private String uploadedByteRange;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private JsonNullable<OffsetDateTime> expiresAt;

    @JsonCreator
    public UploadSession(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("success") @Nullable Boolean success,
            @JsonProperty("part_size") @Nullable Double partSize,
            @JsonProperty("parallel_upload_supported") @Nullable Boolean parallelUploadSupported,
            @JsonProperty("uploaded_byte_range") @Nullable String uploadedByteRange,
            @JsonProperty("expires_at") @Nullable JsonNullable<OffsetDateTime> expiresAt) {
        this.id = id;
        this.success = success;
        this.partSize = partSize;
        this.parallelUploadSupported = parallelUploadSupported;
        this.uploadedByteRange = uploadedByteRange;
        this.expiresAt = Optional.ofNullable(expiresAt)
            .orElse(JsonNullable.undefined());
    }
    
    public UploadSession() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Indicates if the upload session was completed successfully.
     */
    public Optional<Boolean> success() {
        return Optional.ofNullable(this.success);
    }

    /**
     * Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
     */
    public Optional<Double> partSize() {
        return Optional.ofNullable(this.partSize);
    }

    /**
     * Indicates if parts of the file can uploaded in parallel.
     */
    public Optional<Boolean> parallelUploadSupported() {
        return Optional.ofNullable(this.parallelUploadSupported);
    }

    /**
     * The range of bytes that was successfully uploaded.
     */
    public Optional<String> uploadedByteRange() {
        return Optional.ofNullable(this.uploadedByteRange);
    }

    public JsonNullable<OffsetDateTime> expiresAt() {
        return this.expiresAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for an object.
     */
    public UploadSession withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Indicates if the upload session was completed successfully.
     */
    public UploadSession withSuccess(@Nullable Boolean success) {
        this.success = success;
        return this;
    }


    /**
     * Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
     */
    public UploadSession withPartSize(@Nullable Double partSize) {
        this.partSize = partSize;
        return this;
    }


    /**
     * Indicates if parts of the file can uploaded in parallel.
     */
    public UploadSession withParallelUploadSupported(@Nullable Boolean parallelUploadSupported) {
        this.parallelUploadSupported = parallelUploadSupported;
        return this;
    }


    /**
     * The range of bytes that was successfully uploaded.
     */
    public UploadSession withUploadedByteRange(@Nullable String uploadedByteRange) {
        this.uploadedByteRange = uploadedByteRange;
        return this;
    }


    public UploadSession withExpiresAt(@Nullable OffsetDateTime expiresAt) {
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UploadSession other = (UploadSession) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.partSize, other.partSize) &&
            Utils.enhancedDeepEquals(this.parallelUploadSupported, other.parallelUploadSupported) &&
            Utils.enhancedDeepEquals(this.uploadedByteRange, other.uploadedByteRange) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, success, partSize,
            parallelUploadSupported, uploadedByteRange, expiresAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UploadSession.class,
                "id", id,
                "success", success,
                "partSize", partSize,
                "parallelUploadSupported", parallelUploadSupported,
                "uploadedByteRange", uploadedByteRange,
                "expiresAt", expiresAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Boolean success;

        private Double partSize;

        private Boolean parallelUploadSupported;

        private String uploadedByteRange;

        private JsonNullable<OffsetDateTime> expiresAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Indicates if the upload session was completed successfully.
         */
        public Builder success(@Nullable Boolean success) {
            this.success = success;
            return this;
        }

        /**
         * Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
         */
        public Builder partSize(@Nullable Double partSize) {
            this.partSize = partSize;
            return this;
        }

        /**
         * Indicates if parts of the file can uploaded in parallel.
         */
        public Builder parallelUploadSupported(@Nullable Boolean parallelUploadSupported) {
            this.parallelUploadSupported = parallelUploadSupported;
            return this;
        }

        /**
         * The range of bytes that was successfully uploaded.
         */
        public Builder uploadedByteRange(@Nullable String uploadedByteRange) {
            this.uploadedByteRange = uploadedByteRange;
            return this;
        }

        public Builder expiresAt(@Nullable OffsetDateTime expiresAt) {
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        public UploadSession build() {
            return new UploadSession(
                id, success, partSize,
                parallelUploadSupported, uploadedByteRange, expiresAt);
        }

    }
}
