/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class User {
    /**
     * The unique identifier for the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * The parent user id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * The username of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private JsonNullable<String> division;

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    @Deprecated
    private JsonNullable<String> department;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private JsonNullable<String> companyName;

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The URL of the user's avatar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private JsonNullable<String> image;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<String> language;

    /**
     * The status of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private List<Address> addresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private List<PhoneNumber> phoneNumbers;


    @JsonProperty("emails")
    private List<Email> emails;

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_mappings")
    private JsonNullable<Map<String, Object>> customMappings;

    /**
     * The date and time when the user was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<String> updatedAt;

    /**
     * The date and time when the user was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<String> createdAt;

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pass_through")
    private List<PassThroughBody> passThrough;

    @JsonCreator
    public User(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("parent_id") @Nullable JsonNullable<String> parentId,
            @JsonProperty("username") @Nullable JsonNullable<String> username,
            @JsonProperty("first_name") @Nullable JsonNullable<String> firstName,
            @JsonProperty("last_name") @Nullable JsonNullable<String> lastName,
            @JsonProperty("title") @Nullable JsonNullable<String> title,
            @JsonProperty("division") @Nullable JsonNullable<String> division,
            @JsonProperty("department") @Nullable JsonNullable<String> department,
            @JsonProperty("company_name") @Nullable JsonNullable<String> companyName,
            @JsonProperty("employee_number") @Nullable JsonNullable<String> employeeNumber,
            @JsonProperty("description") @Nullable JsonNullable<String> description,
            @JsonProperty("image") @Nullable JsonNullable<String> image,
            @JsonProperty("language") @Nullable JsonNullable<String> language,
            @JsonProperty("status") @Nullable JsonNullable<String> status,
            @JsonProperty("addresses") @Nullable List<Address> addresses,
            @JsonProperty("phone_numbers") @Nullable List<PhoneNumber> phoneNumbers,
            @JsonProperty("emails") @Nonnull List<Email> emails,
            @JsonProperty("custom_mappings") @Nullable JsonNullable<Map<String, Object>> customMappings,
            @JsonProperty("updated_at") @Nullable JsonNullable<String> updatedAt,
            @JsonProperty("created_at") @Nullable JsonNullable<String> createdAt,
            @JsonProperty("pass_through") @Nullable List<PassThroughBody> passThrough) {
        this.id = id;
        this.parentId = Optional.ofNullable(parentId)
            .orElse(JsonNullable.undefined());
        this.username = Optional.ofNullable(username)
            .orElse(JsonNullable.undefined());
        this.firstName = Optional.ofNullable(firstName)
            .orElse(JsonNullable.undefined());
        this.lastName = Optional.ofNullable(lastName)
            .orElse(JsonNullable.undefined());
        this.title = Optional.ofNullable(title)
            .orElse(JsonNullable.undefined());
        this.division = Optional.ofNullable(division)
            .orElse(JsonNullable.undefined());
        this.department = Optional.ofNullable(department)
            .orElse(JsonNullable.undefined());
        this.companyName = Optional.ofNullable(companyName)
            .orElse(JsonNullable.undefined());
        this.employeeNumber = Optional.ofNullable(employeeNumber)
            .orElse(JsonNullable.undefined());
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
        this.image = Optional.ofNullable(image)
            .orElse(JsonNullable.undefined());
        this.language = Optional.ofNullable(language)
            .orElse(JsonNullable.undefined());
        this.status = Optional.ofNullable(status)
            .orElse(JsonNullable.undefined());
        this.addresses = addresses;
        this.phoneNumbers = phoneNumbers;
        this.emails = Optional.ofNullable(emails)
            .orElseThrow(() -> new IllegalArgumentException("emails cannot be null"));
        this.customMappings = Optional.ofNullable(customMappings)
            .orElse(JsonNullable.undefined());
        this.updatedAt = Optional.ofNullable(updatedAt)
            .orElse(JsonNullable.undefined());
        this.createdAt = Optional.ofNullable(createdAt)
            .orElse(JsonNullable.undefined());
        this.passThrough = passThrough;
    }
    
    public User(
            @Nonnull List<Email> emails) {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, emails, null,
            null, null, null);
    }

    /**
     * The unique identifier for the user
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The parent user id
     */
    public JsonNullable<String> parentId() {
        return this.parentId;
    }

    /**
     * The username of the user
     */
    public JsonNullable<String> username() {
        return this.username;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<String> firstName() {
        return this.firstName;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<String> lastName() {
        return this.lastName;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<String> title() {
        return this.title;
    }

    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public JsonNullable<String> division() {
        return this.division;
    }

    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<String> department() {
        return this.department;
    }

    /**
     * The name of the company.
     */
    public JsonNullable<String> companyName() {
        return this.companyName;
    }

    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public JsonNullable<String> employeeNumber() {
        return this.employeeNumber;
    }

    /**
     * A description of the object.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    /**
     * The URL of the user's avatar
     */
    public JsonNullable<String> image() {
        return this.image;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<String> language() {
        return this.language;
    }

    /**
     * The status of the user
     */
    public JsonNullable<String> status() {
        return this.status;
    }

    public Optional<List<Address>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    public Optional<List<PhoneNumber>> phoneNumbers() {
        return Optional.ofNullable(this.phoneNumbers);
    }

    public List<Email> emails() {
        return this.emails;
    }

    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public JsonNullable<Map<String, Object>> customMappings() {
        return this.customMappings;
    }

    /**
     * The date and time when the user was last updated.
     */
    public JsonNullable<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     * The date and time when the user was created.
     */
    public JsonNullable<String> createdAt() {
        return this.createdAt;
    }

    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public Optional<List<PassThroughBody>> passThrough() {
        return Optional.ofNullable(this.passThrough);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier for the user
     */
    public User withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * The parent user id
     */
    public User withParentId(@Nullable String parentId) {
        this.parentId = JsonNullable.of(parentId);
        return this;
    }


    /**
     * The username of the user
     */
    public User withUsername(@Nullable String username) {
        this.username = JsonNullable.of(username);
        return this;
    }


    /**
     * The first name of the person.
     */
    public User withFirstName(@Nullable String firstName) {
        this.firstName = JsonNullable.of(firstName);
        return this;
    }


    /**
     * The last name of the person.
     */
    public User withLastName(@Nullable String lastName) {
        this.lastName = JsonNullable.of(lastName);
        return this;
    }


    /**
     * The job title of the person.
     */
    public User withTitle(@Nullable String title) {
        this.title = JsonNullable.of(title);
        return this;
    }


    /**
     * The division the person is currently in. Usually a collection of departments or teams or regions.
     */
    public User withDivision(@Nullable String division) {
        this.division = JsonNullable.of(division);
        return this;
    }


    /**
     * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withDepartment(@Nullable String department) {
        this.department = JsonNullable.of(department);
        return this;
    }


    /**
     * The name of the company.
     */
    public User withCompanyName(@Nullable String companyName) {
        this.companyName = JsonNullable.of(companyName);
        return this;
    }


    /**
     * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
     */
    public User withEmployeeNumber(@Nullable String employeeNumber) {
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }


    /**
     * A description of the object.
     */
    public User withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    /**
     * The URL of the user's avatar
     */
    public User withImage(@Nullable String image) {
        this.image = JsonNullable.of(image);
        return this;
    }


    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public User withLanguage(@Nullable String language) {
        this.language = JsonNullable.of(language);
        return this;
    }


    /**
     * The status of the user
     */
    public User withStatus(@Nullable String status) {
        this.status = JsonNullable.of(status);
        return this;
    }


    public User withAddresses(@Nullable List<Address> addresses) {
        this.addresses = addresses;
        return this;
    }


    public User withPhoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }


    public User withEmails(@Nonnull List<Email> emails) {
        this.emails = Utils.checkNotNull(emails, "emails");
        return this;
    }


    /**
     * When custom mappings are configured on the resource, the result is included here.
     */
    public User withCustomMappings(@Nullable Map<String, Object> customMappings) {
        this.customMappings = JsonNullable.of(customMappings);
        return this;
    }


    /**
     * The date and time when the user was last updated.
     */
    public User withUpdatedAt(@Nullable String updatedAt) {
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }


    /**
     * The date and time when the user was created.
     */
    public User withCreatedAt(@Nullable String createdAt) {
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }


    /**
     * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
     */
    public User withPassThrough(@Nullable List<PassThroughBody> passThrough) {
        this.passThrough = passThrough;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.division, other.division) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.employeeNumber, other.employeeNumber) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.addresses, other.addresses) &&
            Utils.enhancedDeepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.customMappings, other.customMappings) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.passThrough, other.passThrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, parentId, username,
            firstName, lastName, title,
            division, department, companyName,
            employeeNumber, description, image,
            language, status, addresses,
            phoneNumbers, emails, customMappings,
            updatedAt, createdAt, passThrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "parentId", parentId,
                "username", username,
                "firstName", firstName,
                "lastName", lastName,
                "title", title,
                "division", division,
                "department", department,
                "companyName", companyName,
                "employeeNumber", employeeNumber,
                "description", description,
                "image", image,
                "language", language,
                "status", status,
                "addresses", addresses,
                "phoneNumbers", phoneNumbers,
                "emails", emails,
                "customMappings", customMappings,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "passThrough", passThrough);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> parentId;

        private JsonNullable<String> username;

        private JsonNullable<String> firstName;

        private JsonNullable<String> lastName;

        private JsonNullable<String> title;

        private JsonNullable<String> division;

        @Deprecated
        private JsonNullable<String> department;

        private JsonNullable<String> companyName;

        private JsonNullable<String> employeeNumber;

        private JsonNullable<String> description;

        private JsonNullable<String> image;

        private JsonNullable<String> language;

        private JsonNullable<String> status;

        private List<Address> addresses;

        private List<PhoneNumber> phoneNumbers;

        private List<Email> emails;

        private JsonNullable<Map<String, Object>> customMappings;

        private JsonNullable<String> updatedAt;

        private JsonNullable<String> createdAt;

        private List<PassThroughBody> passThrough;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier for the user
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * The parent user id
         */
        public Builder parentId(@Nullable String parentId) {
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The username of the user
         */
        public Builder username(@Nullable String username) {
            this.username = JsonNullable.of(username);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(@Nullable String firstName) {
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(@Nullable String lastName) {
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(@Nullable String title) {
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The division the person is currently in. Usually a collection of departments or teams or regions.
         */
        public Builder division(@Nullable String division) {
            this.division = JsonNullable.of(division);
            return this;
        }

        /**
         * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(@Nullable String department) {
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder companyName(@Nullable String companyName) {
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
         */
        public Builder employeeNumber(@Nullable String employeeNumber) {
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The URL of the user's avatar
         */
        public Builder image(@Nullable String image) {
            this.image = JsonNullable.of(image);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(@Nullable String language) {
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * The status of the user
         */
        public Builder status(@Nullable String status) {
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder addresses(@Nullable List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder phoneNumbers(@Nullable List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder emails(@Nonnull List<Email> emails) {
            this.emails = Utils.checkNotNull(emails, "emails");
            return this;
        }

        /**
         * When custom mappings are configured on the resource, the result is included here.
         */
        public Builder customMappings(@Nullable Map<String, Object> customMappings) {
            this.customMappings = JsonNullable.of(customMappings);
            return this;
        }

        /**
         * The date and time when the user was last updated.
         */
        public Builder updatedAt(@Nullable String updatedAt) {
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the user was created.
         */
        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
         */
        public Builder passThrough(@Nullable List<PassThroughBody> passThrough) {
            this.passThrough = passThrough;
            return this;
        }

        public User build() {
            return new User(
                id, parentId, username,
                firstName, lastName, title,
                division, department, companyName,
                employeeNumber, description, image,
                language, status, addresses,
                phoneNumbers, emails, customMappings,
                updatedAt, createdAt, passThrough);
        }

    }
}
