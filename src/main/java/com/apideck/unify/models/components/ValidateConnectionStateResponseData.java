/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ValidateConnectionStateResponseData {

    /**
     * The unique identifier of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * [Connection state flow](#section/Connection-state)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends ConnectionState> state;

    @JsonCreator
    public ValidateConnectionStateResponseData(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("state") Optional<? extends ConnectionState> state) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(state, "state");
        this.id = id;
        this.state = state;
    }
    
    public ValidateConnectionStateResponseData() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The unique identifier of the connection.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * [Connection state flow](#section/Connection-state)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConnectionState> state() {
        return (Optional<ConnectionState>) state;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The unique identifier of the connection.
     */
    public ValidateConnectionStateResponseData withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The unique identifier of the connection.
     */
    public ValidateConnectionStateResponseData withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * [Connection state flow](#section/Connection-state)
     */
    public ValidateConnectionStateResponseData withState(ConnectionState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * [Connection state flow](#section/Connection-state)
     */
    public ValidateConnectionStateResponseData withState(Optional<? extends ConnectionState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ValidateConnectionStateResponseData other = (ValidateConnectionStateResponseData) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.state, other.state);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            state);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ValidateConnectionStateResponseData.class,
                "id", id,
                "state", state);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends ConnectionState> state = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the connection.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier of the connection.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * [Connection state flow](#section/Connection-state)
         */
        public Builder state(ConnectionState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * [Connection state flow](#section/Connection-state)
         */
        public Builder state(Optional<? extends ConnectionState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }
        
        public ValidateConnectionStateResponseData build() {
            return new ValidateConnectionStateResponseData(
                id,
                state);
        }
    }
}

