/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Variants {

    /**
     * A unique identifier for the variant of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The name for the variant, used for displaying to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The price of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private JsonNullable<String> price;

    /**
     * The stock keeping unit of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The quantity of the variant in stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_quantity")
    private JsonNullable<String> inventoryQuantity;

    /**
     * The weight of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private JsonNullable<String> weight;

    /**
     * The unit of measurement for the weight of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private JsonNullable<String> weightUnit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<EcommerceProductVariantsOptions>> options;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private Optional<? extends List<EcommerceProductImages>> images;

    @JsonCreator
    public Variants(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("price") JsonNullable<String> price,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("inventory_quantity") JsonNullable<String> inventoryQuantity,
            @JsonProperty("weight") JsonNullable<String> weight,
            @JsonProperty("weight_unit") JsonNullable<String> weightUnit,
            @JsonProperty("options") Optional<? extends List<EcommerceProductVariantsOptions>> options,
            @JsonProperty("images") Optional<? extends List<EcommerceProductImages>> images) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(price, "price");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(weightUnit, "weightUnit");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(images, "images");
        this.id = id;
        this.name = name;
        this.price = price;
        this.sku = sku;
        this.inventoryQuantity = inventoryQuantity;
        this.weight = weight;
        this.weightUnit = weightUnit;
        this.options = options;
        this.images = images;
    }
    
    public Variants() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier for the variant of the product.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The name for the variant, used for displaying to customers.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The price of the variant.
     */
    @JsonIgnore
    public JsonNullable<String> price() {
        return price;
    }

    /**
     * The stock keeping unit of the variant.
     */
    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    /**
     * The quantity of the variant in stock.
     */
    @JsonIgnore
    public JsonNullable<String> inventoryQuantity() {
        return inventoryQuantity;
    }

    /**
     * The weight of the variant.
     */
    @JsonIgnore
    public JsonNullable<String> weight() {
        return weight;
    }

    /**
     * The unit of measurement for the weight of the variant.
     */
    @JsonIgnore
    public JsonNullable<String> weightUnit() {
        return weightUnit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceProductVariantsOptions>> options() {
        return (Optional<List<EcommerceProductVariantsOptions>>) options;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EcommerceProductImages>> images() {
        return (Optional<List<EcommerceProductImages>>) images;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for the variant of the product.
     */
    public Variants withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * A unique identifier for the variant of the product.
     */
    public Variants withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name for the variant, used for displaying to customers.
     */
    public Variants withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name for the variant, used for displaying to customers.
     */
    public Variants withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The price of the variant.
     */
    public Variants withPrice(String price) {
        Utils.checkNotNull(price, "price");
        this.price = JsonNullable.of(price);
        return this;
    }

    /**
     * The price of the variant.
     */
    public Variants withPrice(JsonNullable<String> price) {
        Utils.checkNotNull(price, "price");
        this.price = price;
        return this;
    }

    /**
     * The stock keeping unit of the variant.
     */
    public Variants withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    /**
     * The stock keeping unit of the variant.
     */
    public Variants withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The quantity of the variant in stock.
     */
    public Variants withInventoryQuantity(String inventoryQuantity) {
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
        return this;
    }

    /**
     * The quantity of the variant in stock.
     */
    public Variants withInventoryQuantity(JsonNullable<String> inventoryQuantity) {
        Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
        this.inventoryQuantity = inventoryQuantity;
        return this;
    }

    /**
     * The weight of the variant.
     */
    public Variants withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = JsonNullable.of(weight);
        return this;
    }

    /**
     * The weight of the variant.
     */
    public Variants withWeight(JsonNullable<String> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * The unit of measurement for the weight of the variant.
     */
    public Variants withWeightUnit(String weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = JsonNullable.of(weightUnit);
        return this;
    }

    /**
     * The unit of measurement for the weight of the variant.
     */
    public Variants withWeightUnit(JsonNullable<String> weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = weightUnit;
        return this;
    }

    public Variants withOptions(List<EcommerceProductVariantsOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    public Variants withOptions(Optional<? extends List<EcommerceProductVariantsOptions>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public Variants withImages(List<EcommerceProductImages> images) {
        Utils.checkNotNull(images, "images");
        this.images = Optional.ofNullable(images);
        return this;
    }

    public Variants withImages(Optional<? extends List<EcommerceProductImages>> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Variants other = (Variants) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.price, other.price) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.inventoryQuantity, other.inventoryQuantity) &&
            Objects.deepEquals(this.weight, other.weight) &&
            Objects.deepEquals(this.weightUnit, other.weightUnit) &&
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.images, other.images);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            price,
            sku,
            inventoryQuantity,
            weight,
            weightUnit,
            options,
            images);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Variants.class,
                "id", id,
                "name", name,
                "price", price,
                "sku", sku,
                "inventoryQuantity", inventoryQuantity,
                "weight", weight,
                "weightUnit", weightUnit,
                "options", options,
                "images", images);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> price = JsonNullable.undefined();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private JsonNullable<String> inventoryQuantity = JsonNullable.undefined();
 
        private JsonNullable<String> weight = JsonNullable.undefined();
 
        private JsonNullable<String> weightUnit = JsonNullable.undefined();
 
        private Optional<? extends List<EcommerceProductVariantsOptions>> options = Optional.empty();
 
        private Optional<? extends List<EcommerceProductImages>> images = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the variant of the product.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * A unique identifier for the variant of the product.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name for the variant, used for displaying to customers.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name for the variant, used for displaying to customers.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The price of the variant.
         */
        public Builder price(String price) {
            Utils.checkNotNull(price, "price");
            this.price = JsonNullable.of(price);
            return this;
        }

        /**
         * The price of the variant.
         */
        public Builder price(JsonNullable<String> price) {
            Utils.checkNotNull(price, "price");
            this.price = price;
            return this;
        }

        /**
         * The stock keeping unit of the variant.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The stock keeping unit of the variant.
         */
        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * The quantity of the variant in stock.
         */
        public Builder inventoryQuantity(String inventoryQuantity) {
            Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
            this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
            return this;
        }

        /**
         * The quantity of the variant in stock.
         */
        public Builder inventoryQuantity(JsonNullable<String> inventoryQuantity) {
            Utils.checkNotNull(inventoryQuantity, "inventoryQuantity");
            this.inventoryQuantity = inventoryQuantity;
            return this;
        }

        /**
         * The weight of the variant.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = JsonNullable.of(weight);
            return this;
        }

        /**
         * The weight of the variant.
         */
        public Builder weight(JsonNullable<String> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * The unit of measurement for the weight of the variant.
         */
        public Builder weightUnit(String weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = JsonNullable.of(weightUnit);
            return this;
        }

        /**
         * The unit of measurement for the weight of the variant.
         */
        public Builder weightUnit(JsonNullable<String> weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = weightUnit;
            return this;
        }

        public Builder options(List<EcommerceProductVariantsOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends List<EcommerceProductVariantsOptions>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder images(List<EcommerceProductImages> images) {
            Utils.checkNotNull(images, "images");
            this.images = Optional.ofNullable(images);
            return this;
        }

        public Builder images(Optional<? extends List<EcommerceProductImages>> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }
        
        public Variants build() {
            return new Variants(
                id,
                name,
                price,
                sku,
                inventoryQuantity,
                weight,
                weightUnit,
                options,
                images);
        }
    }
}
