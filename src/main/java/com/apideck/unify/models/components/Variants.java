/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Variants {
    /**
     * A unique identifier for the variant of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The name for the variant, used for displaying to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The price of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private JsonNullable<String> price;

    /**
     * The stock keeping unit of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    /**
     * The quantity of the variant in stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_quantity")
    private JsonNullable<String> inventoryQuantity;

    /**
     * The weight of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private JsonNullable<String> weight;

    /**
     * The unit of measurement for the weight of the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private JsonNullable<String> weightUnit;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private List<EcommerceProductVariantsOptions> options;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private List<EcommerceProductImages> images;

    @JsonCreator
    public Variants(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("name") @Nullable JsonNullable<String> name,
            @JsonProperty("price") @Nullable JsonNullable<String> price,
            @JsonProperty("sku") @Nullable JsonNullable<String> sku,
            @JsonProperty("inventory_quantity") @Nullable JsonNullable<String> inventoryQuantity,
            @JsonProperty("weight") @Nullable JsonNullable<String> weight,
            @JsonProperty("weight_unit") @Nullable JsonNullable<String> weightUnit,
            @JsonProperty("options") @Nullable List<EcommerceProductVariantsOptions> options,
            @JsonProperty("images") @Nullable List<EcommerceProductImages> images) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.name = Optional.ofNullable(name)
            .orElse(JsonNullable.undefined());
        this.price = Optional.ofNullable(price)
            .orElse(JsonNullable.undefined());
        this.sku = Optional.ofNullable(sku)
            .orElse(JsonNullable.undefined());
        this.inventoryQuantity = Optional.ofNullable(inventoryQuantity)
            .orElse(JsonNullable.undefined());
        this.weight = Optional.ofNullable(weight)
            .orElse(JsonNullable.undefined());
        this.weightUnit = Optional.ofNullable(weightUnit)
            .orElse(JsonNullable.undefined());
        this.options = options;
        this.images = images;
    }
    
    public Variants() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * A unique identifier for the variant of the product.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The name for the variant, used for displaying to customers.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * The price of the variant.
     */
    public JsonNullable<String> price() {
        return this.price;
    }

    /**
     * The stock keeping unit of the variant.
     */
    public JsonNullable<String> sku() {
        return this.sku;
    }

    /**
     * The quantity of the variant in stock.
     */
    public JsonNullable<String> inventoryQuantity() {
        return this.inventoryQuantity;
    }

    /**
     * The weight of the variant.
     */
    public JsonNullable<String> weight() {
        return this.weight;
    }

    /**
     * The unit of measurement for the weight of the variant.
     */
    public JsonNullable<String> weightUnit() {
        return this.weightUnit;
    }

    public Optional<List<EcommerceProductVariantsOptions>> options() {
        return Optional.ofNullable(this.options);
    }

    public Optional<List<EcommerceProductImages>> images() {
        return Optional.ofNullable(this.images);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique identifier for the variant of the product.
     */
    public Variants withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The name for the variant, used for displaying to customers.
     */
    public Variants withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * The price of the variant.
     */
    public Variants withPrice(@Nullable String price) {
        this.price = JsonNullable.of(price);
        return this;
    }


    /**
     * The stock keeping unit of the variant.
     */
    public Variants withSku(@Nullable String sku) {
        this.sku = JsonNullable.of(sku);
        return this;
    }


    /**
     * The quantity of the variant in stock.
     */
    public Variants withInventoryQuantity(@Nullable String inventoryQuantity) {
        this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
        return this;
    }


    /**
     * The weight of the variant.
     */
    public Variants withWeight(@Nullable String weight) {
        this.weight = JsonNullable.of(weight);
        return this;
    }


    /**
     * The unit of measurement for the weight of the variant.
     */
    public Variants withWeightUnit(@Nullable String weightUnit) {
        this.weightUnit = JsonNullable.of(weightUnit);
        return this;
    }


    public Variants withOptions(@Nullable List<EcommerceProductVariantsOptions> options) {
        this.options = options;
        return this;
    }


    public Variants withImages(@Nullable List<EcommerceProductImages> images) {
        this.images = images;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Variants other = (Variants) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.price, other.price) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.inventoryQuantity, other.inventoryQuantity) &&
            Utils.enhancedDeepEquals(this.weight, other.weight) &&
            Utils.enhancedDeepEquals(this.weightUnit, other.weightUnit) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.images, other.images);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, price,
            sku, inventoryQuantity, weight,
            weightUnit, options, images);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Variants.class,
                "id", id,
                "name", name,
                "price", price,
                "sku", sku,
                "inventoryQuantity", inventoryQuantity,
                "weight", weight,
                "weightUnit", weightUnit,
                "options", options,
                "images", images);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> name;

        private JsonNullable<String> price;

        private JsonNullable<String> sku;

        private JsonNullable<String> inventoryQuantity;

        private JsonNullable<String> weight;

        private JsonNullable<String> weightUnit;

        private List<EcommerceProductVariantsOptions> options;

        private List<EcommerceProductImages> images;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the variant of the product.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The name for the variant, used for displaying to customers.
         */
        public Builder name(@Nullable String name) {
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The price of the variant.
         */
        public Builder price(@Nullable String price) {
            this.price = JsonNullable.of(price);
            return this;
        }

        /**
         * The stock keeping unit of the variant.
         */
        public Builder sku(@Nullable String sku) {
            this.sku = JsonNullable.of(sku);
            return this;
        }

        /**
         * The quantity of the variant in stock.
         */
        public Builder inventoryQuantity(@Nullable String inventoryQuantity) {
            this.inventoryQuantity = JsonNullable.of(inventoryQuantity);
            return this;
        }

        /**
         * The weight of the variant.
         */
        public Builder weight(@Nullable String weight) {
            this.weight = JsonNullable.of(weight);
            return this;
        }

        /**
         * The unit of measurement for the weight of the variant.
         */
        public Builder weightUnit(@Nullable String weightUnit) {
            this.weightUnit = JsonNullable.of(weightUnit);
            return this;
        }

        public Builder options(@Nullable List<EcommerceProductVariantsOptions> options) {
            this.options = options;
            return this;
        }

        public Builder images(@Nullable List<EcommerceProductImages> images) {
            this.images = images;
            return this;
        }

        public Variants build() {
            return new Variants(
                id, name, price,
                sku, inventoryQuantity, weight,
                weightUnit, options, images);
        }

    }
}
