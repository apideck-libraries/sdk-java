/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Variations {

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_id")
    private Optional<String> itemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private JsonNullable<Double> sequence;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    private Optional<? extends ItemPricingType> pricingType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_amount")
    private Optional<Double> priceAmount;

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_currency")
    private JsonNullable<? extends Currency> priceCurrency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockable")
    private Optional<Boolean> stockable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    private Optional<Boolean> presentAtAllLocations;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private JsonNullable<String> version;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Variations(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("item_id") Optional<String> itemId,
            @JsonProperty("sequence") JsonNullable<Double> sequence,
            @JsonProperty("pricing_type") Optional<? extends ItemPricingType> pricingType,
            @JsonProperty("price_amount") Optional<Double> priceAmount,
            @JsonProperty("price_currency") JsonNullable<? extends Currency> priceCurrency,
            @JsonProperty("stockable") Optional<Boolean> stockable,
            @JsonProperty("present_at_all_locations") Optional<Boolean> presentAtAllLocations,
            @JsonProperty("version") JsonNullable<String> version,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(sequence, "sequence");
        Utils.checkNotNull(pricingType, "pricingType");
        Utils.checkNotNull(priceAmount, "priceAmount");
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        Utils.checkNotNull(stockable, "stockable");
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.name = name;
        this.sku = sku;
        this.itemId = itemId;
        this.sequence = sequence;
        this.pricingType = pricingType;
        this.priceAmount = priceAmount;
        this.priceCurrency = priceCurrency;
        this.stockable = stockable;
        this.presentAtAllLocations = presentAtAllLocations;
        this.version = version;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Variations() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * A unique identifier for an object.
     */
    @JsonIgnore
    public Optional<String> itemId() {
        return itemId;
    }

    @JsonIgnore
    public JsonNullable<Double> sequence() {
        return sequence;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ItemPricingType> pricingType() {
        return (Optional<ItemPricingType>) pricingType;
    }

    @JsonIgnore
    public Optional<Double> priceAmount() {
        return priceAmount;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Currency> priceCurrency() {
        return (JsonNullable<Currency>) priceCurrency;
    }

    @JsonIgnore
    public Optional<Boolean> stockable() {
        return stockable;
    }

    @JsonIgnore
    public Optional<Boolean> presentAtAllLocations() {
        return presentAtAllLocations;
    }

    /**
     * The user who last updated the object.
     */
    @JsonIgnore
    public JsonNullable<String> version() {
        return version;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for an object.
     */
    public Variations withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Variations withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Variations withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public Variations withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Variations withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    public Variations withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Variations withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = Optional.ofNullable(itemId);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Variations withItemId(Optional<String> itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    public Variations withSequence(double sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = JsonNullable.of(sequence);
        return this;
    }

    public Variations withSequence(JsonNullable<Double> sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = sequence;
        return this;
    }

    public Variations withPricingType(ItemPricingType pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = Optional.ofNullable(pricingType);
        return this;
    }

    public Variations withPricingType(Optional<? extends ItemPricingType> pricingType) {
        Utils.checkNotNull(pricingType, "pricingType");
        this.pricingType = pricingType;
        return this;
    }

    public Variations withPriceAmount(double priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = Optional.ofNullable(priceAmount);
        return this;
    }

    public Variations withPriceAmount(Optional<Double> priceAmount) {
        Utils.checkNotNull(priceAmount, "priceAmount");
        this.priceAmount = priceAmount;
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Variations withPriceCurrency(Currency priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = JsonNullable.of(priceCurrency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Variations withPriceCurrency(JsonNullable<? extends Currency> priceCurrency) {
        Utils.checkNotNull(priceCurrency, "priceCurrency");
        this.priceCurrency = priceCurrency;
        return this;
    }

    public Variations withStockable(boolean stockable) {
        Utils.checkNotNull(stockable, "stockable");
        this.stockable = Optional.ofNullable(stockable);
        return this;
    }

    public Variations withStockable(Optional<Boolean> stockable) {
        Utils.checkNotNull(stockable, "stockable");
        this.stockable = stockable;
        return this;
    }

    public Variations withPresentAtAllLocations(boolean presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
        return this;
    }

    public Variations withPresentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
        Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Variations withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = JsonNullable.of(version);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Variations withVersion(JsonNullable<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Variations withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Variations withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Variations withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Variations withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Variations other = (Variations) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.itemId, other.itemId) &&
            Objects.deepEquals(this.sequence, other.sequence) &&
            Objects.deepEquals(this.pricingType, other.pricingType) &&
            Objects.deepEquals(this.priceAmount, other.priceAmount) &&
            Objects.deepEquals(this.priceCurrency, other.priceCurrency) &&
            Objects.deepEquals(this.stockable, other.stockable) &&
            Objects.deepEquals(this.presentAtAllLocations, other.presentAtAllLocations) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            sku,
            itemId,
            sequence,
            pricingType,
            priceAmount,
            priceCurrency,
            stockable,
            presentAtAllLocations,
            version,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Variations.class,
                "id", id,
                "name", name,
                "sku", sku,
                "itemId", itemId,
                "sequence", sequence,
                "pricingType", pricingType,
                "priceAmount", priceAmount,
                "priceCurrency", priceCurrency,
                "stockable", stockable,
                "presentAtAllLocations", presentAtAllLocations,
                "version", version,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<String> itemId = Optional.empty();
 
        private JsonNullable<Double> sequence = JsonNullable.undefined();
 
        private Optional<? extends ItemPricingType> pricingType = Optional.empty();
 
        private Optional<Double> priceAmount = Optional.empty();
 
        private JsonNullable<? extends Currency> priceCurrency = JsonNullable.undefined();
 
        private Optional<Boolean> stockable = Optional.empty();
 
        private Optional<Boolean> presentAtAllLocations = Optional.empty();
 
        private JsonNullable<String> version = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = Optional.ofNullable(itemId);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder itemId(Optional<String> itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        public Builder sequence(double sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = JsonNullable.of(sequence);
            return this;
        }

        public Builder sequence(JsonNullable<Double> sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = sequence;
            return this;
        }

        public Builder pricingType(ItemPricingType pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        public Builder pricingType(Optional<? extends ItemPricingType> pricingType) {
            Utils.checkNotNull(pricingType, "pricingType");
            this.pricingType = pricingType;
            return this;
        }

        public Builder priceAmount(double priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = Optional.ofNullable(priceAmount);
            return this;
        }

        public Builder priceAmount(Optional<Double> priceAmount) {
            Utils.checkNotNull(priceAmount, "priceAmount");
            this.priceAmount = priceAmount;
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(Currency priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = JsonNullable.of(priceCurrency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder priceCurrency(JsonNullable<? extends Currency> priceCurrency) {
            Utils.checkNotNull(priceCurrency, "priceCurrency");
            this.priceCurrency = priceCurrency;
            return this;
        }

        public Builder stockable(boolean stockable) {
            Utils.checkNotNull(stockable, "stockable");
            this.stockable = Optional.ofNullable(stockable);
            return this;
        }

        public Builder stockable(Optional<Boolean> stockable) {
            Utils.checkNotNull(stockable, "stockable");
            this.stockable = stockable;
            return this;
        }

        public Builder presentAtAllLocations(boolean presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = Optional.ofNullable(presentAtAllLocations);
            return this;
        }

        public Builder presentAtAllLocations(Optional<Boolean> presentAtAllLocations) {
            Utils.checkNotNull(presentAtAllLocations, "presentAtAllLocations");
            this.presentAtAllLocations = presentAtAllLocations;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = JsonNullable.of(version);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder version(JsonNullable<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public Variations build() {
            return new Variations(
                id,
                name,
                sku,
                itemId,
                sequence,
                pricingType,
                priceAmount,
                priceCurrency,
                stockable,
                presentAtAllLocations,
                version,
                updatedAt,
                createdAt);
        }
    }
}

