/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * VirtualWebhooks
 * 
 * <p>Virtual webhook config for the connector.
 */
public class VirtualWebhooks {

    /**
     * The rate at which requests for resources will be made to downstream.
     */
    @JsonProperty("request_rate")
    private RequestRate requestRate;

    /**
     * The resources that will be requested from downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Optional<? extends Map<String, WebhookSupportResources>> resources;

    @JsonCreator
    public VirtualWebhooks(
            @JsonProperty("request_rate") RequestRate requestRate,
            @JsonProperty("resources") Optional<? extends Map<String, WebhookSupportResources>> resources) {
        Utils.checkNotNull(requestRate, "requestRate");
        Utils.checkNotNull(resources, "resources");
        this.requestRate = requestRate;
        this.resources = resources;
    }
    
    public VirtualWebhooks(
            RequestRate requestRate) {
        this(requestRate, Optional.empty());
    }

    /**
     * The rate at which requests for resources will be made to downstream.
     */
    @JsonIgnore
    public RequestRate requestRate() {
        return requestRate;
    }

    /**
     * The resources that will be requested from downstream.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, WebhookSupportResources>> resources() {
        return (Optional<Map<String, WebhookSupportResources>>) resources;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The rate at which requests for resources will be made to downstream.
     */
    public VirtualWebhooks withRequestRate(RequestRate requestRate) {
        Utils.checkNotNull(requestRate, "requestRate");
        this.requestRate = requestRate;
        return this;
    }

    /**
     * The resources that will be requested from downstream.
     */
    public VirtualWebhooks withResources(Map<String, WebhookSupportResources> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = Optional.ofNullable(resources);
        return this;
    }

    /**
     * The resources that will be requested from downstream.
     */
    public VirtualWebhooks withResources(Optional<? extends Map<String, WebhookSupportResources>> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VirtualWebhooks other = (VirtualWebhooks) o;
        return 
            Objects.deepEquals(this.requestRate, other.requestRate) &&
            Objects.deepEquals(this.resources, other.resources);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestRate,
            resources);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VirtualWebhooks.class,
                "requestRate", requestRate,
                "resources", resources);
    }
    
    public final static class Builder {
 
        private RequestRate requestRate;
 
        private Optional<? extends Map<String, WebhookSupportResources>> resources = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The rate at which requests for resources will be made to downstream.
         */
        public Builder requestRate(RequestRate requestRate) {
            Utils.checkNotNull(requestRate, "requestRate");
            this.requestRate = requestRate;
            return this;
        }

        /**
         * The resources that will be requested from downstream.
         */
        public Builder resources(Map<String, WebhookSupportResources> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = Optional.ofNullable(resources);
            return this;
        }

        /**
         * The resources that will be requested from downstream.
         */
        public Builder resources(Optional<? extends Map<String, WebhookSupportResources>> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }
        
        public VirtualWebhooks build() {
            return new VirtualWebhooks(
                requestRate,
                resources);
        }
    }
}
