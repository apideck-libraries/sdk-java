/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

/**
 * VirtualWebhooks
 * 
 * <p>Virtual webhook config for the connector.
 */
public class VirtualWebhooks {
    /**
     * The rate at which requests for resources will be made to downstream.
     */
    @JsonProperty("request_rate")
    private RequestRate requestRate;

    /**
     * The resources that will be requested from downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private Map<String, WebhookSupportResources> resources;

    @JsonCreator
    public VirtualWebhooks(
            @JsonProperty("request_rate") @Nonnull RequestRate requestRate,
            @JsonProperty("resources") @Nullable Map<String, WebhookSupportResources> resources) {
        this.requestRate = Optional.ofNullable(requestRate)
            .orElseThrow(() -> new IllegalArgumentException("requestRate cannot be null"));
        this.resources = resources;
    }
    
    public VirtualWebhooks(
            @Nonnull RequestRate requestRate) {
        this(requestRate, null);
    }

    /**
     * The rate at which requests for resources will be made to downstream.
     */
    public RequestRate requestRate() {
        return this.requestRate;
    }

    /**
     * The resources that will be requested from downstream.
     */
    public Optional<Map<String, WebhookSupportResources>> resources() {
        return Optional.ofNullable(this.resources);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The rate at which requests for resources will be made to downstream.
     */
    public VirtualWebhooks withRequestRate(@Nonnull RequestRate requestRate) {
        this.requestRate = Utils.checkNotNull(requestRate, "requestRate");
        return this;
    }


    /**
     * The resources that will be requested from downstream.
     */
    public VirtualWebhooks withResources(@Nullable Map<String, WebhookSupportResources> resources) {
        this.resources = resources;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VirtualWebhooks other = (VirtualWebhooks) o;
        return 
            Utils.enhancedDeepEquals(this.requestRate, other.requestRate) &&
            Utils.enhancedDeepEquals(this.resources, other.resources);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requestRate, resources);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VirtualWebhooks.class,
                "requestRate", requestRate,
                "resources", resources);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private RequestRate requestRate;

        private Map<String, WebhookSupportResources> resources;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The rate at which requests for resources will be made to downstream.
         */
        public Builder requestRate(@Nonnull RequestRate requestRate) {
            this.requestRate = Utils.checkNotNull(requestRate, "requestRate");
            return this;
        }

        /**
         * The resources that will be requested from downstream.
         */
        public Builder resources(@Nullable Map<String, WebhookSupportResources> resources) {
            this.resources = resources;
            return this;
        }

        public VirtualWebhooks build() {
            return new VirtualWebhooks(
                requestRate, resources);
        }

    }
}
