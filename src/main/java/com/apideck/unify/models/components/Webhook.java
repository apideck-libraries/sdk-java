/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Webhook {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Name of Apideck Unified API
     */
    @JsonProperty("unified_api")
    private UnifiedApiId unifiedApi;

    /**
     * The status of the webhook.
     */
    @JsonProperty("status")
    private Status status;

    /**
     * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled_reason")
    private Optional<? extends DisabledReason> disabledReason;

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonProperty("delivery_url")
    private String deliveryUrl;

    /**
     * The Unify Base URL events from connectors will be sent to after service id is appended.
     */
    @JsonProperty("execute_base_url")
    private String executeBaseUrl;

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonProperty("events")
    private List<WebhookEventType> events;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    @JsonCreator
    public Webhook(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("unified_api") UnifiedApiId unifiedApi,
            @JsonProperty("status") Status status,
            @JsonProperty("disabled_reason") Optional<? extends DisabledReason> disabledReason,
            @JsonProperty("delivery_url") String deliveryUrl,
            @JsonProperty("execute_base_url") String executeBaseUrl,
            @JsonProperty("events") List<WebhookEventType> events,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(disabledReason, "disabledReason");
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        Utils.checkNotNull(executeBaseUrl, "executeBaseUrl");
        Utils.checkNotNull(events, "events");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.description = description;
        this.unifiedApi = unifiedApi;
        this.status = status;
        this.disabledReason = disabledReason;
        this.deliveryUrl = deliveryUrl;
        this.executeBaseUrl = executeBaseUrl;
        this.events = events;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Webhook(
            UnifiedApiId unifiedApi,
            Status status,
            String deliveryUrl,
            String executeBaseUrl,
            List<WebhookEventType> events) {
        this(Optional.empty(), JsonNullable.undefined(), unifiedApi,
            status, Optional.empty(), deliveryUrl,
            executeBaseUrl, events, JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A description of the object.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Name of Apideck Unified API
     */
    @JsonIgnore
    public UnifiedApiId unifiedApi() {
        return unifiedApi;
    }

    /**
     * The status of the webhook.
     */
    @JsonIgnore
    public Status status() {
        return status;
    }

    /**
     * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DisabledReason> disabledReason() {
        return (Optional<DisabledReason>) disabledReason;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    @JsonIgnore
    public String deliveryUrl() {
        return deliveryUrl;
    }

    /**
     * The Unify Base URL events from connectors will be sent to after service id is appended.
     */
    @JsonIgnore
    public String executeBaseUrl() {
        return executeBaseUrl;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    @JsonIgnore
    public List<WebhookEventType> events() {
        return events;
    }

    /**
     * The date and time when the object was last updated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The date and time when the object was created.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Webhook withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public Webhook withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A description of the object.
     */
    public Webhook withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public Webhook withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Name of Apideck Unified API
     */
    public Webhook withUnifiedApi(UnifiedApiId unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }

    /**
     * The status of the webhook.
     */
    public Webhook withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
     */
    public Webhook withDisabledReason(DisabledReason disabledReason) {
        Utils.checkNotNull(disabledReason, "disabledReason");
        this.disabledReason = Optional.ofNullable(disabledReason);
        return this;
    }


    /**
     * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
     */
    public Webhook withDisabledReason(Optional<? extends DisabledReason> disabledReason) {
        Utils.checkNotNull(disabledReason, "disabledReason");
        this.disabledReason = disabledReason;
        return this;
    }

    /**
     * The delivery url of the webhook endpoint.
     */
    public Webhook withDeliveryUrl(String deliveryUrl) {
        Utils.checkNotNull(deliveryUrl, "deliveryUrl");
        this.deliveryUrl = deliveryUrl;
        return this;
    }

    /**
     * The Unify Base URL events from connectors will be sent to after service id is appended.
     */
    public Webhook withExecuteBaseUrl(String executeBaseUrl) {
        Utils.checkNotNull(executeBaseUrl, "executeBaseUrl");
        this.executeBaseUrl = executeBaseUrl;
        return this;
    }

    /**
     * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
     */
    public Webhook withEvents(List<WebhookEventType> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Webhook withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Webhook withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Webhook withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Webhook withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Webhook other = (Webhook) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.disabledReason, other.disabledReason) &&
            Utils.enhancedDeepEquals(this.deliveryUrl, other.deliveryUrl) &&
            Utils.enhancedDeepEquals(this.executeBaseUrl, other.executeBaseUrl) &&
            Utils.enhancedDeepEquals(this.events, other.events) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, description, unifiedApi,
            status, disabledReason, deliveryUrl,
            executeBaseUrl, events, updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Webhook.class,
                "id", id,
                "description", description,
                "unifiedApi", unifiedApi,
                "status", status,
                "disabledReason", disabledReason,
                "deliveryUrl", deliveryUrl,
                "executeBaseUrl", executeBaseUrl,
                "events", events,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> description = JsonNullable.undefined();

        private UnifiedApiId unifiedApi;

        private Status status;

        private Optional<? extends DisabledReason> disabledReason = Optional.empty();

        private String deliveryUrl;

        private String executeBaseUrl;

        private List<WebhookEventType> events;

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Name of Apideck Unified API
         */
        public Builder unifiedApi(UnifiedApiId unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = unifiedApi;
            return this;
        }


        /**
         * The status of the webhook.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
         */
        public Builder disabledReason(DisabledReason disabledReason) {
            Utils.checkNotNull(disabledReason, "disabledReason");
            this.disabledReason = Optional.ofNullable(disabledReason);
            return this;
        }

        /**
         * Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
         */
        public Builder disabledReason(Optional<? extends DisabledReason> disabledReason) {
            Utils.checkNotNull(disabledReason, "disabledReason");
            this.disabledReason = disabledReason;
            return this;
        }


        /**
         * The delivery url of the webhook endpoint.
         */
        public Builder deliveryUrl(String deliveryUrl) {
            Utils.checkNotNull(deliveryUrl, "deliveryUrl");
            this.deliveryUrl = deliveryUrl;
            return this;
        }


        /**
         * The Unify Base URL events from connectors will be sent to after service id is appended.
         */
        public Builder executeBaseUrl(String executeBaseUrl) {
            Utils.checkNotNull(executeBaseUrl, "executeBaseUrl");
            this.executeBaseUrl = executeBaseUrl;
            return this;
        }


        /**
         * The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
         */
        public Builder events(List<WebhookEventType> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }


        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Webhook build() {

            return new Webhook(
                id, description, unifiedApi,
                status, disabledReason, deliveryUrl,
                executeBaseUrl, events, updatedAt,
                createdAt);
        }

    }
}
