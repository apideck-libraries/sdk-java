/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * WebhookSupport - How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
 */

public class WebhookSupport {

    /**
     * Mode of the webhook support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    /**
     * Received events are scoped to connection or across integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_level")
    private Optional<? extends SubscriptionLevel> subscriptionLevel;

    /**
     * How the subscription is managed in the downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managed_via")
    private Optional<? extends ManagedVia> managedVia;

    /**
     * Virtual webhook config for the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhooks")
    private Optional<? extends VirtualWebhooks> virtualWebhooks;

    @JsonCreator
    public WebhookSupport(
            @JsonProperty("mode") Optional<? extends Mode> mode,
            @JsonProperty("subscription_level") Optional<? extends SubscriptionLevel> subscriptionLevel,
            @JsonProperty("managed_via") Optional<? extends ManagedVia> managedVia,
            @JsonProperty("virtual_webhooks") Optional<? extends VirtualWebhooks> virtualWebhooks) {
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(subscriptionLevel, "subscriptionLevel");
        Utils.checkNotNull(managedVia, "managedVia");
        Utils.checkNotNull(virtualWebhooks, "virtualWebhooks");
        this.mode = mode;
        this.subscriptionLevel = subscriptionLevel;
        this.managedVia = managedVia;
        this.virtualWebhooks = virtualWebhooks;
    }
    
    public WebhookSupport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Mode of the webhook support.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mode> mode() {
        return (Optional<Mode>) mode;
    }

    /**
     * Received events are scoped to connection or across integration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubscriptionLevel> subscriptionLevel() {
        return (Optional<SubscriptionLevel>) subscriptionLevel;
    }

    /**
     * How the subscription is managed in the downstream.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ManagedVia> managedVia() {
        return (Optional<ManagedVia>) managedVia;
    }

    /**
     * Virtual webhook config for the connector.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhooks> virtualWebhooks() {
        return (Optional<VirtualWebhooks>) virtualWebhooks;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Mode of the webhook support.
     */
    public WebhookSupport withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Mode of the webhook support.
     */
    public WebhookSupport withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * Received events are scoped to connection or across integration.
     */
    public WebhookSupport withSubscriptionLevel(SubscriptionLevel subscriptionLevel) {
        Utils.checkNotNull(subscriptionLevel, "subscriptionLevel");
        this.subscriptionLevel = Optional.ofNullable(subscriptionLevel);
        return this;
    }

    /**
     * Received events are scoped to connection or across integration.
     */
    public WebhookSupport withSubscriptionLevel(Optional<? extends SubscriptionLevel> subscriptionLevel) {
        Utils.checkNotNull(subscriptionLevel, "subscriptionLevel");
        this.subscriptionLevel = subscriptionLevel;
        return this;
    }

    /**
     * How the subscription is managed in the downstream.
     */
    public WebhookSupport withManagedVia(ManagedVia managedVia) {
        Utils.checkNotNull(managedVia, "managedVia");
        this.managedVia = Optional.ofNullable(managedVia);
        return this;
    }

    /**
     * How the subscription is managed in the downstream.
     */
    public WebhookSupport withManagedVia(Optional<? extends ManagedVia> managedVia) {
        Utils.checkNotNull(managedVia, "managedVia");
        this.managedVia = managedVia;
        return this;
    }

    /**
     * Virtual webhook config for the connector.
     */
    public WebhookSupport withVirtualWebhooks(VirtualWebhooks virtualWebhooks) {
        Utils.checkNotNull(virtualWebhooks, "virtualWebhooks");
        this.virtualWebhooks = Optional.ofNullable(virtualWebhooks);
        return this;
    }

    /**
     * Virtual webhook config for the connector.
     */
    public WebhookSupport withVirtualWebhooks(Optional<? extends VirtualWebhooks> virtualWebhooks) {
        Utils.checkNotNull(virtualWebhooks, "virtualWebhooks");
        this.virtualWebhooks = virtualWebhooks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookSupport other = (WebhookSupport) o;
        return 
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.subscriptionLevel, other.subscriptionLevel) &&
            Objects.deepEquals(this.managedVia, other.managedVia) &&
            Objects.deepEquals(this.virtualWebhooks, other.virtualWebhooks);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mode,
            subscriptionLevel,
            managedVia,
            virtualWebhooks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookSupport.class,
                "mode", mode,
                "subscriptionLevel", subscriptionLevel,
                "managedVia", managedVia,
                "virtualWebhooks", virtualWebhooks);
    }
    
    public final static class Builder {
 
        private Optional<? extends Mode> mode = Optional.empty();
 
        private Optional<? extends SubscriptionLevel> subscriptionLevel = Optional.empty();
 
        private Optional<? extends ManagedVia> managedVia = Optional.empty();
 
        private Optional<? extends VirtualWebhooks> virtualWebhooks = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Mode of the webhook support.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Mode of the webhook support.
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * Received events are scoped to connection or across integration.
         */
        public Builder subscriptionLevel(SubscriptionLevel subscriptionLevel) {
            Utils.checkNotNull(subscriptionLevel, "subscriptionLevel");
            this.subscriptionLevel = Optional.ofNullable(subscriptionLevel);
            return this;
        }

        /**
         * Received events are scoped to connection or across integration.
         */
        public Builder subscriptionLevel(Optional<? extends SubscriptionLevel> subscriptionLevel) {
            Utils.checkNotNull(subscriptionLevel, "subscriptionLevel");
            this.subscriptionLevel = subscriptionLevel;
            return this;
        }

        /**
         * How the subscription is managed in the downstream.
         */
        public Builder managedVia(ManagedVia managedVia) {
            Utils.checkNotNull(managedVia, "managedVia");
            this.managedVia = Optional.ofNullable(managedVia);
            return this;
        }

        /**
         * How the subscription is managed in the downstream.
         */
        public Builder managedVia(Optional<? extends ManagedVia> managedVia) {
            Utils.checkNotNull(managedVia, "managedVia");
            this.managedVia = managedVia;
            return this;
        }

        /**
         * Virtual webhook config for the connector.
         */
        public Builder virtualWebhooks(VirtualWebhooks virtualWebhooks) {
            Utils.checkNotNull(virtualWebhooks, "virtualWebhooks");
            this.virtualWebhooks = Optional.ofNullable(virtualWebhooks);
            return this;
        }

        /**
         * Virtual webhook config for the connector.
         */
        public Builder virtualWebhooks(Optional<? extends VirtualWebhooks> virtualWebhooks) {
            Utils.checkNotNull(virtualWebhooks, "virtualWebhooks");
            this.virtualWebhooks = virtualWebhooks;
            return this;
        }
        
        public WebhookSupport build() {
            return new WebhookSupport(
                mode,
                subscriptionLevel,
                managedVia,
                virtualWebhooks);
        }
    }
}

