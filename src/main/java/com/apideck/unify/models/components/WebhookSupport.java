/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * WebhookSupport
 * 
 * <p>How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
 */
public class WebhookSupport {
    /**
     * Mode of the webhook support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Mode mode;

    /**
     * Received events are scoped to connection or across integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_level")
    private SubscriptionLevel subscriptionLevel;

    /**
     * How the subscription is managed in the downstream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managed_via")
    private ManagedVia managedVia;

    /**
     * Virtual webhook config for the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhooks")
    private VirtualWebhooks virtualWebhooks;

    @JsonCreator
    public WebhookSupport(
            @JsonProperty("mode") @Nullable Mode mode,
            @JsonProperty("subscription_level") @Nullable SubscriptionLevel subscriptionLevel,
            @JsonProperty("managed_via") @Nullable ManagedVia managedVia,
            @JsonProperty("virtual_webhooks") @Nullable VirtualWebhooks virtualWebhooks) {
        this.mode = mode;
        this.subscriptionLevel = subscriptionLevel;
        this.managedVia = managedVia;
        this.virtualWebhooks = virtualWebhooks;
    }
    
    public WebhookSupport() {
        this(null, null, null,
            null);
    }

    /**
     * Mode of the webhook support.
     */
    public Optional<Mode> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Received events are scoped to connection or across integration.
     */
    public Optional<SubscriptionLevel> subscriptionLevel() {
        return Optional.ofNullable(this.subscriptionLevel);
    }

    /**
     * How the subscription is managed in the downstream.
     */
    public Optional<ManagedVia> managedVia() {
        return Optional.ofNullable(this.managedVia);
    }

    /**
     * Virtual webhook config for the connector.
     */
    public Optional<VirtualWebhooks> virtualWebhooks() {
        return Optional.ofNullable(this.virtualWebhooks);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Mode of the webhook support.
     */
    public WebhookSupport withMode(@Nullable Mode mode) {
        this.mode = mode;
        return this;
    }


    /**
     * Received events are scoped to connection or across integration.
     */
    public WebhookSupport withSubscriptionLevel(@Nullable SubscriptionLevel subscriptionLevel) {
        this.subscriptionLevel = subscriptionLevel;
        return this;
    }


    /**
     * How the subscription is managed in the downstream.
     */
    public WebhookSupport withManagedVia(@Nullable ManagedVia managedVia) {
        this.managedVia = managedVia;
        return this;
    }


    /**
     * Virtual webhook config for the connector.
     */
    public WebhookSupport withVirtualWebhooks(@Nullable VirtualWebhooks virtualWebhooks) {
        this.virtualWebhooks = virtualWebhooks;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookSupport other = (WebhookSupport) o;
        return 
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.subscriptionLevel, other.subscriptionLevel) &&
            Utils.enhancedDeepEquals(this.managedVia, other.managedVia) &&
            Utils.enhancedDeepEquals(this.virtualWebhooks, other.virtualWebhooks);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            mode, subscriptionLevel, managedVia,
            virtualWebhooks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookSupport.class,
                "mode", mode,
                "subscriptionLevel", subscriptionLevel,
                "managedVia", managedVia,
                "virtualWebhooks", virtualWebhooks);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Mode mode;

        private SubscriptionLevel subscriptionLevel;

        private ManagedVia managedVia;

        private VirtualWebhooks virtualWebhooks;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Mode of the webhook support.
         */
        public Builder mode(@Nullable Mode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Received events are scoped to connection or across integration.
         */
        public Builder subscriptionLevel(@Nullable SubscriptionLevel subscriptionLevel) {
            this.subscriptionLevel = subscriptionLevel;
            return this;
        }

        /**
         * How the subscription is managed in the downstream.
         */
        public Builder managedVia(@Nullable ManagedVia managedVia) {
            this.managedVia = managedVia;
            return this;
        }

        /**
         * Virtual webhook config for the connector.
         */
        public Builder virtualWebhooks(@Nullable VirtualWebhooks virtualWebhooks) {
            this.virtualWebhooks = virtualWebhooks;
            return this;
        }

        public WebhookSupport build() {
            return new WebhookSupport(
                mode, subscriptionLevel, managedVia,
                virtualWebhooks);
        }

    }
}
