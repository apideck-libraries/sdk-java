/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.apideck.unify.models.components;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class Website {

    /**
     * Unique identifier for the website
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The website URL
     */
    @JsonProperty("url")
    private String url;

    /**
     * The type of website
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends WebsiteType> type;

    @JsonCreator
    public Website(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("url") String url,
            @JsonProperty("type") JsonNullable<? extends WebsiteType> type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.url = url;
        this.type = type;
    }
    
    public Website(
            String url) {
        this(JsonNullable.undefined(), url, JsonNullable.undefined());
    }

    /**
     * Unique identifier for the website
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The website URL
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * The type of website
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<WebsiteType> type() {
        return (JsonNullable<WebsiteType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for the website
     */
    public Website withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier for the website
     */
    public Website withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The website URL
     */
    public Website withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The type of website
     */
    public Website withType(WebsiteType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of website
     */
    public Website withType(JsonNullable<? extends WebsiteType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Website other = (Website) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            url,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Website.class,
                "id", id,
                "url", url,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private String url;
 
        private JsonNullable<? extends WebsiteType> type = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the website
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier for the website
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The website URL
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The type of website
         */
        public Builder type(WebsiteType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of website
         */
        public Builder type(JsonNullable<? extends WebsiteType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Website build() {
            return new Website(
                id,
                url,
                type);
        }
    }
}

