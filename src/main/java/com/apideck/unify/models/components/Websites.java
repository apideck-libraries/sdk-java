/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Websites {
    /**
     * Unique identifier for the website
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The website URL
     */
    @JsonProperty("url")
    private String url;

    /**
     * The type of website
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<ApplicantType> type;

    @JsonCreator
    public Websites(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("url") @Nonnull String url,
            @JsonProperty("type") @Nullable JsonNullable<ApplicantType> type) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.url = Optional.ofNullable(url)
            .orElseThrow(() -> new IllegalArgumentException("url cannot be null"));
        this.type = Optional.ofNullable(type)
            .orElse(JsonNullable.undefined());
    }
    
    public Websites(
            @Nonnull String url) {
        this(null, url, null);
    }

    /**
     * Unique identifier for the website
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * The website URL
     */
    public String url() {
        return this.url;
    }

    /**
     * The type of website
     */
    public JsonNullable<ApplicantType> type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the website
     */
    public Websites withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * The website URL
     */
    public Websites withUrl(@Nonnull String url) {
        this.url = Utils.checkNotNull(url, "url");
        return this;
    }


    /**
     * The type of website
     */
    public Websites withType(@Nullable ApplicantType type) {
        this.type = JsonNullable.of(type);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Websites other = (Websites) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, url, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Websites.class,
                "id", id,
                "url", url,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private String url;

        private JsonNullable<ApplicantType> type;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the website
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The website URL
         */
        public Builder url(@Nonnull String url) {
            this.url = Utils.checkNotNull(url, "url");
            return this;
        }

        /**
         * The type of website
         */
        public Builder type(@Nullable ApplicantType type) {
            this.type = JsonNullable.of(type);
            return this;
        }

        public Websites build() {
            return new Websites(
                id, url, type);
        }

    }
}
