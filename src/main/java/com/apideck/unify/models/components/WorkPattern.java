/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.components;

import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class WorkPattern {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("odd_weeks")
    private OddWeeks oddWeeks;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("even_weeks")
    private EvenWeeks evenWeeks;

    @JsonCreator
    public WorkPattern(
            @JsonProperty("odd_weeks") @Nullable OddWeeks oddWeeks,
            @JsonProperty("even_weeks") @Nullable EvenWeeks evenWeeks) {
        this.oddWeeks = oddWeeks;
        this.evenWeeks = evenWeeks;
    }
    
    public WorkPattern() {
        this(null, null);
    }

    public Optional<OddWeeks> oddWeeks() {
        return Optional.ofNullable(this.oddWeeks);
    }

    public Optional<EvenWeeks> evenWeeks() {
        return Optional.ofNullable(this.evenWeeks);
    }

    public static Builder builder() {
        return new Builder();
    }


    public WorkPattern withOddWeeks(@Nullable OddWeeks oddWeeks) {
        this.oddWeeks = oddWeeks;
        return this;
    }


    public WorkPattern withEvenWeeks(@Nullable EvenWeeks evenWeeks) {
        this.evenWeeks = evenWeeks;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkPattern other = (WorkPattern) o;
        return 
            Utils.enhancedDeepEquals(this.oddWeeks, other.oddWeeks) &&
            Utils.enhancedDeepEquals(this.evenWeeks, other.evenWeeks);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            oddWeeks, evenWeeks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkPattern.class,
                "oddWeeks", oddWeeks,
                "evenWeeks", evenWeeks);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private OddWeeks oddWeeks;

        private EvenWeeks evenWeeks;

        private Builder() {
          // force use of static builder() method
        }

        public Builder oddWeeks(@Nullable OddWeeks oddWeeks) {
            this.oddWeeks = oddWeeks;
            return this;
        }

        public Builder evenWeeks(@Nullable EvenWeeks evenWeeks) {
            this.evenWeeks = evenWeeks;
            return this;
        }

        public WorkPattern build() {
            return new WorkPattern(
                oddWeeks, evenWeeks);
        }

    }
}
