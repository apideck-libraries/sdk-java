/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.components;


import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class WorkPattern {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("odd_weeks")
    private Optional<? extends OddWeeks> oddWeeks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("even_weeks")
    private Optional<? extends EvenWeeks> evenWeeks;

    @JsonCreator
    public WorkPattern(
            @JsonProperty("odd_weeks") Optional<? extends OddWeeks> oddWeeks,
            @JsonProperty("even_weeks") Optional<? extends EvenWeeks> evenWeeks) {
        Utils.checkNotNull(oddWeeks, "oddWeeks");
        Utils.checkNotNull(evenWeeks, "evenWeeks");
        this.oddWeeks = oddWeeks;
        this.evenWeeks = evenWeeks;
    }
    
    public WorkPattern() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OddWeeks> oddWeeks() {
        return (Optional<OddWeeks>) oddWeeks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EvenWeeks> evenWeeks() {
        return (Optional<EvenWeeks>) evenWeeks;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkPattern withOddWeeks(OddWeeks oddWeeks) {
        Utils.checkNotNull(oddWeeks, "oddWeeks");
        this.oddWeeks = Optional.ofNullable(oddWeeks);
        return this;
    }

    public WorkPattern withOddWeeks(Optional<? extends OddWeeks> oddWeeks) {
        Utils.checkNotNull(oddWeeks, "oddWeeks");
        this.oddWeeks = oddWeeks;
        return this;
    }

    public WorkPattern withEvenWeeks(EvenWeeks evenWeeks) {
        Utils.checkNotNull(evenWeeks, "evenWeeks");
        this.evenWeeks = Optional.ofNullable(evenWeeks);
        return this;
    }

    public WorkPattern withEvenWeeks(Optional<? extends EvenWeeks> evenWeeks) {
        Utils.checkNotNull(evenWeeks, "evenWeeks");
        this.evenWeeks = evenWeeks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkPattern other = (WorkPattern) o;
        return 
            Objects.deepEquals(this.oddWeeks, other.oddWeeks) &&
            Objects.deepEquals(this.evenWeeks, other.evenWeeks);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            oddWeeks,
            evenWeeks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkPattern.class,
                "oddWeeks", oddWeeks,
                "evenWeeks", evenWeeks);
    }
    
    public final static class Builder {
 
        private Optional<? extends OddWeeks> oddWeeks = Optional.empty();
 
        private Optional<? extends EvenWeeks> evenWeeks = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder oddWeeks(OddWeeks oddWeeks) {
            Utils.checkNotNull(oddWeeks, "oddWeeks");
            this.oddWeeks = Optional.ofNullable(oddWeeks);
            return this;
        }

        public Builder oddWeeks(Optional<? extends OddWeeks> oddWeeks) {
            Utils.checkNotNull(oddWeeks, "oddWeeks");
            this.oddWeeks = oddWeeks;
            return this;
        }

        public Builder evenWeeks(EvenWeeks evenWeeks) {
            Utils.checkNotNull(evenWeeks, "evenWeeks");
            this.evenWeeks = Optional.ofNullable(evenWeeks);
            return this;
        }

        public Builder evenWeeks(Optional<? extends EvenWeeks> evenWeeks) {
            Utils.checkNotNull(evenWeeks, "evenWeeks");
            this.evenWeeks = evenWeeks;
            return this;
        }
        
        public WorkPattern build() {
            return new WorkPattern(
                oddWeeks,
                evenWeeks);
        }
    }
}

