/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.AttachmentReferenceType;
import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountingAttachmentsAllRequest {
    /**
     * The reference type of the document.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=reference_type")
    private AttachmentReferenceType referenceType;

    /**
     * The reference id of the object to retrieve.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=reference_id")
    private String referenceId;

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Boolean raw;

    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-service-id")
    private String serviceId;

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Long limit;

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private JsonNullable<String> fields;

    @JsonCreator
    public AccountingAttachmentsAllRequest(
            @Nonnull AttachmentReferenceType referenceType,
            @Nonnull String referenceId,
            @Nullable Boolean raw,
            @Nullable String consumerId,
            @Nullable String appId,
            @Nullable String serviceId,
            @Nullable JsonNullable<String> cursor,
            @Nullable Long limit,
            @Nullable JsonNullable<String> fields) {
        this.referenceType = Optional.ofNullable(referenceType)
            .orElseThrow(() -> new IllegalArgumentException("referenceType cannot be null"));
        this.referenceId = Optional.ofNullable(referenceId)
            .orElseThrow(() -> new IllegalArgumentException("referenceId cannot be null"));
        this.raw = Optional.ofNullable(raw)
            .orElse(Builder._SINGLETON_VALUE_Raw.value());
        this.consumerId = consumerId;
        this.appId = appId;
        this.serviceId = serviceId;
        this.cursor = Optional.ofNullable(cursor)
            .orElse(JsonNullable.undefined());
        this.limit = Optional.ofNullable(limit)
            .orElse(Builder._SINGLETON_VALUE_Limit.value());
        this.fields = Optional.ofNullable(fields)
            .orElse(JsonNullable.undefined());
    }
    
    public AccountingAttachmentsAllRequest(
            @Nonnull AttachmentReferenceType referenceType,
            @Nonnull String referenceId) {
        this(referenceType, referenceId, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The reference type of the document.
     */
    public AttachmentReferenceType referenceType() {
        return this.referenceType;
    }

    /**
     * The reference id of the object to retrieve.
     */
    public String referenceId() {
        return this.referenceId;
    }

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public Optional<Boolean> raw() {
        return Optional.ofNullable(this.raw);
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public JsonNullable<String> cursor() {
        return this.cursor;
    }

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public Optional<Long> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public JsonNullable<String> fields() {
        return this.fields;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The reference type of the document.
     */
    public AccountingAttachmentsAllRequest withReferenceType(@Nonnull AttachmentReferenceType referenceType) {
        this.referenceType = Utils.checkNotNull(referenceType, "referenceType");
        return this;
    }


    /**
     * The reference id of the object to retrieve.
     */
    public AccountingAttachmentsAllRequest withReferenceId(@Nonnull String referenceId) {
        this.referenceId = Utils.checkNotNull(referenceId, "referenceId");
        return this;
    }


    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public AccountingAttachmentsAllRequest withRaw(@Nullable Boolean raw) {
        this.raw = raw;
        return this;
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public AccountingAttachmentsAllRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public AccountingAttachmentsAllRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public AccountingAttachmentsAllRequest withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public AccountingAttachmentsAllRequest withCursor(@Nullable String cursor) {
        this.cursor = JsonNullable.of(cursor);
        return this;
    }


    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public AccountingAttachmentsAllRequest withLimit(@Nullable Long limit) {
        this.limit = limit;
        return this;
    }


    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public AccountingAttachmentsAllRequest withFields(@Nullable String fields) {
        this.fields = JsonNullable.of(fields);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingAttachmentsAllRequest other = (AccountingAttachmentsAllRequest) o;
        return 
            Utils.enhancedDeepEquals(this.referenceType, other.referenceType) &&
            Utils.enhancedDeepEquals(this.referenceId, other.referenceId) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            referenceType, referenceId, raw,
            consumerId, appId, serviceId,
            cursor, limit, fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingAttachmentsAllRequest.class,
                "referenceType", referenceType,
                "referenceId", referenceId,
                "raw", raw,
                "consumerId", consumerId,
                "appId", appId,
                "serviceId", serviceId,
                "cursor", cursor,
                "limit", limit,
                "fields", fields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AttachmentReferenceType referenceType;

        private String referenceId;

        private Boolean raw;

        private String consumerId;

        private String appId;

        private String serviceId;

        private JsonNullable<String> cursor;

        private Long limit;

        private JsonNullable<String> fields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The reference type of the document.
         */
        public Builder referenceType(@Nonnull AttachmentReferenceType referenceType) {
            this.referenceType = Utils.checkNotNull(referenceType, "referenceType");
            return this;
        }

        /**
         * The reference id of the object to retrieve.
         */
        public Builder referenceId(@Nonnull String referenceId) {
            this.referenceId = Utils.checkNotNull(referenceId, "referenceId");
            return this;
        }

        /**
         * Include raw response. Mostly used for debugging purposes
         */
        public Builder raw(@Nullable Boolean raw) {
            this.raw = raw;
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
         */
        public Builder cursor(@Nullable String cursor) {
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * Number of results to return. Minimum 1, Maximum 200, Default 20
         */
        public Builder limit(@Nullable Long limit) {
            this.limit = limit;
            return this;
        }

        /**
         * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
         */
        public Builder fields(@Nullable String fields) {
            this.fields = JsonNullable.of(fields);
            return this;
        }

        public AccountingAttachmentsAllRequest build() {
            return new AccountingAttachmentsAllRequest(
                referenceType, referenceId, raw,
                consumerId, appId, serviceId,
                cursor, limit, fields);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Raw =
                new LazySingletonValue<>(
                        "raw",
                        "false",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Long>() {});
    }
}
