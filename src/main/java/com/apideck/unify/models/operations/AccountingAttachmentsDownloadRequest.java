/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.AttachmentReferenceType;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountingAttachmentsDownloadRequest {
    /**
     * The reference type of the document.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=reference_type")
    private AttachmentReferenceType referenceType;

    /**
     * The reference id of the object to retrieve.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=reference_id")
    private String referenceId;

    /**
     * ID of the record you are acting upon.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-service-id")
    private String serviceId;

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private JsonNullable<String> fields;

    @JsonCreator
    public AccountingAttachmentsDownloadRequest(
            @Nonnull AttachmentReferenceType referenceType,
            @Nonnull String referenceId,
            @Nonnull String id,
            @Nullable String consumerId,
            @Nullable String appId,
            @Nullable String serviceId,
            @Nullable JsonNullable<String> fields) {
        this.referenceType = Optional.ofNullable(referenceType)
            .orElseThrow(() -> new IllegalArgumentException("referenceType cannot be null"));
        this.referenceId = Optional.ofNullable(referenceId)
            .orElseThrow(() -> new IllegalArgumentException("referenceId cannot be null"));
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.consumerId = consumerId;
        this.appId = appId;
        this.serviceId = serviceId;
        this.fields = Optional.ofNullable(fields)
            .orElse(JsonNullable.undefined());
    }
    
    public AccountingAttachmentsDownloadRequest(
            @Nonnull AttachmentReferenceType referenceType,
            @Nonnull String referenceId,
            @Nonnull String id) {
        this(referenceType, referenceId, id,
            null, null, null,
            null);
    }

    /**
     * The reference type of the document.
     */
    public AttachmentReferenceType referenceType() {
        return this.referenceType;
    }

    /**
     * The reference id of the object to retrieve.
     */
    public String referenceId() {
        return this.referenceId;
    }

    /**
     * ID of the record you are acting upon.
     */
    public String id() {
        return this.id;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public JsonNullable<String> fields() {
        return this.fields;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The reference type of the document.
     */
    public AccountingAttachmentsDownloadRequest withReferenceType(@Nonnull AttachmentReferenceType referenceType) {
        this.referenceType = Utils.checkNotNull(referenceType, "referenceType");
        return this;
    }


    /**
     * The reference id of the object to retrieve.
     */
    public AccountingAttachmentsDownloadRequest withReferenceId(@Nonnull String referenceId) {
        this.referenceId = Utils.checkNotNull(referenceId, "referenceId");
        return this;
    }


    /**
     * ID of the record you are acting upon.
     */
    public AccountingAttachmentsDownloadRequest withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public AccountingAttachmentsDownloadRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public AccountingAttachmentsDownloadRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public AccountingAttachmentsDownloadRequest withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public AccountingAttachmentsDownloadRequest withFields(@Nullable String fields) {
        this.fields = JsonNullable.of(fields);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingAttachmentsDownloadRequest other = (AccountingAttachmentsDownloadRequest) o;
        return 
            Utils.enhancedDeepEquals(this.referenceType, other.referenceType) &&
            Utils.enhancedDeepEquals(this.referenceId, other.referenceId) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            referenceType, referenceId, id,
            consumerId, appId, serviceId,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingAttachmentsDownloadRequest.class,
                "referenceType", referenceType,
                "referenceId", referenceId,
                "id", id,
                "consumerId", consumerId,
                "appId", appId,
                "serviceId", serviceId,
                "fields", fields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AttachmentReferenceType referenceType;

        private String referenceId;

        private String id;

        private String consumerId;

        private String appId;

        private String serviceId;

        private JsonNullable<String> fields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The reference type of the document.
         */
        public Builder referenceType(@Nonnull AttachmentReferenceType referenceType) {
            this.referenceType = Utils.checkNotNull(referenceType, "referenceType");
            return this;
        }

        /**
         * The reference id of the object to retrieve.
         */
        public Builder referenceId(@Nonnull String referenceId) {
            this.referenceId = Utils.checkNotNull(referenceId, "referenceId");
            return this;
        }

        /**
         * ID of the record you are acting upon.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
         */
        public Builder fields(@Nullable String fields) {
            this.fields = JsonNullable.of(fields);
            return this;
        }

        public AccountingAttachmentsDownloadRequest build() {
            return new AccountingAttachmentsDownloadRequest(
                referenceType, referenceId, id,
                consumerId, appId, serviceId,
                fields);
        }

    }
}
