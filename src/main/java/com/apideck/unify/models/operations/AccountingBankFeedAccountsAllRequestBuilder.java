/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import static com.apideck.unify.operations.Operations.RequestOperation;
import static com.apideck.unify.utils.Exceptions.unchecked;
import static com.apideck.unify.utils.Utils.transform;
import static com.apideck.unify.utils.Utils.toStream;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.operations.AccountingBankFeedAccountsAllOperation;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import com.apideck.unify.utils.pagination.CursorTracker;
import com.apideck.unify.utils.pagination.Paginator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Iterable;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Iterator;
import java.util.stream.Stream;

public class AccountingBankFeedAccountsAllRequestBuilder {
    private final SDKConfiguration sdkConfiguration;
    private AccountingBankFeedAccountsAllRequest request;
    private final Options.Builder optionsBuilder;
    private boolean _setterCalled;

    public AccountingBankFeedAccountsAllRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.optionsBuilder = Options.builder();
    }

    public AccountingBankFeedAccountsAllRequestBuilder retryConfig(RetryConfig retryConfig) {
        this.optionsBuilder.retryConfig(retryConfig);
        return this;
    }

    public AccountingBankFeedAccountsAllRequestBuilder request(@Nonnull AccountingBankFeedAccountsAllRequest request) {
        this.request = Utils.checkNotNull(request, "request");
        return this;
    }

    private AccountingBankFeedAccountsAllRequest _buildRequest() {
        return this.request;
    }
    /**
    * Executes the request and returns the response.
    *
    * @return The response from the server.
    */
    public AccountingBankFeedAccountsAllResponse call() throws Exception {
        Options options = optionsBuilder.build();
        RequestOperation<AccountingBankFeedAccountsAllRequest, AccountingBankFeedAccountsAllResponse> operation
              = new AccountingBankFeedAccountsAllOperation(
                sdkConfiguration,
                options);

        return operation.handleResponse(operation.doRequest(this._buildRequest()));
    }
    
    /**
    * Returns an iterable that performs next page calls till no more pages
    * are returned.
    *
    * <p>The returned iterable can be used in a for-each loop:
    * <pre><code>
    * for (AccountingBankFeedAccountsAllResponse page : builder.callAsIterable()) {
    *     // Process each page
    * }
    * </code></pre>
    * 
    * @return An iterable that can be used to iterate through all pages
    */
    public Iterable<AccountingBankFeedAccountsAllResponse> callAsIterable() {
        AccountingBankFeedAccountsAllRequest request = this.request;
        Options options = optionsBuilder.build();
        RequestOperation<AccountingBankFeedAccountsAllRequest, AccountingBankFeedAccountsAllResponse> operation =
                new AccountingBankFeedAccountsAllOperation(
                    sdkConfiguration,
                    options);
        
        Iterator<HttpResponse<InputStream>> iterator = new Paginator<>(
            request,
            new CursorTracker<>("$.meta.cursors.next", String.class),
            AccountingBankFeedAccountsAllRequest::withCursor,
            nextRequest -> unchecked(() -> operation.doRequest(request)).get());

        return () -> transform(iterator, operation::handleResponse);
    }

    /**
    * Returns a stream that performs next page calls till no more pages
    * are returned.
    **/  
    public Stream<AccountingBankFeedAccountsAllResponse> callAsStream() {
        return toStream(callAsIterable());
    }
}
