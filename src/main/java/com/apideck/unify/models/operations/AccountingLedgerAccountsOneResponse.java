/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.GetLedgerAccountResponse;
import com.apideck.unify.models.components.UnexpectedErrorResponse;
import com.apideck.unify.utils.Response;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Override;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Optional;


public class AccountingLedgerAccountsOneResponse implements Response {
    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<InputStream> rawResponse;

    /**
     * LedgerAccount
     */
    private GetLedgerAccountResponse getLedgerAccountResponse;

    /**
     * Unexpected error
     */
    private UnexpectedErrorResponse unexpectedErrorResponse;

    @JsonCreator
    public AccountingLedgerAccountsOneResponse(
            @Nonnull String contentType,
            int statusCode,
            @Nonnull HttpResponse<InputStream> rawResponse,
            @Nullable GetLedgerAccountResponse getLedgerAccountResponse,
            @Nullable UnexpectedErrorResponse unexpectedErrorResponse) {
        this.contentType = Optional.ofNullable(contentType)
            .orElseThrow(() -> new IllegalArgumentException("contentType cannot be null"));
        this.statusCode = statusCode;
        this.rawResponse = Optional.ofNullable(rawResponse)
            .orElseThrow(() -> new IllegalArgumentException("rawResponse cannot be null"));
        this.getLedgerAccountResponse = getLedgerAccountResponse;
        this.unexpectedErrorResponse = unexpectedErrorResponse;
    }
    
    public AccountingLedgerAccountsOneResponse(
            @Nonnull String contentType,
            int statusCode,
            @Nonnull HttpResponse<InputStream> rawResponse) {
        this(contentType, statusCode, rawResponse,
            null, null);
    }

    /**
     * HTTP response content type for this operation
     */
    public String contentType() {
        return this.contentType;
    }

    /**
     * HTTP response status code for this operation
     */
    public int statusCode() {
        return this.statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public HttpResponse<InputStream> rawResponse() {
        return this.rawResponse;
    }

    /**
     * LedgerAccount
     */
    public Optional<GetLedgerAccountResponse> getLedgerAccountResponse() {
        return Optional.ofNullable(this.getLedgerAccountResponse);
    }

    /**
     * Unexpected error
     */
    public Optional<UnexpectedErrorResponse> unexpectedErrorResponse() {
        return Optional.ofNullable(this.unexpectedErrorResponse);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP response content type for this operation
     */
    public AccountingLedgerAccountsOneResponse withContentType(@Nonnull String contentType) {
        this.contentType = Utils.checkNotNull(contentType, "contentType");
        return this;
    }


    /**
     * HTTP response status code for this operation
     */
    public AccountingLedgerAccountsOneResponse withStatusCode(int statusCode) {
        this.statusCode = statusCode;
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public AccountingLedgerAccountsOneResponse withRawResponse(@Nonnull HttpResponse<InputStream> rawResponse) {
        this.rawResponse = Utils.checkNotNull(rawResponse, "rawResponse");
        return this;
    }


    /**
     * LedgerAccount
     */
    public AccountingLedgerAccountsOneResponse withGetLedgerAccountResponse(@Nullable GetLedgerAccountResponse getLedgerAccountResponse) {
        this.getLedgerAccountResponse = getLedgerAccountResponse;
        return this;
    }


    /**
     * Unexpected error
     */
    public AccountingLedgerAccountsOneResponse withUnexpectedErrorResponse(@Nullable UnexpectedErrorResponse unexpectedErrorResponse) {
        this.unexpectedErrorResponse = unexpectedErrorResponse;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingLedgerAccountsOneResponse other = (AccountingLedgerAccountsOneResponse) o;
        return 
            Utils.enhancedDeepEquals(this.contentType, other.contentType) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse) &&
            Utils.enhancedDeepEquals(this.getLedgerAccountResponse, other.getLedgerAccountResponse) &&
            Utils.enhancedDeepEquals(this.unexpectedErrorResponse, other.unexpectedErrorResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            contentType, statusCode, rawResponse,
            getLedgerAccountResponse, unexpectedErrorResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingLedgerAccountsOneResponse.class,
                "contentType", contentType,
                "statusCode", statusCode,
                "rawResponse", rawResponse,
                "getLedgerAccountResponse", getLedgerAccountResponse,
                "unexpectedErrorResponse", unexpectedErrorResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String contentType;

        private int statusCode;

        private HttpResponse<InputStream> rawResponse;

        private GetLedgerAccountResponse getLedgerAccountResponse;

        private UnexpectedErrorResponse unexpectedErrorResponse;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(@Nonnull String contentType) {
            this.contentType = Utils.checkNotNull(contentType, "contentType");
            return this;
        }

        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(@Nonnull HttpResponse<InputStream> rawResponse) {
            this.rawResponse = Utils.checkNotNull(rawResponse, "rawResponse");
            return this;
        }

        /**
         * LedgerAccount
         */
        public Builder getLedgerAccountResponse(@Nullable GetLedgerAccountResponse getLedgerAccountResponse) {
            this.getLedgerAccountResponse = getLedgerAccountResponse;
            return this;
        }

        /**
         * Unexpected error
         */
        public Builder unexpectedErrorResponse(@Nullable UnexpectedErrorResponse unexpectedErrorResponse) {
            this.unexpectedErrorResponse = unexpectedErrorResponse;
            return this;
        }

        public AccountingLedgerAccountsOneResponse build() {
            return new AccountingLedgerAccountsOneResponse(
                contentType, statusCode, rawResponse,
                getLedgerAccountResponse, unexpectedErrorResponse);
        }

    }
}
