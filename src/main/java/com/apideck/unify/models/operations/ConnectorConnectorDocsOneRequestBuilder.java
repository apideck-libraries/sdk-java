/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.operations.ConnectorConnectorDocsOneOperation;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class ConnectorConnectorDocsOneRequestBuilder {

    private Optional<String> appId = Optional.empty();
    private String id;
    private String docId;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ConnectorConnectorDocsOneRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public ConnectorConnectorDocsOneRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public ConnectorConnectorDocsOneRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public ConnectorConnectorDocsOneRequestBuilder id(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ConnectorConnectorDocsOneRequestBuilder docId(String docId) {
        Utils.checkNotNull(docId, "docId");
        this.docId = docId;
        return this;
    }
                
    public ConnectorConnectorDocsOneRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ConnectorConnectorDocsOneRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ConnectorConnectorDocsOneRequest buildRequest() {

        ConnectorConnectorDocsOneRequest request = new ConnectorConnectorDocsOneRequest(appId,
            id,
            docId);

        return request;
    }

    public ConnectorConnectorDocsOneResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ConnectorConnectorDocsOneRequest, ConnectorConnectorDocsOneResponse> operation
              = new ConnectorConnectorDocsOneOperation(
                sdkConfiguration,
                options);
        ConnectorConnectorDocsOneRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
