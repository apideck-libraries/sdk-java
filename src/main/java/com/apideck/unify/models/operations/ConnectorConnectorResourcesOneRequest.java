/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.UnifiedApiId;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ConnectorConnectorResourcesOneRequest {

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private Optional<String> appId;

    /**
     * ID of the record you are acting upon.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * ID of the resource you are acting upon.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=resource_id")
    private String resourceId;

    /**
     * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=unified_api")
    private Optional<? extends UnifiedApiId> unifiedApi;

    @JsonCreator
    public ConnectorConnectorResourcesOneRequest(
            Optional<String> appId,
            String id,
            String resourceId,
            Optional<? extends UnifiedApiId> unifiedApi) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(resourceId, "resourceId");
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.appId = appId;
        this.id = id;
        this.resourceId = resourceId;
        this.unifiedApi = unifiedApi;
    }
    
    public ConnectorConnectorResourcesOneRequest(
            String id,
            String resourceId) {
        this(Optional.empty(), id, resourceId, Optional.empty());
    }

    /**
     * The ID of your Unify application
     */
    @JsonIgnore
    public Optional<String> appId() {
        return appId;
    }

    /**
     * ID of the record you are acting upon.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * ID of the resource you are acting upon.
     */
    @JsonIgnore
    public String resourceId() {
        return resourceId;
    }

    /**
     * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnifiedApiId> unifiedApi() {
        return (Optional<UnifiedApiId>) unifiedApi;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The ID of your Unify application
     */
    public ConnectorConnectorResourcesOneRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }

    /**
     * The ID of your Unify application
     */
    public ConnectorConnectorResourcesOneRequest withAppId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    /**
     * ID of the record you are acting upon.
     */
    public ConnectorConnectorResourcesOneRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * ID of the resource you are acting upon.
     */
    public ConnectorConnectorResourcesOneRequest withResourceId(String resourceId) {
        Utils.checkNotNull(resourceId, "resourceId");
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
     */
    public ConnectorConnectorResourcesOneRequest withUnifiedApi(UnifiedApiId unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = Optional.ofNullable(unifiedApi);
        return this;
    }

    /**
     * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
     */
    public ConnectorConnectorResourcesOneRequest withUnifiedApi(Optional<? extends UnifiedApiId> unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorConnectorResourcesOneRequest other = (ConnectorConnectorResourcesOneRequest) o;
        return 
            Objects.deepEquals(this.appId, other.appId) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.resourceId, other.resourceId) &&
            Objects.deepEquals(this.unifiedApi, other.unifiedApi);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appId,
            id,
            resourceId,
            unifiedApi);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorConnectorResourcesOneRequest.class,
                "appId", appId,
                "id", id,
                "resourceId", resourceId,
                "unifiedApi", unifiedApi);
    }
    
    public final static class Builder {
 
        private Optional<String> appId = Optional.empty();
 
        private String id;
 
        private String resourceId;
 
        private Optional<? extends UnifiedApiId> unifiedApi = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(Optional<String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        /**
         * ID of the record you are acting upon.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * ID of the resource you are acting upon.
         */
        public Builder resourceId(String resourceId) {
            Utils.checkNotNull(resourceId, "resourceId");
            this.resourceId = resourceId;
            return this;
        }

        /**
         * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
         */
        public Builder unifiedApi(UnifiedApiId unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = Optional.ofNullable(unifiedApi);
            return this;
        }

        /**
         * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
         */
        public Builder unifiedApi(Optional<? extends UnifiedApiId> unifiedApi) {
            Utils.checkNotNull(unifiedApi, "unifiedApi");
            this.unifiedApi = unifiedApi;
            return this;
        }
        
        public ConnectorConnectorResourcesOneRequest build() {
            return new ConnectorConnectorResourcesOneRequest(
                appId,
                id,
                resourceId,
                unifiedApi);
        }
    }
}
