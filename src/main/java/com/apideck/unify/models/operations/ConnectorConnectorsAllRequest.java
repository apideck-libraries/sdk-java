/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.ConnectorsFilter;
import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ConnectorConnectorsAllRequest {
    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<String> cursor;

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Long limit;

    /**
     * Apply filters
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=filter")
    private ConnectorsFilter filter;

    @JsonCreator
    public ConnectorConnectorsAllRequest(
            @Nullable String appId,
            @Nullable JsonNullable<String> cursor,
            @Nullable Long limit,
            @Nullable ConnectorsFilter filter) {
        this.appId = appId;
        this.cursor = Optional.ofNullable(cursor)
            .orElse(JsonNullable.undefined());
        this.limit = Optional.ofNullable(limit)
            .orElse(Builder._SINGLETON_VALUE_Limit.value());
        this.filter = filter;
    }
    
    public ConnectorConnectorsAllRequest() {
        this(null, null, null,
            null);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public JsonNullable<String> cursor() {
        return this.cursor;
    }

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public Optional<Long> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Apply filters
     */
    public Optional<ConnectorsFilter> filter() {
        return Optional.ofNullable(this.filter);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of your Unify application
     */
    public ConnectorConnectorsAllRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public ConnectorConnectorsAllRequest withCursor(@Nullable String cursor) {
        this.cursor = JsonNullable.of(cursor);
        return this;
    }


    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public ConnectorConnectorsAllRequest withLimit(@Nullable Long limit) {
        this.limit = limit;
        return this;
    }


    /**
     * Apply filters
     */
    public ConnectorConnectorsAllRequest withFilter(@Nullable ConnectorsFilter filter) {
        this.filter = filter;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorConnectorsAllRequest other = (ConnectorConnectorsAllRequest) o;
        return 
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.filter, other.filter);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appId, cursor, limit,
            filter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorConnectorsAllRequest.class,
                "appId", appId,
                "cursor", cursor,
                "limit", limit,
                "filter", filter);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String appId;

        private JsonNullable<String> cursor;

        private Long limit;

        private ConnectorsFilter filter;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
         */
        public Builder cursor(@Nullable String cursor) {
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * Number of results to return. Minimum 1, Maximum 200, Default 20
         */
        public Builder limit(@Nullable Long limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Apply filters
         */
        public Builder filter(@Nullable ConnectorsFilter filter) {
            this.filter = filter;
            return this;
        }

        public ConnectorConnectorsAllRequest build() {
            return new ConnectorConnectorsAllRequest(
                appId, cursor, limit,
                filter);
        }


        private static final LazySingletonValue<Long> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Long>() {});
    }
}
