/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class FileStorageFilesExportRequest {
    /**
     * ID of the record you are acting upon.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-service-id")
    private String serviceId;

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private JsonNullable<String> fields;

    /**
     * File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=format")
    private String format;

    @JsonCreator
    public FileStorageFilesExportRequest(
            @Nonnull String id,
            @Nullable String consumerId,
            @Nullable String appId,
            @Nullable String serviceId,
            @Nullable JsonNullable<String> fields,
            @Nonnull String format) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.consumerId = consumerId;
        this.appId = appId;
        this.serviceId = serviceId;
        this.fields = Optional.ofNullable(fields)
            .orElse(JsonNullable.undefined());
        this.format = Optional.ofNullable(format)
            .orElseThrow(() -> new IllegalArgumentException("format cannot be null"));
    }
    
    public FileStorageFilesExportRequest(
            @Nonnull String id,
            @Nonnull String format) {
        this(id, null, null,
            null, null, format);
    }

    /**
     * ID of the record you are acting upon.
     */
    public String id() {
        return this.id;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public JsonNullable<String> fields() {
        return this.fields;
    }

    /**
     * File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
     */
    public String format() {
        return this.format;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the record you are acting upon.
     */
    public FileStorageFilesExportRequest withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public FileStorageFilesExportRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public FileStorageFilesExportRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public FileStorageFilesExportRequest withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public FileStorageFilesExportRequest withFields(@Nullable String fields) {
        this.fields = JsonNullable.of(fields);
        return this;
    }


    /**
     * File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
     */
    public FileStorageFilesExportRequest withFormat(@Nonnull String format) {
        this.format = Utils.checkNotNull(format, "format");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FileStorageFilesExportRequest other = (FileStorageFilesExportRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.format, other.format);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, consumerId, appId,
            serviceId, fields, format);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FileStorageFilesExportRequest.class,
                "id", id,
                "consumerId", consumerId,
                "appId", appId,
                "serviceId", serviceId,
                "fields", fields,
                "format", format);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String consumerId;

        private String appId;

        private String serviceId;

        private JsonNullable<String> fields;

        private String format;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the record you are acting upon.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
         */
        public Builder fields(@Nullable String fields) {
            this.fields = JsonNullable.of(fields);
            return this;
        }

        /**
         * File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
         */
        public Builder format(@Nonnull String format) {
            this.format = Utils.checkNotNull(format, "format");
            return this;
        }

        public FileStorageFilesExportRequest build() {
            return new FileStorageFilesExportRequest(
                id, consumerId, appId,
                serviceId, fields, format);
        }

    }
}
