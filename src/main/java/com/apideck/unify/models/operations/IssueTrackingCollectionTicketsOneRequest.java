/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.utils.LazySingletonValue;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class IssueTrackingCollectionTicketsOneRequest {
    /**
     * ID of the ticket you are acting upon.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ticket_id")
    private String ticketId;

    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-service-id")
    private String serviceId;

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Boolean raw;

    /**
     * The collection ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=collection_id")
    private String collectionId;

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private JsonNullable<String> fields;

    @JsonCreator
    public IssueTrackingCollectionTicketsOneRequest(
            @Nonnull String ticketId,
            @Nullable String consumerId,
            @Nullable String appId,
            @Nullable String serviceId,
            @Nullable Boolean raw,
            @Nonnull String collectionId,
            @Nullable JsonNullable<String> fields) {
        this.ticketId = Optional.ofNullable(ticketId)
            .orElseThrow(() -> new IllegalArgumentException("ticketId cannot be null"));
        this.consumerId = consumerId;
        this.appId = appId;
        this.serviceId = serviceId;
        this.raw = Optional.ofNullable(raw)
            .orElse(Builder._SINGLETON_VALUE_Raw.value());
        this.collectionId = Optional.ofNullable(collectionId)
            .orElseThrow(() -> new IllegalArgumentException("collectionId cannot be null"));
        this.fields = Optional.ofNullable(fields)
            .orElse(JsonNullable.undefined());
    }
    
    public IssueTrackingCollectionTicketsOneRequest(
            @Nonnull String ticketId,
            @Nonnull String collectionId) {
        this(ticketId, null, null,
            null, null, collectionId,
            null);
    }

    /**
     * ID of the ticket you are acting upon.
     */
    public String ticketId() {
        return this.ticketId;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public Optional<Boolean> raw() {
        return Optional.ofNullable(this.raw);
    }

    /**
     * The collection ID
     */
    public String collectionId() {
        return this.collectionId;
    }

    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public JsonNullable<String> fields() {
        return this.fields;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the ticket you are acting upon.
     */
    public IssueTrackingCollectionTicketsOneRequest withTicketId(@Nonnull String ticketId) {
        this.ticketId = Utils.checkNotNull(ticketId, "ticketId");
        return this;
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public IssueTrackingCollectionTicketsOneRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public IssueTrackingCollectionTicketsOneRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public IssueTrackingCollectionTicketsOneRequest withServiceId(@Nullable String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public IssueTrackingCollectionTicketsOneRequest withRaw(@Nullable Boolean raw) {
        this.raw = raw;
        return this;
    }


    /**
     * The collection ID
     */
    public IssueTrackingCollectionTicketsOneRequest withCollectionId(@Nonnull String collectionId) {
        this.collectionId = Utils.checkNotNull(collectionId, "collectionId");
        return this;
    }


    /**
     * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
     */
    public IssueTrackingCollectionTicketsOneRequest withFields(@Nullable String fields) {
        this.fields = JsonNullable.of(fields);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IssueTrackingCollectionTicketsOneRequest other = (IssueTrackingCollectionTicketsOneRequest) o;
        return 
            Utils.enhancedDeepEquals(this.ticketId, other.ticketId) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.collectionId, other.collectionId) &&
            Utils.enhancedDeepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ticketId, consumerId, appId,
            serviceId, raw, collectionId,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IssueTrackingCollectionTicketsOneRequest.class,
                "ticketId", ticketId,
                "consumerId", consumerId,
                "appId", appId,
                "serviceId", serviceId,
                "raw", raw,
                "collectionId", collectionId,
                "fields", fields);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ticketId;

        private String consumerId;

        private String appId;

        private String serviceId;

        private Boolean raw;

        private String collectionId;

        private JsonNullable<String> fields;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the ticket you are acting upon.
         */
        public Builder ticketId(@Nonnull String ticketId) {
            this.ticketId = Utils.checkNotNull(ticketId, "ticketId");
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * Include raw response. Mostly used for debugging purposes
         */
        public Builder raw(@Nullable Boolean raw) {
            this.raw = raw;
            return this;
        }

        /**
         * The collection ID
         */
        public Builder collectionId(@Nonnull String collectionId) {
            this.collectionId = Utils.checkNotNull(collectionId, "collectionId");
            return this;
        }

        /**
         * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: `fields=name,email,addresses.city`&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
         */
        public Builder fields(@Nullable String fields) {
            this.fields = JsonNullable.of(fields);
            return this;
        }

        public IssueTrackingCollectionTicketsOneRequest build() {
            return new IssueTrackingCollectionTicketsOneRequest(
                ticketId, consumerId, appId,
                serviceId, raw, collectionId,
                fields);
        }


        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_Raw =
                new LazySingletonValue<>(
                        "raw",
                        "false",
                        new TypeReference<Boolean>() {});
    }
}
