/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.ApisFilter;
import com.apideck.unify.models.components.ConnectorsFilter;
import com.apideck.unify.models.components.ConsumerInput;
import com.apideck.unify.models.components.CreateWebhookRequest;
import com.apideck.unify.models.components.Session;
import com.apideck.unify.models.components.UnifiedApiId;
import com.apideck.unify.models.components.UpdateConsumerRequest;
import com.apideck.unify.models.components.UpdateWebhookRequest;
import com.apideck.unify.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class SDKMethodInterfaces {


    public interface MethodCallAccountingTaxRatesAll {
        AccountingTaxRatesAllResponse list(
            AccountingTaxRatesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTaxRatesAdd {
        AccountingTaxRatesAddResponse create(
            AccountingTaxRatesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTaxRatesOne {
        AccountingTaxRatesOneResponse get(
            AccountingTaxRatesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTaxRatesUpdate {
        AccountingTaxRatesUpdateResponse update(
            AccountingTaxRatesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTaxRatesDelete {
        AccountingTaxRatesDeleteResponse delete(
            AccountingTaxRatesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillsAll {
        AccountingBillsAllResponse list(
            AccountingBillsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillsAdd {
        AccountingBillsAddResponse create(
            AccountingBillsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillsOne {
        AccountingBillsOneResponse get(
            AccountingBillsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillsUpdate {
        AccountingBillsUpdateResponse update(
            AccountingBillsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillsDelete {
        AccountingBillsDeleteResponse delete(
            AccountingBillsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoicesAll {
        AccountingInvoicesAllResponse list(
            AccountingInvoicesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoicesAdd {
        AccountingInvoicesAddResponse create(
            AccountingInvoicesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoicesOne {
        AccountingInvoicesOneResponse get(
            AccountingInvoicesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoicesUpdate {
        AccountingInvoicesUpdateResponse update(
            AccountingInvoicesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoicesDelete {
        AccountingInvoicesDeleteResponse delete(
            AccountingInvoicesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLedgerAccountsAll {
        AccountingLedgerAccountsAllResponse list(
            AccountingLedgerAccountsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLedgerAccountsAdd {
        AccountingLedgerAccountsAddResponse create(
            AccountingLedgerAccountsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLedgerAccountsOne {
        AccountingLedgerAccountsOneResponse get(
            AccountingLedgerAccountsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLedgerAccountsUpdate {
        AccountingLedgerAccountsUpdateResponse update(
            AccountingLedgerAccountsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLedgerAccountsDelete {
        AccountingLedgerAccountsDeleteResponse delete(
            AccountingLedgerAccountsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoiceItemsAll {
        AccountingInvoiceItemsAllResponse list(
            AccountingInvoiceItemsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoiceItemsAdd {
        AccountingInvoiceItemsAddResponse create(
            AccountingInvoiceItemsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoiceItemsOne {
        AccountingInvoiceItemsOneResponse get(
            AccountingInvoiceItemsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoiceItemsUpdate {
        AccountingInvoiceItemsUpdateResponse update(
            AccountingInvoiceItemsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingInvoiceItemsDelete {
        AccountingInvoiceItemsDeleteResponse delete(
            AccountingInvoiceItemsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCreditNotesAll {
        AccountingCreditNotesAllResponse list(
            AccountingCreditNotesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCreditNotesAdd {
        AccountingCreditNotesAddResponse create(
            AccountingCreditNotesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCreditNotesOne {
        AccountingCreditNotesOneResponse get(
            AccountingCreditNotesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCreditNotesUpdate {
        AccountingCreditNotesUpdateResponse update(
            AccountingCreditNotesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCreditNotesDelete {
        AccountingCreditNotesDeleteResponse delete(
            AccountingCreditNotesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCustomersAll {
        AccountingCustomersAllResponse list(
            AccountingCustomersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCustomersAdd {
        AccountingCustomersAddResponse create(
            AccountingCustomersAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCustomersOne {
        AccountingCustomersOneResponse get(
            AccountingCustomersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCustomersUpdate {
        AccountingCustomersUpdateResponse update(
            AccountingCustomersUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCustomersDelete {
        AccountingCustomersDeleteResponse delete(
            AccountingCustomersDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSuppliersAll {
        AccountingSuppliersAllResponse list(
            AccountingSuppliersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSuppliersAdd {
        AccountingSuppliersAddResponse create(
            AccountingSuppliersAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSuppliersOne {
        AccountingSuppliersOneResponse get(
            AccountingSuppliersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSuppliersUpdate {
        AccountingSuppliersUpdateResponse update(
            AccountingSuppliersUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSuppliersDelete {
        AccountingSuppliersDeleteResponse delete(
            AccountingSuppliersDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPaymentsAll {
        AccountingPaymentsAllResponse list(
            AccountingPaymentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPaymentsAdd {
        AccountingPaymentsAddResponse create(
            AccountingPaymentsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPaymentsOne {
        AccountingPaymentsOneResponse get(
            AccountingPaymentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPaymentsUpdate {
        AccountingPaymentsUpdateResponse update(
            AccountingPaymentsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPaymentsDelete {
        AccountingPaymentsDeleteResponse delete(
            AccountingPaymentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingCompanyInfoOne {
        AccountingCompanyInfoOneResponse get(
            AccountingCompanyInfoOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBalanceSheetOne {
        AccountingBalanceSheetOneResponse get(
            AccountingBalanceSheetOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingProfitAndLossOne {
        AccountingProfitAndLossOneResponse get(
            AccountingProfitAndLossOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingJournalEntriesAll {
        AccountingJournalEntriesAllResponse list(
            AccountingJournalEntriesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingJournalEntriesAdd {
        AccountingJournalEntriesAddResponse create(
            AccountingJournalEntriesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingJournalEntriesOne {
        AccountingJournalEntriesOneResponse get(
            AccountingJournalEntriesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingJournalEntriesUpdate {
        AccountingJournalEntriesUpdateResponse update(
            AccountingJournalEntriesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingJournalEntriesDelete {
        AccountingJournalEntriesDeleteResponse delete(
            AccountingJournalEntriesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPurchaseOrdersAll {
        AccountingPurchaseOrdersAllResponse list(
            AccountingPurchaseOrdersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPurchaseOrdersAdd {
        AccountingPurchaseOrdersAddResponse create(
            AccountingPurchaseOrdersAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPurchaseOrdersOne {
        AccountingPurchaseOrdersOneResponse get(
            AccountingPurchaseOrdersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPurchaseOrdersUpdate {
        AccountingPurchaseOrdersUpdateResponse update(
            AccountingPurchaseOrdersUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingPurchaseOrdersDelete {
        AccountingPurchaseOrdersDeleteResponse delete(
            AccountingPurchaseOrdersDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSubsidiariesAll {
        AccountingSubsidiariesAllResponse list(
            AccountingSubsidiariesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSubsidiariesAdd {
        AccountingSubsidiariesAddResponse create(
            AccountingSubsidiariesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSubsidiariesOne {
        AccountingSubsidiariesOneResponse get(
            AccountingSubsidiariesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSubsidiariesUpdate {
        AccountingSubsidiariesUpdateResponse update(
            AccountingSubsidiariesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingSubsidiariesDelete {
        AccountingSubsidiariesDeleteResponse delete(
            AccountingSubsidiariesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLocationsAll {
        AccountingLocationsAllResponse list(
            AccountingLocationsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLocationsAdd {
        AccountingLocationsAddResponse create(
            AccountingLocationsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLocationsOne {
        AccountingLocationsOneResponse get(
            AccountingLocationsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLocationsUpdate {
        AccountingLocationsUpdateResponse update(
            AccountingLocationsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingLocationsDelete {
        AccountingLocationsDeleteResponse delete(
            AccountingLocationsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingDepartmentsAll {
        AccountingDepartmentsAllResponse list(
            AccountingDepartmentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingDepartmentsAdd {
        AccountingDepartmentsAddResponse create(
            AccountingDepartmentsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingDepartmentsOne {
        AccountingDepartmentsOneResponse get(
            AccountingDepartmentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingDepartmentsUpdate {
        AccountingDepartmentsUpdateResponse update(
            AccountingDepartmentsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingDepartmentsDelete {
        AccountingDepartmentsDeleteResponse delete(
            AccountingDepartmentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingAttachmentsAll {
        AccountingAttachmentsAllResponse list(
            AccountingAttachmentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingAttachmentsOne {
        AccountingAttachmentsOneResponse get(
            AccountingAttachmentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingAttachmentsDelete {
        AccountingAttachmentsDeleteResponse delete(
            AccountingAttachmentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingAttachmentsDownload {
        AccountingAttachmentsDownloadResponse download(
            AccountingAttachmentsDownloadRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTrackingCategoriesAll {
        AccountingTrackingCategoriesAllResponse list(
            AccountingTrackingCategoriesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTrackingCategoriesAdd {
        AccountingTrackingCategoriesAddResponse create(
            AccountingTrackingCategoriesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTrackingCategoriesOne {
        AccountingTrackingCategoriesOneResponse get(
            AccountingTrackingCategoriesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTrackingCategoriesUpdate {
        AccountingTrackingCategoriesUpdateResponse update(
            AccountingTrackingCategoriesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingTrackingCategoriesDelete {
        AccountingTrackingCategoriesDeleteResponse delete(
            AccountingTrackingCategoriesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillPaymentsAll {
        AccountingBillPaymentsAllResponse list(
            AccountingBillPaymentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillPaymentsAdd {
        AccountingBillPaymentsAddResponse create(
            AccountingBillPaymentsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillPaymentsOne {
        AccountingBillPaymentsOneResponse get(
            AccountingBillPaymentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillPaymentsUpdate {
        AccountingBillPaymentsUpdateResponse update(
            AccountingBillPaymentsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingBillPaymentsDelete {
        AccountingBillPaymentsDeleteResponse delete(
            AccountingBillPaymentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingExpensesAll {
        AccountingExpensesAllResponse list(
            AccountingExpensesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingExpensesAdd {
        AccountingExpensesAddResponse create(
            AccountingExpensesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingExpensesOne {
        AccountingExpensesOneResponse get(
            AccountingExpensesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingExpensesUpdate {
        AccountingExpensesUpdateResponse update(
            AccountingExpensesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAccountingExpensesDelete {
        AccountingExpensesDeleteResponse delete(
            AccountingExpensesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsJobsAll {
        AtsJobsAllResponse list(
            AtsJobsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsJobsOne {
        AtsJobsOneResponse get(
            AtsJobsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicantsAll {
        AtsApplicantsAllResponse list(
            AtsApplicantsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicantsAdd {
        AtsApplicantsAddResponse create(
            AtsApplicantsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicantsOne {
        AtsApplicantsOneResponse get(
            AtsApplicantsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicantsUpdate {
        AtsApplicantsUpdateResponse update(
            AtsApplicantsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicantsDelete {
        AtsApplicantsDeleteResponse delete(
            AtsApplicantsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicationsAll {
        AtsApplicationsAllResponse list(
            AtsApplicationsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicationsAdd {
        AtsApplicationsAddResponse create(
            AtsApplicationsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicationsOne {
        AtsApplicationsOneResponse get(
            AtsApplicationsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicationsUpdate {
        AtsApplicationsUpdateResponse update(
            AtsApplicationsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAtsApplicationsDelete {
        AtsApplicationsDeleteResponse delete(
            AtsApplicationsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmCompaniesAll {
        CrmCompaniesAllResponse list(
            CrmCompaniesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmCompaniesAdd {
        CrmCompaniesAddResponse create(
            CrmCompaniesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmCompaniesOne {
        CrmCompaniesOneResponse get(
            CrmCompaniesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmCompaniesUpdate {
        CrmCompaniesUpdateResponse update(
            CrmCompaniesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmCompaniesDelete {
        CrmCompaniesDeleteResponse delete(
            CrmCompaniesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmContactsAll {
        CrmContactsAllResponse list(
            CrmContactsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmContactsAdd {
        CrmContactsAddResponse create(
            CrmContactsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmContactsOne {
        CrmContactsOneResponse get(
            CrmContactsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmContactsUpdate {
        CrmContactsUpdateResponse update(
            CrmContactsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmContactsDelete {
        CrmContactsDeleteResponse delete(
            CrmContactsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmOpportunitiesAll {
        CrmOpportunitiesAllResponse list(
            CrmOpportunitiesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmOpportunitiesAdd {
        CrmOpportunitiesAddResponse create(
            CrmOpportunitiesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmOpportunitiesOne {
        CrmOpportunitiesOneResponse get(
            CrmOpportunitiesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmOpportunitiesUpdate {
        CrmOpportunitiesUpdateResponse update(
            CrmOpportunitiesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmOpportunitiesDelete {
        CrmOpportunitiesDeleteResponse delete(
            CrmOpportunitiesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmLeadsAll {
        CrmLeadsAllResponse list(
            CrmLeadsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmLeadsAdd {
        CrmLeadsAddResponse create(
            CrmLeadsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmLeadsOne {
        CrmLeadsOneResponse get(
            CrmLeadsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmLeadsUpdate {
        CrmLeadsUpdateResponse update(
            CrmLeadsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmLeadsDelete {
        CrmLeadsDeleteResponse delete(
            CrmLeadsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmPipelinesAll {
        CrmPipelinesAllResponse list(
            CrmPipelinesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmPipelinesAdd {
        CrmPipelinesAddResponse create(
            CrmPipelinesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmPipelinesOne {
        CrmPipelinesOneResponse get(
            CrmPipelinesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmPipelinesUpdate {
        CrmPipelinesUpdateResponse update(
            CrmPipelinesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmPipelinesDelete {
        CrmPipelinesDeleteResponse delete(
            CrmPipelinesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmNotesAll {
        CrmNotesAllResponse list(
            CrmNotesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmNotesAdd {
        CrmNotesAddResponse create(
            CrmNotesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmNotesOne {
        CrmNotesOneResponse get(
            CrmNotesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmNotesUpdate {
        CrmNotesUpdateResponse update(
            CrmNotesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmNotesDelete {
        CrmNotesDeleteResponse delete(
            CrmNotesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmUsersAll {
        CrmUsersAllResponse list(
            CrmUsersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmUsersAdd {
        CrmUsersAddResponse create(
            CrmUsersAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmUsersOne {
        CrmUsersOneResponse get(
            CrmUsersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmUsersUpdate {
        CrmUsersUpdateResponse update(
            CrmUsersUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmUsersDelete {
        CrmUsersDeleteResponse delete(
            CrmUsersDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmActivitiesAll {
        CrmActivitiesAllResponse list(
            CrmActivitiesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmActivitiesAdd {
        CrmActivitiesAddResponse create(
            CrmActivitiesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmActivitiesOne {
        CrmActivitiesOneResponse get(
            CrmActivitiesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmActivitiesUpdate {
        CrmActivitiesUpdateResponse update(
            CrmActivitiesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCrmActivitiesDelete {
        CrmActivitiesDeleteResponse delete(
            CrmActivitiesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceOrdersAll {
        EcommerceOrdersAllResponse list(
            EcommerceOrdersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceOrdersOne {
        EcommerceOrdersOneResponse get(
            EcommerceOrdersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceProductsAll {
        EcommerceProductsAllResponse list(
            EcommerceProductsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceProductsOne {
        EcommerceProductsOneResponse get(
            EcommerceProductsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceCustomersAll {
        EcommerceCustomersAllResponse list(
            EcommerceCustomersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceCustomersOne {
        EcommerceCustomersOneResponse get(
            EcommerceCustomersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEcommerceStoresOne {
        EcommerceStoresOneResponse get(
            EcommerceStoresOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesAll {
        FileStorageFilesAllResponse list(
            FileStorageFilesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesSearch {
        FileStorageFilesSearchResponse search(
            FileStorageFilesSearchRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesOne {
        FileStorageFilesOneResponse get(
            FileStorageFilesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesUpdate {
        FileStorageFilesUpdateResponse update(
            FileStorageFilesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesDelete {
        FileStorageFilesDeleteResponse delete(
            FileStorageFilesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesDownload {
        FileStorageFilesDownloadResponse download(
            FileStorageFilesDownloadRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFilesExport {
        FileStorageFilesExportResponse export(
            FileStorageFilesExportRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFoldersAdd {
        FileStorageFoldersAddResponse create(
            FileStorageFoldersAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFoldersOne {
        FileStorageFoldersOneResponse get(
            FileStorageFoldersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFoldersUpdate {
        FileStorageFoldersUpdateResponse update(
            FileStorageFoldersUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFoldersDelete {
        FileStorageFoldersDeleteResponse delete(
            FileStorageFoldersDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageFoldersCopy {
        FileStorageFoldersCopyResponse copy(
            FileStorageFoldersCopyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageSharedLinksAll {
        FileStorageSharedLinksAllResponse list(
            FileStorageSharedLinksAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageSharedLinksAdd {
        FileStorageSharedLinksAddResponse create(
            FileStorageSharedLinksAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageSharedLinksOne {
        FileStorageSharedLinksOneResponse get(
            FileStorageSharedLinksOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageSharedLinksUpdate {
        FileStorageSharedLinksUpdateResponse update(
            FileStorageSharedLinksUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageSharedLinksDelete {
        FileStorageSharedLinksDeleteResponse delete(
            FileStorageSharedLinksDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageUploadSessionsAdd {
        FileStorageUploadSessionsAddResponse create(
            FileStorageUploadSessionsAddRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageUploadSessionsOne {
        FileStorageUploadSessionsOneResponse get(
            FileStorageUploadSessionsOneRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageUploadSessionsDelete {
        FileStorageUploadSessionsDeleteResponse delete(
            FileStorageUploadSessionsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageUploadSessionsFinish {
        FileStorageUploadSessionsFinishResponse finish(
            FileStorageUploadSessionsFinishRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDrivesAll {
        FileStorageDrivesAllResponse list(
            FileStorageDrivesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDrivesAdd {
        FileStorageDrivesAddResponse create(
            FileStorageDrivesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDrivesOne {
        FileStorageDrivesOneResponse get(
            FileStorageDrivesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDrivesUpdate {
        FileStorageDrivesUpdateResponse update(
            FileStorageDrivesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDrivesDelete {
        FileStorageDrivesDeleteResponse delete(
            FileStorageDrivesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDriveGroupsAll {
        FileStorageDriveGroupsAllResponse list(
            FileStorageDriveGroupsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDriveGroupsAdd {
        FileStorageDriveGroupsAddResponse create(
            FileStorageDriveGroupsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDriveGroupsOne {
        FileStorageDriveGroupsOneResponse get(
            FileStorageDriveGroupsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDriveGroupsUpdate {
        FileStorageDriveGroupsUpdateResponse update(
            FileStorageDriveGroupsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallFileStorageDriveGroupsDelete {
        FileStorageDriveGroupsDeleteResponse delete(
            FileStorageDriveGroupsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeesAll {
        HrisEmployeesAllResponse list(
            HrisEmployeesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeesAdd {
        HrisEmployeesAddResponse create(
            HrisEmployeesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeesOne {
        HrisEmployeesOneResponse get(
            HrisEmployeesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeesUpdate {
        HrisEmployeesUpdateResponse update(
            HrisEmployeesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeesDelete {
        HrisEmployeesDeleteResponse delete(
            HrisEmployeesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisCompaniesAll {
        HrisCompaniesAllResponse list(
            HrisCompaniesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisCompaniesAdd {
        HrisCompaniesAddResponse create(
            HrisCompaniesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisCompaniesOne {
        HrisCompaniesOneResponse get(
            HrisCompaniesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisCompaniesUpdate {
        HrisCompaniesUpdateResponse update(
            HrisCompaniesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisCompaniesDelete {
        HrisCompaniesDeleteResponse delete(
            HrisCompaniesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisDepartmentsAll {
        HrisDepartmentsAllResponse list(
            HrisDepartmentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisDepartmentsAdd {
        HrisDepartmentsAddResponse create(
            HrisDepartmentsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisDepartmentsOne {
        HrisDepartmentsOneResponse get(
            HrisDepartmentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisDepartmentsUpdate {
        HrisDepartmentsUpdateResponse update(
            HrisDepartmentsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisDepartmentsDelete {
        HrisDepartmentsDeleteResponse delete(
            HrisDepartmentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisPayrollsAll {
        HrisPayrollsAllResponse list(
            HrisPayrollsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisPayrollsOne {
        HrisPayrollsOneResponse get(
            HrisPayrollsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeePayrollsAll {
        HrisEmployeePayrollsAllResponse list(
            HrisEmployeePayrollsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeePayrollsOne {
        HrisEmployeePayrollsOneResponse get(
            HrisEmployeePayrollsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisEmployeeSchedulesAll {
        HrisEmployeeSchedulesAllResponse list(
            HrisEmployeeSchedulesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisTimeOffRequestsAll {
        HrisTimeOffRequestsAllResponse list(
            HrisTimeOffRequestsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisTimeOffRequestsAdd {
        HrisTimeOffRequestsAddResponse create(
            HrisTimeOffRequestsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisTimeOffRequestsOne {
        HrisTimeOffRequestsOneResponse get(
            HrisTimeOffRequestsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisTimeOffRequestsUpdate {
        HrisTimeOffRequestsUpdateResponse update(
            HrisTimeOffRequestsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallHrisTimeOffRequestsDelete {
        HrisTimeOffRequestsDeleteResponse delete(
            HrisTimeOffRequestsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSmsMessagesAll {
        SmsMessagesAllResponse list(
            SmsMessagesAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSmsMessagesAdd {
        SmsMessagesAddResponse create(
            SmsMessagesAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSmsMessagesOne {
        SmsMessagesOneResponse get(
            SmsMessagesOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSmsMessagesUpdate {
        SmsMessagesUpdateResponse update(
            SmsMessagesUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSmsMessagesDelete {
        SmsMessagesDeleteResponse delete(
            SmsMessagesDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionsAll {
        IssueTrackingCollectionsAllResponse list(
            IssueTrackingCollectionsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionsOne {
        IssueTrackingCollectionsOneResponse get(
            IssueTrackingCollectionsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketsAll {
        IssueTrackingCollectionTicketsAllResponse list(
            IssueTrackingCollectionTicketsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketsAdd {
        IssueTrackingCollectionTicketsAddResponse create(
            IssueTrackingCollectionTicketsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketsOne {
        IssueTrackingCollectionTicketsOneResponse get(
            IssueTrackingCollectionTicketsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketsUpdate {
        IssueTrackingCollectionTicketsUpdateResponse update(
            IssueTrackingCollectionTicketsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketsDelete {
        IssueTrackingCollectionTicketsDeleteResponse delete(
            IssueTrackingCollectionTicketsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketCommentsAll {
        IssueTrackingCollectionTicketCommentsAllResponse list(
            IssueTrackingCollectionTicketCommentsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketCommentsAdd {
        IssueTrackingCollectionTicketCommentsAddResponse create(
            IssueTrackingCollectionTicketCommentsAddRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketCommentsOne {
        IssueTrackingCollectionTicketCommentsOneResponse get(
            IssueTrackingCollectionTicketCommentsOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketCommentsUpdate {
        IssueTrackingCollectionTicketCommentsUpdateResponse update(
            IssueTrackingCollectionTicketCommentsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTicketCommentsDelete {
        IssueTrackingCollectionTicketCommentsDeleteResponse delete(
            IssueTrackingCollectionTicketCommentsDeleteRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionUsersAll {
        IssueTrackingCollectionUsersAllResponse list(
            IssueTrackingCollectionUsersAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionUsersOne {
        IssueTrackingCollectionUsersOneResponse get(
            IssueTrackingCollectionUsersOneRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallIssueTrackingCollectionTagsAll {
        IssueTrackingCollectionTagsAllResponse list(
            IssueTrackingCollectionTagsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorConnectorsAll {
        ConnectorConnectorsAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<? extends ConnectorsFilter> filter,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorConnectorsOne {
        ConnectorConnectorsOneResponse get(
            Optional<String> appId,
            String id,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorConnectorDocsOne {
        ConnectorConnectorDocsOneResponse get(
            Optional<String> appId,
            String id,
            String docId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorConnectorResourcesOne {
        ConnectorConnectorResourcesOneResponse get(
            Optional<String> appId,
            String id,
            String resourceId,
            Optional<? extends UnifiedApiId> unifiedApi,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorApisAll {
        ConnectorApisAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<? extends ApisFilter> filter,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorApisOne {
        ConnectorApisOneResponse get(
            Optional<String> appId,
            String id,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorApiResourcesOne {
        ConnectorApiResourcesOneResponse get(
            Optional<String> appId,
            String id,
            String resourceId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConnectorApiResourceCoverageOne {
        ConnectorApiResourceCoverageOneResponse get(
            Optional<String> appId,
            String id,
            String resourceId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumersAdd {
        VaultConsumersAddResponse create(
            Optional<String> appId,
            ConsumerInput consumer,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumersAll {
        VaultConsumersAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumersOne {
        VaultConsumersOneResponse get(
            Optional<String> appId,
            String consumerId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumersUpdate {
        VaultConsumersUpdateResponse update(
            Optional<String> appId,
            String consumerId,
            UpdateConsumerRequest updateConsumerRequest,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumersDelete {
        VaultConsumersDeleteResponse delete(
            Optional<String> appId,
            String consumerId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConsumerRequestCountsAll {
        VaultConsumerRequestCountsAllResponse list(
            Optional<String> appId,
            String consumerId,
            String startDatetime,
            String endDatetime,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsAll {
        VaultConnectionsAllResponse list(
            Optional<String> consumerId,
            Optional<String> appId,
            Optional<String> api,
            Optional<Boolean> configured,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsOne {
        VaultConnectionsOneResponse get(
            Optional<String> consumerId,
            Optional<String> appId,
            String serviceId,
            String unifiedApi,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsUpdate {
        VaultConnectionsUpdateResponse update(
            VaultConnectionsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsDelete {
        VaultConnectionsDeleteResponse delete(
            Optional<String> consumerId,
            Optional<String> appId,
            String serviceId,
            String unifiedApi,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsImport {
        VaultConnectionsImportResponse imports(
            VaultConnectionsImportRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionsToken {
        VaultConnectionsTokenResponse token(
            VaultConnectionsTokenRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultValidateConnectionState {
        VaultValidateConnectionStateResponse state(
            VaultValidateConnectionStateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultCreateCallbackState {
        VaultCreateCallbackStateResponse state(
            VaultCreateCallbackStateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionSettingsAll {
        VaultConnectionSettingsAllResponse list(
            VaultConnectionSettingsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionSettingsUpdate {
        VaultConnectionSettingsUpdateResponse update(
            VaultConnectionSettingsUpdateRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultCustomFieldsAll {
        VaultCustomFieldsAllResponse list(
            VaultCustomFieldsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultConnectionCustomMappingsAll {
        VaultConnectionCustomMappingsAllResponse list(
            VaultConnectionCustomMappingsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultCustomMappingsAll {
        VaultCustomMappingsAllResponse list(
            Optional<String> consumerId,
            Optional<String> appId,
            String unifiedApi,
            String serviceId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultSessionsCreate {
        VaultSessionsCreateResponse create(
            Optional<String> consumerId,
            Optional<String> appId,
            Optional<? extends Session> session,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallVaultLogsAll {
        VaultLogsAllResponse list(
            VaultLogsAllRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWebhookWebhooksAll {
        WebhookWebhooksAllResponse list(
            Optional<String> appId,
            JsonNullable<String> cursor,
            Optional<Long> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWebhookWebhooksAdd {
        WebhookWebhooksAddResponse create(
            Optional<String> appId,
            CreateWebhookRequest createWebhookRequest,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWebhookWebhooksOne {
        WebhookWebhooksOneResponse get(
            String id,
            Optional<String> appId,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWebhookWebhooksUpdate {
        WebhookWebhooksUpdateResponse update(
            String id,
            Optional<String> appId,
            UpdateWebhookRequest updateWebhookRequest,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallWebhookWebhooksDelete {
        WebhookWebhooksDeleteResponse delete(
            String id,
            Optional<String> appId,
            Optional<Options> options) throws Exception;
    }


}
