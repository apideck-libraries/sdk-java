/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class VaultConnectionSettingsAllRequest {
    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Unified API
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=unified_api")
    private String unifiedApi;

    /**
     * Service ID of the resource to return
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=service_id")
    private String serviceId;

    /**
     * Name of the resource (plural)
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=resource")
    private String resource;

    @JsonCreator
    public VaultConnectionSettingsAllRequest(
            @Nullable String consumerId,
            @Nullable String appId,
            @Nonnull String unifiedApi,
            @Nonnull String serviceId,
            @Nonnull String resource) {
        this.consumerId = consumerId;
        this.appId = appId;
        this.unifiedApi = Optional.ofNullable(unifiedApi)
            .orElseThrow(() -> new IllegalArgumentException("unifiedApi cannot be null"));
        this.serviceId = Optional.ofNullable(serviceId)
            .orElseThrow(() -> new IllegalArgumentException("serviceId cannot be null"));
        this.resource = Optional.ofNullable(resource)
            .orElseThrow(() -> new IllegalArgumentException("resource cannot be null"));
    }
    
    public VaultConnectionSettingsAllRequest(
            @Nonnull String unifiedApi,
            @Nonnull String serviceId,
            @Nonnull String resource) {
        this(null, null, unifiedApi,
            serviceId, resource);
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Unified API
     */
    public String unifiedApi() {
        return this.unifiedApi;
    }

    /**
     * Service ID of the resource to return
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * Name of the resource (plural)
     */
    public String resource() {
        return this.resource;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public VaultConnectionSettingsAllRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public VaultConnectionSettingsAllRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Unified API
     */
    public VaultConnectionSettingsAllRequest withUnifiedApi(@Nonnull String unifiedApi) {
        this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
        return this;
    }


    /**
     * Service ID of the resource to return
     */
    public VaultConnectionSettingsAllRequest withServiceId(@Nonnull String serviceId) {
        this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
        return this;
    }


    /**
     * Name of the resource (plural)
     */
    public VaultConnectionSettingsAllRequest withResource(@Nonnull String resource) {
        this.resource = Utils.checkNotNull(resource, "resource");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VaultConnectionSettingsAllRequest other = (VaultConnectionSettingsAllRequest) o;
        return 
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.unifiedApi, other.unifiedApi) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.resource, other.resource);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            consumerId, appId, unifiedApi,
            serviceId, resource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VaultConnectionSettingsAllRequest.class,
                "consumerId", consumerId,
                "appId", appId,
                "unifiedApi", unifiedApi,
                "serviceId", serviceId,
                "resource", resource);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String consumerId;

        private String appId;

        private String unifiedApi;

        private String serviceId;

        private String resource;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Unified API
         */
        public Builder unifiedApi(@Nonnull String unifiedApi) {
            this.unifiedApi = Utils.checkNotNull(unifiedApi, "unifiedApi");
            return this;
        }

        /**
         * Service ID of the resource to return
         */
        public Builder serviceId(@Nonnull String serviceId) {
            this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
            return this;
        }

        /**
         * Name of the resource (plural)
         */
        public Builder resource(@Nonnull String resource) {
            this.resource = Utils.checkNotNull(resource, "resource");
            return this;
        }

        public VaultConnectionSettingsAllRequest build() {
            return new VaultConnectionSettingsAllRequest(
                consumerId, appId, unifiedApi,
                serviceId, resource);
        }

    }
}
