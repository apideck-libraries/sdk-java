/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class VaultConnectionsAllRequest {
    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private String consumerId;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * Scope results to Unified API
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api")
    private String api;

    /**
     * Scopes results to connections that have been configured or not
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=configured")
    private Boolean configured;

    @JsonCreator
    public VaultConnectionsAllRequest(
            @Nullable String consumerId,
            @Nullable String appId,
            @Nullable String api,
            @Nullable Boolean configured) {
        this.consumerId = consumerId;
        this.appId = appId;
        this.api = api;
        this.configured = configured;
    }
    
    public VaultConnectionsAllRequest() {
        this(null, null, null,
            null);
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<String> consumerId() {
        return Optional.ofNullable(this.consumerId);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Scope results to Unified API
     */
    public Optional<String> api() {
        return Optional.ofNullable(this.api);
    }

    /**
     * Scopes results to connections that have been configured or not
     */
    public Optional<Boolean> configured() {
        return Optional.ofNullable(this.configured);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the consumer which you want to get or push data from
     */
    public VaultConnectionsAllRequest withConsumerId(@Nullable String consumerId) {
        this.consumerId = consumerId;
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public VaultConnectionsAllRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * Scope results to Unified API
     */
    public VaultConnectionsAllRequest withApi(@Nullable String api) {
        this.api = api;
        return this;
    }


    /**
     * Scopes results to connections that have been configured or not
     */
    public VaultConnectionsAllRequest withConfigured(@Nullable Boolean configured) {
        this.configured = configured;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VaultConnectionsAllRequest other = (VaultConnectionsAllRequest) o;
        return 
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.api, other.api) &&
            Utils.enhancedDeepEquals(this.configured, other.configured);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            consumerId, appId, api,
            configured);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VaultConnectionsAllRequest.class,
                "consumerId", consumerId,
                "appId", appId,
                "api", api,
                "configured", configured);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String consumerId;

        private String appId;

        private String api;

        private Boolean configured;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder consumerId(@Nullable String consumerId) {
            this.consumerId = consumerId;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Scope results to Unified API
         */
        public Builder api(@Nullable String api) {
            this.api = api;
            return this;
        }

        /**
         * Scopes results to connections that have been configured or not
         */
        public Builder configured(@Nullable Boolean configured) {
            this.configured = configured;
            return this;
        }

        public VaultConnectionsAllRequest build() {
            return new VaultConnectionsAllRequest(
                consumerId, appId, api,
                configured);
        }

    }
}
