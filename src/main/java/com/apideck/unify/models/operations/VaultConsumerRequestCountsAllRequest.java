/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class VaultConsumerRequestCountsAllRequest {
    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private String appId;

    /**
     * ID of the consumer to return
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=consumer_id")
    private String consumerId;

    /**
     * Scopes results to requests that happened after datetime
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_datetime")
    private String startDatetime;

    /**
     * Scopes results to requests that happened before datetime
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_datetime")
    private String endDatetime;

    @JsonCreator
    public VaultConsumerRequestCountsAllRequest(
            @Nullable String appId,
            @Nonnull String consumerId,
            @Nonnull String startDatetime,
            @Nonnull String endDatetime) {
        this.appId = appId;
        this.consumerId = Optional.ofNullable(consumerId)
            .orElseThrow(() -> new IllegalArgumentException("consumerId cannot be null"));
        this.startDatetime = Optional.ofNullable(startDatetime)
            .orElseThrow(() -> new IllegalArgumentException("startDatetime cannot be null"));
        this.endDatetime = Optional.ofNullable(endDatetime)
            .orElseThrow(() -> new IllegalArgumentException("endDatetime cannot be null"));
    }
    
    public VaultConsumerRequestCountsAllRequest(
            @Nonnull String consumerId,
            @Nonnull String startDatetime,
            @Nonnull String endDatetime) {
        this(null, consumerId, startDatetime,
            endDatetime);
    }

    /**
     * The ID of your Unify application
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * ID of the consumer to return
     */
    public String consumerId() {
        return this.consumerId;
    }

    /**
     * Scopes results to requests that happened after datetime
     */
    public String startDatetime() {
        return this.startDatetime;
    }

    /**
     * Scopes results to requests that happened before datetime
     */
    public String endDatetime() {
        return this.endDatetime;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of your Unify application
     */
    public VaultConsumerRequestCountsAllRequest withAppId(@Nullable String appId) {
        this.appId = appId;
        return this;
    }


    /**
     * ID of the consumer to return
     */
    public VaultConsumerRequestCountsAllRequest withConsumerId(@Nonnull String consumerId) {
        this.consumerId = Utils.checkNotNull(consumerId, "consumerId");
        return this;
    }


    /**
     * Scopes results to requests that happened after datetime
     */
    public VaultConsumerRequestCountsAllRequest withStartDatetime(@Nonnull String startDatetime) {
        this.startDatetime = Utils.checkNotNull(startDatetime, "startDatetime");
        return this;
    }


    /**
     * Scopes results to requests that happened before datetime
     */
    public VaultConsumerRequestCountsAllRequest withEndDatetime(@Nonnull String endDatetime) {
        this.endDatetime = Utils.checkNotNull(endDatetime, "endDatetime");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VaultConsumerRequestCountsAllRequest other = (VaultConsumerRequestCountsAllRequest) o;
        return 
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.consumerId, other.consumerId) &&
            Utils.enhancedDeepEquals(this.startDatetime, other.startDatetime) &&
            Utils.enhancedDeepEquals(this.endDatetime, other.endDatetime);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appId, consumerId, startDatetime,
            endDatetime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VaultConsumerRequestCountsAllRequest.class,
                "appId", appId,
                "consumerId", consumerId,
                "startDatetime", startDatetime,
                "endDatetime", endDatetime);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String appId;

        private String consumerId;

        private String startDatetime;

        private String endDatetime;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * ID of the consumer to return
         */
        public Builder consumerId(@Nonnull String consumerId) {
            this.consumerId = Utils.checkNotNull(consumerId, "consumerId");
            return this;
        }

        /**
         * Scopes results to requests that happened after datetime
         */
        public Builder startDatetime(@Nonnull String startDatetime) {
            this.startDatetime = Utils.checkNotNull(startDatetime, "startDatetime");
            return this;
        }

        /**
         * Scopes results to requests that happened before datetime
         */
        public Builder endDatetime(@Nonnull String endDatetime) {
            this.endDatetime = Utils.checkNotNull(endDatetime, "endDatetime");
            return this;
        }

        public VaultConsumerRequestCountsAllRequest build() {
            return new VaultConsumerRequestCountsAllRequest(
                appId, consumerId, startDatetime,
                endDatetime);
        }

    }
}
