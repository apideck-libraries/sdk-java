/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import com.apideck.unify.models.components.CreateConsumerRequest;
import com.apideck.unify.utils.SpeakeasyMetadata;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class VaultConsumersAddRequest {
    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private Optional<String> appId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateConsumerRequest createConsumerRequest;

    @JsonCreator
    public VaultConsumersAddRequest(
            Optional<String> appId,
            CreateConsumerRequest createConsumerRequest) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(createConsumerRequest, "createConsumerRequest");
        this.appId = appId;
        this.createConsumerRequest = createConsumerRequest;
    }
    
    public VaultConsumersAddRequest(
            CreateConsumerRequest createConsumerRequest) {
        this(Optional.empty(), createConsumerRequest);
    }

    /**
     * The ID of your Unify application
     */
    @JsonIgnore
    public Optional<String> appId() {
        return appId;
    }

    @JsonIgnore
    public CreateConsumerRequest createConsumerRequest() {
        return createConsumerRequest;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of your Unify application
     */
    public VaultConsumersAddRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }


    /**
     * The ID of your Unify application
     */
    public VaultConsumersAddRequest withAppId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public VaultConsumersAddRequest withCreateConsumerRequest(CreateConsumerRequest createConsumerRequest) {
        Utils.checkNotNull(createConsumerRequest, "createConsumerRequest");
        this.createConsumerRequest = createConsumerRequest;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VaultConsumersAddRequest other = (VaultConsumersAddRequest) o;
        return 
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.createConsumerRequest, other.createConsumerRequest);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appId, createConsumerRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VaultConsumersAddRequest.class,
                "appId", appId,
                "createConsumerRequest", createConsumerRequest);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> appId = Optional.empty();

        private CreateConsumerRequest createConsumerRequest;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of your Unify application
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder appId(Optional<String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }


        public Builder createConsumerRequest(CreateConsumerRequest createConsumerRequest) {
            Utils.checkNotNull(createConsumerRequest, "createConsumerRequest");
            this.createConsumerRequest = createConsumerRequest;
            return this;
        }

        public VaultConsumersAddRequest build() {

            return new VaultConsumersAddRequest(
                appId, createConsumerRequest);
        }

    }
}
