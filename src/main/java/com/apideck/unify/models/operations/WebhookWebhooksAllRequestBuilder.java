/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations;

import static com.apideck.unify.operations.Operations.RequestOperation;
import static com.apideck.unify.utils.Exceptions.unchecked;
import static com.apideck.unify.utils.Utils.transform;
import static com.apideck.unify.utils.Utils.toStream;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.operations.WebhookWebhooksAllOperation;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.pagination.CursorTracker;
import com.apideck.unify.utils.pagination.Paginator;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Iterable;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Iterator;
import java.util.stream.Stream;
import org.openapitools.jackson.nullable.JsonNullable;

public class WebhookWebhooksAllRequestBuilder {
    private final SDKConfiguration sdkConfiguration;
    private final WebhookWebhooksAllRequest.Builder pojoBuilder;
    private WebhookWebhooksAllRequest request;
    private final Options.Builder optionsBuilder;
    private boolean _setterCalled;

    public WebhookWebhooksAllRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.pojoBuilder = WebhookWebhooksAllRequest.builder();
        this.optionsBuilder = Options.builder();
    }

    public WebhookWebhooksAllRequestBuilder appId(@Nullable String appId) {
        this.pojoBuilder.appId(appId);
        this._setterCalled = true;
        return this;
    }

    public WebhookWebhooksAllRequestBuilder cursor(@Nullable String cursor) {
        this.pojoBuilder.cursor(cursor);
        this._setterCalled = true;
        return this;
    }

    public WebhookWebhooksAllRequestBuilder limit(@Nullable Long limit) {
        this.pojoBuilder.limit(limit);
        this._setterCalled = true;
        return this;
    }

    public WebhookWebhooksAllRequestBuilder retryConfig(RetryConfig retryConfig) {
        this.optionsBuilder.retryConfig(retryConfig);
        return this;
    }

    private WebhookWebhooksAllRequest _buildRequest() {
        if (this._setterCalled) {
            this.request = this.pojoBuilder.build();
        }
        return this.request;
    }
    /**
    * Executes the request and returns the response.
    *
    * @return The response from the server.
    */
    public WebhookWebhooksAllResponse call() throws Exception {
        Options options = optionsBuilder.build();
        RequestOperation<WebhookWebhooksAllRequest, WebhookWebhooksAllResponse> operation
              = new WebhookWebhooksAllOperation(
                sdkConfiguration,
                options);

        return operation.handleResponse(operation.doRequest(this._buildRequest()));
    }
    
    /**
    * Returns an iterable that performs next page calls till no more pages
    * are returned.
    *
    * <p>The returned iterable can be used in a for-each loop:
    * <pre><code>
    * for (WebhookWebhooksAllResponse page : builder.callAsIterable()) {
    *     // Process each page
    * }
    * </code></pre>
    * 
    * @return An iterable that can be used to iterate through all pages
    */
    public Iterable<WebhookWebhooksAllResponse> callAsIterable() {
        WebhookWebhooksAllRequest request = pojoBuilder.build();
        Options options = optionsBuilder.build();
        RequestOperation<WebhookWebhooksAllRequest, WebhookWebhooksAllResponse> operation =
                new WebhookWebhooksAllOperation(
                    sdkConfiguration,
                    options);
        
        Iterator<HttpResponse<InputStream>> iterator = new Paginator<>(
            request,
            new CursorTracker<>("$.meta.cursors.next", String.class),
            WebhookWebhooksAllRequest::withCursor,
            nextRequest -> unchecked(() -> operation.doRequest(request)).get());

        return () -> transform(iterator, operation::handleResponse);
    }

    /**
    * Returns a stream that performs next page calls till no more pages
    * are returned.
    **/  
    public Stream<WebhookWebhooksAllResponse> callAsStream() {
        return toStream(callAsIterable());
    }
}
