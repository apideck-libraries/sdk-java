/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations.async;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;
import static com.apideck.unify.utils.reactive.ReactiveUtils.mapAsync;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.models.operations.AccountingTrackingCategoriesAllRequest;
import com.apideck.unify.operations.AccountingTrackingCategoriesAll;
import com.apideck.unify.utils.Blob;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import com.apideck.unify.utils.pagination.AsyncPaginator;
import com.apideck.unify.utils.pagination.CursorTracker;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpResponse;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Flow;
import org.reactivestreams.FlowAdapters;
import org.reactivestreams.Publisher;

public class AccountingTrackingCategoriesAllRequestBuilder {

    private AccountingTrackingCategoriesAllRequest request;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public AccountingTrackingCategoriesAllRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public AccountingTrackingCategoriesAllRequestBuilder request(AccountingTrackingCategoriesAllRequest request) {
        Utils.checkNotNull(request, "request");
        this.request = request;
        return this;
    }
                
    public AccountingTrackingCategoriesAllRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public AccountingTrackingCategoriesAllRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }

    public CompletableFuture<AccountingTrackingCategoriesAllResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<AccountingTrackingCategoriesAllRequest, AccountingTrackingCategoriesAllResponse> operation
              = new AccountingTrackingCategoriesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    /**
     * Returns a Publisher that performs next page calls till no more pages
     * are returned.
     *
     * <p>The returned publisher can be used with reactive frameworks:
     * <pre><code>
     * Publisher&lt;AccountingTrackingCategoriesAllResponse&gt; publisher = builder.callAsPublisher();
     * publisher.subscribe(new Subscriber&lt;AccountingTrackingCategoriesAllResponse&gt;() {
     *     // Handle onNext, onError, onComplete
     * });
     * </code></pre>
     *
     * @return A Publisher that emits pages asynchronously
     */
    public Publisher<AccountingTrackingCategoriesAllResponse> callAsPublisher() {
        AccountingTrackingCategoriesAllRequest request = this.request;
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<AccountingTrackingCategoriesAllRequest, AccountingTrackingCategoriesAllResponse> operation
              = new AccountingTrackingCategoriesAll.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);

        Flow.Publisher<HttpResponse<Blob>> asyncPaginator = new AsyncPaginator<>(
            request,
            new CursorTracker<>("$.meta.cursors.next", String.class),
                    AccountingTrackingCategoriesAllRequest::withCursor,
            operation::doRequest);

        Flow.Publisher<AccountingTrackingCategoriesAllResponse> flowPublisher = mapAsync(asyncPaginator, operation::handleResponse);

        // Convert Flow.Publisher to Reactive Streams Publisher at the last stage
        return FlowAdapters.toPublisher(flowPublisher);
    }

}
