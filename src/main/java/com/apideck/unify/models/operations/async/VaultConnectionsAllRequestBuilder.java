/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations.async;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.models.operations.VaultConnectionsAllRequest;
import com.apideck.unify.operations.VaultConnectionsAll;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class VaultConnectionsAllRequestBuilder {

    private Optional<String> consumerId = Optional.empty();
    private Optional<String> appId = Optional.empty();
    private Optional<String> api = Optional.empty();
    private Optional<Boolean> configured = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public VaultConnectionsAllRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public VaultConnectionsAllRequestBuilder consumerId(String consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = Optional.of(consumerId);
        return this;
    }

    public VaultConnectionsAllRequestBuilder consumerId(Optional<String> consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = consumerId;
        return this;
    }
                
    public VaultConnectionsAllRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public VaultConnectionsAllRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }
                
    public VaultConnectionsAllRequestBuilder api(String api) {
        Utils.checkNotNull(api, "api");
        this.api = Optional.of(api);
        return this;
    }

    public VaultConnectionsAllRequestBuilder api(Optional<String> api) {
        Utils.checkNotNull(api, "api");
        this.api = api;
        return this;
    }
                
    public VaultConnectionsAllRequestBuilder configured(boolean configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = Optional.of(configured);
        return this;
    }

    public VaultConnectionsAllRequestBuilder configured(Optional<Boolean> configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = configured;
        return this;
    }
                
    public VaultConnectionsAllRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public VaultConnectionsAllRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private VaultConnectionsAllRequest buildRequest() {

        VaultConnectionsAllRequest request = new VaultConnectionsAllRequest(consumerId,
            appId,
            api,
            configured);

        return request;
    }

    public CompletableFuture<VaultConnectionsAllResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<VaultConnectionsAllRequest, VaultConnectionsAllResponse> operation
              = new VaultConnectionsAll.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        VaultConnectionsAllRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
