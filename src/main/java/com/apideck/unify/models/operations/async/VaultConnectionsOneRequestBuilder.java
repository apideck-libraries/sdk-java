/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.models.operations.async;

import static com.apideck.unify.operations.Operations.AsyncRequestOperation;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.models.operations.VaultConnectionsOneRequest;
import com.apideck.unify.operations.VaultConnectionsOne;
import com.apideck.unify.utils.Headers;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class VaultConnectionsOneRequestBuilder {

    private Optional<String> consumerId = Optional.empty();
    private Optional<String> appId = Optional.empty();
    private String serviceId;
    private String unifiedApi;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public VaultConnectionsOneRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public VaultConnectionsOneRequestBuilder consumerId(String consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = Optional.of(consumerId);
        return this;
    }

    public VaultConnectionsOneRequestBuilder consumerId(Optional<String> consumerId) {
        Utils.checkNotNull(consumerId, "consumerId");
        this.consumerId = consumerId;
        return this;
    }
                
    public VaultConnectionsOneRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public VaultConnectionsOneRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public VaultConnectionsOneRequestBuilder serviceId(String serviceId) {
        Utils.checkNotNull(serviceId, "serviceId");
        this.serviceId = serviceId;
        return this;
    }

    public VaultConnectionsOneRequestBuilder unifiedApi(String unifiedApi) {
        Utils.checkNotNull(unifiedApi, "unifiedApi");
        this.unifiedApi = unifiedApi;
        return this;
    }
                
    public VaultConnectionsOneRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public VaultConnectionsOneRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private VaultConnectionsOneRequest buildRequest() {

        VaultConnectionsOneRequest request = new VaultConnectionsOneRequest(consumerId,
            appId,
            serviceId,
            unifiedApi);

        return request;
    }

    public CompletableFuture<VaultConnectionsOneResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<VaultConnectionsOneRequest, VaultConnectionsOneResponse> operation
              = new VaultConnectionsOne.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        VaultConnectionsOneRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
