/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.apideck.unify.operations;

import static com.apideck.unify.operations.Operations.RequestOperation;

import com.apideck.unify.SDKConfiguration;
import com.apideck.unify.SecuritySource;
import com.apideck.unify.models.components.DeleteAttachmentResponse;
import com.apideck.unify.models.components.UnexpectedErrorResponse;
import com.apideck.unify.models.errors.APIException;
import com.apideck.unify.models.errors.BadRequestResponse;
import com.apideck.unify.models.errors.NotFoundResponse;
import com.apideck.unify.models.errors.PaymentRequiredResponse;
import com.apideck.unify.models.errors.UnauthorizedResponse;
import com.apideck.unify.models.errors.UnprocessableResponse;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteRequest;
import com.apideck.unify.models.operations.AccountingAttachmentsDeleteResponse;
import com.apideck.unify.utils.BackoffStrategy;
import com.apideck.unify.utils.HTTPClient;
import com.apideck.unify.utils.HTTPRequest;
import com.apideck.unify.utils.Hook.AfterErrorContextImpl;
import com.apideck.unify.utils.Hook.AfterSuccessContextImpl;
import com.apideck.unify.utils.Hook.BeforeRequestContextImpl;
import com.apideck.unify.utils.Options;
import com.apideck.unify.utils.Retries.NonRetryableException;
import com.apideck.unify.utils.Retries;
import com.apideck.unify.utils.RetryConfig;
import com.apideck.unify.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;


public class AccountingAttachmentsDeleteOperation implements RequestOperation<AccountingAttachmentsDeleteRequest, AccountingAttachmentsDeleteResponse> {
    
    private final SDKConfiguration sdkConfiguration;
    private final Options options;

    public AccountingAttachmentsDeleteOperation(
            @Nonnull SDKConfiguration sdkConfiguration,
            @Nullable Options options) {
        this.sdkConfiguration = sdkConfiguration;
        this.options = options;
    }
    
    @Override
    public HttpResponse<InputStream> doRequest(AccountingAttachmentsDeleteRequest request) throws Exception {
        Optional.ofNullable(options)
                .ifPresent(o -> o.validate(List.of(Options.Option.RETRY_CONFIG)));
        String baseUrl = this.sdkConfiguration.serverUrl();
        String url = Utils.generateURL(
                AccountingAttachmentsDeleteRequest.class,
                baseUrl,
                "/accounting/attachments/{reference_type}/{reference_id}/{id}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest(url, "DELETE");
        req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        req.addQueryParams(Utils.getQueryParams(
                AccountingAttachmentsDeleteRequest.class,
                request, 
                this.sdkConfiguration.globals));
        req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));
        
        Optional<SecuritySource> hookSecuritySource = Optional.of(this.sdkConfiguration.securitySource());
        Utils.configureSecurity(req,  
                this.sdkConfiguration.securitySource().getSecurity());
        HTTPClient client = this.sdkConfiguration.client();
        HTTPRequest finalReq = req;
        RetryConfig retryConfig = Optional.ofNullable(options)
                .flatMap(Options::retryConfig)
                .or(this.sdkConfiguration::retryConfig)
                .orElse(RetryConfig.builder()
                        .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                        .build());
        List<String> statusCodes = new ArrayList<>();
        statusCodes.add("408");
        statusCodes.add("500");
        statusCodes.add("502");
        statusCodes.add("503");
        statusCodes.add("504");
        Retries retries = Retries.builder()
            .action(() -> {
                HttpRequest r = null;
                try {
                    r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                baseUrl,
                                "accounting.attachmentsDelete", 
                                java.util.Optional.of(java.util.List.of()), 
                                hookSecuritySource),
                            finalReq.build());
                } catch (Exception e) {
                    throw new NonRetryableException(e);
                }
                try {
                    return client.send(r);
                } catch (Exception e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                baseUrl,
                                "accounting.attachmentsDelete",
                                 java.util.Optional.of(java.util.List.of()),
                                 hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(e));
                }
            })
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();
        HttpResponse<InputStream> httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                          baseUrl,
                         "accounting.attachmentsDelete", 
                         java.util.Optional.of(java.util.List.of()), 
                         hookSecuritySource),
                     retries.run());
    
        return httpRes;
    }

    @Override
    public AccountingAttachmentsDeleteResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
        String contentType = response
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AccountingAttachmentsDeleteResponse.Builder resBuilder = 
            AccountingAttachmentsDeleteResponse
                .builder()
                .contentType(contentType)
                .statusCode(response.statusCode())
                .rawResponse(response);

        AccountingAttachmentsDeleteResponse res = resBuilder.build();
        
        if (Utils.statusCodeMatches(response.statusCode(), "200")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                DeleteAttachmentResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                res.withDeleteAttachmentResponse(out);
                return res;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "400")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                BadRequestResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "401")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                UnauthorizedResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "402")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                PaymentRequiredResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "404")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                NotFoundResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "422")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                UnprocessableResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        if (Utils.statusCodeMatches(response.statusCode(), "default")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                UnexpectedErrorResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                res.withUnexpectedErrorResponse(out);
                return res;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        throw new APIException(
            response, 
            response.statusCode(), 
            "Unexpected status code received: " + response.statusCode(), 
            Utils.extractByteArrayFromBody(response));
    }
}
